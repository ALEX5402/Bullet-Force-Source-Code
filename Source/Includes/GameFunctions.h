struct Mask {
DWORD get_maskMappingWorldAxisOffset;
int(*get_maskMappingWorldAxis)(void *_instance);
DWORD set_maskMappingWorldAxisOffset;
void (*set_maskMappingWorldAxis)(void *_instance, int value);
DWORD get_invertAxisOffset;
bool (*get_invertAxis)(void *_instance);
DWORD set_invertAxisOffset;
void (*set_invertAxis)(void *_instance, bool value);
DWORD get_clampAlphaHorizontallyOffset;
bool (*get_clampAlphaHorizontally)(void *_instance);
DWORD set_clampAlphaHorizontallyOffset;
void (*set_clampAlphaHorizontally)(void *_instance, bool value);
DWORD get_clampAlphaVerticallyOffset;
bool (*get_clampAlphaVertically)(void *_instance);
DWORD set_clampAlphaVerticallyOffset;
void (*set_clampAlphaVertically)(void *_instance, bool value);
DWORD get_clampingBorderOffset;
float (*get_clampingBorder)(void *_instance);
DWORD set_clampingBorderOffset;
void (*set_clampingBorder)(void *_instance, float value);
DWORD get_useMaskAlphaChannelOffset;
bool (*get_useMaskAlphaChannel)(void *_instance);
DWORD set_useMaskAlphaChannelOffset;
void (*set_useMaskAlphaChannel)(void *_instance, bool value);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD SetMaskMappingAxisInMaterialsOffset;
void (*SetMaskMappingAxisInMaterials)(void *_instance, int mappingAxis);
DWORD SetMaskMappingAxisInMaterialOffset;
void (*SetMaskMappingAxisInMaterial)(void *_instance, int mappingAxis, void *material);
DWORD SetMaskFloatValueInMaterialsOffset;
void (*SetMaskFloatValueInMaterials)(void *_instance, monoString *variable, float value);
DWORD SetMaskBoolValueInMaterialsOffset;
void (*SetMaskBoolValueInMaterials)(void *_instance, monoString *variable, bool value);
DWORD SetMaskBoolValueInMaterialOffset;
void (*SetMaskBoolValueInMaterial)(void *_instance, monoString *variable, bool value, void *material);
DWORD CreateAndAssignQuadOffset;
void (*CreateAndAssignQuad)(void *_instance, void *mesh);
DWORD SetMaskRendererActiveOffset;
void (*SetMaskRendererActive)(void *_instance, bool value);
DWORD ChangeMappingAxisOffset;
void (*ChangeMappingAxis)(void *_instance, int currMaskMappingWorldAxis, int prevMaskMappingWorldAxis, bool currInvertAxis);
}Mask;
struct LogoSpecularityAnimator {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD AnimateSpecularityOffset;
void *(*AnimateSpecularity)(void *_instance);
}LogoSpecularityAnimator;
struct NightAndDayMaskAnimator {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}NightAndDayMaskAnimator;
struct ShipMover {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}ShipMover;
struct UVAnimator {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}UVAnimator;
struct AmplifyColorBase {
DWORD get_DefaultLutOffset;
void *(*get_DefaultLut)(void *_instance);
DWORD get_IsBlendingOffset;
bool (*get_IsBlending)(void *_instance);
DWORD get_effectVolumesBlendAdjustedOffset;
float (*get_effectVolumesBlendAdjusted)(void *_instance);
DWORD get_SharedInstanceIDOffset;
monoString *(*get_SharedInstanceID)(void *_instance);
DWORD get_WillItBlendOffset;
bool (*get_WillItBlend)(void *_instance);
DWORD NewSharedInstanceIDOffset;
void (*NewSharedInstanceID)(void *_instance);
DWORD ReportMissingShadersOffset;
void (*ReportMissingShaders)(void *_instance);
DWORD ReportNotSupportedOffset;
void (*ReportNotSupported)(void *_instance);
DWORD CheckShaderOffset;
bool (*CheckShader)(void *_instance, void *s);
DWORD CheckShadersOffset;
bool (*CheckShaders)(void *_instance);
DWORD CheckSupportOffset;
bool (*CheckSupport)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD VolumesBlendToOffset;
void (*VolumesBlendTo)(void *_instance, void *blendTargetLUT, float blendTimeInSec);
DWORD BlendToOffset;
void (*BlendTo)(void *_instance, void *blendTargetLUT, float blendTimeInSec, void *onFinishBlend);
DWORD CheckCameraOffset;
void (*CheckCamera)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD EnterVolumeOffset;
void (*EnterVolume)(void *_instance, void *volume);
DWORD ExitVolumeOffset;
void (*ExitVolume)(void *_instance, void *volume);
DWORD UpdateVolumesOffset;
void (*UpdateVolumes)(void *_instance);
DWORD SetupShaderOffset;
void (*SetupShader)(void *_instance);
DWORD ReleaseMaterialsOffset;
void (*ReleaseMaterials)(void *_instance);
DWORD CreateDefaultLutOffset;
void *(*CreateDefaultLut)(void *_instance);
DWORD CreateDepthCurveLutOffset;
void *(*CreateDepthCurveLut)(void *_instance);
DWORD UpdateDepthCurveLutOffset;
void (*UpdateDepthCurveLut)(void *_instance);
DWORD CheckUpdateDepthCurveLutOffset;
void (*CheckUpdateDepthCurveLut)(void *_instance);
DWORD CreateHelperTexturesOffset;
void (*CreateHelperTextures)(void *_instance);
DWORD CheckMaterialAndShaderOffset;
bool (*CheckMaterialAndShader)(void *_instance, void *material, monoString *name);
DWORD CreateMaterialsOffset;
bool (*CreateMaterials)(void *_instance);
DWORD SetMaterialKeywordOffset;
void (*SetMaterialKeyword)(void *_instance, monoString *keyword, bool state);
DWORD ReleaseTexturesOffset;
void (*ReleaseTextures)(void *_instance);
DWORD ValidateLutDimensionsOffset;
bool (*ValidateLutDimensions)(void *lut);
DWORD UpdatePostEffectParamsOffset;
void (*UpdatePostEffectParams)(void *_instance);
DWORD ComputeShaderPassOffset;
int (*ComputeShaderPass)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}AmplifyColorBase;
struct AmplifyColorEffect {
}AmplifyColorEffect;
struct AmplifyColorRenderMask {
}AmplifyColorRenderMask;
struct AmplifyColorRenderMaskBase {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD DestroyCameraOffset;
void (*DestroyCamera)(void *_instance);
DWORD DestroyRenderTexturesOffset;
void (*DestroyRenderTextures)(void *_instance);
DWORD UpdateRenderTexturesOffset;
void (*UpdateRenderTextures)(void *_instance, bool singlePassStereo);
DWORD UpdateCameraPropertiesOffset;
void (*UpdateCameraProperties)(void *_instance);
DWORD OnPreRenderOffset;
void (*OnPreRender)(void *_instance);
}AmplifyColorRenderMaskBase;
struct AmplifyColorTriggerProxy {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
}AmplifyColorTriggerProxy;
struct AmplifyColorTriggerProxy2D {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
}AmplifyColorTriggerProxy2D;
struct AmplifyColorTriggerProxyBase {
}AmplifyColorTriggerProxyBase;
struct AmplifyColorVolume {
DWORD OnTriggerEnterOffset;
void (*OnTriggerEnter)(void *_instance, void *other);
DWORD OnTriggerExitOffset;
void (*OnTriggerExit)(void *_instance, void *other);
}AmplifyColorVolume;
struct AmplifyColorVolume2D {
DWORD OnTriggerEnter2DOffset;
void (*OnTriggerEnter2D)(void *_instance, void *other);
DWORD OnTriggerExit2DOffset;
void (*OnTriggerExit2D)(void *_instance, void *other);
}AmplifyColorVolume2D;
struct AmplifyColorVolumeBase {
DWORD OnDrawGizmosOffset;
void (*OnDrawGizmos)(void *_instance);
DWORD OnDrawGizmosSelectedOffset;
void (*OnDrawGizmosSelected)(void *_instance);
}AmplifyColorVolumeBase;
struct Fix3dTextCS {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}Fix3dTextCS;
struct FixGUITextCS {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}FixGUITextCS;
struct SetArabicTextExample {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}SetArabicTextExample;
struct Noise {
DWORD UpdateOffset;
float (*Update)(void *_instance);
}Noise;
struct CameraShake {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}CameraShake;
struct BakeryDirectLight {
}BakeryDirectLight;
struct BakeryLightMesh {
DWORD OnDrawGizmosSelectedOffset;
void (*OnDrawGizmosSelected)(void *_instance);
}BakeryLightMesh;
struct BakeryLightmapGroup {
DWORD GetPlainStructOffset;
int(*GetPlainStruct)(void *_instance);
}BakeryLightmapGroup;
struct BakeryLightmapGroupSelector {
}BakeryLightmapGroupSelector;
struct BakeryLightmappedPrefab {
}BakeryLightmappedPrefab;
struct BakeryPointLight {
}BakeryPointLight;
struct BakerySkyLight {
}BakerySkyLight;
struct ftGlobalStorage {
}ftGlobalStorage;
struct ftLightmaps {
DWORD RefreshFullOffset;
void (*RefreshFull)();
DWORD FindInSceneOffset;
void *(*FindInScene)(monoString *nm, int scn);
DWORD GetEmptyDirectionTexOffset;
void *(*GetEmptyDirectionTex)(void *storage);
DWORD RefreshSceneOffset;
void (*RefreshScene)(int scene, void *storage, bool updateNonBaked);
DWORD UnloadSceneOffset;
void (*UnloadScene)(void *storage);
DWORD RefreshScene2Offset;
void (*RefreshScene2)(int scene, void *storage);
}ftLightmaps;
struct ftLightmapsStorage {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}ftLightmapsStorage;
struct ftLocalStorage {
}ftLocalStorage;
struct ftUniqueIDRegistry {
DWORD DeregisterOffset;
void (*Deregister)(int id);
DWORD RegisterOffset;
void (*Register)(int id, int value);
DWORD GetInstanceIdOffset;
int (*GetInstanceId)(int id);
DWORD GetUIDOffset;
int (*GetUID)(int instanceId);
}ftUniqueIDRegistry;
struct Requests {
}Requests;
struct WeaponsEtc {
}WeaponsEtc;
struct CloudConnector {
DWORD get_InstanceOffset;
void *(*get_Instance)();
}CloudConnector;
struct CloudConnectorCore {
DWORD CreateObject1Offset;
void (*CreateObject1)(monoString *jsonObject, monoString *objTypeName, bool runtime);
DWORD GetObjectsByFieldOffset;
void (*GetObjectsByField)(monoString *objTypeName, monoString *searchFieldName, monoString *searchValue, bool runtime);
DWORD GetTableOffset;
void (*GetTable)(monoString *tableTypeName, bool runtime);
DWORD GetAllTablesOffset;
void (*GetAllTables)(bool runtime);
DWORD UpdateObjectsOffset;
void (*UpdateObjects)(monoString *objTypeName, monoString *searchFieldName, monoString *searchValue, monoString *fieldNameToUpdate, monoString *updateValue, bool runtime);
DWORD DeleteObjectsOffset;
void (*DeleteObjects)(monoString *objTypeName, monoString *searchFieldName, monoString *searchValue, bool runtime);
DWORD UnpackJsonOffset;
void (*UnpackJson)(monoString *response);
DWORD ProcessResponseOffset;
void (*ProcessResponse)(monoString *response, float time);
DWORD UpdateStatusOffset;
void (*UpdateStatus)(monoString *status);
}CloudConnectorCore;
struct GSFU_Demo_Runtime {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD CreatePlayerOffset;
void *(*CreatePlayer)(void *_instance);
DWORD ParseResponseOffset;
void (*ParseResponse)(void *_instance, monoString *response);
}GSFU_Demo_Runtime;
struct GSFU_Demo_Utils {
DWORD CreatePlayerTableOffset;
void (*CreatePlayerTable)(bool runtime);
DWORD SaveGandalfOffset;
void (*SaveGandalf)(bool runtime);
DWORD UpdateGandalfOffset;
void (*UpdateGandalf)(bool runtime);
DWORD RetrieveGandalfOffset;
void (*RetrieveGandalf)(bool runtime);
DWORD GetAllPlayersOffset;
void (*GetAllPlayers)(bool runtime);
DWORD GetAllTablesOffset;
void (*GetAllTables)(bool runtime);
}GSFU_Demo_Utils;
struct GSFUJsonHelper {
}GSFUJsonHelper;
struct CrazyAdsDemoPlayer {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FixedUpdateOffset;
void (*FixedUpdate)(void *_instance);
DWORD respawnOffset;
void (*respawn)(void *_instance);
}CrazyAdsDemoPlayer;
struct CrazyBannerDemoController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateBannersDisplayOffset;
void (*UpdateBannersDisplay)(void *_instance);
DWORD DisableLastBannerOffset;
void (*DisableLastBanner)(void *_instance);
DWORD AddBannerOffset;
void (*AddBanner)(void *_instance);
DWORD MarkAllForRefreshOffset;
void (*MarkAllForRefresh)(void *_instance);
DWORD BannerErrorOffset;
void (*BannerError)(void *_instance, monoString *id, monoString *error);
DWORD BannerRenderedOffset;
void (*BannerRendered)(void *_instance, monoString *id);
}CrazyBannerDemoController;
struct CrazyAds {
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD InitializeOffset;
void (*Initialize)(void *_instance);
DWORD get_IsRunningAdOffset;
bool (*get_IsRunningAd)(void *_instance);
DWORD set_IsRunningAdOffset;
void (*set_IsRunningAd)(void *_instance, bool value);
DWORD beginAdBreakRewardedOffset;
void (*beginAdBreakRewarded)(void *_instance, void *completedCallback, void *errorCallback);
DWORD beginAdBreakOffset;
void (*beginAdBreak)(void *_instance, void *completedCallback, void *errorCallback, int adType);
DWORD completedAdRequestOffset;
void (*completedAdRequest)(void *_instance);
DWORD completedAdRequest1Offset;
void (*completedAdRequest1)(void *_instance, int e);
DWORD AdErrorOffset;
void (*AdError)(void *_instance, monoString *error);
DWORD AdFinishedOffset;
void (*AdFinished)(void *_instance);
DWORD AdStartedOffset;
void (*AdStarted)(void *_instance);
DWORD updateBannersDisplayOffset;
void (*updateBannersDisplay)(void *_instance);
DWORD listenToBannerRenderedOffset;
void (*listenToBannerRendered)(void *_instance, void *callback);
DWORD listenToBannerErrorOffset;
void (*listenToBannerError)(void *_instance, void *callback);
DWORD BannerErrorOffset;
void (*BannerError)(void *_instance, monoString *error);
DWORD BannerRenderedOffset;
void (*BannerRendered)(void *_instance, monoString *id);
DWORD Initializeb__3_0Offset;
void (*Initializeb__3_0)(void *_instance, void *ev);
DWORD Initializeb__3_1Offset;
void (*Initializeb__3_1)(void *_instance, void *ev);
DWORD Initializeb__3_2Offset;
void (*Initializeb__3_2)(void *_instance, void *ev);
DWORD Initializeb__3_3Offset;
void (*Initializeb__3_3)(void *_instance, void *ev);
DWORD Initializeb__3_4Offset;
void (*Initializeb__3_4)(void *_instance, void *ev);
}CrazyAds;
struct CrazyAdsOptions {
}CrazyAdsOptions;
struct CrazyBanner {
DWORD get_SizeOffset;
int(*get_Size)(void *_instance);
DWORD set_SizeOffset;
void (*set_Size)(void *_instance, int value);
DWORD get_PositionOffset;
Vector2 (*get_Position)(void *_instance);
DWORD set_PositionOffset;
void (*set_Position)(void *_instance, Vector2 value);
DWORD SimulateRenderOffset;
void (*SimulateRender)(void *_instance);
DWORD MarkForRefreshOffset;
void (*MarkForRefresh)(void *_instance);
DWORD MarkVisibleOffset;
void (*MarkVisible)(void *_instance, bool visible);
DWORD isVisibleOffset;
bool (*isVisible)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}CrazyBanner;
struct ButtonActions {
DWORD HappytimeOffset;
void (*Happytime)(void *_instance);
DWORD GameplayStartOffset;
void (*GameplayStart)(void *_instance);
DWORD GameplayStopOffset;
void (*GameplayStop)(void *_instance);
DWORD InviteLinkOffset;
void (*InviteLink)(void *_instance);
DWORD ParseInviteLinkOffset;
void (*ParseInviteLink)(void *_instance);
}ButtonActions;
struct CrazyEvents {
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD InitializeOffset;
void (*Initialize)(void *_instance);
DWORD HappyTimeOffset;
void (*HappyTime)(void *_instance);
DWORD GameplayStartOffset;
void (*GameplayStart)(void *_instance);
DWORD GameplayStopOffset;
void (*GameplayStop)(void *_instance);
DWORD IsInviteLinkOffset;
bool (*IsInviteLink)(void *_instance);
DWORD GetInviteLinkParameterOffset;
monoString *(*GetInviteLinkParameter)(void *_instance, monoString *key);
DWORD CopyToClipboardOffset;
void (*CopyToClipboard)(void *_instance, monoString *text);
}CrazyEvents;
struct SiteLock {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD IsOnValidHostOffset;
bool (*IsOnValidHost)(void *_instance);
DWORD IsOnValidLocalHostOffset;
bool (*IsOnValidLocalHost)(void *_instance);
DWORD IsOnValidRemoteHostOffset;
bool (*IsOnValidRemoteHost)(void *_instance);
DWORD CrashOffset;
void (*Crash)(void *_instance, int i);
}SiteLock;
struct CrazySDK {
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD InitializeOffset;
void (*Initialize)(void *_instance);
DWORD IsInitializedOffset;
bool (*IsInitialized)(void *_instance);
DWORD InitCallbackOffset;
void (*InitCallback)(void *_instance, monoString *initObjJSON);
DWORD RequestAdOffset;
void (*RequestAd)(void *_instance, int adType);
DWORD HappyTimeOffset;
void (*HappyTime)(void *_instance);
DWORD GameplayStartOffset;
void (*GameplayStart)(void *_instance);
DWORD GameplayStopOffset;
void (*GameplayStop)(void *_instance);
DWORD CopyToClipboardOffset;
void (*CopyToClipboard)(void *_instance, monoString *text);
DWORD IsInviteLinkOffset;
bool (*IsInviteLink)(void *_instance);
DWORD GetInviteLinkParameterOffset;
monoString *(*GetInviteLinkParameter)(void *_instance, monoString *key);
DWORD AddEventListenerOffset;
void (*AddEventListener)(void *_instance, int eventType, void *callback);
DWORD RemoveEventListenerOffset;
void (*RemoveEventListener)(void *_instance, int eventType, void *callback);
DWORD RemoveEventListenersForEventOffset;
void (*RemoveEventListenersForEvent)(void *_instance, int eventType);
DWORD RemoveAllEventListenersOffset;
void (*RemoveAllEventListeners)(void *_instance);
DWORD AdEventOffset;
void (*AdEvent)(void *_instance, monoString *eventJSON);
DWORD HandleEventOffset;
void (*HandleEvent)(void *_instance, void *ev);
DWORD CallCallbacksOffset;
void (*CallCallbacks)(void *_instance, void *ev);
DWORD HasAdblockOffset;
bool (*HasAdblock)(void *_instance);
DWORD AdblockDetectionExecutedOffset;
bool (*AdblockDetectionExecuted)(void *_instance);
DWORD AdblockDetectedOffset;
void (*AdblockDetected)(void *_instance);
DWORD AdblockNotDetectedOffset;
void (*AdblockNotDetected)(void *_instance);
DWORD AdblockOffset;
void (*Adblock)(void *_instance, bool detected);
DWORD DebugLogOffset;
void (*DebugLog)(void *_instance, monoString *msg);
}CrazySDK;
struct Banner {
}Banner;
struct GFEvent {
}GFEvent;
struct GFAdErrorEvent {
}GFAdErrorEvent;
struct GFBannerErrorEvent {
}GFBannerErrorEvent;
struct GFBannerRenderedEvent {
}GFBannerRenderedEvent;
struct CrazyEvent {
}CrazyEvent;
struct AdErrorEvent {
}AdErrorEvent;
struct BannerErrorEvent {
}BannerErrorEvent;
struct BannerRenderedEvent {
}BannerRenderedEvent;
struct InitializationObject {
}InitializationObject;
struct JsonHelper {
DWORD FixJsonOffset;
monoString *(*FixJson)(monoString *value);
}JsonHelper;
struct DownloadObbExample {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}DownloadObbExample;
struct Viewer {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD SetActiveObjectOffset;
void (*SetActiveObject)(void *_instance, void *go);
DWORD UpdateMeshInfoOffset;
void (*UpdateMeshInfo)(void *_instance);
}Viewer;
struct TonemappingLog {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD UpdateCurveOffset;
void (*UpdateCurve)(void *_instance);
DWORD ValidDimensionsOffset;
bool (*ValidDimensions)(void *_instance, void *tex2d);
DWORD SetIdentityLutOffset;
void (*SetIdentityLut)(void *_instance);
DWORD ConvertOffset;
void (*Convert)(void *_instance, void *temp2DTex);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD CreateInternalRenderTextureOffset;
bool (*CreateInternalRenderTexture)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}TonemappingLog;
struct TonemappingLut {
DWORD HasCacheChangedOffset;
bool (*HasCacheChanged)(void *_instance);
DWORD UpdateCacheOffset;
void (*UpdateCache)(void *_instance);
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD GetHighlightRecoveryOffset;
float (*GetHighlightRecovery)(void *_instance);
DWORD GetWhitePointOffset;
float (*GetWhitePoint)(void *_instance);
DWORD LutToLinOffset;
float (*LutToLin)(void *_instance, float x, float lutA);
DWORD LinToLutOffset;
float (*LinToLut)(void *_instance, float x, float lutA);
DWORD LiftGammaGainOffset;
float (*LiftGammaGain)(void *_instance, float x, float lift, float invGamma, float gain);
DWORD LogContrastOffset;
float (*LogContrast)(void *_instance, float x, float linRef, float contrast);
DWORD NormalizeColorOffset;
Color (*NormalizeColor)(void *_instance, Color c);
DWORD GetLutAOffset;
float (*GetLutA)(void *_instance);
DWORD UpdateCurveOffset;
void (*UpdateCurve)(void *_instance);
DWORD EvaluateCurveOffset;
float (*EvaluateCurve)(void *_instance, float srcVal);
DWORD SetIdentityLutOffset;
void (*SetIdentityLut)(void *_instance);
DWORD ClampDimOffset;
int (*ClampDim)(void *_instance, int srcX);
DWORD SampleLutNearestOffset;
Color (*SampleLutNearest)(void *_instance, int r, int g, int b);
DWORD SampleLutNearestUnsafeOffset;
Color (*SampleLutNearestUnsafe)(void *_instance, int r, int g, int b);
DWORD SampleLutLinearOffset;
Color (*SampleLutLinear)(void *_instance, float srcR, float srcG, float srcB);
DWORD UpdateUserLutOffset;
void (*UpdateUserLut)(void *_instance);
DWORD EvalFilmicHelperOffset;
float (*EvalFilmicHelper)(void *_instance, float srcR, float lutA, int polyToe, int polyLinear, int polyShoulder, float x0, float x1, float linearW);
DWORD EvalCurveGradingHelperOffset;
float (*EvalCurveGradingHelper)(void *_instance, float srcR, float liftR, float invGammaR, float gainR);
DWORD CreateFilmicCurveHelperOffset;
void (*CreateFilmicCurveHelper)(void *_instance, float lutA, int polyToe, int polyLinear, int polyShoulder, float x0, float x1, float linearW, float liftR, float invGammaR, float gainR, float liftG, float invGammaG, float gainG, float liftB, float invGammaB, float gainB);
DWORD UpdateLutOffset;
void (*UpdateLut)(void *_instance);
DWORD ValidDimensionsOffset;
bool (*ValidDimensions)(void *_instance, void *tex2d);
DWORD ConvertOffset;
void (*Convert)(void *_instance, void *temp2DTex);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD CreateInternalRenderTextureOffset;
bool (*CreateInternalRenderTexture)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}TonemappingLut;
struct FPSDemoGUI {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD ChangeCurrentOffset;
void (*ChangeCurrent)(void *_instance, int delta);
}FPSDemoGUI;
struct FPSDemoReactivator {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ReactivateOffset;
void (*Reactivate)(void *_instance);
}FPSDemoReactivator;
struct FPSFireManager {
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD GetImpactEffectOffset;
void *(*GetImpactEffect)(void *_instance, void *impactedGameObject);
}FPSFireManager;
struct MouseLock {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}MouseLock;
struct FPSLightCurves {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}FPSLightCurves;
struct FPSParticleSystemScaler {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}FPSParticleSystemScaler;
struct FPSRandomRotateAngle {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}FPSRandomRotateAngle;
struct FPSShaderColorGradient {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}FPSShaderColorGradient;
struct FPSShaderFloatCurves {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}FPSShaderFloatCurves;
struct MaterialType {
}MaterialType;
struct Ball {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnCollisionEnterOffset;
void (*OnCollisionEnter)(void *_instance, void *collision);
}Ball;
struct MyDecalRenderers {
DWORD get_SharedInstanceOffset;
void *(*get_SharedInstance)();
DWORD OnApplicationQuitOffset;
void (*OnApplicationQuit)(void *_instance);
}MyDecalRenderers;
struct RotateCamera {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD FixedUpdateOffset;
void (*FixedUpdate)(void *_instance);
}RotateCamera;
struct Snail {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnCollisionEnterOffset;
void (*OnCollisionEnter)(void *_instance, void *collision);
}Snail;
struct DecalSpawner {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD SpawnDecalOffset;
void (*SpawnDecal)(void *_instance, Vector2 screenPosition);
}DecalSpawner;
struct FighterJetShadow {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}FighterJetShadow;
struct FighterJetShadowDemo {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}FighterJetShadowDemo;
struct FastDecalsAtlas {
DWORD GetIndexByNameOffset;
int (*GetIndexByName)(void *_instance, monoString *name);
DWORD GetNameByIndexOffset;
monoString *(*GetNameByIndex)(void *_instance, int i);
}FastDecalsAtlas;
struct FastDecalsAtlasRenderer {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD DrawDecalOffset;
void (*DrawDecal)(void *_instance, Vector3 pos, float size, int atlasItemIndex);
DWORD DrawDecal1Offset;
void (*DrawDecal1)(void *_instance, Vector3 pos, Vector2 size, int atlasItemIndex);
DWORD DrawDecal2Offset;
void (*DrawDecal2)(void *_instance, Vector3 pos, float size, int atlasItemIndex, int rotation);
DWORD DrawDecal3Offset;
void (*DrawDecal3)(void *_instance, Vector3 pos, Vector2 size, int atlasItemIndex, int rotation);
DWORD DrawDecal4Offset;
void (*DrawDecal4)(void *_instance, Vector3 pos, float size, int atlasItemIndex, Vector3 normal);
DWORD DrawDecal5Offset;
void (*DrawDecal5)(void *_instance, Vector3 pos, Vector2 size, int atlasItemIndex, Vector3 normal);
DWORD DrawDecal6Offset;
void (*DrawDecal6)(void *_instance, Vector3 pos, float size, int atlasItemIndex, int color);
DWORD DrawDecal7Offset;
void (*DrawDecal7)(void *_instance, Vector3 pos, Vector2 size, int atlasItemIndex, int color);
DWORD DrawDecal8Offset;
void (*DrawDecal8)(void *_instance, Vector3 pos, float size, int atlasItemIndex, int color, int rotation);
DWORD DrawDecal9Offset;
void (*DrawDecal9)(void *_instance, Vector3 pos, Vector2 size, int atlasItemIndex, int color, int rotation);
DWORD DrawDecal10Offset;
void (*DrawDecal10)(void *_instance, Vector3 pos, float size, int atlasItemIndex, int color, Vector3 normal);
DWORD DrawDecal11Offset;
void (*DrawDecal11)(void *_instance, Vector3 pos, Vector2 size, int atlasItemIndex, int color, Vector3 normal);
DWORD DrawDecal12Offset;
void (*DrawDecal12)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling);
DWORD DrawDecal13Offset;
void (*DrawDecal13)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling);
DWORD DrawDecal14Offset;
void (*DrawDecal14)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling, int rotation);
DWORD DrawDecal15Offset;
void (*DrawDecal15)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling, int rotation);
DWORD DrawDecal16Offset;
void (*DrawDecal16)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling, Vector3 normal);
DWORD DrawDecal17Offset;
void (*DrawDecal17)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling, Vector3 normal);
DWORD DrawDecal18Offset;
void (*DrawDecal18)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling, int color);
DWORD DrawDecal19Offset;
void (*DrawDecal19)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling, int color);
DWORD DrawDecal20Offset;
void (*DrawDecal20)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling, int color, int rotation);
DWORD DrawDecal21Offset;
void (*DrawDecal21)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling, int color, int rotation);
DWORD DrawDecal22Offset;
void (*DrawDecal22)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling, int color, Vector3 normal);
DWORD DrawDecal23Offset;
void (*DrawDecal23)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling, int color, Vector3 normal);
DWORD ClearDecalsOffset;
void (*ClearDecals)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD OnDrawGizmosSelectedOffset;
void (*OnDrawGizmosSelected)(void *_instance);
DWORD CalculateBoundsOffset;
int(*CalculateBounds)(void *_instance, Vector3 position);
DWORD MeshInstanceCreatedOffset;
void (*MeshInstanceCreated)(void *_instance, void *mesh);
}FastDecalsAtlasRenderer;
struct FastDecalsRenderer {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD DrawDecalOffset;
void (*DrawDecal)(void *_instance, Vector3 pos, float size, int tileIndex);
DWORD DrawDecal1Offset;
void (*DrawDecal1)(void *_instance, Vector3 pos, Vector2 size, int tileIndex);
DWORD DrawDecal2Offset;
void (*DrawDecal2)(void *_instance, Vector3 pos, float size, int tileIndex, int rotation);
DWORD DrawDecal3Offset;
void (*DrawDecal3)(void *_instance, Vector3 pos, Vector2 size, int tileIndex, int rotation);
DWORD DrawDecal4Offset;
void (*DrawDecal4)(void *_instance, Vector3 pos, float size, int tileIndex, Vector3 normal);
DWORD DrawDecal5Offset;
void (*DrawDecal5)(void *_instance, Vector3 pos, Vector2 size, int tileIndex, Vector3 normal);
DWORD DrawDecal6Offset;
void (*DrawDecal6)(void *_instance, Vector3 pos, float size, int tileIndex, int color);
DWORD DrawDecal7Offset;
void (*DrawDecal7)(void *_instance, Vector3 pos, Vector2 size, int tileIndex, int color);
DWORD DrawDecal8Offset;
void (*DrawDecal8)(void *_instance, Vector3 pos, float size, int tileIndex, int color, int rotation);
DWORD DrawDecal9Offset;
void (*DrawDecal9)(void *_instance, Vector3 pos, Vector2 size, int tileIndex, int color, int rotation);
DWORD DrawDecal10Offset;
void (*DrawDecal10)(void *_instance, Vector3 pos, float size, int tileIndex, int color, Vector3 normal);
DWORD DrawDecal11Offset;
void (*DrawDecal11)(void *_instance, Vector3 pos, Vector2 size, int tileIndex, int color, Vector3 normal);
DWORD DrawDecal12Offset;
void (*DrawDecal12)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling);
DWORD DrawDecal13Offset;
void (*DrawDecal13)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling);
DWORD DrawDecal14Offset;
void (*DrawDecal14)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling, int rotation);
DWORD DrawDecal15Offset;
void (*DrawDecal15)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling, int rotation);
DWORD DrawDecal16Offset;
void (*DrawDecal16)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling, Vector3 normal);
DWORD DrawDecal17Offset;
void (*DrawDecal17)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling, Vector3 normal);
DWORD DrawDecal18Offset;
void (*DrawDecal18)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling, int color);
DWORD DrawDecal19Offset;
void (*DrawDecal19)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling, int color);
DWORD DrawDecal20Offset;
void (*DrawDecal20)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling, int color, int rotation);
DWORD DrawDecal21Offset;
void (*DrawDecal21)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling, int color, int rotation);
DWORD DrawDecal22Offset;
void (*DrawDecal22)(void *_instance, Vector3 pos, float size, Vector2 textureOffset, Vector2 textureTiling, int color, Vector3 normal);
DWORD DrawDecal23Offset;
void (*DrawDecal23)(void *_instance, Vector3 pos, Vector2 size, Vector2 textureOffset, Vector2 textureTiling, int color, Vector3 normal);
DWORD ClearDecalsOffset;
void (*ClearDecals)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD OnDrawGizmosSelectedOffset;
void (*OnDrawGizmosSelected)(void *_instance);
DWORD CalculateBoundsOffset;
int(*CalculateBounds)(void *_instance, Vector3 position);
DWORD CalculateTextureOffsetOffset;
Vector2 (*CalculateTextureOffset)(int i, int xTiles, int yTiles);
DWORD MeshInstanceCreatedOffset;
void (*MeshInstanceCreated)(void *_instance, void *mesh);
}FastDecalsRenderer;
struct HBAOControl {
DWORD ToggleShowAOOffset;
void (*ToggleShowAO)(void *_instance);
DWORD UpdateAoRadiusOffset;
void (*UpdateAoRadius)(void *_instance);
}HBAOControl;
struct RotateObject {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}RotateObject;
struct HBAO {
DWORD get_presetsOffset;
int(*get_presets)(void *_instance);
DWORD set_presetsOffset;
void (*set_presets)(void *_instance, int value);
DWORD get_generalSettingsOffset;
int(*get_generalSettings)(void *_instance);
DWORD set_generalSettingsOffset;
void (*set_generalSettings)(void *_instance, int value);
DWORD get_aoSettingsOffset;
int(*get_aoSettings)(void *_instance);
DWORD set_aoSettingsOffset;
void (*set_aoSettings)(void *_instance, int value);
DWORD get_colorBleedingSettingsOffset;
int(*get_colorBleedingSettings)(void *_instance);
DWORD set_colorBleedingSettingsOffset;
void (*set_colorBleedingSettings)(void *_instance, int value);
DWORD get_blurSettingsOffset;
int(*get_blurSettings)(void *_instance);
DWORD set_blurSettingsOffset;
void (*set_blurSettings)(void *_instance, int value);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD RenderHBAOOffset;
void (*RenderHBAO)(void *_instance, void *source, void *destination);
DWORD CreateMaterialOffset;
void (*CreateMaterial)(void *_instance);
DWORD UpdateMaterialPropertiesOffset;
void (*UpdateMaterialProperties)(void *_instance);
DWORD GetDownsamplingOffset;
int (*GetDownsampling)(void *_instance);
DWORD GetAoPassOffset;
int (*GetAoPass)(void *_instance);
DWORD GetBlurXPassOffset;
int (*GetBlurXPass)(void *_instance);
DWORD GetBlurYPassOffset;
int (*GetBlurYPass)(void *_instance);
DWORD GetFinalPassOffset;
int (*GetFinalPass)(void *_instance);
DWORD CreateRandomTextureOffset;
void (*CreateRandomTexture)(void *_instance, int size);
DWORD ApplyPresetOffset;
void (*ApplyPreset)(void *_instance, int preset);
}HBAO;
struct AmbientControllerExample {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD DelayedRefreshOffset;
void (*DelayedRefresh)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD EvaluateCurvesOffset;
void (*EvaluateCurves)(void *_instance);
DWORD ZoomInOffset;
void *(*ZoomIn)(void *_instance);
DWORD ZoomOutOffset;
void *(*ZoomOut)(void *_instance);
DWORD TimePlusOffset;
void (*TimePlus)(void *_instance);
DWORD TimeMinusOffset;
void (*TimeMinus)(void *_instance);
DWORD SwitchCityLightsOffset;
void (*SwitchCityLights)(void *_instance, bool on);
DWORD QuitOffset;
void (*Quit)(void *_instance);
}AmbientControllerExample;
struct ButtonHandler {
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *eventData);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *eventData);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
}ButtonHandler;
struct ButtonSetColorOnClick {
DWORD SetColor1Offset;
void (*SetColor1)(void *_instance);
DWORD SetColor2Offset;
void (*SetColor2)(void *_instance);
}ButtonSetColorOnClick;
struct HorizonControllerExample {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD EnableHorizonOffset;
void (*EnableHorizon)(void *_instance);
DWORD DisableHorizonOffset;
void (*DisableHorizon)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD ScrollMaskLeftRightOffset;
void (*ScrollMaskLeftRight)(void *_instance, float direction);
DWORD ScrollMaskUpDownOffset;
void (*ScrollMaskUpDown)(void *_instance, float direction);
DWORD ScaleMaskOffset;
void (*ScaleMask)(void *_instance, float direction);
DWORD MaskScaleOffsetOffset;
void (*MaskScaleOffset)(void *_instance, int scaleOffset);
DWORD ScrollMapsLeftRightOffset;
void (*ScrollMapsLeftRight)(void *_instance, float direction);
DWORD ScrollMapsUpDownOffset;
void (*ScrollMapsUpDown)(void *_instance, float direction);
DWORD ScaleMapsOffset;
void (*ScaleMaps)(void *_instance, float direction);
DWORD MapsScaleOffsetOffset;
void (*MapsScaleOffset)(void *_instance, int scaleOffsetLayer1, int scaleOffsetLayer2, int scaleOffsetLayer3, int scaleOffsetLayer4);
DWORD ResetMaskPosOffset;
void (*ResetMaskPos)(void *_instance);
DWORD DisplaceOffset;
void (*Displace)(void *_instance, float direction);
DWORD BumpOffset;
void (*Bump)(void *_instance, float direction);
DWORD FogOffset;
void (*Fog)(void *_instance, float direction);
DWORD SnowOffset;
void (*Snow)(void *_instance, float direction);
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD ScrollMaskLeftOffset;
void (*ScrollMaskLeft)(void *_instance);
DWORD ScrollMaskRightOffset;
void (*ScrollMaskRight)(void *_instance);
DWORD ScrollMaskUpOffset;
void (*ScrollMaskUp)(void *_instance);
DWORD ScrollMaskDownOffset;
void (*ScrollMaskDown)(void *_instance);
DWORD ScaleMaskUpOffset;
void (*ScaleMaskUp)(void *_instance);
DWORD ScaleMaskDownOffset;
void (*ScaleMaskDown)(void *_instance);
DWORD ScrollMapsLeftOffset;
void (*ScrollMapsLeft)(void *_instance);
DWORD ScrollMapsRightOffset;
void (*ScrollMapsRight)(void *_instance);
DWORD ScrollMapsUpOffset;
void (*ScrollMapsUp)(void *_instance);
DWORD ScrollMapsDownOffset;
void (*ScrollMapsDown)(void *_instance);
DWORD ScaleMapsUpOffset;
void (*ScaleMapsUp)(void *_instance);
DWORD ScaleMapsDownOffset;
void (*ScaleMapsDown)(void *_instance);
DWORD DisplacePlusOffset;
void (*DisplacePlus)(void *_instance);
DWORD DisplaceMinusOffset;
void (*DisplaceMinus)(void *_instance);
DWORD BumpPlusOffset;
void (*BumpPlus)(void *_instance);
DWORD BumpMinusOffset;
void (*BumpMinus)(void *_instance);
DWORD FogPlusOffset;
void (*FogPlus)(void *_instance);
DWORD FogMinusOffset;
void (*FogMinus)(void *_instance);
DWORD SnowPlusOffset;
void (*SnowPlus)(void *_instance);
DWORD SnowMinusOffset;
void (*SnowMinus)(void *_instance);
}HorizonControllerExample;
struct IVPickerExample {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnImageSelectOffset;
void (*OnImageSelect)(void *_instance, monoString *imgPath, int imgOrientation);
DWORD OnImageLoadOffset;
void (*OnImageLoad)(void *_instance, monoString *imgPath, void *tex, int imgOrientation);
DWORD OnVideoSelectOffset;
void (*OnVideoSelect)(void *_instance, monoString *vidPath);
DWORD OnErrorOffset;
void (*OnError)(void *_instance, monoString *errorMsg);
DWORD OnCancelOffset;
void (*OnCancel)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}IVPickerExample;
struct InitDemo_1 {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD GenerateLevelOffset;
void (*GenerateLevel)(void *_instance);
}InitDemo_1;
struct IOCcam {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnApplicationQuitOffset;
void (*OnApplicationQuit)(void *_instance);
DWORD AddBoundingSphereOffset;
void (*AddBoundingSphere)(void *_instance, int sphere);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD UnhideOffset;
void (*Unhide)(void *_instance, void *t, int hit);
DWORD HaltonSequenceOffset;
float (*HaltonSequence)(void *_instance, int index, int b);
}IOCcam;
struct IOClight {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD InitializeOffset;
void (*Initialize)(void *_instance);
DWORD UpdateValuesOffset;
void (*UpdateValues)(void *_instance);
DWORD UnHideOffset;
void (*UnHide)(void *_instance, int hit);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}IOClight;
struct IOClod {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD InitializeOffset;
void (*Initialize)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD UpdateValuesOffset;
void (*UpdateValues)(void *_instance);
DWORD UnHideOffset;
void (*UnHide)(void *_instance, int h);
DWORD ShowLodOffset;
void (*ShowLod)(void *_instance, float d);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD HideAllOffset;
void (*HideAll)(void *_instance);
}IOClod;
struct IOCterrain {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD UnHideOffset;
void (*UnHide)(void *_instance, int hit);
}IOCterrain;
struct IOCcomp {
}IOCcomp;
struct IOChud {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD ToggleHUDOffset;
void (*ToggleHUD)(void *_instance);
DWORD ToggleIOCOffset;
void (*ToggleIOC)(void *_instance);
}IOChud;
struct IronSourceDemoScript {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnApplicationPauseOffset;
void (*OnApplicationPause)(void *_instance, bool isPaused);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD RewardedVideoAvailabilityChangedEventOffset;
void (*RewardedVideoAvailabilityChangedEvent)(void *_instance, bool canShowAd);
DWORD RewardedVideoAdOpenedEventOffset;
void (*RewardedVideoAdOpenedEvent)(void *_instance);
DWORD RewardedVideoAdRewardedEventOffset;
void (*RewardedVideoAdRewardedEvent)(void *_instance, void *ssp);
DWORD RewardedVideoAdClosedEventOffset;
void (*RewardedVideoAdClosedEvent)(void *_instance);
DWORD RewardedVideoAdStartedEventOffset;
void (*RewardedVideoAdStartedEvent)(void *_instance);
DWORD RewardedVideoAdEndedEventOffset;
void (*RewardedVideoAdEndedEvent)(void *_instance);
DWORD RewardedVideoAdShowFailedEventOffset;
void (*RewardedVideoAdShowFailedEvent)(void *_instance, void *error);
DWORD RewardedVideoAdClickedEventOffset;
void (*RewardedVideoAdClickedEvent)(void *_instance, void *ssp);
DWORD RewardedVideoAdLoadedDemandOnlyEventOffset;
void (*RewardedVideoAdLoadedDemandOnlyEvent)(void *_instance, monoString *instanceId);
DWORD RewardedVideoAdLoadFailedDemandOnlyEventOffset;
void (*RewardedVideoAdLoadFailedDemandOnlyEvent)(void *_instance, monoString *instanceId, void *error);
DWORD RewardedVideoAdOpenedDemandOnlyEventOffset;
void (*RewardedVideoAdOpenedDemandOnlyEvent)(void *_instance, monoString *instanceId);
DWORD RewardedVideoAdRewardedDemandOnlyEventOffset;
void (*RewardedVideoAdRewardedDemandOnlyEvent)(void *_instance, monoString *instanceId);
DWORD RewardedVideoAdClosedDemandOnlyEventOffset;
void (*RewardedVideoAdClosedDemandOnlyEvent)(void *_instance, monoString *instanceId);
DWORD RewardedVideoAdShowFailedDemandOnlyEventOffset;
void (*RewardedVideoAdShowFailedDemandOnlyEvent)(void *_instance, monoString *instanceId, void *error);
DWORD RewardedVideoAdClickedDemandOnlyEventOffset;
void (*RewardedVideoAdClickedDemandOnlyEvent)(void *_instance, monoString *instanceId);
DWORD InterstitialAdReadyEventOffset;
void (*InterstitialAdReadyEvent)(void *_instance);
DWORD InterstitialAdLoadFailedEventOffset;
void (*InterstitialAdLoadFailedEvent)(void *_instance, void *error);
DWORD InterstitialAdShowSucceededEventOffset;
void (*InterstitialAdShowSucceededEvent)(void *_instance);
DWORD InterstitialAdShowFailedEventOffset;
void (*InterstitialAdShowFailedEvent)(void *_instance, void *error);
DWORD InterstitialAdClickedEventOffset;
void (*InterstitialAdClickedEvent)(void *_instance);
DWORD InterstitialAdOpenedEventOffset;
void (*InterstitialAdOpenedEvent)(void *_instance);
DWORD InterstitialAdClosedEventOffset;
void (*InterstitialAdClosedEvent)(void *_instance);
DWORD InterstitialAdReadyDemandOnlyEventOffset;
void (*InterstitialAdReadyDemandOnlyEvent)(void *_instance, monoString *instanceId);
DWORD InterstitialAdLoadFailedDemandOnlyEventOffset;
void (*InterstitialAdLoadFailedDemandOnlyEvent)(void *_instance, monoString *instanceId, void *error);
DWORD InterstitialAdShowFailedDemandOnlyEventOffset;
void (*InterstitialAdShowFailedDemandOnlyEvent)(void *_instance, monoString *instanceId, void *error);
DWORD InterstitialAdClickedDemandOnlyEventOffset;
void (*InterstitialAdClickedDemandOnlyEvent)(void *_instance, monoString *instanceId);
DWORD InterstitialAdOpenedDemandOnlyEventOffset;
void (*InterstitialAdOpenedDemandOnlyEvent)(void *_instance, monoString *instanceId);
DWORD InterstitialAdClosedDemandOnlyEventOffset;
void (*InterstitialAdClosedDemandOnlyEvent)(void *_instance, monoString *instanceId);
DWORD BannerAdLoadedEventOffset;
void (*BannerAdLoadedEvent)(void *_instance);
DWORD BannerAdLoadFailedEventOffset;
void (*BannerAdLoadFailedEvent)(void *_instance, void *error);
DWORD BannerAdClickedEventOffset;
void (*BannerAdClickedEvent)(void *_instance);
DWORD BannerAdScreenPresentedEventOffset;
void (*BannerAdScreenPresentedEvent)(void *_instance);
DWORD BannerAdScreenDismissedEventOffset;
void (*BannerAdScreenDismissedEvent)(void *_instance);
DWORD BannerAdLeftApplicationEventOffset;
void (*BannerAdLeftApplicationEvent)(void *_instance);
DWORD OfferwallOpenedEventOffset;
void (*OfferwallOpenedEvent)(void *_instance);
DWORD OfferwallClosedEventOffset;
void (*OfferwallClosedEvent)(void *_instance);
DWORD OfferwallShowFailedEventOffset;
void (*OfferwallShowFailedEvent)(void *_instance, void *error);
DWORD GetOfferwallCreditsFailedEventOffset;
void (*GetOfferwallCreditsFailedEvent)(void *_instance, void *error);
DWORD OfferwallAvailableEventOffset;
void (*OfferwallAvailableEvent)(void *_instance, bool canShowOfferwal);
}IronSourceDemoScript;
struct AndroidAgent {
DWORD getBridgeOffset;
void *(*getBridge)(void *_instance);
DWORD onApplicationPauseOffset;
void (*onApplicationPause)(void *_instance, bool pause);
DWORD setMediationSegmentOffset;
void (*setMediationSegment)(void *_instance, monoString *segment);
DWORD getAdvertiserIdOffset;
monoString *(*getAdvertiserId)(void *_instance);
DWORD validateIntegrationOffset;
void (*validateIntegration)(void *_instance);
DWORD shouldTrackNetworkStateOffset;
void (*shouldTrackNetworkState)(void *_instance, bool track);
DWORD setDynamicUserIdOffset;
bool (*setDynamicUserId)(void *_instance, monoString *dynamicUserId);
DWORD setAdaptersDebugOffset;
void (*setAdaptersDebug)(void *_instance, bool enabled);
DWORD setMetaDataOffset;
void (*setMetaData)(void *_instance, monoString *key, monoString *value);
DWORD setUserIdOffset;
void (*setUserId)(void *_instance, monoString *userId);
DWORD initOffset;
void (*init)(void *_instance, monoString *appKey);
DWORD showRewardedVideoOffset;
void (*showRewardedVideo)(void *_instance);
DWORD showRewardedVideo1Offset;
void (*showRewardedVideo1)(void *_instance, monoString *placementName);
DWORD isRewardedVideoAvailableOffset;
bool (*isRewardedVideoAvailable)(void *_instance);
DWORD isRewardedVideoPlacementCappedOffset;
bool (*isRewardedVideoPlacementCapped)(void *_instance, monoString *placementName);
DWORD getPlacementInfoOffset;
void *(*getPlacementInfo)(void *_instance, monoString *placementName);
DWORD clearRewardedVideoServerParamsOffset;
void (*clearRewardedVideoServerParams)(void *_instance);
DWORD showISDemandOnlyRewardedVideoOffset;
void (*showISDemandOnlyRewardedVideo)(void *_instance, monoString *instanceId);
DWORD loadISDemandOnlyRewardedVideoOffset;
void (*loadISDemandOnlyRewardedVideo)(void *_instance, monoString *instanceId);
DWORD isISDemandOnlyRewardedVideoAvailableOffset;
bool (*isISDemandOnlyRewardedVideoAvailable)(void *_instance, monoString *instanceId);
DWORD loadInterstitialOffset;
void (*loadInterstitial)(void *_instance);
DWORD showInterstitialOffset;
void (*showInterstitial)(void *_instance);
DWORD showInterstitial1Offset;
void (*showInterstitial1)(void *_instance, monoString *placementName);
DWORD isInterstitialReadyOffset;
bool (*isInterstitialReady)(void *_instance);
DWORD isInterstitialPlacementCappedOffset;
bool (*isInterstitialPlacementCapped)(void *_instance, monoString *placementName);
DWORD loadISDemandOnlyInterstitialOffset;
void (*loadISDemandOnlyInterstitial)(void *_instance, monoString *instanceId);
DWORD showISDemandOnlyInterstitialOffset;
void (*showISDemandOnlyInterstitial)(void *_instance, monoString *instanceId);
DWORD isISDemandOnlyInterstitialReadyOffset;
bool (*isISDemandOnlyInterstitialReady)(void *_instance, monoString *instanceId);
DWORD showOfferwallOffset;
void (*showOfferwall)(void *_instance);
DWORD showOfferwall1Offset;
void (*showOfferwall1)(void *_instance, monoString *placementName);
DWORD getOfferwallCreditsOffset;
void (*getOfferwallCredits)(void *_instance);
DWORD isOfferwallAvailableOffset;
bool (*isOfferwallAvailable)(void *_instance);
DWORD loadBannerOffset;
void (*loadBanner)(void *_instance, void *size, int position);
DWORD loadBanner1Offset;
void (*loadBanner1)(void *_instance, void *size, int position, monoString *placementName);
DWORD destroyBannerOffset;
void (*destroyBanner)(void *_instance);
DWORD displayBannerOffset;
void (*displayBanner)(void *_instance);
DWORD hideBannerOffset;
void (*hideBanner)(void *_instance);
DWORD isBannerPlacementCappedOffset;
bool (*isBannerPlacementCapped)(void *_instance, monoString *placementName);
DWORD setSegmentOffset;
void (*setSegment)(void *_instance, void *segment);
DWORD setConsentOffset;
void (*setConsent)(void *_instance, bool consent);
DWORD loadConsentViewWithTypeOffset;
void (*loadConsentViewWithType)(void *_instance, monoString *consentViewType);
DWORD showConsentViewWithTypeOffset;
void (*showConsentViewWithType)(void *_instance, monoString *consentViewType);
}AndroidAgent;
struct IronSource {
DWORD get_AgentOffset;
void *(*get_Agent)();
DWORD pluginVersionOffset;
monoString *(*pluginVersion)();
DWORD unityVersionOffset;
monoString *(*unityVersion)();
DWORD setUnsupportedPlatformOffset;
void (*setUnsupportedPlatform)();
DWORD onApplicationPauseOffset;
void (*onApplicationPause)(void *_instance, bool pause);
DWORD setMediationSegmentOffset;
void (*setMediationSegment)(void *_instance, monoString *segment);
DWORD getAdvertiserIdOffset;
monoString *(*getAdvertiserId)(void *_instance);
DWORD validateIntegrationOffset;
void (*validateIntegration)(void *_instance);
DWORD shouldTrackNetworkStateOffset;
void (*shouldTrackNetworkState)(void *_instance, bool track);
DWORD setDynamicUserIdOffset;
bool (*setDynamicUserId)(void *_instance, monoString *dynamicUserId);
DWORD setAdaptersDebugOffset;
void (*setAdaptersDebug)(void *_instance, bool enabled);
DWORD setMetaDataOffset;
void (*setMetaData)(void *_instance, monoString *key, monoString *value);
DWORD setUserIdOffset;
void (*setUserId)(void *_instance, monoString *userId);
DWORD initOffset;
void (*init)(void *_instance, monoString *appKey);
DWORD showRewardedVideoOffset;
void (*showRewardedVideo)(void *_instance);
DWORD showRewardedVideo1Offset;
void (*showRewardedVideo1)(void *_instance, monoString *placementName);
DWORD getPlacementInfoOffset;
void *(*getPlacementInfo)(void *_instance, monoString *placementName);
DWORD isRewardedVideoAvailableOffset;
bool (*isRewardedVideoAvailable)(void *_instance);
DWORD isRewardedVideoPlacementCappedOffset;
bool (*isRewardedVideoPlacementCapped)(void *_instance, monoString *placementName);
DWORD clearRewardedVideoServerParamsOffset;
void (*clearRewardedVideoServerParams)(void *_instance);
DWORD showISDemandOnlyRewardedVideoOffset;
void (*showISDemandOnlyRewardedVideo)(void *_instance, monoString *instanceId);
DWORD loadISDemandOnlyRewardedVideoOffset;
void (*loadISDemandOnlyRewardedVideo)(void *_instance, monoString *instanceId);
DWORD isISDemandOnlyRewardedVideoAvailableOffset;
bool (*isISDemandOnlyRewardedVideoAvailable)(void *_instance, monoString *instanceId);
DWORD loadInterstitialOffset;
void (*loadInterstitial)(void *_instance);
DWORD showInterstitialOffset;
void (*showInterstitial)(void *_instance);
DWORD showInterstitial1Offset;
void (*showInterstitial1)(void *_instance, monoString *placementName);
DWORD isInterstitialReadyOffset;
bool (*isInterstitialReady)(void *_instance);
DWORD isInterstitialPlacementCappedOffset;
bool (*isInterstitialPlacementCapped)(void *_instance, monoString *placementName);
DWORD loadISDemandOnlyInterstitialOffset;
void (*loadISDemandOnlyInterstitial)(void *_instance, monoString *instanceId);
DWORD showISDemandOnlyInterstitialOffset;
void (*showISDemandOnlyInterstitial)(void *_instance, monoString *instanceId);
DWORD isISDemandOnlyInterstitialReadyOffset;
bool (*isISDemandOnlyInterstitialReady)(void *_instance, monoString *instanceId);
DWORD showOfferwallOffset;
void (*showOfferwall)(void *_instance);
DWORD showOfferwall1Offset;
void (*showOfferwall1)(void *_instance, monoString *placementName);
DWORD getOfferwallCreditsOffset;
void (*getOfferwallCredits)(void *_instance);
DWORD isOfferwallAvailableOffset;
bool (*isOfferwallAvailable)(void *_instance);
DWORD loadBannerOffset;
void (*loadBanner)(void *_instance, void *size, int position);
DWORD loadBanner1Offset;
void (*loadBanner1)(void *_instance, void *size, int position, monoString *placementName);
DWORD destroyBannerOffset;
void (*destroyBanner)(void *_instance);
DWORD displayBannerOffset;
void (*displayBanner)(void *_instance);
DWORD hideBannerOffset;
void (*hideBanner)(void *_instance);
DWORD isBannerPlacementCappedOffset;
bool (*isBannerPlacementCapped)(void *_instance, monoString *placementName);
DWORD setSegmentOffset;
void (*setSegment)(void *_instance, void *segment);
DWORD setConsentOffset;
void (*setConsent)(void *_instance, bool consent);
DWORD loadConsentViewWithTypeOffset;
void (*loadConsentViewWithType)(void *_instance, monoString *consentViewType);
DWORD showConsentViewWithTypeOffset;
void (*showConsentViewWithType)(void *_instance, monoString *consentViewType);
}IronSource;
struct IronSourceConfig {
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD setLanguageOffset;
void (*setLanguage)(void *_instance, monoString *language);
DWORD setClientSideCallbacksOffset;
void (*setClientSideCallbacks)(void *_instance, bool status);
}IronSourceConfig;
struct IronSourceError {
DWORD getErrorCodeOffset;
int (*getErrorCode)(void *_instance);
DWORD getDescriptionOffset;
monoString *(*getDescription)(void *_instance);
DWORD getCodeOffset;
int (*getCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}IronSourceError;
struct IronSourceEvents {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD onRewardedVideoAdShowFailedOffset;
void (*onRewardedVideoAdShowFailed)(void *_instance, monoString *description);
DWORD add__onRewardedVideoAdOpenedEventOffset;
void (*add__onRewardedVideoAdOpenedEvent)(void *value);
DWORD remove__onRewardedVideoAdOpenedEventOffset;
void (*remove__onRewardedVideoAdOpenedEvent)(void *value);
DWORD add_onRewardedVideoAdOpenedEventOffset;
void (*add_onRewardedVideoAdOpenedEvent)(void *value);
DWORD remove_onRewardedVideoAdOpenedEventOffset;
void (*remove_onRewardedVideoAdOpenedEvent)(void *value);
DWORD onRewardedVideoAdOpenedOffset;
void (*onRewardedVideoAdOpened)(void *_instance, monoString *empty);
DWORD add__onRewardedVideoAdClosedEventOffset;
void (*add__onRewardedVideoAdClosedEvent)(void *value);
DWORD remove__onRewardedVideoAdClosedEventOffset;
void (*remove__onRewardedVideoAdClosedEvent)(void *value);
DWORD add_onRewardedVideoAdClosedEventOffset;
void (*add_onRewardedVideoAdClosedEvent)(void *value);
DWORD remove_onRewardedVideoAdClosedEventOffset;
void (*remove_onRewardedVideoAdClosedEvent)(void *value);
DWORD onRewardedVideoAdClosedOffset;
void (*onRewardedVideoAdClosed)(void *_instance, monoString *empty);
DWORD add__onRewardedVideoAdStartedEventOffset;
void (*add__onRewardedVideoAdStartedEvent)(void *value);
DWORD remove__onRewardedVideoAdStartedEventOffset;
void (*remove__onRewardedVideoAdStartedEvent)(void *value);
DWORD add_onRewardedVideoAdStartedEventOffset;
void (*add_onRewardedVideoAdStartedEvent)(void *value);
DWORD remove_onRewardedVideoAdStartedEventOffset;
void (*remove_onRewardedVideoAdStartedEvent)(void *value);
DWORD onRewardedVideoAdStartedOffset;
void (*onRewardedVideoAdStarted)(void *_instance, monoString *empty);
DWORD add__onRewardedVideoAdEndedEventOffset;
void (*add__onRewardedVideoAdEndedEvent)(void *value);
DWORD remove__onRewardedVideoAdEndedEventOffset;
void (*remove__onRewardedVideoAdEndedEvent)(void *value);
DWORD add_onRewardedVideoAdEndedEventOffset;
void (*add_onRewardedVideoAdEndedEvent)(void *value);
DWORD remove_onRewardedVideoAdEndedEventOffset;
void (*remove_onRewardedVideoAdEndedEvent)(void *value);
DWORD onRewardedVideoAdEndedOffset;
void (*onRewardedVideoAdEnded)(void *_instance, monoString *empty);
DWORD onRewardedVideoAdRewardedOffset;
void (*onRewardedVideoAdRewarded)(void *_instance, monoString *description);
DWORD onRewardedVideoAdClickedOffset;
void (*onRewardedVideoAdClicked)(void *_instance, monoString *description);
DWORD onRewardedVideoAvailabilityChangedOffset;
void (*onRewardedVideoAvailabilityChanged)(void *_instance, monoString *stringAvailable);
DWORD onRewardedVideoAdLoadedDemandOnlyOffset;
void (*onRewardedVideoAdLoadedDemandOnly)(void *_instance, monoString *instanceId);
DWORD onRewardedVideoAdLoadFailedDemandOnlyOffset;
void (*onRewardedVideoAdLoadFailedDemandOnly)(void *_instance, monoString *args);
DWORD onRewardedVideoAdOpenedDemandOnlyOffset;
void (*onRewardedVideoAdOpenedDemandOnly)(void *_instance, monoString *instanceId);
DWORD onRewardedVideoAdClosedDemandOnlyOffset;
void (*onRewardedVideoAdClosedDemandOnly)(void *_instance, monoString *instanceId);
DWORD onRewardedVideoAdRewardedDemandOnlyOffset;
void (*onRewardedVideoAdRewardedDemandOnly)(void *_instance, monoString *instanceId);
DWORD onRewardedVideoAdShowFailedDemandOnlyOffset;
void (*onRewardedVideoAdShowFailedDemandOnly)(void *_instance, monoString *args);
DWORD onRewardedVideoAdClickedDemandOnlyOffset;
void (*onRewardedVideoAdClickedDemandOnly)(void *_instance, monoString *instanceId);
DWORD add__onInterstitialAdReadyEventOffset;
void (*add__onInterstitialAdReadyEvent)(void *value);
DWORD remove__onInterstitialAdReadyEventOffset;
void (*remove__onInterstitialAdReadyEvent)(void *value);
DWORD add_onInterstitialAdReadyEventOffset;
void (*add_onInterstitialAdReadyEvent)(void *value);
DWORD remove_onInterstitialAdReadyEventOffset;
void (*remove_onInterstitialAdReadyEvent)(void *value);
DWORD onInterstitialAdReadyOffset;
void (*onInterstitialAdReady)(void *_instance);
DWORD onInterstitialAdLoadFailedOffset;
void (*onInterstitialAdLoadFailed)(void *_instance, monoString *description);
DWORD add__onInterstitialAdOpenedEventOffset;
void (*add__onInterstitialAdOpenedEvent)(void *value);
DWORD remove__onInterstitialAdOpenedEventOffset;
void (*remove__onInterstitialAdOpenedEvent)(void *value);
DWORD add_onInterstitialAdOpenedEventOffset;
void (*add_onInterstitialAdOpenedEvent)(void *value);
DWORD remove_onInterstitialAdOpenedEventOffset;
void (*remove_onInterstitialAdOpenedEvent)(void *value);
DWORD onInterstitialAdOpenedOffset;
void (*onInterstitialAdOpened)(void *_instance, monoString *empty);
DWORD add__onInterstitialAdClosedEventOffset;
void (*add__onInterstitialAdClosedEvent)(void *value);
DWORD remove__onInterstitialAdClosedEventOffset;
void (*remove__onInterstitialAdClosedEvent)(void *value);
DWORD add_onInterstitialAdClosedEventOffset;
void (*add_onInterstitialAdClosedEvent)(void *value);
DWORD remove_onInterstitialAdClosedEventOffset;
void (*remove_onInterstitialAdClosedEvent)(void *value);
DWORD onInterstitialAdClosedOffset;
void (*onInterstitialAdClosed)(void *_instance, monoString *empty);
DWORD add__onInterstitialAdShowSucceededEventOffset;
void (*add__onInterstitialAdShowSucceededEvent)(void *value);
DWORD remove__onInterstitialAdShowSucceededEventOffset;
void (*remove__onInterstitialAdShowSucceededEvent)(void *value);
DWORD add_onInterstitialAdShowSucceededEventOffset;
void (*add_onInterstitialAdShowSucceededEvent)(void *value);
DWORD remove_onInterstitialAdShowSucceededEventOffset;
void (*remove_onInterstitialAdShowSucceededEvent)(void *value);
DWORD onInterstitialAdShowSucceededOffset;
void (*onInterstitialAdShowSucceeded)(void *_instance, monoString *empty);
DWORD onInterstitialAdShowFailedOffset;
void (*onInterstitialAdShowFailed)(void *_instance, monoString *description);
DWORD add__onInterstitialAdClickedEventOffset;
void (*add__onInterstitialAdClickedEvent)(void *value);
DWORD remove__onInterstitialAdClickedEventOffset;
void (*remove__onInterstitialAdClickedEvent)(void *value);
DWORD add_onInterstitialAdClickedEventOffset;
void (*add_onInterstitialAdClickedEvent)(void *value);
DWORD remove_onInterstitialAdClickedEventOffset;
void (*remove_onInterstitialAdClickedEvent)(void *value);
DWORD onInterstitialAdClickedOffset;
void (*onInterstitialAdClicked)(void *_instance, monoString *empty);
DWORD onInterstitialAdReadyDemandOnlyOffset;
void (*onInterstitialAdReadyDemandOnly)(void *_instance, monoString *instanceId);
DWORD onInterstitialAdLoadFailedDemandOnlyOffset;
void (*onInterstitialAdLoadFailedDemandOnly)(void *_instance, monoString *args);
DWORD onInterstitialAdOpenedDemandOnlyOffset;
void (*onInterstitialAdOpenedDemandOnly)(void *_instance, monoString *instanceId);
DWORD onInterstitialAdClosedDemandOnlyOffset;
void (*onInterstitialAdClosedDemandOnly)(void *_instance, monoString *instanceId);
DWORD onInterstitialAdShowFailedDemandOnlyOffset;
void (*onInterstitialAdShowFailedDemandOnly)(void *_instance, monoString *args);
DWORD onInterstitialAdClickedDemandOnlyOffset;
void (*onInterstitialAdClickedDemandOnly)(void *_instance, monoString *instanceId);
DWORD add__onOfferwallOpenedEventOffset;
void (*add__onOfferwallOpenedEvent)(void *value);
DWORD remove__onOfferwallOpenedEventOffset;
void (*remove__onOfferwallOpenedEvent)(void *value);
DWORD add_onOfferwallOpenedEventOffset;
void (*add_onOfferwallOpenedEvent)(void *value);
DWORD remove_onOfferwallOpenedEventOffset;
void (*remove_onOfferwallOpenedEvent)(void *value);
DWORD onOfferwallOpenedOffset;
void (*onOfferwallOpened)(void *_instance, monoString *empty);
DWORD onOfferwallShowFailedOffset;
void (*onOfferwallShowFailed)(void *_instance, monoString *description);
DWORD add__onOfferwallClosedEventOffset;
void (*add__onOfferwallClosedEvent)(void *value);
DWORD remove__onOfferwallClosedEventOffset;
void (*remove__onOfferwallClosedEvent)(void *value);
DWORD add_onOfferwallClosedEventOffset;
void (*add_onOfferwallClosedEvent)(void *value);
DWORD remove_onOfferwallClosedEventOffset;
void (*remove_onOfferwallClosedEvent)(void *value);
DWORD onOfferwallClosedOffset;
void (*onOfferwallClosed)(void *_instance, monoString *empty);
DWORD onGetOfferwallCreditsFailedOffset;
void (*onGetOfferwallCreditsFailed)(void *_instance, monoString *description);
DWORD onOfferwallAdCreditedOffset;
void (*onOfferwallAdCredited)(void *_instance, monoString *json);
DWORD onOfferwallAvailableOffset;
void (*onOfferwallAvailable)(void *_instance, monoString *stringAvailable);
DWORD add__onBannerAdLoadedEventOffset;
void (*add__onBannerAdLoadedEvent)(void *value);
DWORD remove__onBannerAdLoadedEventOffset;
void (*remove__onBannerAdLoadedEvent)(void *value);
DWORD add_onBannerAdLoadedEventOffset;
void (*add_onBannerAdLoadedEvent)(void *value);
DWORD remove_onBannerAdLoadedEventOffset;
void (*remove_onBannerAdLoadedEvent)(void *value);
DWORD onBannerAdLoadedOffset;
void (*onBannerAdLoaded)(void *_instance);
DWORD onBannerAdLoadFailedOffset;
void (*onBannerAdLoadFailed)(void *_instance, monoString *description);
DWORD add__onBannerAdClickedEventOffset;
void (*add__onBannerAdClickedEvent)(void *value);
DWORD remove__onBannerAdClickedEventOffset;
void (*remove__onBannerAdClickedEvent)(void *value);
DWORD add_onBannerAdClickedEventOffset;
void (*add_onBannerAdClickedEvent)(void *value);
DWORD remove_onBannerAdClickedEventOffset;
void (*remove_onBannerAdClickedEvent)(void *value);
DWORD onBannerAdClickedOffset;
void (*onBannerAdClicked)(void *_instance);
DWORD add__onBannerAdScreenPresentedEventOffset;
void (*add__onBannerAdScreenPresentedEvent)(void *value);
DWORD remove__onBannerAdScreenPresentedEventOffset;
void (*remove__onBannerAdScreenPresentedEvent)(void *value);
DWORD add_onBannerAdScreenPresentedEventOffset;
void (*add_onBannerAdScreenPresentedEvent)(void *value);
DWORD remove_onBannerAdScreenPresentedEventOffset;
void (*remove_onBannerAdScreenPresentedEvent)(void *value);
DWORD onBannerAdScreenPresentedOffset;
void (*onBannerAdScreenPresented)(void *_instance);
DWORD add__onBannerAdScreenDismissedEventOffset;
void (*add__onBannerAdScreenDismissedEvent)(void *value);
DWORD remove__onBannerAdScreenDismissedEventOffset;
void (*remove__onBannerAdScreenDismissedEvent)(void *value);
DWORD add_onBannerAdScreenDismissedEventOffset;
void (*add_onBannerAdScreenDismissedEvent)(void *value);
DWORD remove_onBannerAdScreenDismissedEventOffset;
void (*remove_onBannerAdScreenDismissedEvent)(void *value);
DWORD onBannerAdScreenDismissedOffset;
void (*onBannerAdScreenDismissed)(void *_instance);
DWORD add__onBannerAdLeftApplicationEventOffset;
void (*add__onBannerAdLeftApplicationEvent)(void *value);
DWORD remove__onBannerAdLeftApplicationEventOffset;
void (*remove__onBannerAdLeftApplicationEvent)(void *value);
DWORD add_onBannerAdLeftApplicationEventOffset;
void (*add_onBannerAdLeftApplicationEvent)(void *value);
DWORD remove_onBannerAdLeftApplicationEventOffset;
void (*remove_onBannerAdLeftApplicationEvent)(void *value);
DWORD onBannerAdLeftApplicationOffset;
void (*onBannerAdLeftApplication)(void *_instance);
DWORD onSegmentReceivedOffset;
void (*onSegmentReceived)(void *_instance, monoString *segmentName);
DWORD onImpressionSuccessOffset;
void (*onImpressionSuccess)(void *_instance, monoString *args);
DWORD onConsentViewDidFailToLoadWithErrorOffset;
void (*onConsentViewDidFailToLoadWithError)(void *_instance, monoString *args);
DWORD onConsentViewDidFailToShowWithErrorOffset;
void (*onConsentViewDidFailToShowWithError)(void *_instance, monoString *args);
DWORD onConsentViewDidAcceptOffset;
void (*onConsentViewDidAccept)(void *_instance, monoString *consentViewType);
DWORD onConsentViewDidDismissOffset;
void (*onConsentViewDidDismiss)(void *_instance, monoString *consentViewType);
DWORD onConsentViewDidLoadSuccessOffset;
void (*onConsentViewDidLoadSuccess)(void *_instance, monoString *consentViewType);
DWORD onConsentViewDidShowSuccessOffset;
void (*onConsentViewDidShowSuccess)(void *_instance, monoString *consentViewType);
}IronSourceEvents;
struct IronSourceIAgent {
}IronSourceIAgent;
struct IronSourceAdUnits {
DWORD get_REWARDED_VIDEOOffset;
monoString *(*get_REWARDED_VIDEO)();
DWORD get_INTERSTITIALOffset;
monoString *(*get_INTERSTITIAL)();
DWORD get_OFFERWALLOffset;
monoString *(*get_OFFERWALL)();
DWORD get_BANNEROffset;
monoString *(*get_BANNER)();
}IronSourceAdUnits;
struct IronSourceBannerSize {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, int width, int height);
DWORD ctor2Offset;
void (*ctor2)(void *_instance, monoString *description);
DWORD get_DescriptionOffset;
monoString *(*get_Description)(void *_instance);
DWORD get_WidthOffset;
int (*get_Width)(void *_instance);
DWORD get_HeightOffset;
int (*get_Height)(void *_instance);
}IronSourceBannerSize;
struct IronSourceImpressionData {
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}IronSourceImpressionData;
struct IronSourcePlacement {
DWORD getRewardNameOffset;
monoString *(*getRewardName)(void *_instance);
DWORD getRewardAmountOffset;
int (*getRewardAmount)(void *_instance);
DWORD getPlacementNameOffset;
monoString *(*getPlacementName)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}IronSourcePlacement;
struct IronSourceSegment {
DWORD setCustomOffset;
void (*setCustom)(void *_instance, monoString *key, monoString *value);
DWORD getSegmentAsDictOffset;
}IronSourceSegment;
struct IronSourceUtils {
}IronSourceUtils;
struct UnsupportedPlatformAgent {
DWORD startOffset;
void (*start)(void *_instance);
DWORD onApplicationPauseOffset;
void (*onApplicationPause)(void *_instance, bool pause);
DWORD setMediationSegmentOffset;
void (*setMediationSegment)(void *_instance, monoString *segment);
DWORD getAdvertiserIdOffset;
monoString *(*getAdvertiserId)(void *_instance);
DWORD validateIntegrationOffset;
void (*validateIntegration)(void *_instance);
DWORD shouldTrackNetworkStateOffset;
void (*shouldTrackNetworkState)(void *_instance, bool track);
DWORD setDynamicUserIdOffset;
bool (*setDynamicUserId)(void *_instance, monoString *dynamicUserId);
DWORD setAdaptersDebugOffset;
void (*setAdaptersDebug)(void *_instance, bool enabled);
DWORD setMetaDataOffset;
void (*setMetaData)(void *_instance, monoString *key, monoString *value);
DWORD setUserIdOffset;
void (*setUserId)(void *_instance, monoString *userId);
DWORD initOffset;
void (*init)(void *_instance, monoString *appKey);
DWORD showRewardedVideoOffset;
void (*showRewardedVideo)(void *_instance);
DWORD showRewardedVideo1Offset;
void (*showRewardedVideo1)(void *_instance, monoString *placementName);
DWORD isRewardedVideoAvailableOffset;
bool (*isRewardedVideoAvailable)(void *_instance);
DWORD isRewardedVideoPlacementCappedOffset;
bool (*isRewardedVideoPlacementCapped)(void *_instance, monoString *placementName);
DWORD getPlacementInfoOffset;
void *(*getPlacementInfo)(void *_instance, monoString *placementName);
DWORD clearRewardedVideoServerParamsOffset;
void (*clearRewardedVideoServerParams)(void *_instance);
DWORD showISDemandOnlyRewardedVideoOffset;
void (*showISDemandOnlyRewardedVideo)(void *_instance, monoString *instanceId);
DWORD loadISDemandOnlyRewardedVideoOffset;
void (*loadISDemandOnlyRewardedVideo)(void *_instance, monoString *instanceId);
DWORD isISDemandOnlyRewardedVideoAvailableOffset;
bool (*isISDemandOnlyRewardedVideoAvailable)(void *_instance, monoString *instanceId);
DWORD loadInterstitialOffset;
void (*loadInterstitial)(void *_instance);
DWORD showInterstitialOffset;
void (*showInterstitial)(void *_instance);
DWORD showInterstitial1Offset;
void (*showInterstitial1)(void *_instance, monoString *placementName);
DWORD isInterstitialReadyOffset;
bool (*isInterstitialReady)(void *_instance);
DWORD isInterstitialPlacementCappedOffset;
bool (*isInterstitialPlacementCapped)(void *_instance, monoString *placementName);
DWORD loadISDemandOnlyInterstitialOffset;
void (*loadISDemandOnlyInterstitial)(void *_instance, monoString *instanceId);
DWORD showISDemandOnlyInterstitialOffset;
void (*showISDemandOnlyInterstitial)(void *_instance, monoString *instanceId);
DWORD isISDemandOnlyInterstitialReadyOffset;
bool (*isISDemandOnlyInterstitialReady)(void *_instance, monoString *instanceId);
DWORD showOfferwallOffset;
void (*showOfferwall)(void *_instance);
DWORD showOfferwall1Offset;
void (*showOfferwall1)(void *_instance, monoString *placementName);
DWORD getOfferwallCreditsOffset;
void (*getOfferwallCredits)(void *_instance);
DWORD isOfferwallAvailableOffset;
bool (*isOfferwallAvailable)(void *_instance);
DWORD loadBannerOffset;
void (*loadBanner)(void *_instance, void *size, int position);
DWORD loadBanner1Offset;
void (*loadBanner1)(void *_instance, void *size, int position, monoString *placementName);
DWORD destroyBannerOffset;
void (*destroyBanner)(void *_instance);
DWORD displayBannerOffset;
void (*displayBanner)(void *_instance);
DWORD hideBannerOffset;
void (*hideBanner)(void *_instance);
DWORD isBannerPlacementCappedOffset;
bool (*isBannerPlacementCapped)(void *_instance, monoString *placementName);
DWORD setSegmentOffset;
void (*setSegment)(void *_instance, void *segment);
DWORD setConsentOffset;
void (*setConsent)(void *_instance, bool consent);
DWORD loadConsentViewWithTypeOffset;
void (*loadConsentViewWithType)(void *_instance, monoString *consentViewType);
DWORD showConsentViewWithTypeOffset;
void (*showConsentViewWithType)(void *_instance, monoString *consentViewType);
}UnsupportedPlatformAgent;
struct CFX_AutoStopLoopedEffect {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}CFX_AutoStopLoopedEffect;
struct CFX_Demo_RandomDir {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}CFX_Demo_RandomDir;
struct CFX_Demo_RotateCamera {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}CFX_Demo_RotateCamera;
struct CFX_Demo_Translate {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}CFX_Demo_Translate;
struct WFX_Demo {
DWORD OnMouseDownOffset;
void (*OnMouseDown)(void *_instance);
DWORD spawnParticleOffset;
void *(*spawnParticle)(void *_instance);
DWORD SetActiveCrossVersionsOffset;
void (*SetActiveCrossVersions)(void *_instance, void *obj, bool active);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD RandomSpawnsCoroutineOffset;
void *(*RandomSpawnsCoroutine)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD prevTextureOffset;
void (*prevTexture)(void *_instance);
DWORD nextTextureOffset;
void (*nextTexture)(void *_instance);
DWORD selectMaterialOffset;
void (*selectMaterial)(void *_instance);
DWORD prevParticleOffset;
void (*prevParticle)(void *_instance);
DWORD nextParticleOffset;
void (*nextParticle)(void *_instance);
DWORD showHideStuffOffset;
void (*showHideStuff)(void *_instance);
}WFX_Demo;
struct WFX_Demo_DeleteAfterDelay {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}WFX_Demo_DeleteAfterDelay;
struct WFX_Demo_New {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnToggleGroundOffset;
void (*OnToggleGround)(void *_instance);
DWORD OnToggleCameraOffset;
void (*OnToggleCamera)(void *_instance);
DWORD OnToggleSlowMoOffset;
void (*OnToggleSlowMo)(void *_instance);
DWORD OnPreviousEffectOffset;
void (*OnPreviousEffect)(void *_instance);
DWORD OnNextEffectOffset;
void (*OnNextEffect)(void *_instance);
DWORD UpdateUIOffset;
void (*UpdateUI)(void *_instance);
DWORD spawnParticleOffset;
void *(*spawnParticle)(void *_instance);
DWORD CheckForDeletedParticlesOffset;
void *(*CheckForDeletedParticles)(void *_instance);
DWORD prevParticleOffset;
void (*prevParticle)(void *_instance);
DWORD nextParticleOffset;
void (*nextParticle)(void *_instance);
DWORD destroyParticlesOffset;
void (*destroyParticles)(void *_instance);
DWORD prevTextureOffset;
void (*prevTexture)(void *_instance);
DWORD nextTextureOffset;
void (*nextTexture)(void *_instance);
DWORD selectMaterialOffset;
void (*selectMaterial)(void *_instance);
DWORD showHideStuffOffset;
void (*showHideStuff)(void *_instance);
}WFX_Demo_New;
struct WFX_Demo_RandomDir {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}WFX_Demo_RandomDir;
struct WFX_Demo_Wall {
DWORD OnMouseDownOffset;
void (*OnMouseDown)(void *_instance);
}WFX_Demo_Wall;
struct CFX_Demo_GTButton {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnClickOffset;
void (*OnClick)(void *_instance);
}CFX_Demo_GTButton;
struct CFX_Demo_GTToggle {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnClickOffset;
void (*OnClick)(void *_instance);
DWORD UpdateTextureOffset;
void (*UpdateTexture)(void *_instance);
}CFX_Demo_GTToggle;
struct CFX_AutoDestructShuriken {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD CheckIfAliveOffset;
void *(*CheckIfAlive)(void *_instance);
}CFX_AutoDestructShuriken;
struct CFX_LightIntensityFade {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}CFX_LightIntensityFade;
struct WFX_BulletHoleDecal {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD holeUpdateOffset;
void *(*holeUpdate)(void *_instance);
}WFX_BulletHoleDecal;
struct WFX_LightFlicker {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FlickerOffset;
void *(*Flicker)(void *_instance);
}WFX_LightFlicker;
struct CFX_SpawnSystem {
DWORD GetNextObjectOffset;
void *(*GetNextObject)(void *sourceObj, bool activateObject);
DWORD PreloadObjectOffset;
void (*PreloadObject)(void *sourceObj, int poolSize);
DWORD UnloadObjectsOffset;
void (*UnloadObjects)(void *sourceObj);
DWORD get_AllObjectsLoadedOffset;
bool (*get_AllObjectsLoaded)();
DWORD addObjectToPoolOffset;
void (*addObjectToPool)(void *_instance, void *sourceObject, int number);
DWORD removeObjectsFromPoolOffset;
void (*removeObjectsFromPool)(void *_instance, void *sourceObject);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
}CFX_SpawnSystem;
struct TestScriptKTGC {
}TestScriptKTGC;
struct CustomMatchMakerUI {
DWORD set_ShowingRoomsOffset;
void (*set_ShowingRooms)(void *_instance, bool value);
DWORD ProcessSceneLoadOffset;
void (*ProcessSceneLoad)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetSelectedMatchNameOffset;
void (*SetSelectedMatchName)(void *_instance, void *n);
DWORD ResumeMusicOffset;
void (*ResumeMusic)(void *_instance);
DWORD OnJoinedLobbyOffset;
void (*OnJoinedLobby)(void *_instance);
DWORD QuickPlayCurrentLoadingModeOffset;
void (*QuickPlayCurrentLoadingMode)(void *_instance);
DWORD OnConnectedToPhotonOffset;
void (*OnConnectedToPhoton)(void *_instance);
DWORD ShowLeaderboardsOffset;
void (*ShowLeaderboards)(void *_instance);
DWORD OnJoinedRoomOffset;
void (*OnJoinedRoom)(void *_instance);
DWORD ConnectToPhotonOffset;
void (*ConnectToPhoton)(void *_instance);
DWORD HandleNoInternetOffset;
void (*HandleNoInternet)(void *_instance);
DWORD SelectRegionOffset;
void (*SelectRegion)(void *_instance, int gameServer);
DWORD SetServerVisuallyOffset;
void (*SetServerVisually)(void *_instance, int gameServer);
DWORD BanPlayerOffset;
void (*BanPlayer)(void *_instance);
DWORD LoadEventInfoOffset;
void (*LoadEventInfo)(void *_instance);
DWORD CheckIfOverpoweredOffset;
void (*CheckIfOverpowered)(void *_instance);
DWORD GetPromotionalMultipliersOffset;
void (*GetPromotionalMultipliers)(void *_instance);
DWORD CheckIfModOffset;
void (*CheckIfMod)(void *_instance);
DWORD CheckIfBannedOrMutedOffset;
void (*CheckIfBannedOrMuted)(void *_instance, monoString *_type);
DWORD UnbanPlayerOffset;
void (*UnbanPlayer)(void *_instance);
DWORD ToggleMuteOffset;
void (*ToggleMute)(void *_instance, bool _isMuted);
DWORD ReturnToMainMenuOffset;
void (*ReturnToMainMenu)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD CheckIfAlreadyBannedOffset;
void (*CheckIfAlreadyBanned)(void *_instance);
DWORD setMapOffset;
void (*setMap)(void *_instance, int id);
DWORD setMapFilterOffset;
void (*setMapFilter)(void *_instance, int id);
DWORD SetGunGamePresetOffset;
void (*SetGunGamePreset)(void *_instance, int id);
DWORD setModeOffset;
void (*setMode)(void *_instance);
DWORD setMode1Offset;
void (*setMode1)(void *_instance, int id);
DWORD setModeFilterOffset;
void (*setModeFilter)(void *_instance, int id);
DWORD SetScoreLimitOffset;
void (*SetScoreLimit)(void *_instance, float limit);
DWORD SetMaxPingOffset;
void (*SetMaxPing)(void *_instance, float value);
DWORD SetMaxPlayersOffset;
void (*SetMaxPlayers)(void *_instance, float players);
DWORD setMatchNameOffset;
void (*setMatchName)(void *_instance, monoString *name);
DWORD AppendRandomMatchNumberOffset;
void (*AppendRandomMatchNumber)(void *_instance);
DWORD SetMatchNameFilterOffset;
void (*SetMatchNameFilter)(void *_instance, monoString *name);
DWORD SetMatchPasswordOffset;
void (*SetMatchPassword)(void *_instance, monoString *pass);
DWORD QuickPlayOffset;
void (*QuickPlay)(void *_instance, monoString *mode);
DWORD LoadLoadoutOffset;
void (*LoadLoadout)(void *_instance);
DWORD disableMatchMakerButtonsOffset;
void (*disableMatchMakerButtons)(void *_instance);
DWORD JoinMatchOffset;
void (*JoinMatch)(void *_instance);
DWORD JoinMatchWithCoroutineOffset;
void *(*JoinMatchWithCoroutine)(void *_instance);
DWORD EnoughRAMOffset;
bool (*EnoughRAM)();
DWORD SetTypedPasswordOffset;
void (*SetTypedPassword)(void *_instance, monoString *p);
DWORD TryPasswordOffset;
void (*TryPassword)(void *_instance);
DWORD PromptPasswordOffset;
void (*PromptPassword)(void *_instance);
DWORD CancelTryingOffset;
void (*CancelTrying)(void *_instance);
DWORD FindMatchOffset;
void (*FindMatch)(void *_instance, bool automatic);
DWORD SetTextAlphaOffset;
void (*SetTextAlpha)(void *_instance, void *text, float alpha);
DWORD numberOfSetBitsOffset;
int (*numberOfSetBits)(void *_instance, int i);
DWORD ToggleHardcoreOffset;
void (*ToggleHardcore)(void *_instance, bool isOn);
DWORD ToggleSpectateForModsOffset;
void (*ToggleSpectateForMods)(void *_instance, bool isOn);
DWORD WhatIsHardcoreOffset;
void (*WhatIsHardcore)(void *_instance);
DWORD WhatIsSpectateForModsOnlyOffset;
void (*WhatIsSpectateForModsOnly)(void *_instance);
DWORD CreateMatchOffset;
void (*CreateMatch)(void *_instance);
DWORD CreateMatchWithCoroutineOffset;
void *(*CreateMatchWithCoroutine)(void *_instance);
DWORD HideCustomMatchErrorOffset;
void *(*HideCustomMatchError)(void *_instance, float time);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}CustomMatchMakerUI;
struct FeatureConfig {
DWORD InitializeOffset;
void (*Initialize)(void *onComplete);
DWORD GetFeatureConfigOffset;
DWORD OnServerSelectedOffset;
void (*OnServerSelected)(monoString *server);
DWORD GetRegionOffset;
monoString *(*GetRegion)();
}FeatureConfig;
struct RoomJoinConfig {
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD LegacyRoomSelectionEnabledOffset;
bool (*LegacyRoomSelectionEnabled)(void *_instance);
}RoomJoinConfig;
struct WallhackAntiCheatConfig {
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD WallhackAnticheatEnabledOffset;
bool (*WallhackAnticheatEnabled)(void *_instance);
}WallhackAntiCheatConfig;
struct StoreAntihackConfig {
DWORD InitOffset;
void (*Init)(void *_instance);
}StoreAntihackConfig;
struct FTUEConfig {
DWORD get_FTUEEnabledOffset;
bool (*get_FTUEEnabled)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
}FTUEConfig;
struct IronsourceConfig {
DWORD InitOffset;
void (*Init)(void *_instance);
}IronsourceConfig;
struct MessageConfig {
DWORD InitOffset;
void (*Init)(void *_instance);
}MessageConfig;
struct AnticheatSystemConfig {
DWORD InitOffset;
void (*Init)(void *_instance);
}AnticheatSystemConfig;
struct CasesConfig {
DWORD InitOffset;
void (*Init)(void *_instance);
}CasesConfig;
struct CrazyAdsConfig {
DWORD InitOffset;
void (*Init)(void *_instance);
}CrazyAdsConfig;
struct FriendsSystemConfig {
DWORD set_isEnableOffset;
void (*set_isEnable)(void *_instance, bool value);
DWORD get_isEnableOffset;
bool (*get_isEnable)(void *_instance);
DWORD set_alreadyInitOffset;
void (*set_alreadyInit)(void *_instance, bool value);
DWORD get_alreadyInitOffset;
bool (*get_alreadyInit)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
}FriendsSystemConfig;
struct OfferWallConfig {
DWORD InitOffset;
void (*Init)(void *_instance);
}OfferWallConfig;
struct DiscountedOffersConfig {
DWORD set_isEnableOffset;
void (*set_isEnable)(void *_instance, bool value);
DWORD get_isEnableOffset;
bool (*get_isEnable)(void *_instance);
DWORD set_DescriptionOffset;
void (*set_Description)(void *_instance, monoString *value);
DWORD get_DescriptionOffset;
monoString *(*get_Description)(void *_instance);
DWORD set_EndDateOffset;
void (*set_EndDate)(void *_instance, monoString *value);
DWORD get_EndDateOffset;
monoString *(*get_EndDate)(void *_instance);
DWORD set_InitializedOffset;
void (*set_Initialized)(void *_instance, bool value);
DWORD get_InitializedOffset;
bool (*get_Initialized)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
}DiscountedOffersConfig;
struct JoinMatchButton {
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}JoinMatchButton;
struct MatchMakerButton {
}MatchMakerButton;
struct RoomRankComparer {
DWORD CompareOffset;
int (*Compare)(void *_instance, void *a, void *b);
}RoomRankComparer;
struct RoomJoinUtil {
DWORD GetLocalPlayerKDOffset;
float (*GetLocalPlayerKD)();
DWORD GetLocalPlayerRankOffset;
int (*GetLocalPlayerRank)();
DWORD IsDefaultRoomOffset;
bool (*IsDefaultRoom)(monoString *roomName);
DWORD LogOffset;
void (*Log)(monoString *use, monoString *message);
DWORD ScreenLogOffset;
void (*ScreenLog)(monoString *logId, monoString *use, monoString *message);
}RoomJoinUtil;
struct ShowAllowedWeaponsButton {
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}ShowAllowedWeaponsButton;
struct SmoothCameraOrbit {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD ClampAngleOffset;
float (*ClampAngle)(float angle, float min, float max);
}SmoothCameraOrbit;
struct CustomObjectCombineTool {
}CustomObjectCombineTool;
struct animateOffset {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}animateOffset;
struct animatedtexture {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}animatedtexture;
struct BlurEffect {
DWORD get_materialOffset;
void *(*get_material)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FourTapConeOffset;
void (*FourTapCone)(void *_instance, void *source, void *dest, int iteration);
DWORD DownSample4xOffset;
void (*DownSample4x)(void *_instance, void *source, void *dest);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}BlurEffect;
struct ColorCorrectionEffect {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}ColorCorrectionEffect;
struct ContrastStretchEffect {
DWORD get_materialLumOffset;
void *(*get_materialLum)(void *_instance);
DWORD get_materialReduceOffset;
void *(*get_materialReduce)(void *_instance);
DWORD get_materialAdaptOffset;
void *(*get_materialAdapt)(void *_instance);
DWORD get_materialApplyOffset;
void *(*get_materialApply)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD CalculateAdaptationOffset;
void (*CalculateAdaptation)(void *_instance, void *curTexture);
}ContrastStretchEffect;
struct EdgeDetectEffect {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}EdgeDetectEffect;
struct GlowEffect {
DWORD get_compositeMaterialOffset;
void *(*get_compositeMaterial)(void *_instance);
DWORD get_blurMaterialOffset;
void *(*get_blurMaterial)(void *_instance);
DWORD get_downsampleMaterialOffset;
void *(*get_downsampleMaterial)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FourTapConeOffset;
void (*FourTapCone)(void *_instance, void *source, void *dest, int iteration);
DWORD DownSample4xOffset;
void (*DownSample4x)(void *_instance, void *source, void *dest);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD BlitGlowOffset;
void (*BlitGlow)(void *_instance, void *source, void *dest);
}GlowEffect;
struct GrayscaleEffect {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}GrayscaleEffect;
struct ImageEffectBase {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD get_materialOffset;
void *(*get_material)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
}ImageEffectBase;
struct ImageEffects {
DWORD RenderDistortionOffset;
void (*RenderDistortion)(void *material, void *source, void *destination, float angle, Vector2 center, Vector2 radius);
DWORD BlitOffset;
void (*Blit)(void *source, void *dest);
DWORD BlitWithMaterialOffset;
void (*BlitWithMaterial)(void *material, void *source, void *dest);
}ImageEffects;
struct MotionBlur {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}MotionBlur;
struct NoiseEffect {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD get_materialOffset;
void *(*get_material)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD SanitizeParametersOffset;
void (*SanitizeParameters)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}NoiseEffect;
struct SSAOEffect {
DWORD CreateMaterialOffset;
void *(*CreateMaterial)(void *shader);
DWORD DestroyMaterialOffset;
void (*DestroyMaterial)(void *mat);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD CreateMaterialsOffset;
void (*CreateMaterials)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}SSAOEffect;
struct SepiaToneEffect {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}SepiaToneEffect;
struct TwirlEffect {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}TwirlEffect;
struct VortexEffect {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}VortexEffect;
struct AtmoXfade {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnTriggerEnterOffset;
void (*OnTriggerEnter)(void *_instance, void *c);
DWORD OnTriggerExitOffset;
void (*OnTriggerExit)(void *_instance, void *c);
DWORD FadeDarkOffset;
void *(*FadeDark)(void *_instance);
DWORD FadeBrightOffset;
void *(*FadeBright)(void *_instance);
}AtmoXfade;
struct CullingHelper_Abandoned {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetupCullingOffset;
void (*SetupCulling)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}CullingHelper_Abandoned;
struct CullingHelper_Dam {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetupCullingOffset;
void (*SetupCulling)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}CullingHelper_Dam;
struct SpriteSheet {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}SpriteSheet;
struct SimpleDoorTrigger {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnTriggerEnterOffset;
void (*OnTriggerEnter)(void *_instance, void *other);
DWORD OnTriggerExitOffset;
void (*OnTriggerExit)(void *_instance, void *other);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD HandleDoorRotationOffset;
void (*HandleDoorRotation)(void *_instance);
DWORD HandleUserInputOffset;
void (*HandleUserInput)(void *_instance);
}SimpleDoorTrigger;
struct QT_DistanceDropout {
DWORD FixedUpdateOffset;
void (*FixedUpdate)(void *_instance);
}QT_DistanceDropout;
struct QT_TrafficLight {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}QT_TrafficLight;
struct QT_TrafficLightController {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD DoLightLoopOffset;
void *(*DoLightLoop)(void *_instance);
DWORD DoBlinkLoopOffset;
void *(*DoBlinkLoop)(void *_instance);
DWORD UpdateIndicesOffset;
void (*UpdateIndices)(void *_instance);
DWORD SetupInitialBulbsOffset;
void (*SetupInitialBulbs)(void *_instance);
DWORD ResetAllOffset;
void (*ResetAll)(void *_instance);
DWORD ResetGreenOffset;
void (*ResetGreen)(void *_instance);
DWORD ResetRedOffset;
void (*ResetRed)(void *_instance);
DWORD ResetBlinkingOffset;
void (*ResetBlinking)(void *_instance);
DWORD DisplayLinksOffset;
void (*DisplayLinks)(void *_instance);
DWORD HelpClickOffset;
void (*HelpClick)(void *_instance);
}QT_TrafficLightController;
struct QT_MeshCombineUtility {
}QT_MeshCombineUtility;
struct WallbangObject {
}WallbangObject;
struct DirtyLensFlare {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD get_materialOffset;
void *(*get_material)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD FourTapConeOffset;
void (*FourTapCone)(void *_instance, void *source, void *dest, int iteration, void *blurMtl);
DWORD ApplyBlurPassOffset;
void (*ApplyBlurPass)(void *_instance, void *source, void *destination, void *blurMtl);
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}DirtyLensFlare;
struct BakeTexturesAtRuntime {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD OnBuiltAtlasesSuccessOffset;
void (*OnBuiltAtlasesSuccess)(void *_instance);
}BakeTexturesAtRuntime;
struct MB_BatchPrepareObjectsForDynamicBatchingDescription {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}MB_BatchPrepareObjectsForDynamicBatchingDescription;
struct MB_SwapShirts {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}MB_SwapShirts;
struct MB_PrepareObjectsForDynamicBatchingDescription {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}MB_PrepareObjectsForDynamicBatchingDescription;
struct MB_DynamicAddDeleteExample {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD largeNumberOffset;
void *(*largeNumber)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}MB_DynamicAddDeleteExample;
struct MB_Example {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}MB_Example;
struct MB_ExampleMover {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}MB_ExampleMover;
struct MB_ExampleSkinnedMeshDescription {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}MB_ExampleSkinnedMeshDescription;
struct MB_SkinnedMeshSceneController {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD SearchHierarchyForBoneOffset;
void *(*SearchHierarchyForBone)(void *_instance, void *current, monoString *name);
}MB_SkinnedMeshSceneController;
struct MB_AtlasesAndRects {
}MB_AtlasesAndRects;
struct MB_MultiMaterial {
}MB_MultiMaterial;
struct MB_MaterialAndUVRect {
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
}MB_MaterialAndUVRect;
struct MB2_TextureBakeResults {
DWORD CreateForMaterialsOnRendererOffset;
void *(*CreateForMaterialsOnRenderer)(void *r);
DWORD ContainsMaterialOffset;
bool (*ContainsMaterial)(void *_instance, void *m);
DWORD GetDescriptionOffset;
monoString *(*GetDescription)(void *_instance);
}MB2_TextureBakeResults;
struct MB2_UpdateSkinnedMeshBoundsFromBones {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}MB2_UpdateSkinnedMeshBoundsFromBones;
struct MB2_UpdateSkinnedMeshBoundsFromBounds {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}MB2_UpdateSkinnedMeshBoundsFromBounds;
struct MB3_BatchPrefabBaker {
}MB3_BatchPrefabBaker;
struct MB3_BoneWeightCopier {
}MB3_BoneWeightCopier;
struct MB3_DisableHiddenAnimations {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnBecameVisibleOffset;
void (*OnBecameVisible)(void *_instance);
DWORD OnBecameInvisibleOffset;
void (*OnBecameInvisible)(void *_instance);
}MB3_DisableHiddenAnimations;
struct MB3_MeshBaker {
DWORD get_meshCombinerOffset;
void *(*get_meshCombiner)(void *_instance);
DWORD BuildSceneMeshObjectOffset;
void (*BuildSceneMeshObject)(void *_instance);
DWORD ApplyShowHideOffset;
void (*ApplyShowHide)(void *_instance);
}MB3_MeshBaker;
struct MB3_MeshBakerCommon {
DWORD get_textureBakeResultsOffset;
void *(*get_textureBakeResults)(void *_instance);
DWORD set_textureBakeResultsOffset;
void (*set_textureBakeResults)(void *_instance, void *value);
DWORD GetObjectsToCombineOffset;
DWORD EnableDisableSourceObjectRenderersOffset;
void (*EnableDisableSourceObjectRenderers)(void *_instance, bool show);
DWORD ClearMeshOffset;
void (*ClearMesh)(void *_instance);
DWORD DestroyMeshOffset;
void (*DestroyMesh)(void *_instance);
DWORD DestroyMeshEditorOffset;
void (*DestroyMeshEditor)(void *_instance, void *editorMethods);
DWORD GetNumObjectsInCombinedOffset;
int (*GetNumObjectsInCombined)(void *_instance);
DWORD GetNumVerticesForOffset;
int (*GetNumVerticesFor)(void *_instance, void *go);
DWORD GetTextureBakerOffset;
void *(*GetTextureBaker)(void *_instance);
DWORD ApplyOffset;
void (*Apply)(void *_instance, void *uv2GenerationMethod);
DWORD Apply1Offset;
void (*Apply1)(void *_instance, bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones, void *uv2GenerationMethod);
DWORD CombinedMeshContainsOffset;
bool (*CombinedMeshContains)(void *_instance, void *go);
DWORD UpdateSkinnedMeshApproximateBoundsOffset;
void (*UpdateSkinnedMeshApproximateBounds)(void *_instance);
DWORD UpdateSkinnedMeshApproximateBoundsFromBonesOffset;
void (*UpdateSkinnedMeshApproximateBoundsFromBones)(void *_instance);
DWORD UpdateSkinnedMeshApproximateBoundsFromBoundsOffset;
void (*UpdateSkinnedMeshApproximateBoundsFromBounds)(void *_instance);
DWORD _ValidateForUpdateSkinnedMeshBoundsOffset;
bool (*_ValidateForUpdateSkinnedMeshBounds)(void *_instance);
}MB3_MeshBakerCommon;
struct MB3_MeshBakerGrouper {
DWORD OnDrawGizmosSelectedOffset;
void (*OnDrawGizmosSelected)(void *_instance);
DWORD DrawCircleOffset;
void (*DrawCircle)(Vector3 axis, Vector3 center, float radius, int subdiv);
}MB3_MeshBakerGrouper;
struct MB3_MeshBakerGrouperCore {
DWORD DoClusteringOffset;
void (*DoClustering)(void *_instance, void *tb);
}MB3_MeshBakerGrouperCore;
struct MB3_MeshBakerRoot {
DWORD GetObjectsToCombineOffset;
DWORD DoCombinedValidateOffset;
bool (*DoCombinedValidate)(void *mom, int objToCombineType, void *editorMethods, int validationLevel);
}MB3_MeshBakerRoot;
struct MB3_MultiMeshBaker {
DWORD get_meshCombinerOffset;
void *(*get_meshCombiner)(void *_instance);
}MB3_MultiMeshBaker;
struct MB3_TextureBaker {
DWORD get_textureBakeResultsOffset;
void *(*get_textureBakeResults)(void *_instance);
DWORD set_textureBakeResultsOffset;
void (*set_textureBakeResults)(void *_instance, void *value);
DWORD get_atlasPaddingOffset;
int (*get_atlasPadding)(void *_instance);
DWORD set_atlasPaddingOffset;
void (*set_atlasPadding)(void *_instance, int value);
DWORD get_maxAtlasSizeOffset;
int (*get_maxAtlasSize)(void *_instance);
DWORD set_maxAtlasSizeOffset;
void (*set_maxAtlasSize)(void *_instance, int value);
DWORD get_resizePowerOfTwoTexturesOffset;
bool (*get_resizePowerOfTwoTextures)(void *_instance);
DWORD set_resizePowerOfTwoTexturesOffset;
void (*set_resizePowerOfTwoTextures)(void *_instance, bool value);
DWORD get_fixOutOfBoundsUVsOffset;
bool (*get_fixOutOfBoundsUVs)(void *_instance);
DWORD set_fixOutOfBoundsUVsOffset;
void (*set_fixOutOfBoundsUVs)(void *_instance, bool value);
DWORD get_maxTilingBakeSizeOffset;
int (*get_maxTilingBakeSize)(void *_instance);
DWORD set_maxTilingBakeSizeOffset;
void (*set_maxTilingBakeSize)(void *_instance, int value);
DWORD get_packingAlgorithmOffset;
int(*get_packingAlgorithm)(void *_instance);
DWORD set_packingAlgorithmOffset;
void (*set_packingAlgorithm)(void *_instance, int value);
DWORD get_meshBakerTexturePackerForcePowerOfTwoOffset;
bool (*get_meshBakerTexturePackerForcePowerOfTwo)(void *_instance);
DWORD set_meshBakerTexturePackerForcePowerOfTwoOffset;
void (*set_meshBakerTexturePackerForcePowerOfTwo)(void *_instance, bool value);
DWORD get_customShaderPropertiesOffset;
DWORD get_customShaderPropNamesOffset;
DWORD get_doMultiMaterialOffset;
bool (*get_doMultiMaterial)(void *_instance);
DWORD set_doMultiMaterialOffset;
void (*set_doMultiMaterial)(void *_instance, bool value);
DWORD get_resultMaterialOffset;
void *(*get_resultMaterial)(void *_instance);
DWORD set_resultMaterialOffset;
void (*set_resultMaterial)(void *_instance, void *value);
DWORD get_considerNonTexturePropertiesOffset;
bool (*get_considerNonTextureProperties)(void *_instance);
DWORD set_considerNonTexturePropertiesOffset;
void (*set_considerNonTextureProperties)(void *_instance, bool value);
DWORD get_doSuggestTreatmentOffset;
bool (*get_doSuggestTreatment)(void *_instance);
DWORD set_doSuggestTreatmentOffset;
void (*set_doSuggestTreatment)(void *_instance, bool value);
DWORD GetObjectsToCombineOffset;
DWORD CreateAtlasesOffset;
DWORD CreateAtlasesCoroutineOffset;
void *(*CreateAtlasesCoroutine)(void *_instance, void *progressInfo, void *coroutineResult, bool saveAtlasesAsAssets, void *editorMethods, float maxTimePerFrame);
DWORD CreateAtlases1Offset;
DWORD unpackMat2RectMapOffset;
void (*unpackMat2RectMap)(void *_instance, void *tbr);
DWORD ConfigureNewMaterialToMatchOldOffset;
void (*ConfigureNewMaterialToMatchOld)(void *newMat, void *original);
DWORD _ValidateResultMaterialsOffset;
bool (*_ValidateResultMaterials)(void *_instance);
}MB3_TextureBaker;
struct MB2_TestShowHide {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}MB2_TestShowHide;
struct MB2_TestUpdate {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
}MB2_TestUpdate;
struct MB3_TestAddingRemovingSkinnedMeshes {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD TestScriptOffset;
void *(*TestScript)(void *_instance);
}MB3_TestAddingRemovingSkinnedMeshes;
struct MB3_TestBakeAllWithSameMaterial {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD testCombineOffset;
void (*testCombine)(void *_instance);
}MB3_TestBakeAllWithSameMaterial;
struct MB3_TestRenderTextureTestHarness {
DWORD Create3x3TexOffset;
void *(*Create3x3Tex)(void *_instance);
DWORD Create3x3CloneOffset;
void *(*Create3x3Clone)(void *_instance);
DWORD TestRenderOffset;
void (*TestRender)(void *input, void *output);
}MB3_TestRenderTextureTestHarness;
struct MB_TextureCombinerRenderTexture {
DWORD OnRenderObjectOffset;
void (*OnRenderObject)(void *_instance);
DWORD ConvertNormalFormatFromUnity_ToStandardOffset;
int(*ConvertNormalFormatFromUnity_ToStandard)(void *_instance, int c);
DWORD IsOpenGLOffset;
bool (*IsOpenGL)(void *_instance);
DWORD CopyScaledAndTiledToAtlasOffset;
void (*CopyScaledAndTiledToAtlas)(void *_instance, void *texSet, void *source, Vector2 obUVoffset, Vector2 obUVscale, int rec, void *texturePropertyName, void *resultMatTexBlender);
DWORD _printTextureOffset;
void (*_printTexture)(void *_instance, void *t);
}MB_TextureCombinerRenderTexture;
struct MB3_AtlasPackerRenderTexture {
DWORD OnRenderAtlasOffset;
void *(*OnRenderAtlas)(void *_instance, void *combiner);
DWORD OnRenderObjectOffset;
void (*OnRenderObject)(void *_instance);
}MB3_AtlasPackerRenderTexture;
struct Hull {
DWORD ImpactOffset;
void (*Impact)(void *_instance, Vector3 impactPoint, Vector3 impactForce, int impactShape, int impactType);
DWORD AdjustVerticesForImpactOffset;
void (*AdjustVerticesForImpact)(void *_instance, Vector3 impactPoint, Vector3 impactForce, int impactShape, int impactType);
DWORD FixUpSubHullsOffset;
void (*FixUpSubHulls)(void *_instance, Vector3 impactForce);
DWORD GetIntersectedTriangleIndicesOffset;
DWORD IsTriangleIndexIntersectedOffset;
bool (*IsTriangleIndexIntersected)(void *_instance, int triangleIndex, Vector3 impactPoint, float impactRadius);
DWORD BreakDownTriangleOffset;
DWORD GetAreaOfTriangleOffset;
float (*GetAreaOfTriangle)(void *_instance, int triangleIndex);
DWORD IsEmptyOffset;
bool (*IsEmpty)(void *_instance);
DWORD GetMeshOffset;
void *(*GetMesh)(void *_instance);
DWORD GetSubHullMeshOffset;
void *(*GetSubHullMesh)(void *_instance);
}Hull;
struct SubHull {
DWORD CalculateEdgesOffset;
void (*CalculateEdges)(void *_instance);
DWORD IsEmptyOffset;
bool (*IsEmpty)(void *_instance);
DWORD GetMeshOffset;
void *(*GetMesh)(void *_instance);
}SubHull;
struct Meshinator {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FixedUpdateOffset;
void (*FixedUpdate)(void *_instance);
DWORD OnCollisionEnterOffset;
void (*OnCollisionEnter)(void *_instance, void *collision);
DWORD OnCollisionExitOffset;
void (*OnCollisionExit)(void *_instance);
DWORD DelayCollisionsOffset;
void (*DelayCollisions)(void *_instance);
DWORD ImpactOffset;
void (*Impact)(void *_instance, Vector3 point, Vector3 force, int impactShape, int impactType);
DWORD InitializeHullOffset;
void (*InitializeHull)(void *_instance);
DWORD CanDoImpactOffset;
bool (*CanDoImpact)(void *_instance, Vector3 point, Vector3 force);
}Meshinator;
struct MainCamera {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FixedUpdateOffset;
void (*FixedUpdate)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD FocusCameraOnTransformOffset;
void (*FocusCameraOnTransform)(void *_instance, void *transform, float panDuration);
DWORD CameraLerpCoroutineOffset;
void *(*CameraLerpCoroutine)(void *_instance, Vector3 endPosition, float startTime, float panDuration);
}MainCamera;
struct ThreadManager {
DWORD get_CurrentOffset;
void *(*get_Current)();
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitializeOffset;
void (*Initialize)();
DWORD QueueOnMainThreadOffset;
void (*QueueOnMainThread)(void *action);
DWORD QueueOnMainThread1Offset;
void (*QueueOnMainThread1)(void *action, float time);
DWORD RunAsyncOffset;
void *(*RunAsync)(void *a);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}ThreadManager;
struct WaterMovement {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}WaterMovement;
struct CameraDefault {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD HandlePlayerInputOffset;
void (*HandlePlayerInput)(void *_instance);
DWORD CalculateDesiredPositionOffset;
void (*CalculateDesiredPosition)(void *_instance);
DWORD CalculatePositionOffset;
Vector3 (*CalculatePosition)(void *_instance, float rotationX, float rotationY, float distance);
DWORD UpdatePositionOffset;
void (*UpdatePosition)(void *_instance);
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD ClampAngleOffset;
float (*ClampAngle)(void *_instance, float angle, float min, float max);
}CameraDefault;
struct AxleInfo {
}AxleInfo;
struct WheelInfo {
}WheelInfo;
struct Turbine {
DWORD MainOffset;
void (*Main)(void *_instance, void *engine);
}Turbine;
struct Engine {
DWORD MainOffset;
void (*Main)(void *_instance, void *controller);
}Engine;
struct Transmission {
DWORD MainOffset;
void (*Main)(void *_instance, void *controller);
DWORD ShiftUpOffset;
bool (*ShiftUp)(void *_instance);
DWORD ShiftDownOffset;
bool (*ShiftDown)(void *_instance);
}Transmission;
struct Sound {
DWORD MainOffset;
void (*Main)(void *_instance, void *controller);
}Sound;
struct Lighting {
DWORD MainOffset;
void (*Main)(void *_instance, void *controller);
}Lighting;
struct Smoke {
DWORD MainOffset;
void (*Main)(void *_instance, void *controller);
}Smoke;
struct Inputs {
DWORD MainOffset;
void (*Main)(void *_instance, void *controller);
}Inputs;
struct CarController {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FixedUpdateOffset;
void (*FixedUpdate)(void *_instance);
DWORD UpdateWheelOffset;
void (*UpdateWheel)(void *_instance, void *wheel);
DWORD DetectWheelSlipOffset;
bool (*DetectWheelSlip)(void *_instance, void *wheel, float speed);
DWORD countPoweredAxlesOffset;
int (*countPoweredAxles)(void *_instance);
DWORD ActiveOffset;
void (*Active)(void *_instance, bool state);
}CarController;
struct GUIController {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD InitButtonsOffset;
void (*InitButtons)(void *_instance);
DWORD ToggleAxleOffset;
void (*ToggleAxle)(void *_instance, int nr);
DWORD ToggleAbsOffset;
void (*ToggleAbs)(void *_instance, bool toggle);
DWORD ToggleAwdOffset;
void (*ToggleAwd)(void *_instance, bool toggle);
DWORD SetMeterOffset;
void (*SetMeter)(void *_instance);
DWORD SetSpeedOffset;
void (*SetSpeed)(void *_instance, float currentSpeed);
DWORD SetGearOffset;
void (*SetGear)(void *_instance, int currentGear);
DWORD levelResetOffset;
void (*levelReset)(void *_instance);
DWORD motorToggleOffset;
void (*motorToggle)(void *_instance);
}GUIController;
struct TrailerAxleInfo {
}TrailerAxleInfo;
struct TrailerWheelInfo {
}TrailerWheelInfo;
struct TrailerController {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FixedUpdateOffset;
void (*FixedUpdate)(void *_instance);
DWORD UpdateWheelOffset;
void (*UpdateWheel)(void *_instance, void *wheel);
}TrailerController;
struct VehicleChanger {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}VehicleChanger;
struct AS_CustomInfo {
}AS_CustomInfo;
struct BF_AccountInfo {
}BF_AccountInfo;
struct BF_WeaponInfo {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, int _weapon, int _unlocked, monoString *_cOL, monoString *_aOL, monoString *_sOL, monoString *_bOL, monoString *_c, monoString *_a, monoString *_s, monoString *_b);
}BF_WeaponInfo;
struct BF_ThrowableInfo {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, int _weapon, int _unlockedWeapon);
}BF_ThrowableInfo;
struct AS_CustomInfoMethods {
DWORD CustomInfoOnGUIOffset;
void *(*CustomInfoOnGUI)(void *customInfo);
}AS_CustomInfoMethods;
struct AS_AccountInfo {
}AS_AccountInfo;
struct AS_MySQLFieldMethods {
DWORD ToReadableStringOffset;
monoString *(*ToReadableString)(void *accountInfo);
DWORD DeSerializeCustomInfoOffset;
bool (*DeSerializeCustomInfo)(void *accountInfo);
DWORD SerializeCustomInfoOffset;
bool (*SerializeCustomInfo)(void *accountInfo);
DWORD SetFieldValueOffset;
bool (*SetFieldValue)(void *accountInfo, monoString *fieldKey, monoString *fieldVal);
DWORD GetFieldValueOffset;
monoString *(*GetFieldValue)(void *accountInfo, monoString *fieldKey);
DWORD LogOffset;
void (*Log)(int logType, monoString *msg);
}AS_MySQLFieldMethods;
struct AS_SerializableDictionary {
DWORD GetValueOffset;
monoString *(*GetValue)(void *_instance, monoString *key);
DWORD SetValueOffset;
bool (*SetValue)(void *_instance, monoString *key, monoString *val);
DWORD get_CountOffset;
int (*get_Count)(void *_instance);
DWORD GetIndexOffset;
int (*GetIndex)(void *_instance, monoString *key);
}AS_SerializableDictionary;
struct ObjectDictionaryMethods {
DWORD AddOffset;
bool (*Add)(void *dictionary, monoString *key, monoString *val);
}ObjectDictionaryMethods;
struct AS_AccountManagement {
DWORD LogOffset;
void (*Log)(int logType, monoString *msg);
}AS_AccountManagement;
struct AS_Login {
DWORD LogOffset;
void (*Log)(int logType, monoString *msg);
}AS_Login;
struct AS_ErrorHandling {
DWORD IsAnErrorOffset;
bool (*IsAnError)(monoString *errorString);
DWORD HandleErrorOffset;
monoString *(*HandleError)(monoString *errorString);
DWORD HandlePHPErrorOffset;
monoString *(*HandlePHPError)(monoString *errorString);
DWORD HandleMySQLErrorOffset;
monoString *(*HandleMySQLError)(monoString *errorString);
}AS_ErrorHandling;
struct AS_CoroutineCaller {
DWORD CreateOffset;
void *(*Create)();
}AS_CoroutineCaller;
struct AS_Methods {
DWORD DestroyOffset;
void (*Destroy)(void *caller);
DWORD XmlDeserializeFromString1Offset;
DWORD ToAccountInfoOffset;
void *(*ToAccountInfo)(monoString *_string);
DWORD AccInfoToStringOffset;
monoString *(*AccInfoToString)(void *accInfo, bool checkForOmmit);
DWORD HashOffset;
monoString *(*Hash)(monoString *password);
DWORD RemoveHTMLTagsOffset;
monoString *(*RemoveHTMLTags)(monoString *message);
DWORD AddCredentialsOffset;
void *(*AddCredentials)(void *form);
DWORD AddPreferencesOffset;
void *(*AddPreferences)(void *form);
DWORD UppercaseFirstOffset;
monoString *(*UppercaseFirst)(monoString *s);
DWORD LogOffset;
void (*Log)(int logType, monoString *msg);
DWORD Log1Offset;
void (*Log1)(void *caller, int logType, monoString *msg);
DWORD Log2Offset;
void (*Log2)(monoString *caller, int logType, monoString *msg);
}AS_Methods;
struct AS_Credentials {
DWORD SaveOffset;
void (*Save)();
DWORD get_databaseHostnameOffset;
monoString *(*get_databaseHostname)();
DWORD set_databaseHostnameOffset;
void (*set_databaseHostname)(monoString *value);
DWORD get_databasePortOffset;
monoString *(*get_databasePort)();
DWORD set_databasePortOffset;
void (*set_databasePort)(monoString *value);
DWORD get_databaseUsernameOffset;
monoString *(*get_databaseUsername)();
DWORD set_databaseUsernameOffset;
void (*set_databaseUsername)(monoString *value);
DWORD get_databasePasswordOffset;
monoString *(*get_databasePassword)();
DWORD set_databasePasswordOffset;
void (*set_databasePassword)(monoString *value);
DWORD get_databaseDbNameOffset;
monoString *(*get_databaseDbName)();
DWORD set_databaseDbNameOffset;
void (*set_databaseDbName)(monoString *value);
DWORD get_emailAccountOffset;
monoString *(*get_emailAccount)();
DWORD set_emailAccountOffset;
void (*set_emailAccount)(monoString *value);
DWORD get_phpScriptsLocationOffset;
monoString *(*get_phpScriptsLocation)();
DWORD get_phpFilesLocationOffset;
monoString *(*get_phpFilesLocation)();
DWORD get_phpAssetBundleLocationOffset;
monoString *(*get_phpAssetBundleLocation)();
DWORD get_RemoteValidatorURLOffset;
monoString *(*get_RemoteValidatorURL)();
DWORD get_WillConnectToProdOffset;
bool (*get_WillConnectToProd)();
DWORD EditPhpScriptsLocationOffset;
void (*EditPhpScriptsLocation)(monoString *newLoc);
DWORD LogOffset;
void (*Log)(int logType, monoString *msg);
}AS_Credentials;
struct AS_Preferences {
DWORD get_overrideExistingTablesOffset;
bool (*get_overrideExistingTables)();
DWORD set_overrideExistingTablesOffset;
void (*set_overrideExistingTables)(bool value);
DWORD get_askUserForEmailOffset;
bool (*get_askUserForEmail)();
DWORD set_askUserForEmailOffset;
void (*set_askUserForEmail)(bool value);
DWORD get_requireEmailActivationOffset;
bool (*get_requireEmailActivation)();
DWORD set_requireEmailActivationOffset;
void (*set_requireEmailActivation)(bool value);
DWORD get_enablePasswordRecoveryOffset;
bool (*get_enablePasswordRecovery)();
DWORD set_enablePasswordRecoveryOffset;
void (*set_enablePasswordRecovery)(bool value);
DWORD EditEnablePasswordRecoveryOffset;
void (*EditEnablePasswordRecovery)(bool newVal);
DWORD SaveOffset;
void (*Save)();
DWORD LogOffset;
void (*Log)(int logType, monoString *msg);
}AS_Preferences;
struct AS_MySQLField {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, monoString *_name, int _type, bool _mustBeUnique, bool _isRequired, monoString *_comment);
DWORD ctor2Offset;
void (*ctor2)(void *_instance, monoString *_name, monoString *_stringValue, int _type, bool _mustBeUnique, bool _isRequired, monoString *_comment);
DWORD ctor3Offset;
void (*ctor3)(void *_instance, void *original);
}AS_MySQLField;
struct AS_MySQLFieldHelper {
DWORD FormatAsMySQLString1Offset;
monoString *(*FormatAsMySQLString1)(void *field);
DWORD GetMySQLTypeOffset;
monoString *(*GetMySQLType)(int enumType);
DWORD GetEnumTypeOffset;
int(*GetEnumType)(monoString *mySQLType);
DWORD LogOffset;
void (*Log)(int logType, monoString *msg);
}AS_MySQLFieldHelper;
struct AS_CanvasUI {
DWORD get_LoadoutsOffset;
int (*get_Loadouts)(void *_instance);
DWORD RequestLoadoutOffset;
void (*RequestLoadout)(void *_instance);
DWORD OnLoadoutSuccessOffset;
void (*OnLoadoutSuccess)(void *_instance, monoString *response);
DWORD RefreshLoadoutOffset;
void (*RefreshLoadout)(void *_instance, bool refreshOnLoadoutsValues);
DWORD IsErrorOffset;
bool (*IsError)(void *_instance, void *request);
DWORD OnCustomizationDataCallbackOffset;
void (*OnCustomizationDataCallback)(void *_instance, bool success, void *data);
DWORD OnSuccessfulLoginOffset;
bool (*OnSuccessfulLogin)(void *_instance, int id, bool ui);
DWORD RefreshGoldFromBackendOffset;
void (*RefreshGoldFromBackend)(void *_instance);
DWORD UploadUnlockedCharacterCamosOffset;
void (*UploadUnlockedCharacterCamos)(void *_instance);
DWORD UploadUnlockedCamosOffset;
void (*UploadUnlockedCamos)(void *_instance, void *weaponInfo, int weaponType);
DWORD UploadUnlockedSightsOffset;
void (*UploadUnlockedSights)(void *_instance, void *weaponInfo, int weaponType);
DWORD UploadUnlockedBarrelsOffset;
void (*UploadUnlockedBarrels)(void *_instance, void *weaponInfo, int weaponType);
DWORD UploadUnlockedAccessoriesOffset;
void (*UploadUnlockedAccessories)(void *_instance, void *weaponInfo, int weaponType);
DWORD UploadCamosOnLoadoutsOffset;
void (*UploadCamosOnLoadouts)(void *_instance, void *weaponInfo, int weaponType, bool blank, int totalLoadouts);
DWORD UploadSightsOnLoadoutsOffset;
void (*UploadSightsOnLoadouts)(void *_instance, void *weaponInfo, int weaponType, bool blank, int totalLoadouts);
DWORD UploadBarrelsOnLoadoutsOffset;
void (*UploadBarrelsOnLoadouts)(void *_instance, void *weaponInfo, int weaponType, bool blank, int totalLoadouts);
DWORD UploadAccessoriesOnLoadoutsOffset;
void (*UploadAccessoriesOnLoadouts)(void *_instance, void *weaponInfo, int weaponType, bool blank, int totalLoadouts);
DWORD SendErrorReportOffset;
void (*SendErrorReport)(void *_instance, monoString *subject, monoString *message);
DWORD SendErrorReportCROffset;
void *(*SendErrorReportCR)(void *_instance, monoString *subject, monoString *message);
DWORD GetStoredWeaponsArrayOffset;
DWORD UploadBlankInfoOffset;
void (*UploadBlankInfo)(void *_instance, bool actuallyUpload);
DWORD ThrowablesOffset;
DWORD UploadCurrentInfoOffset;
void (*UploadCurrentInfo)(void *_instance);
DWORD SetCorrectWeaponInfoOffset;
void *(*SetCorrectWeaponInfo)(void *_instance, int weaponType);
DWORD DownloadUnlockedCharacterCamosOffset;
void (*DownloadUnlockedCharacterCamos)(void *_instance, bool ignoreLocal);
DWORD GetUnlockedCamosOffset;
DWORD DownloadUnlockedCamosOffset;
void (*DownloadUnlockedCamos)(void *_instance, int index, int weaponType, bool ignoreLocal);
DWORD DownloadUnlockedBulletTracerColorsOffset;
void (*DownloadUnlockedBulletTracerColors)(void *_instance, bool ignoreLocal);
DWORD DownloadUnlockedSightsOffset;
void (*DownloadUnlockedSights)(void *_instance, int index, int weaponType);
DWORD DownloadUnlockedBarrelsOffset;
void (*DownloadUnlockedBarrels)(void *_instance, int index, int weaponType);
DWORD DownloadUnlockedAccessoriesOffset;
void (*DownloadUnlockedAccessories)(void *_instance, int index, int weaponType);
DWORD DownloadCamosOnLoadoutsOffset;
void (*DownloadCamosOnLoadouts)(void *_instance, int index, int weaponType);
DWORD DownloadSightsOnLoadoutsOffset;
void (*DownloadSightsOnLoadouts)(void *_instance, int index, int weaponType);
DWORD DownloadBarrelsOnLoadoutsOffset;
void (*DownloadBarrelsOnLoadouts)(void *_instance, int index, int weaponType);
DWORD DownloadAccessoriesOnLoadoutsOffset;
void (*DownloadAccessoriesOnLoadouts)(void *_instance, int index, int weaponType);
DWORD DownloadInfoFromServerOffset;
void (*DownloadInfoFromServer)(void *_instance, bool uploadAfter, bool refreshOnLoadoutsValues);
DWORD ResetEquippedOnLoadoutsOffset;
void (*ResetEquippedOnLoadouts)(void *_instance);
DWORD FinishedUpdatingOffset;
void (*FinishedUpdating)(void *_instance, monoString *message);
DWORD LoadSceneOffset;
void *(*LoadScene)(void *_instance, monoString *scene);
DWORD UpdateAccountInfoOffset;
void (*UpdateAccountInfo)(void *_instance);
DWORD UpdateGoldValueOffset;
void (*UpdateGoldValue)(void *_instance, monoString *message);
DWORD UpdateCreditValueOffset;
void (*UpdateCreditValue)(void *_instance, monoString *message);
DWORD AccountInfoDownloadedOffset;
void (*AccountInfoDownloaded)(void *_instance, monoString *message);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetPositiveGUIColorOffset;
void (*SetPositiveGUIColor)(void *_instance);
DWORD ToggleErrorExclamationsOffset;
void (*ToggleErrorExclamations)(void *_instance, bool active);
DWORD set_guiMessageOffset;
void (*set_guiMessage)(void *_instance, monoString *value);
DWORD get_loginStateOffset;
int(*get_loginState)(void *_instance);
DWORD set_loginStateOffset;
void (*set_loginState)(void *_instance, int value);
DWORD RequestLoginOffset;
void (*RequestLogin)(void *_instance);
DWORD OnLoginRequestedOffset;
void (*OnLoginRequested)(void *_instance, monoString *context, monoString *oUsername, monoString *oPassword, void *onLoginFinished);
DWORD OnLogoutRequestedOffset;
void (*OnLogoutRequested)(void *_instance);
DWORD OnRegistrationRequestedOffset;
void (*OnRegistrationRequested)(void *_instance);
DWORD OnRegistrationCancelledOffset;
void (*OnRegistrationCancelled)(void *_instance);
DWORD RequestRegistrationOffset;
void (*RequestRegistration)(void *_instance, monoString *_username, monoString *_email, monoString *_password);
DWORD OnRegistrationSubmittedOffset;
void (*OnRegistrationSubmitted)(void *_instance);
DWORD OnRecoveryRequestedOffset;
void (*OnRecoveryRequested)(void *_instance);
DWORD OnRecoveryCancelledOffset;
void (*OnRecoveryCancelled)(void *_instance);
DWORD OnRecoverySubmittedOffset;
void (*OnRecoverySubmitted)(void *_instance);
DWORD LoginAttemptedOffset;
void (*LoginAttempted)(void *_instance, monoString *callbackMessage);
DWORD SetWebGLPlatformOffset;
void (*SetWebGLPlatform)(void *_instance, int _platform);
DWORD onSuccefullSetWebGLPlatformOffset;
void (*onSuccefullSetWebGLPlatform)(void *_instance, monoString *_jsonResponse);
DWORD onErrorSetWebGLPlatformOffset;
void (*onErrorSetWebGLPlatform)(void *_instance, monoString *_jsonResponse);
DWORD RegistrationFormDownloadedOffset;
void (*RegistrationFormDownloaded)(void *_instance, monoString *callbackMessage);
DWORD RegistrationAttemptedOffset;
void (*RegistrationAttempted)(void *_instance, monoString *callbackMessage);
DWORD PasswordRecoveryAttemptedOffset;
void (*PasswordRecoveryAttempted)(void *_instance, monoString *callbackMessage);
DWORD ToggleCanvasGroupOffset;
void (*ToggleCanvasGroup)(void *_instance, void *groupToToggle);
DWORD RefreshScreenAndShowPositiveTextOffset;
void (*RefreshScreenAndShowPositiveText)(void *_instance, monoString *text);
DWORD RefreshScreenOffset;
void (*RefreshScreen)(void *_instance);
DWORD FindGUIMessageAtEndOfFrameOffset;
void *(*FindGUIMessageAtEndOfFrame)(void *_instance, monoString *textToShow, bool positive);
DWORD FindGUIMessageOffset;
void *(*FindGUIMessage)(void *_instance);
DWORD ClearGUITextOffset;
void *(*ClearGUIText)(void *_instance, void *text);
DWORD FinishLoginOffset;
void (*FinishLogin)(void *_instance);
DWORD OnFormatReferralIDOffset;
void (*OnFormatReferralID)(void *_instance);
DWORD GetOfferwallGoldOffset;
int (*GetOfferwallGold)(void *_instance);
DWORD GetOfferwallCasesOffset;
int (*GetOfferwallCases)(void *_instance);
DWORD TriggerMissingRewardsPopupsOffset;
void (*TriggerMissingRewardsPopups)(void *_instance);
DWORD CheckIfMissingCaseOffset;
bool (*CheckIfMissingCase)(void *_instance, monoString *caseType);
DWORD CanOpenCaseHereOffset;
bool (*CanOpenCaseHere)(void *_instance);
DWORD GetActualUserEmailAdressOffset;
monoString *(*GetActualUserEmailAdress)(void *_instance);
}AS_CanvasUI;
struct AS_InputField {
DWORD InitializeOffset;
void (*Initialize)(void *_instance, void *field);
DWORD OnValueChangedOffset;
void (*OnValueChanged)(void *_instance, monoString *newVal);
}AS_InputField;
struct CustomTypes {
DWORD RegisterOffset;
void (*Register)();
DWORD DeserializeVector3Offset;
DWORD DeserializeVector2Offset;
DWORD DeserializeQuaternionOffset;
DWORD DeserializePhotonPlayerOffset;
}CustomTypes;
struct Extensions {
DWORD GetCachedParemetersOffset;
DWORD GetPhotonViewsInChildrenOffset;
DWORD GetPhotonViewOffset;
void *(*GetPhotonView)(void *go);
DWORD AlmostEqualsOffset;
bool (*AlmostEquals)(Vector3 target, Vector3 second, float sqrMagnitudePrecision);
DWORD AlmostEquals1Offset;
bool (*AlmostEquals1)(Vector2 target, Vector2 second, float sqrMagnitudePrecision);
DWORD AlmostEquals2Offset;
bool (*AlmostEquals2)(int target, int second, float maxAngle);
DWORD AlmostEquals3Offset;
bool (*AlmostEquals3)(float target, float second, float floatDiff);
DWORD MergeOffset;
void (*Merge)(void *target, void *addHash);
DWORD MergeStringKeysOffset;
void (*MergeStringKeys)(void *target, void *addHash);
DWORD ToStringFullOffset;
monoString *(*ToStringFull)(void *origin);
DWORD StripToStringKeysOffset;
void *(*StripToStringKeys)(void *original);
DWORD StripKeysWithNullValuesOffset;
void (*StripKeysWithNullValues)(void *original);
}Extensions;
struct GameObjectExtensions {
DWORD GetActiveOffset;
bool (*GetActive)(void *target);
}GameObjectExtensions;
struct FriendInfo {
DWORD get_NameOffset;
monoString *(*get_Name)(void *_instance);
DWORD get_UserIdOffset;
monoString *(*get_UserId)(void *_instance);
DWORD set_UserIdOffset;
void (*set_UserId)(void *_instance, monoString *value);
DWORD get_IsOnlineOffset;
bool (*get_IsOnline)(void *_instance);
DWORD set_IsOnlineOffset;
void (*set_IsOnline)(void *_instance, bool value);
DWORD get_RoomOffset;
monoString *(*get_Room)(void *_instance);
DWORD set_RoomOffset;
void (*set_Room)(void *_instance, monoString *value);
DWORD get_IsInRoomOffset;
bool (*get_IsInRoom)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}FriendInfo;
struct LoadBalancingPeer {
DWORD get_IsProtocolSecureOffset;
bool (*get_IsProtocolSecure)(void *_instance);
DWORD ctor1Offset;
void (*ctor1)(void *_instance, void *listener, int protocolType);
DWORD OpGetRegionsOffset;
bool (*OpGetRegions)(void *_instance, monoString *appId);
DWORD OpJoinLobbyOffset;
bool (*OpJoinLobby)(void *_instance, void *lobby);
DWORD OpLeaveLobbyOffset;
bool (*OpLeaveLobby)(void *_instance);
DWORD OpCreateRoomOffset;
bool (*OpCreateRoom)(void *_instance, void *opParams);
DWORD OpJoinRoomOffset;
bool (*OpJoinRoom)(void *_instance, void *opParams);
DWORD OpJoinRandomRoomOffset;
bool (*OpJoinRandomRoom)(void *_instance, void *opJoinRandomRoomParams);
DWORD OpLeaveRoomOffset;
bool (*OpLeaveRoom)(void *_instance, bool becomeInactive);
DWORD OpGetGameListOffset;
bool (*OpGetGameList)(void *_instance, void *lobby, monoString *queryData);
DWORD OpSetCustomPropertiesOfActorOffset;
bool (*OpSetCustomPropertiesOfActor)(void *_instance, int actorNr, void *actorProperties);
DWORD OpSetPropertiesOfActorOffset;
bool (*OpSetPropertiesOfActor)(void *_instance, int actorNr, void *actorProperties, void *expectedProperties, bool webForward);
DWORD OpSetCustomPropertiesOfRoom1Offset;
bool (*OpSetCustomPropertiesOfRoom1)(void *_instance, void *gameProperties, void *expectedProperties, bool webForward);
DWORD OpSetPropertiesOfRoomOffset;
bool (*OpSetPropertiesOfRoom)(void *_instance, void *gameProperties, void *expectedProperties, bool webForward);
DWORD OpAuthenticateOffset;
bool (*OpAuthenticate)(void *_instance, monoString *appId, monoString *appVersion, void *authValues, monoString *regionCode, bool getLobbyStatistics);
DWORD OpAuthenticateOnceOffset;
bool (*OpAuthenticateOnce)(void *_instance, monoString *appId, monoString *appVersion, void *authValues, monoString *regionCode, int encryptionMode, int expectedProtocol);
DWORD OpSettingsOffset;
bool (*OpSettings)(void *_instance, bool receiveLobbyStats);
}LoadBalancingPeer;
struct OpJoinRandomRoomParams {
}OpJoinRandomRoomParams;
struct EnterRoomParams {
}EnterRoomParams;
struct ErrorCode {
}ErrorCode;
struct ActorProperties {
}ActorProperties;
struct GamePropertyKey {
}GamePropertyKey;
struct EventCode {
}EventCode;
struct ParameterCode {
}ParameterCode;
struct OperationCode {
}OperationCode;
struct RoomOptions {
DWORD get_IsVisibleOffset;
bool (*get_IsVisible)(void *_instance);
DWORD set_IsVisibleOffset;
void (*set_IsVisible)(void *_instance, bool value);
DWORD get_IsOpenOffset;
bool (*get_IsOpen)(void *_instance);
DWORD set_IsOpenOffset;
void (*set_IsOpen)(void *_instance, bool value);
DWORD get_CleanupCacheOnLeaveOffset;
bool (*get_CleanupCacheOnLeave)(void *_instance);
DWORD set_CleanupCacheOnLeaveOffset;
void (*set_CleanupCacheOnLeave)(void *_instance, bool value);
DWORD get_SuppressRoomEventsOffset;
bool (*get_SuppressRoomEvents)(void *_instance);
DWORD get_PublishUserIdOffset;
bool (*get_PublishUserId)(void *_instance);
DWORD set_PublishUserIdOffset;
void (*set_PublishUserId)(void *_instance, bool value);
DWORD get_DeleteNullPropertiesOffset;
bool (*get_DeleteNullProperties)(void *_instance);
DWORD set_DeleteNullPropertiesOffset;
void (*set_DeleteNullProperties)(void *_instance, bool value);
DWORD get_isVisibleOffset;
bool (*get_isVisible)(void *_instance);
DWORD set_isVisibleOffset;
void (*set_isVisible)(void *_instance, bool value);
DWORD get_isOpenOffset;
bool (*get_isOpen)(void *_instance);
DWORD set_isOpenOffset;
void (*set_isOpen)(void *_instance, bool value);
DWORD get_maxPlayersOffset;
DWORD get_cleanupCacheOnLeaveOffset;
bool (*get_cleanupCacheOnLeave)(void *_instance);
DWORD set_cleanupCacheOnLeaveOffset;
void (*set_cleanupCacheOnLeave)(void *_instance, bool value);
DWORD get_customRoomPropertiesOffset;
void *(*get_customRoomProperties)(void *_instance);
DWORD set_customRoomPropertiesOffset;
void (*set_customRoomProperties)(void *_instance, void *value);
DWORD get_customRoomPropertiesForLobbyOffset;
DWORD get_pluginsOffset;
DWORD get_suppressRoomEventsOffset;
bool (*get_suppressRoomEvents)(void *_instance);
DWORD get_publishUserIdOffset;
bool (*get_publishUserId)(void *_instance);
DWORD set_publishUserIdOffset;
void (*set_publishUserId)(void *_instance, bool value);
}RoomOptions;
struct RaiseEventOptions {
DWORD ResetOffset;
void (*Reset)(void *_instance);
}RaiseEventOptions;
struct TypedLobby {
DWORD get_IsDefaultOffset;
bool (*get_IsDefault)(void *_instance);
DWORD ctor1Offset;
void (*ctor1)(void *_instance, monoString *name, int type);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}TypedLobby;
struct TypedLobbyInfo {
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}TypedLobbyInfo;
struct AuthenticationValues {
DWORD get_AuthTypeOffset;
int(*get_AuthType)(void *_instance);
DWORD set_AuthTypeOffset;
void (*set_AuthType)(void *_instance, int value);
DWORD get_AuthGetParametersOffset;
monoString *(*get_AuthGetParameters)(void *_instance);
DWORD set_AuthGetParametersOffset;
void (*set_AuthGetParameters)(void *_instance, monoString *value);
DWORD get_AuthPostDataOffset;
DWORD get_TokenOffset;
monoString *(*get_Token)(void *_instance);
DWORD set_TokenOffset;
void (*set_Token)(void *_instance, monoString *value);
DWORD get_UserIdOffset;
monoString *(*get_UserId)(void *_instance);
DWORD set_UserIdOffset;
void (*set_UserId)(void *_instance, monoString *value);
DWORD ctor1Offset;
void (*ctor1)(void *_instance, monoString *userId);
DWORD SetAuthPostDataOffset;
void (*SetAuthPostData)(void *_instance, monoString *stringData);
DWORD AddAuthParameterOffset;
void (*AddAuthParameter)(void *_instance, monoString *key, monoString *value);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}AuthenticationValues;
struct FindFriendsOptions {
DWORD ToIntFlagsOffset;
int (*ToIntFlags)(void *_instance);
}FindFriendsOptions;
struct NetworkingPeer {
DWORD get_AppVersionOffset;
monoString *(*get_AppVersion)(void *_instance);
DWORD get_AuthValuesOffset;
void *(*get_AuthValues)(void *_instance);
DWORD set_AuthValuesOffset;
void (*set_AuthValues)(void *_instance, void *value);
DWORD get_TokenForInitOffset;
monoString *(*get_TokenForInit)(void *_instance);
DWORD get_IsUsingNameServerOffset;
bool (*get_IsUsingNameServer)(void *_instance);
DWORD set_IsUsingNameServerOffset;
void (*set_IsUsingNameServer)(void *_instance, bool value);
DWORD get_NameServerAddressOffset;
monoString *(*get_NameServerAddress)(void *_instance);
DWORD get_MasterServerAddressOffset;
monoString *(*get_MasterServerAddress)(void *_instance);
DWORD set_MasterServerAddressOffset;
void (*set_MasterServerAddress)(void *_instance, monoString *value);
DWORD get_GameServerAddressOffset;
monoString *(*get_GameServerAddress)(void *_instance);
DWORD set_GameServerAddressOffset;
void (*set_GameServerAddress)(void *_instance, monoString *value);
DWORD get_ServerOffset;
int(*get_Server)(void *_instance);
DWORD set_ServerOffset;
void (*set_Server)(void *_instance, int value);
DWORD get_StateOffset;
int(*get_State)(void *_instance);
DWORD set_StateOffset;
void (*set_State)(void *_instance, int value);
DWORD get_lobbyOffset;
void *(*get_lobby)(void *_instance);
DWORD set_lobbyOffset;
void (*set_lobby)(void *_instance, void *value);
DWORD get_requestLobbyStatisticsOffset;
bool (*get_requestLobbyStatistics)(void *_instance);
DWORD get_PlayerNameOffset;
monoString *(*get_PlayerName)(void *_instance);
DWORD set_PlayerNameOffset;
void (*set_PlayerName)(void *_instance, monoString *value);
DWORD get_CurrentRoomOffset;
void *(*get_CurrentRoom)(void *_instance);
DWORD set_CurrentRoomOffset;
void (*set_CurrentRoom)(void *_instance, void *value);
DWORD get_LocalPlayerOffset;
void *(*get_LocalPlayer)(void *_instance);
DWORD set_LocalPlayerOffset;
void (*set_LocalPlayer)(void *_instance, void *value);
DWORD get_PlayersOnMasterCountOffset;
int (*get_PlayersOnMasterCount)(void *_instance);
DWORD set_PlayersOnMasterCountOffset;
void (*set_PlayersOnMasterCount)(void *_instance, int value);
DWORD get_PlayersInRoomsCountOffset;
int (*get_PlayersInRoomsCount)(void *_instance);
DWORD set_PlayersInRoomsCountOffset;
void (*set_PlayersInRoomsCount)(void *_instance, int value);
DWORD get_RoomsCountOffset;
int (*get_RoomsCount)(void *_instance);
DWORD set_RoomsCountOffset;
void (*set_RoomsCount)(void *_instance, int value);
DWORD get_FriendListAgeOffset;
int (*get_FriendListAge)(void *_instance);
DWORD get_IsAuthorizeSecretAvailableOffset;
bool (*get_IsAuthorizeSecretAvailable)(void *_instance);
DWORD get_AvailableRegionsOffset;
DWORD get_CloudRegionOffset;
int(*get_CloudRegion)(void *_instance);
DWORD set_CloudRegionOffset;
void (*set_CloudRegion)(void *_instance, int value);
DWORD get_mMasterClientIdOffset;
int (*get_mMasterClientId)(void *_instance);
DWORD set_mMasterClientIdOffset;
void (*set_mMasterClientId)(void *_instance, int value);
DWORD GetNameServerAddressOffset;
monoString *(*GetNameServerAddress)(void *_instance);
DWORD ConnectOffset;
bool (*Connect)(void *_instance, monoString *serverAddress, monoString *applicationName);
DWORD ReconnectToMasterOffset;
bool (*ReconnectToMaster)(void *_instance);
DWORD ReconnectAndRejoinOffset;
bool (*ReconnectAndRejoin)(void *_instance);
DWORD Connect1Offset;
bool (*Connect1)(void *_instance, monoString *serverAddress, int type);
DWORD ReconnectOffset;
bool (*Reconnect)(void *_instance);
DWORD ConnectToNameServerOffset;
bool (*ConnectToNameServer)(void *_instance);
DWORD ConnectToRegionMasterOffset;
bool (*ConnectToRegionMaster)(void *_instance, int region);
DWORD SetupProtocolOffset;
void (*SetupProtocol)(void *_instance, int serverType);
DWORD DisconnectOffset;
void (*Disconnect)(void *_instance);
DWORD CallAuthenticateOffset;
bool (*CallAuthenticate)(void *_instance);
DWORD DisconnectToReconnectOffset;
void (*DisconnectToReconnect)(void *_instance);
DWORD GetRegionsOffset;
bool (*GetRegions)(void *_instance);
DWORD OpCreateGameOffset;
bool (*OpCreateGame)(void *_instance, void *enterRoomParams);
DWORD OpJoinRoomOffset;
bool (*OpJoinRoom)(void *_instance, void *opParams);
DWORD OpJoinRandomRoomOffset;
bool (*OpJoinRandomRoom)(void *_instance, void *opJoinRandomRoomParams);
DWORD ReadoutPropertiesOffset;
void (*ReadoutProperties)(void *_instance, void *gameProperties, void *pActorProperties, int targetActorNr);
DWORD ReadoutPropertiesForActorNrOffset;
void *(*ReadoutPropertiesForActorNr)(void *_instance, void *actorProperties, int actorNr);
DWORD ChangeLocalIDOffset;
void (*ChangeLocalID)(void *_instance, int newID);
DWORD LeftLobbyCleanupOffset;
void (*LeftLobbyCleanup)(void *_instance);
DWORD LeftRoomCleanupOffset;
void (*LeftRoomCleanup)(void *_instance);
DWORD LocalCleanupAnythingInstantiatedOffset;
void (*LocalCleanupAnythingInstantiated)(void *_instance, bool destroyInstantiatedGameObjects);
DWORD GameEnteredOnGameServerOffset;
void (*GameEnteredOnGameServer)(void *_instance, void *operationResponse);
DWORD AddNewPlayerOffset;
void (*AddNewPlayer)(void *_instance, int ID, void *player);
DWORD RemovePlayerOffset;
void (*RemovePlayer)(void *_instance, int ID, void *player);
DWORD RebuildPlayerListCopiesOffset;
void (*RebuildPlayerListCopies)(void *_instance);
DWORD ResetPhotonViewsOnSerializeOffset;
void (*ResetPhotonViewsOnSerialize)(void *_instance);
DWORD HandleEventLeaveOffset;
void (*HandleEventLeave)(void *_instance, int actorID, void *evLeave);
DWORD CheckMasterClientOffset;
void (*CheckMasterClient)(void *_instance, int leavingPlayerId);
DWORD UpdateMasterClientOffset;
void (*UpdateMasterClient)(void *_instance);
DWORD SetMasterClientOffset;
bool (*SetMasterClient)(void *_instance, int playerId, bool sync);
DWORD SetMasterClient1Offset;
bool (*SetMasterClient1)(void *_instance, int nextMasterId);
DWORD GetPlayerWithIdOffset;
void *(*GetPlayerWithId)(void *_instance, int number);
DWORD SendPlayerNameOffset;
void (*SendPlayerName)(void *_instance);
DWORD GetLocalActorPropertiesOffset;
void *(*GetLocalActorProperties)(void *_instance);
DWORD DebugReturnOffset;
void (*DebugReturn)(void *_instance, int level, monoString *message);
DWORD OnOperationResponseOffset;
void (*OnOperationResponse)(void *_instance, void *operationResponse);
DWORD OnStatusChangedOffset;
void (*OnStatusChanged)(void *_instance, int statusCode);
DWORD OnEventOffset;
void (*OnEvent)(void *_instance, void *photonEvent);
DWORD SendVacantViewIdsOffset;
void (*SendVacantViewIds)(void *_instance);
DWORD ExecuteRpcOffset;
void (*ExecuteRpc)(void *_instance, void *rpcData, int senderID);
DWORD DoInstantiateOffset;
void *(*DoInstantiate)(void *_instance, void *evData, void *photonPlayer, void *resourceGameObject);
DWORD FetchInstantiationDataOffset;
DWORD RemoveInstantiationDataOffset;
void (*RemoveInstantiationData)(void *_instance, int instantiationId);
DWORD DestroyPlayerObjectsOffset;
void (*DestroyPlayerObjects)(void *_instance, int playerId, bool localOnly);
DWORD DestroyAllOffset;
void (*DestroyAll)(void *_instance, bool localOnly);
DWORD RemoveInstantiatedGOOffset;
void (*RemoveInstantiatedGO)(void *_instance, void *go, bool localOnly);
DWORD ServerCleanInstantiateAndDestroyOffset;
void (*ServerCleanInstantiateAndDestroy)(void *_instance, int instantiateId, int creatorId, bool isRuntimeInstantiated);
DWORD SendDestroyOfPlayerOffset;
void (*SendDestroyOfPlayer)(void *_instance, int actorNr);
DWORD SendDestroyOfAllOffset;
void (*SendDestroyOfAll)(void *_instance);
DWORD OpRemoveFromServerInstantiationsOfPlayerOffset;
void (*OpRemoveFromServerInstantiationsOfPlayer)(void *_instance, int actorNr);
DWORD RequestOwnershipOffset;
void (*RequestOwnership)(void *_instance, int viewID, int fromOwner);
DWORD TransferOwnershipOffset;
void (*TransferOwnership)(void *_instance, int viewID, int playerID);
DWORD LocalCleanPhotonViewOffset;
bool (*LocalCleanPhotonView)(void *_instance, void *view);
DWORD GetPhotonViewOffset;
void *(*GetPhotonView)(void *_instance, int viewID);
DWORD RegisterPhotonViewOffset;
void (*RegisterPhotonView)(void *_instance, void *netView);
DWORD OpCleanRpcBufferOffset;
void (*OpCleanRpcBuffer)(void *_instance, int actorNumber);
DWORD OpRemoveCompleteCacheOfPlayerOffset;
void (*OpRemoveCompleteCacheOfPlayer)(void *_instance, int actorNumber);
DWORD OpRemoveCompleteCacheOffset;
void (*OpRemoveCompleteCache)(void *_instance);
DWORD RemoveCacheOfLeftPlayersOffset;
void (*RemoveCacheOfLeftPlayers)(void *_instance);
DWORD CleanRpcBufferIfMineOffset;
void (*CleanRpcBufferIfMine)(void *_instance, void *view);
DWORD OpCleanRpcBuffer1Offset;
void (*OpCleanRpcBuffer1)(void *_instance, void *view);
DWORD RemoveRPCsInGroupOffset;
void (*RemoveRPCsInGroup)(void *_instance, int group);
DWORD SetLevelPrefixOffset;
void (*SetLevelPrefix)(void *_instance, byte prefix);
DWORD NewSceneLoadedOffset;
void (*NewSceneLoaded)(void *_instance);
DWORD RunViewUpdateOffset;
void (*RunViewUpdate)(void *_instance);
DWORD OnSerializeWriteOffset;
DWORD LoadLevelIfSyncedOffset;
void (*LoadLevelIfSynced)(void *_instance);
DWORD SendLevelReloadEventOffset;
void (*SendLevelReloadEvent)(void *_instance);
DWORD SetAppOffset;
void (*SetApp)(void *_instance, monoString *appId, monoString *gameVersion);
}NetworkingPeer;
struct IPunObservable {
}IPunObservable;
struct IPunCallbacks {
}IPunCallbacks;
struct IPunPrefabPool {
}IPunPrefabPool;
struct PhotonMessageInfo {
DWORD get_timestampOffset;
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}PhotonMessageInfo;
struct PunEvent {
}PunEvent;
struct PhotonStream {
DWORD ResetWriteStreamOffset;
void (*ResetWriteStream)(void *_instance);
DWORD get_isWritingOffset;
bool (*get_isWriting)(void *_instance);
DWORD get_isReadingOffset;
bool (*get_isReading)(void *_instance);
DWORD get_CountOffset;
int (*get_Count)(void *_instance);
DWORD ReceiveNextOffset;
DWORD PeekNextOffset;
DWORD ToArrayOffset;
DWORD Serialize7Offset;
void (*Serialize7)(void *_instance, Vector3 *obj);
}PhotonStream;
struct SceneManagerHelper {
DWORD get_ActiveSceneNameOffset;
monoString *(*get_ActiveSceneName)();
DWORD get_ActiveSceneBuildIndexOffset;
int (*get_ActiveSceneBuildIndex)();
}SceneManagerHelper;
struct WebRpcResponse {
DWORD get_NameOffset;
monoString *(*get_Name)(void *_instance);
DWORD set_NameOffset;
void (*set_Name)(void *_instance, monoString *value);
DWORD get_ReturnCodeOffset;
int (*get_ReturnCode)(void *_instance);
DWORD set_ReturnCodeOffset;
void (*set_ReturnCode)(void *_instance, int value);
DWORD get_DebugMessageOffset;
monoString *(*get_DebugMessage)(void *_instance);
DWORD set_DebugMessageOffset;
void (*set_DebugMessage)(void *_instance, monoString *value);
DWORD get_ParametersOffset;
DWORD ToStringFullOffset;
monoString *(*ToStringFull)(void *_instance);
}WebRpcResponse;
struct PhotonHandler {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnApplicationQuitOffset;
void (*OnApplicationQuit)(void *_instance);
DWORD OnApplicationPauseOffset;
void (*OnApplicationPause)(void *_instance, bool pause);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnJoinedRoomOffset;
void (*OnJoinedRoom)(void *_instance);
DWORD OnCreatedRoomOffset;
void (*OnCreatedRoom)(void *_instance);
DWORD StartFallbackSendAckThreadOffset;
void (*StartFallbackSendAckThread)();
DWORD StopFallbackSendAckThreadOffset;
void (*StopFallbackSendAckThread)();
DWORD FallbackSendAckThreadOffset;
bool (*FallbackSendAckThread)();
DWORD get_BestRegionCodeInPreferencesOffset;
int(*get_BestRegionCodeInPreferences)();
DWORD set_BestRegionCodeInPreferencesOffset;
void (*set_BestRegionCodeInPreferences)(int value);
DWORD PingAvailableRegionsCoroutineOffset;
void *(*PingAvailableRegionsCoroutine)(void *_instance, bool connectToBest);
}PhotonHandler;
struct PhotonLagSimulationGui {
DWORD get_PeerOffset;
void *(*get_Peer)(void *_instance);
DWORD set_PeerOffset;
void (*set_Peer)(void *_instance, void *value);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD NetSimHasNoPeerWindowOffset;
void (*NetSimHasNoPeerWindow)(void *_instance, int windowId);
DWORD NetSimWindowOffset;
void (*NetSimWindow)(void *_instance, int windowId);
}PhotonLagSimulationGui;
struct PhotonNetwork {
DWORD get_gameVersionOffset;
monoString *(*get_gameVersion)();
DWORD set_gameVersionOffset;
void (*set_gameVersion)(monoString *value);
DWORD get_ServerAddressOffset;
monoString *(*get_ServerAddress)();
DWORD get_CloudRegionOffset;
int(*get_CloudRegion)();
DWORD get_connectedOffset;
bool (*get_connected)();
DWORD get_connectingOffset;
bool (*get_connecting)();
DWORD get_connectedAndReadyOffset;
bool (*get_connectedAndReady)();
DWORD get_connectionStateOffset;
int(*get_connectionState)();
DWORD get_connectionStateDetailedOffset;
int(*get_connectionStateDetailed)();
DWORD get_ServerOffset;
int(*get_Server)();
DWORD get_AuthValuesOffset;
void *(*get_AuthValues)();
DWORD set_AuthValuesOffset;
void (*set_AuthValues)(void *value);
DWORD get_roomOffset;
void *(*get_room)();
DWORD get_playerOffset;
void *(*get_player)();
DWORD get_masterClientOffset;
void *(*get_masterClient)();
DWORD get_playerNameOffset;
monoString *(*get_playerName)();
DWORD set_playerNameOffset;
void (*set_playerName)(monoString *value);
DWORD get_playerListOffset;
DWORD get_otherPlayersOffset;
DWORD get_FriendsOffset;
DWORD get_FriendsListAgeOffset;
int (*get_FriendsListAge)();
DWORD get_PrefabPoolOffset;
void *(*get_PrefabPool)();
DWORD set_PrefabPoolOffset;
void (*set_PrefabPool)(void *value);
DWORD get_offlineModeOffset;
bool (*get_offlineMode)();
DWORD set_offlineModeOffset;
void (*set_offlineMode)(bool value);
DWORD get_automaticallySyncSceneOffset;
bool (*get_automaticallySyncScene)();
DWORD set_automaticallySyncSceneOffset;
void (*set_automaticallySyncScene)(bool value);
DWORD get_autoCleanUpPlayerObjectsOffset;
bool (*get_autoCleanUpPlayerObjects)();
DWORD set_autoCleanUpPlayerObjectsOffset;
void (*set_autoCleanUpPlayerObjects)(bool value);
DWORD get_autoJoinLobbyOffset;
bool (*get_autoJoinLobby)();
DWORD set_autoJoinLobbyOffset;
void (*set_autoJoinLobby)(bool value);
DWORD get_EnableLobbyStatisticsOffset;
bool (*get_EnableLobbyStatistics)();
DWORD set_EnableLobbyStatisticsOffset;
void (*set_EnableLobbyStatistics)(bool value);
DWORD get_LobbyStatisticsOffset;
DWORD get_insideLobbyOffset;
bool (*get_insideLobby)();
DWORD get_lobbyOffset;
void *(*get_lobby)();
DWORD set_lobbyOffset;
void (*set_lobby)(void *value);
DWORD get_sendRateOffset;
int (*get_sendRate)();
DWORD set_sendRateOffset;
void (*set_sendRate)(int value);
DWORD get_sendRateOnSerializeOffset;
int (*get_sendRateOnSerialize)();
DWORD set_sendRateOnSerializeOffset;
void (*set_sendRateOnSerialize)(int value);
DWORD get_isMessageQueueRunningOffset;
bool (*get_isMessageQueueRunning)();
DWORD set_isMessageQueueRunningOffset;
void (*set_isMessageQueueRunning)(bool value);
DWORD get_timeOffset;
DWORD get_ServerTimestampOffset;
int (*get_ServerTimestamp)();
DWORD get_isMasterClientOffset;
bool (*get_isMasterClient)();
DWORD get_inRoomOffset;
bool (*get_inRoom)();
DWORD get_isNonMasterClientInRoomOffset;
bool (*get_isNonMasterClientInRoom)();
DWORD get_countOfPlayersOnMasterOffset;
int (*get_countOfPlayersOnMaster)();
DWORD get_countOfPlayersInRoomsOffset;
int (*get_countOfPlayersInRooms)();
DWORD get_countOfPlayersOffset;
int (*get_countOfPlayers)();
DWORD get_countOfRoomsOffset;
int (*get_countOfRooms)();
DWORD get_NetworkStatisticsEnabledOffset;
bool (*get_NetworkStatisticsEnabled)();
DWORD set_NetworkStatisticsEnabledOffset;
void (*set_NetworkStatisticsEnabled)(bool value);
DWORD get_ResentReliableCommandsOffset;
int (*get_ResentReliableCommands)();
DWORD get_CrcCheckEnabledOffset;
bool (*get_CrcCheckEnabled)();
DWORD set_CrcCheckEnabledOffset;
void (*set_CrcCheckEnabled)(bool value);
DWORD get_PacketLossByCrcCheckOffset;
int (*get_PacketLossByCrcCheck)();
DWORD get_MaxResendsBeforeDisconnectOffset;
int (*get_MaxResendsBeforeDisconnect)();
DWORD set_MaxResendsBeforeDisconnectOffset;
void (*set_MaxResendsBeforeDisconnect)(int value);
DWORD get_QuickResendsOffset;
int (*get_QuickResends)();
DWORD set_QuickResendsOffset;
void (*set_QuickResends)(int value);
DWORD get_UseAlternativeUdpPortsOffset;
bool (*get_UseAlternativeUdpPorts)();
DWORD set_UseAlternativeUdpPortsOffset;
void (*set_UseAlternativeUdpPorts)(bool value);
DWORD add_OnEventCallOffset;
void (*add_OnEventCall)(void *value);
DWORD remove_OnEventCallOffset;
void (*remove_OnEventCall)(void *value);
DWORD SwitchToProtocolOffset;
void (*SwitchToProtocol)(int cp);
DWORD ConnectUsingSettingsOffset;
bool (*ConnectUsingSettings)(monoString *gameVersion);
DWORD ConnectToMasterOffset;
bool (*ConnectToMaster)(monoString *masterServerAddress, int port, monoString *appID, monoString *gameVersion);
DWORD ReconnectOffset;
bool (*Reconnect)();
DWORD ReconnectAndRejoinOffset;
bool (*ReconnectAndRejoin)();
DWORD ConnectToBestCloudServerOffset;
bool (*ConnectToBestCloudServer)(monoString *gameVersion);
DWORD ConnectToRegionOffset;
bool (*ConnectToRegion)(int region, monoString *gameVersion);
DWORD OverrideBestCloudServerOffset;
void (*OverrideBestCloudServer)(int region);
DWORD RefreshCloudServerRatingOffset;
void (*RefreshCloudServerRating)();
DWORD NetworkStatisticsResetOffset;
void (*NetworkStatisticsReset)();
DWORD NetworkStatisticsToStringOffset;
monoString *(*NetworkStatisticsToString)();
DWORD InitializeSecurityOffset;
void (*InitializeSecurity)();
DWORD VerifyCanUseNetworkOffset;
bool (*VerifyCanUseNetwork)();
DWORD DisconnectOffset;
void (*Disconnect)();
DWORD CreateRoomOffset;
bool (*CreateRoom)(monoString *roomName);
DWORD CreateRoom1Offset;
bool (*CreateRoom1)(monoString *roomName, void *roomOptions, void *typedLobby);
DWORD JoinRoomOffset;
bool (*JoinRoom)(monoString *roomName);
DWORD JoinOrCreateRoomOffset;
bool (*JoinOrCreateRoom)(monoString *roomName, void *roomOptions, void *typedLobby);
DWORD JoinRandomRoomOffset;
bool (*JoinRandomRoom)();
DWORD ReJoinRoomOffset;
bool (*ReJoinRoom)(monoString *roomName);
DWORD EnterOfflineRoomOffset;
void (*EnterOfflineRoom)(monoString *roomName, void *roomOptions, bool createdRoom);
DWORD JoinLobbyOffset;
bool (*JoinLobby)();
DWORD JoinLobby1Offset;
bool (*JoinLobby1)(void *typedLobby);
DWORD LeaveLobbyOffset;
bool (*LeaveLobby)();
DWORD LeaveRoomOffset;
bool (*LeaveRoom)(bool becomeInactive);
DWORD GetCustomRoomListOffset;
bool (*GetCustomRoomList)(void *typedLobby, monoString *sqlLobbyFilter);
DWORD GetRoomListOffset;
DWORD SetPlayerCustomPropertiesOffset;
void (*SetPlayerCustomProperties)(void *customProperties);
DWORD AllocateViewIDOffset;
int (*AllocateViewID)();
DWORD AllocateSceneViewIDOffset;
int (*AllocateSceneViewID)();
DWORD AllocateViewID1Offset;
int (*AllocateViewID1)(int ownerId);
DWORD AllocateSceneViewIDsOffset;
DWORD UnAllocateViewIDOffset;
void (*UnAllocateViewID)(int viewID);
DWORD GetPingOffset;
int (*GetPing)();
DWORD FetchServerTimestampOffset;
void (*FetchServerTimestamp)();
DWORD SendOutgoingCommandsOffset;
void (*SendOutgoingCommands)();
DWORD CloseConnectionOffset;
bool (*CloseConnection)(void *kickPlayer);
DWORD SetMasterClientOffset;
bool (*SetMasterClient)(void *masterClientPlayer);
DWORD DestroyOffset;
void (*Destroy)(void *targetView);
DWORD Destroy1Offset;
void (*Destroy1)(void *targetGo);
DWORD DestroyPlayerObjectsOffset;
void (*DestroyPlayerObjects)(void *targetPlayer);
DWORD DestroyPlayerObjects1Offset;
void (*DestroyPlayerObjects1)(int targetPlayerId);
DWORD DestroyAllOffset;
void (*DestroyAll)();
DWORD RemoveRPCsOffset;
void (*RemoveRPCs)(void *targetPlayer);
DWORD RemoveRPCs1Offset;
void (*RemoveRPCs1)(void *targetPhotonView);
DWORD RemoveRPCsInGroupOffset;
void (*RemoveRPCsInGroup)(int targetGroup);
DWORD CacheSendMonoMessageTargetsOffset;
void (*CacheSendMonoMessageTargets)(void *type);
DWORD FindGameObjectsWithComponentOffset;
DWORD SetReceivingEnabledOffset;
void (*SetReceivingEnabled)(int group, bool enabled);
DWORD SetSendingEnabledOffset;
void (*SetSendingEnabled)(int group, bool enabled);
DWORD SetLevelPrefixOffset;
void (*SetLevelPrefix)(byte prefix);
DWORD LoadLevelOffset;
void (*LoadLevel)(int levelNumber);
DWORD LoadLevelAsyncOffset;
void *(*LoadLevelAsync)(int levelNumber);
DWORD LoadLevel1Offset;
void (*LoadLevel1)(monoString *levelName);
DWORD LoadLevelAsync1Offset;
void *(*LoadLevelAsync1)(monoString *levelName);
}PhotonNetwork;
struct PhotonPlayer {
DWORD get_IDOffset;
int (*get_ID)(void *_instance);
DWORD get_NickNameOffset;
monoString *(*get_NickName)(void *_instance);
DWORD set_NickNameOffset;
void (*set_NickName)(void *_instance, monoString *value);
DWORD get_UserIdOffset;
monoString *(*get_UserId)(void *_instance);
DWORD set_UserIdOffset;
void (*set_UserId)(void *_instance, monoString *value);
DWORD get_IsMasterClientOffset;
bool (*get_IsMasterClient)(void *_instance);
DWORD get_IsInactiveOffset;
bool (*get_IsInactive)(void *_instance);
DWORD set_IsInactiveOffset;
void (*set_IsInactive)(void *_instance, bool value);
DWORD get_CustomPropertiesOffset;
void *(*get_CustomProperties)(void *_instance);
DWORD set_CustomPropertiesOffset;
void (*set_CustomProperties)(void *_instance, void *value);
DWORD get_AllPropertiesOffset;
void *(*get_AllProperties)(void *_instance);
DWORD ctor1Offset;
void (*ctor1)(void *_instance, bool isLocal, int actorID, void *properties);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD InternalChangeLocalIDOffset;
void (*InternalChangeLocalID)(void *_instance, int newID);
DWORD InternalCachePropertiesOffset;
void (*InternalCacheProperties)(void *_instance, void *properties);
DWORD SetCustomPropertiesOffset;
void (*SetCustomProperties)(void *_instance, void *propertiesToSet, void *expectedValues, bool webForward);
DWORD FindOffset;
void *(*Find)(int ID);
DWORD GetOffset;
void *(*Get)(void *_instance, int id);
DWORD GetNextOffset;
void *(*GetNext)(void *_instance);
DWORD GetNextForOffset;
void *(*GetNextFor)(void *_instance, void *currentPlayer);
DWORD GetNextFor1Offset;
void *(*GetNextFor1)(void *_instance, int currentPlayerId);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, void *other);
DWORD CompareTo1Offset;
int (*CompareTo1)(void *_instance, int other);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, void *other);
DWORD Equals2Offset;
bool (*Equals2)(void *_instance, int other);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToStringFullOffset;
monoString *(*ToStringFull)(void *_instance);
DWORD get_nameOffset;
monoString *(*get_name)(void *_instance);
DWORD set_nameOffset;
void (*set_name)(void *_instance, monoString *value);
DWORD get_userIdOffset;
monoString *(*get_userId)(void *_instance);
DWORD set_userIdOffset;
void (*set_userId)(void *_instance, monoString *value);
DWORD get_isLocalOffset;
bool (*get_isLocal)(void *_instance);
DWORD get_isMasterClientOffset;
bool (*get_isMasterClient)(void *_instance);
DWORD get_isInactiveOffset;
bool (*get_isInactive)(void *_instance);
DWORD set_isInactiveOffset;
void (*set_isInactive)(void *_instance, bool value);
DWORD get_customPropertiesOffset;
void *(*get_customProperties)(void *_instance);
DWORD set_customPropertiesOffset;
void (*set_customProperties)(void *_instance, void *value);
DWORD get_allPropertiesOffset;
void *(*get_allProperties)(void *_instance);
}PhotonPlayer;
struct PhotonStatsGui {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD TrafficStatsWindowOffset;
void (*TrafficStatsWindow)(void *_instance, int windowID);
}PhotonStatsGui;
struct PhotonStreamQueue {
DWORD BeginWritePackageOffset;
void (*BeginWritePackage)(void *_instance);
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD HasQueuedObjectsOffset;
bool (*HasQueuedObjects)(void *_instance);
DWORD ReceiveNextOffset;
DWORD SerializeOffset;
void (*Serialize)(void *_instance, void *stream);
DWORD DeserializeOffset;
void (*Deserialize)(void *_instance, void *stream);
}PhotonStreamQueue;
struct PhotonView {
DWORD get_prefixOffset;
int (*get_prefix)(void *_instance);
DWORD set_prefixOffset;
void (*set_prefix)(void *_instance, int value);
DWORD get_instantiationDataOffset;
DWORD get_viewIDOffset;
int (*get_viewID)(void *_instance);
DWORD set_viewIDOffset;
void (*set_viewID)(void *_instance, int value);
DWORD get_isSceneViewOffset;
bool (*get_isSceneView)(void *_instance);
DWORD get_ownerOffset;
void *(*get_owner)(void *_instance);
DWORD get_OwnerActorNrOffset;
int (*get_OwnerActorNr)(void *_instance);
DWORD get_isOwnerActiveOffset;
bool (*get_isOwnerActive)(void *_instance);
DWORD get_CreatorActorNrOffset;
int (*get_CreatorActorNr)(void *_instance);
DWORD get_isMineOffset;
bool (*get_isMine)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD RequestOwnershipOffset;
void (*RequestOwnership)(void *_instance);
DWORD TransferOwnershipOffset;
void (*TransferOwnership)(void *_instance, void *newOwner);
DWORD TransferOwnership1Offset;
void (*TransferOwnership1)(void *_instance, int newOwnerId);
DWORD OnMasterClientSwitchedOffset;
void (*OnMasterClientSwitched)(void *_instance, void *newMasterClient);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD SerializeViewOffset;
void (*SerializeView)(void *_instance, void *stream, int info);
DWORD DeserializeViewOffset;
void (*DeserializeView)(void *_instance, void *stream, int info);
DWORD DeserializeComponentOffset;
void (*DeserializeComponent)(void *_instance, void *component, void *stream, int info);
DWORD SerializeComponentOffset;
void (*SerializeComponent)(void *_instance, void *component, void *stream, int info);
DWORD ExecuteComponentOnSerializeOffset;
void (*ExecuteComponentOnSerialize)(void *_instance, void *component, void *stream, int info);
DWORD RefreshRpcMonoBehaviourCacheOffset;
void (*RefreshRpcMonoBehaviourCache)(void *_instance);
DWORD GetOffset;
void *(*Get)(void *component);
DWORD Get1Offset;
void *(*Get1)(void *gameObj);
DWORD FindOffset;
void *(*Find)(int viewID);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}PhotonView;
struct PhotonPingManager {
DWORD get_BestRegionOffset;
void *(*get_BestRegion)(void *_instance);
DWORD get_DoneOffset;
bool (*get_Done)(void *_instance);
DWORD PingSocketOffset;
void *(*PingSocket)(void *_instance, void *region);
DWORD ResolveHostOffset;
monoString *(*ResolveHost)(monoString *hostName);
}PhotonPingManager;
struct PunRPC {
}PunRPC;
struct Room {
DWORD get_NameOffset;
monoString *(*get_Name)(void *_instance);
DWORD set_NameOffset;
void (*set_Name)(void *_instance, monoString *value);
DWORD get_IsOpenOffset;
bool (*get_IsOpen)(void *_instance);
DWORD set_IsOpenOffset;
void (*set_IsOpen)(void *_instance, bool value);
DWORD get_IsVisibleOffset;
bool (*get_IsVisible)(void *_instance);
DWORD set_IsVisibleOffset;
void (*set_IsVisible)(void *_instance, bool value);
DWORD get_PropertiesListedInLobbyOffset;
DWORD get_AutoCleanUpOffset;
bool (*get_AutoCleanUp)(void *_instance);
DWORD get_MaxPlayersOffset;
int (*get_MaxPlayers)(void *_instance);
DWORD set_MaxPlayersOffset;
void (*set_MaxPlayers)(void *_instance, int value);
DWORD get_PlayerCountOffset;
int (*get_PlayerCount)(void *_instance);
DWORD get_ExpectedUsersOffset;
DWORD get_PlayerTtlOffset;
int (*get_PlayerTtl)(void *_instance);
DWORD set_PlayerTtlOffset;
void (*set_PlayerTtl)(void *_instance, int value);
DWORD get_EmptyRoomTtlOffset;
int (*get_EmptyRoomTtl)(void *_instance);
DWORD set_EmptyRoomTtlOffset;
void (*set_EmptyRoomTtl)(void *_instance, int value);
DWORD get_MasterClientIdOffset;
int (*get_MasterClientId)(void *_instance);
DWORD set_MasterClientIdOffset;
void (*set_MasterClientId)(void *_instance, int value);
DWORD SetCustomPropertiesOffset;
void (*SetCustomProperties)(void *_instance, void *propertiesToSet, void *expectedValues, bool webForward);
DWORD ClearExpectedUsersOffset;
void (*ClearExpectedUsers)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToStringFullOffset;
monoString *(*ToStringFull)(void *_instance);
DWORD get_nameOffset;
monoString *(*get_name)(void *_instance);
DWORD set_nameOffset;
void (*set_name)(void *_instance, monoString *value);
DWORD get_openOffset;
bool (*get_open)(void *_instance);
DWORD set_openOffset;
void (*set_open)(void *_instance, bool value);
DWORD get_visibleOffset;
bool (*get_visible)(void *_instance);
DWORD set_visibleOffset;
void (*set_visible)(void *_instance, bool value);
DWORD get_propertiesListedInLobbyOffset;
DWORD get_autoCleanUpOffset;
bool (*get_autoCleanUp)(void *_instance);
DWORD get_maxPlayersOffset;
int (*get_maxPlayers)(void *_instance);
DWORD set_maxPlayersOffset;
void (*set_maxPlayers)(void *_instance, int value);
DWORD get_playerCountOffset;
int (*get_playerCount)(void *_instance);
DWORD get_expectedUsersOffset;
DWORD get_masterClientIdOffset;
int (*get_masterClientId)(void *_instance);
DWORD set_masterClientIdOffset;
void (*set_masterClientId)(void *_instance, int value);
}Room;
struct RoomInfo {
DWORD get_removedFromListOffset;
bool (*get_removedFromList)(void *_instance);
DWORD set_removedFromListOffset;
void (*set_removedFromList)(void *_instance, bool value);
DWORD get_serverSideMasterClientOffset;
bool (*get_serverSideMasterClient)(void *_instance);
DWORD set_serverSideMasterClientOffset;
void (*set_serverSideMasterClient)(void *_instance, bool value);
DWORD get_CustomPropertiesOffset;
void *(*get_CustomProperties)(void *_instance);
DWORD get_NameOffset;
monoString *(*get_Name)(void *_instance);
DWORD get_PlayerCountOffset;
int (*get_PlayerCount)(void *_instance);
DWORD set_PlayerCountOffset;
void (*set_PlayerCount)(void *_instance, int value);
DWORD get_IsLocalClientInsideOffset;
bool (*get_IsLocalClientInside)(void *_instance);
DWORD set_IsLocalClientInsideOffset;
void (*set_IsLocalClientInside)(void *_instance, bool value);
DWORD get_MaxPlayersOffset;
DWORD get_IsOpenOffset;
bool (*get_IsOpen)(void *_instance);
DWORD get_IsVisibleOffset;
bool (*get_IsVisible)(void *_instance);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToStringFullOffset;
monoString *(*ToStringFull)(void *_instance);
DWORD InternalCachePropertiesOffset;
void (*InternalCacheProperties)(void *_instance, void *propertiesToCache);
DWORD get_customPropertiesOffset;
void *(*get_customProperties)(void *_instance);
DWORD get_nameOffset;
monoString *(*get_name)(void *_instance);
DWORD get_playerCountOffset;
int (*get_playerCount)(void *_instance);
DWORD set_playerCountOffset;
void (*set_playerCount)(void *_instance, int value);
DWORD get_isLocalClientInsideOffset;
bool (*get_isLocalClientInside)(void *_instance);
DWORD set_isLocalClientInsideOffset;
void (*set_isLocalClientInside)(void *_instance, bool value);
DWORD get_maxPlayersOffset;
DWORD get_openOffset;
bool (*get_open)(void *_instance);
DWORD get_visibleOffset;
bool (*get_visible)(void *_instance);
}RoomInfo;
struct Region {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, int code, monoString *regionCodeString, monoString *address);
DWORD ParseOffset;
int(*Parse)(monoString *codeAsString);
DWORD ParseFlagOffset;
int(*ParseFlag)(int region);
DWORD ParseFlag1Offset;
int(*ParseFlag1)(monoString *codeAsString);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}Region;
struct ServerSettings {
DWORD UseCloudBestRegionOffset;
void (*UseCloudBestRegion)(void *_instance, monoString *cloudAppid);
DWORD UseCloudOffset;
void (*UseCloud)(void *_instance, monoString *cloudAppid);
DWORD UseCloud1Offset;
void (*UseCloud1)(void *_instance, monoString *cloudAppid, int code);
DWORD UseMyServerOffset;
void (*UseMyServer)(void *_instance, monoString *serverAddress, int serverPort, monoString *application);
DWORD IsAppIdOffset;
bool (*IsAppId)(monoString *val);
DWORD get_BestRegionCodeInPreferencesOffset;
int(*get_BestRegionCodeInPreferences)();
DWORD ResetBestRegionCodeInPreferencesOffset;
void (*ResetBestRegionCodeInPreferences)();
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}ServerSettings;
struct PhotonAnimatorView {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD CacheDiscreteTriggersOffset;
void (*CacheDiscreteTriggers)(void *_instance);
DWORD DoesLayerSynchronizeTypeExistOffset;
bool (*DoesLayerSynchronizeTypeExist)(void *_instance, int layerIndex);
DWORD DoesParameterSynchronizeTypeExistOffset;
bool (*DoesParameterSynchronizeTypeExist)(void *_instance, monoString *name);
DWORD GetSynchronizedLayersOffset;
DWORD GetSynchronizedParametersOffset;
DWORD GetLayerSynchronizeTypeOffset;
int(*GetLayerSynchronizeType)(void *_instance, int layerIndex);
DWORD GetParameterSynchronizeTypeOffset;
int(*GetParameterSynchronizeType)(void *_instance, monoString *name);
DWORD SetLayerSynchronizedOffset;
void (*SetLayerSynchronized)(void *_instance, int layerIndex, int synchronizeType);
DWORD SetParameterSynchronizedOffset;
void (*SetParameterSynchronized)(void *_instance, monoString *name, int type, int synchronizeType);
DWORD SerializeDataContinuouslyOffset;
void (*SerializeDataContinuously)(void *_instance);
DWORD DeserializeDataContinuouslyOffset;
void (*DeserializeDataContinuously)(void *_instance);
DWORD SerializeDataDiscretlyOffset;
void (*SerializeDataDiscretly)(void *_instance, void *stream);
DWORD DeserializeDataDiscretlyOffset;
void (*DeserializeDataDiscretly)(void *_instance, void *stream);
DWORD SerializeSynchronizationTypeStateOffset;
void (*SerializeSynchronizationTypeState)(void *_instance, void *stream);
DWORD DeserializeSynchronizationTypeStateOffset;
void (*DeserializeSynchronizationTypeState)(void *_instance, void *stream);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, void *stream, int info);
}PhotonAnimatorView;
struct PhotonRigidbody2DView {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, void *stream, int info);
}PhotonRigidbody2DView;
struct PhotonRigidbodyView {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, void *stream, int info);
}PhotonRigidbodyView;
struct PhotonTransformView {
DWORD get_currentVelocityOffset;
Vector3 (*get_currentVelocity)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD get_desiredPositionOffset;
Vector3 (*get_desiredPosition)(void *_instance);
DWORD GotPositionOffset;
void (*GotPosition)(void *_instance, Vector3 readPosition);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD UpdatePositionOffset;
void (*UpdatePosition)(void *_instance);
DWORD UpdateRotationOffset;
void (*UpdateRotation)(void *_instance);
DWORD UpdateScaleOffset;
void (*UpdateScale)(void *_instance);
DWORD SetSynchronizedValuesOffset;
void (*SetSynchronizedValues)(void *_instance, Vector3 speed, float turnSpeed);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, void *stream, int info);
DWORD DoDrawEstimatedPositionErrorOffset;
void (*DoDrawEstimatedPositionError)(void *_instance);
}PhotonTransformView;
struct PhotonTransformViewPositionControl {
DWORD get_currentVelocityOffset;
Vector3 (*get_currentVelocity)(void *_instance);
DWORD GotPositionOffset;
void (*GotPosition)(void *_instance, Vector3 readPosition);
DWORD GetOldestStoredNetworkPositionOffset;
Vector3 (*GetOldestStoredNetworkPosition)(void *_instance);
DWORD SetSynchronizedValuesOffset;
void (*SetSynchronizedValues)(void *_instance, Vector3 speed, float turnSpeed);
DWORD UpdatePositionOffset;
Vector3 (*UpdatePosition)(void *_instance, Vector3 currentPosition);
DWORD GetNetworkPositionOffset;
Vector3 (*GetNetworkPosition)(void *_instance);
DWORD GetExtrapolatedPositionOffsetOffset;
Vector3 (*GetExtrapolatedPositionOffset)(void *_instance);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, Vector3 currentPosition, void *stream, int info);
DWORD SerializeDataOffset;
void (*SerializeData)(void *_instance, Vector3 currentPosition, void *stream, int info);
DWORD DeserializeDataOffset;
void (*DeserializeData)(void *_instance, void *stream, int info);
}PhotonTransformViewPositionControl;
struct PhotonTransformViewPositionModel {
}PhotonTransformViewPositionModel;
struct PhotonTransformViewRotationControl {
DWORD GetNetworkRotationOffset;
int(*GetNetworkRotation)(void *_instance);
DWORD GetRotationOffset;
int(*GetRotation)(void *_instance, int currentRotation);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, int currentRotation, void *stream, int info);
}PhotonTransformViewRotationControl;
struct PhotonTransformViewRotationModel {
}PhotonTransformViewRotationModel;
struct PhotonTransformViewScaleControl {
DWORD GetNetworkScaleOffset;
Vector3 (*GetNetworkScale)(void *_instance);
DWORD GetScaleOffset;
Vector3 (*GetScale)(void *_instance, Vector3 currentScale);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, Vector3 currentScale, void *stream, int info);
}PhotonTransformViewScaleControl;
struct PhotonTransformViewScaleModel {
}PhotonTransformViewScaleModel;
struct ConnectAndJoinRandom {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnConnectedToMasterOffset;
void (*OnConnectedToMaster)(void *_instance);
DWORD OnJoinedLobbyOffset;
void (*OnJoinedLobby)(void *_instance);
DWORD OnPhotonRandomJoinFailedOffset;
void (*OnPhotonRandomJoinFailed)(void *_instance);
DWORD OnFailedToConnectToPhotonOffset;
void (*OnFailedToConnectToPhoton)(void *_instance, int cause);
DWORD OnJoinedRoomOffset;
void (*OnJoinedRoom)(void *_instance);
}ConnectAndJoinRandom;
struct CullArea {
DWORD get_CellCountOffset;
int (*get_CellCount)(void *_instance);
DWORD set_CellCountOffset;
void (*set_CellCount)(void *_instance, int value);
DWORD get_CellTreeOffset;
void *(*get_CellTree)(void *_instance);
DWORD set_CellTreeOffset;
void (*set_CellTree)(void *_instance, void *value);
DWORD get_MapOffset;
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDrawGizmosOffset;
void (*OnDrawGizmos)(void *_instance);
DWORD CreateCellHierarchyOffset;
void (*CreateCellHierarchy)(void *_instance);
DWORD CreateChildCellsOffset;
void (*CreateChildCells)(void *_instance, void *parent, int cellLevelInHierarchy);
DWORD DrawCellsOffset;
void (*DrawCells)(void *_instance);
DWORD IsCellCountAllowedOffset;
bool (*IsCellCountAllowed)(void *_instance);
DWORD GetActiveCellsOffset;
}CullArea;
struct CellTree {
DWORD get_RootNodeOffset;
void *(*get_RootNode)(void *_instance);
DWORD set_RootNodeOffset;
void (*set_RootNode)(void *_instance, void *value);
DWORD ctor1Offset;
void (*ctor1)(void *_instance, void *root);
}CellTree;
struct CellTreeNode {
DWORD AddChildOffset;
void (*AddChild)(void *_instance, void *child);
DWORD DrawOffset;
void (*Draw)(void *_instance);
DWORD IsPointInsideCellOffset;
bool (*IsPointInsideCell)(void *_instance, bool yIsUpAxis, Vector3 point);
DWORD IsPointNearCellOffset;
bool (*IsPointNearCell)(void *_instance, bool yIsUpAxis, Vector3 point);
}CellTreeNode;
struct InRoomChat {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD ChatOffset;
void (*Chat)(void *_instance, monoString *newLine, int mi);
DWORD AddLineOffset;
void (*AddLine)(void *_instance, monoString *newLine);
}InRoomChat;
struct InputToEvent {
DWORD get_goPointedAtOffset;
void *(*get_goPointedAt)();
DWORD set_goPointedAtOffset;
void (*set_goPointedAt)(void *value);
DWORD get_DragVectorOffset;
Vector2 (*get_DragVector)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD PressOffset;
void (*Press)(void *_instance, Vector2 screenPos);
DWORD ReleaseOffset;
void (*Release)(void *_instance, Vector2 screenPos);
DWORD RaycastObjectOffset;
void *(*RaycastObject)(void *_instance, Vector2 screenPos);
}InputToEvent;
struct ManualPhotonViewAllocator {
DWORD AllocateManualPhotonViewOffset;
void (*AllocateManualPhotonView)(void *_instance);
DWORD InstantiateRpcOffset;
void (*InstantiateRpc)(void *_instance, int viewID);
}ManualPhotonViewAllocator;
struct MoveByKeys {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FixedUpdateOffset;
void (*FixedUpdate)(void *_instance);
}MoveByKeys;
struct NetworkCullingHandler {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD HaveActiveCellsChangedOffset;
bool (*HaveActiveCellsChanged)(void *_instance);
DWORD UpdateInterestGroupsOffset;
void (*UpdateInterestGroups)(void *_instance);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, void *stream, int info);
}NetworkCullingHandler;
struct OnClickDestroy {
DWORD OnClickOffset;
void (*OnClick)(void *_instance);
DWORD DestroyRpcOffset;
void *(*DestroyRpc)(void *_instance);
}OnClickDestroy;
struct OnClickInstantiate {
DWORD OnClickOffset;
void (*OnClick)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}OnClickInstantiate;
struct OnJoinedInstantiate {
DWORD OnJoinedRoomOffset;
void (*OnJoinedRoom)(void *_instance);
}OnJoinedInstantiate;
struct OnStartDelete {
DWORD StartOffset;
void (*Start)(void *_instance);
}OnStartDelete;
struct PickupItem {
DWORD get_ViewIDOffset;
int (*get_ViewID)(void *_instance);
DWORD OnTriggerEnterOffset;
void (*OnTriggerEnter)(void *_instance, void *other);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, void *stream, int info);
DWORD PickupOffset;
void (*Pickup)(void *_instance);
DWORD DropOffset;
void (*Drop)(void *_instance);
DWORD Drop1Offset;
void (*Drop1)(void *_instance, Vector3 newPosition);
DWORD PunPickupOffset;
void (*PunPickup)(void *_instance, int msgInfo);
DWORD PickedUpOffset;
void (*PickedUp)(void *_instance, float timeUntilRespawn);
DWORD PunRespawnOffset;
void (*PunRespawn)(void *_instance, Vector3 pos);
DWORD PunRespawn1Offset;
void (*PunRespawn1)(void *_instance);
}PickupItem;
struct PickupItemSimple {
DWORD OnTriggerEnterOffset;
void (*OnTriggerEnter)(void *_instance, void *other);
DWORD PickupOffset;
void (*Pickup)(void *_instance);
DWORD PunPickupSimpleOffset;
void (*PunPickupSimple)(void *_instance, int msgInfo);
DWORD RespawnAfterOffset;
void (*RespawnAfter)(void *_instance);
}PickupItemSimple;
struct PickupItemSyncer {
DWORD OnPhotonPlayerConnectedOffset;
void (*OnPhotonPlayerConnected)(void *_instance, void *newPlayer);
DWORD OnJoinedRoomOffset;
void (*OnJoinedRoom)(void *_instance);
DWORD AskForPickupItemSpawnTimesOffset;
void (*AskForPickupItemSpawnTimes)(void *_instance);
DWORD RequestForPickupTimesOffset;
void (*RequestForPickupTimes)(void *_instance, int msgInfo);
DWORD RequestForPickupItemsOffset;
void (*RequestForPickupItems)(void *_instance, int msgInfo);
DWORD SendPickedUpItemsOffset;
void (*SendPickedUpItems)(void *_instance, void *targetPlayer);
}PickupItemSyncer;
struct PointedAtGameObjectInfo {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}PointedAtGameObjectInfo;
struct PunPlayerScores {
}PunPlayerScores;
struct ScoreExtensions {
DWORD SetScoreOffset;
void (*SetScore)(void *player, int newScore);
DWORD AddScoreOffset;
void (*AddScore)(void *player, int scoreToAddToCurrent);
DWORD GetScoreOffset;
int (*GetScore)(void *player);
}ScoreExtensions;
struct PunTeams {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnJoinedRoomOffset;
void (*OnJoinedRoom)(void *_instance);
DWORD OnLeftRoomOffset;
void (*OnLeftRoom)(void *_instance);
DWORD OnPhotonPlayerDisconnectedOffset;
void (*OnPhotonPlayerDisconnected)(void *_instance, void *otherPlayer);
DWORD OnPhotonPlayerConnectedOffset;
void (*OnPhotonPlayerConnected)(void *_instance, void *newPlayer);
DWORD UpdateTeamsOffset;
void (*UpdateTeams)(void *_instance);
}PunTeams;
struct TeamExtensions {
DWORD GetTeamOffset;
int(*GetTeam)(void *player);
DWORD SetTeamOffset;
void (*SetTeam)(void *player, int team);
}TeamExtensions;
struct PunTurnManager {
DWORD get_TurnOffset;
int (*get_Turn)(void *_instance);
DWORD set_TurnOffset;
void (*set_Turn)(void *_instance, int value);
DWORD get_ElapsedTimeInTurnOffset;
float (*get_ElapsedTimeInTurn)(void *_instance);
DWORD get_RemainingSecondsInTurnOffset;
float (*get_RemainingSecondsInTurn)(void *_instance);
DWORD get_IsCompletedByAllOffset;
bool (*get_IsCompletedByAll)(void *_instance);
DWORD get_IsFinishedByMeOffset;
bool (*get_IsFinishedByMe)(void *_instance);
DWORD get_IsOverOffset;
bool (*get_IsOver)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD BeginTurnOffset;
void (*BeginTurn)(void *_instance);
DWORD GetPlayerFinishedTurnOffset;
bool (*GetPlayerFinishedTurn)(void *_instance, void *player);
DWORD OnPhotonCustomRoomPropertiesChangedOffset;
void (*OnPhotonCustomRoomPropertiesChanged)(void *_instance, void *propertiesThatChanged);
}PunTurnManager;
struct IPunTurnManagerCallbacks {
}IPunTurnManagerCallbacks;
struct TurnExtensions {
DWORD SetTurnOffset;
void (*SetTurn)(void *room, int turn, bool setStartTime);
DWORD GetTurnOffset;
int (*GetTurn)(void *room);
DWORD GetTurnStartOffset;
int (*GetTurnStart)(void *room);
DWORD GetFinishedTurnOffset;
int (*GetFinishedTurn)(void *player);
DWORD SetFinishedTurnOffset;
void (*SetFinishedTurn)(void *player, int turn);
}TurnExtensions;
struct QuitOnEscapeOrBack {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}QuitOnEscapeOrBack;
struct ShowStatusWhenConnecting {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD GetConnectingDotsOffset;
monoString *(*GetConnectingDots)(void *_instance);
}ShowStatusWhenConnecting;
struct SmoothSyncMovement {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, void *stream, int info);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}SmoothSyncMovement;
struct SupportLogger {
DWORD StartOffset;
void (*Start)(void *_instance);
}SupportLogger;
struct SupportLogging {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnApplicationPauseOffset;
void (*OnApplicationPause)(void *_instance, bool pause);
DWORD OnApplicationQuitOffset;
void (*OnApplicationQuit)(void *_instance);
DWORD LogStatsOffset;
void (*LogStats)(void *_instance);
DWORD LogBasicsOffset;
void (*LogBasics)(void *_instance);
DWORD OnConnectedToPhotonOffset;
void (*OnConnectedToPhoton)(void *_instance);
DWORD OnFailedToConnectToPhotonOffset;
void (*OnFailedToConnectToPhoton)(void *_instance, int cause);
DWORD OnJoinedLobbyOffset;
void (*OnJoinedLobby)(void *_instance);
DWORD OnJoinedRoomOffset;
void (*OnJoinedRoom)(void *_instance);
DWORD OnCreatedRoomOffset;
void (*OnCreatedRoom)(void *_instance);
DWORD OnLeftRoomOffset;
void (*OnLeftRoom)(void *_instance);
DWORD OnDisconnectedFromPhotonOffset;
void (*OnDisconnectedFromPhoton)(void *_instance);
}SupportLogging;
struct CrossScript {
DWORD StartOffset;
void (*Start)(void *_instance);
}CrossScript;
struct qb_Group {
DWORD AddObjectOffset;
void (*AddObject)(void *_instance, void *newObject);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD ShowOffset;
void (*Show)(void *_instance);
DWORD FreezeOffset;
void (*Freeze)(void *_instance);
DWORD UnFreezeOffset;
void (*UnFreeze)(void *_instance);
DWORD CleanUpOffset;
void (*CleanUp)(void *_instance);
}qb_Group;
struct qb_Object {
}qb_Object;
struct qb_ObjectContainer {
}qb_ObjectContainer;
struct ADSScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD ToggleImagesOffset;
void (*ToggleImages)(void *_instance, bool enabled);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}ADSScript;
struct CrazyAdsController {
DWORD SetupOffset;
void (*Setup)(void *_instance, void *_goldNotification, void *_watchAdPopup, void *_openCaseData);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OfferwallClosedEventOffset;
void (*OfferwallClosedEvent)(void *_instance);
DWORD ShowOfferwallButtonClickedOffset;
void (*ShowOfferwallButtonClicked)(void *_instance);
DWORD IsReadyToUseOffset;
bool (*IsReadyToUse)(void *_instance);
DWORD ShowAdOffset;
void (*ShowAd)(void *_instance);
DWORD ShowCommonAdOffset;
void (*ShowCommonAd)(void *_instance);
DWORD ShowRewardedVideoButtonClickedOffset;
void (*ShowRewardedVideoButtonClicked)(void *_instance);
DWORD OnCrazyAdsCompletedEventOffset;
void (*OnCrazyAdsCompletedEvent)(void *_instance);
DWORD OnCatchRewardCompletedOffset;
void (*OnCatchRewardCompleted)(void *_instance, monoString *result);
DWORD UseDebugDataOffset;
monoString *(*UseDebugData)(void *_instance, int debugType);
DWORD OpenCaseFromMatchOffset;
void (*OpenCaseFromMatch)(void *_instance);
DWORD OnCatchRewardFailedOffset;
void (*OnCatchRewardFailed)(void *_instance, monoString *result);
DWORD RewardedVideoAdClosedEventOffset;
void (*RewardedVideoAdClosedEvent)(void *_instance);
DWORD OnCrazyAdsFailedEventOffset;
void (*OnCrazyAdsFailedEvent)(void *_instance);
DWORD OnCrazyAdsSkippedEventOffset;
void (*OnCrazyAdsSkippedEvent)(void *_instance);
DWORD InitSDKOffset;
void (*InitSDK)(void *_instance);
DWORD OfferwallOpenedEventOffset;
void (*OfferwallOpenedEvent)(void *_instance);
DWORD RewardedVideoAdOpenedEventOffset;
void (*RewardedVideoAdOpenedEvent)(void *_instance);
DWORD ShowAdb__7_0Offset;
void (*ShowAdb__7_0)(void *_instance, monoString *result);
}CrazyAdsController;
struct WebGLAdsEncryptor {
DWORD GetWebFormOffset;
void *(*GetWebForm)(void *_instance);
DWORD GetEpocTimeStringOffset;
monoString *(*GetEpocTimeString)(void *_instance);
DWORD GenerateEventIDOffset;
monoString *(*GenerateEventID)(void *_instance);
DWORD GenerateSignatureOffset;
monoString *(*GenerateSignature)(void *_instance, monoString *timeStamp, monoString *event_id);
}WebGLAdsEncryptor;
struct CrazyBannersController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetLoadedScreenOffset;
void (*SetLoadedScreen)(void *_instance, int _loadedScreen);
DWORD ShowBannerOffset;
void (*ShowBanner)(void *_instance, int _bannerId);
DWORD BannerRendererOffset;
void (*BannerRenderer)(void *_instance, monoString *_id);
DWORD BannerErrorOffset;
void (*BannerError)(void *_instance, monoString *_id, monoString *_error);
DWORD RemoveCurrentBannerOffset;
void (*RemoveCurrentBanner)(void *_instance);
DWORD OnChangedSceneOffset;
void (*OnChangedScene)(void *_instance, int _current, int _next);
}CrazyBannersController;
struct GenericAdsController {
DWORD ShowGoldNotificationOffset;
void (*ShowGoldNotification)(void *_instance);
DWORD WaitToRefreshGoldOffset;
void *(*WaitToRefreshGold)(void *_instance);
DWORD StopLoadingOffset;
void (*StopLoading)(void *_instance, bool canWatchAnotherAd, bool refreshGold);
DWORD OnWatchAdClickedOffset;
void (*OnWatchAdClicked)(void *_instance);
DWORD ShouldShowTargetedAdPopupOffset;
bool (*ShouldShowTargetedAdPopup)(void *_instance);
DWORD ShowTargetedAdPopupOffset;
void (*ShowTargetedAdPopup)(void *_instance);
DWORD OnAgreeSourceTargetingOffset;
void (*OnAgreeSourceTargeting)(void *_instance);
DWORD OnDisgreeSourceTargetingOffset;
void (*OnDisgreeSourceTargeting)(void *_instance);
DWORD SetShowAdOffset;
void (*SetShowAd)(void *_instance);
DWORD ShowPopupOffset;
void (*ShowPopup)(void *_instance);
DWORD HidePopupOffset;
void (*HidePopup)(void *_instance);
DWORD OnCatchRewardCompletedOffset;
void (*OnCatchRewardCompleted)(void *_instance, monoString *result);
DWORD UseDebugDataOffset;
monoString *(*UseDebugData)(void *_instance);
DWORD OnCatchRewardFailedOffset;
void (*OnCatchRewardFailed)(void *_instance, monoString *result);
DWORD LoadOpenCasePostMatchAdOffset;
void (*LoadOpenCasePostMatchAd)(void *_instance);
}GenericAdsController;
struct CatchRewardResponse {
DWORD get_StatusOffset;
int (*get_Status)(void *_instance);
DWORD get_MsgOffset;
monoString *(*get_Msg)(void *_instance);
}CatchRewardResponse;
struct IronSourceController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitSDKOffset;
void (*InitSDK)(void *_instance);
DWORD OnApplicationPauseOffset;
void (*OnApplicationPause)(void *_instance, bool isPaused);
DWORD IsReadyToUseOffset;
bool (*IsReadyToUse)(void *_instance);
DWORD ShowOfferwallButtonClickedOffset;
void (*ShowOfferwallButtonClicked)(void *_instance);
DWORD OfferwallOpenedEventOffset;
void (*OfferwallOpenedEvent)(void *_instance);
DWORD OfferwallClosedEventOffset;
void (*OfferwallClosedEvent)(void *_instance);
DWORD OfferwallShowFailedEventOffset;
void (*OfferwallShowFailedEvent)(void *_instance, void *error);
DWORD GetOfferwallCreditsFailedEventOffset;
void (*GetOfferwallCreditsFailedEvent)(void *_instance, void *error);
DWORD OfferwallAvailableEventOffset;
void (*OfferwallAvailableEvent)(void *_instance, bool canShowOfferwal);
DWORD ShowAdOffset;
void (*ShowAd)(void *_instance);
DWORD ShowRewardedVideoButtonClickedOffset;
void (*ShowRewardedVideoButtonClicked)(void *_instance);
DWORD ShowDemandOnlyRewardedVideoOffset;
void (*ShowDemandOnlyRewardedVideo)(void *_instance);
DWORD RewardedVideoAvailabilityChangedEventOffset;
void (*RewardedVideoAvailabilityChangedEvent)(void *_instance, bool canShowAd);
DWORD RewardedVideoAdOpenedEventOffset;
void (*RewardedVideoAdOpenedEvent)(void *_instance);
DWORD RewardedVideoAdRewardedEventOffset;
void (*RewardedVideoAdRewardedEvent)(void *_instance, void *ssp);
DWORD RewardedVideoAdClosedEventOffset;
void (*RewardedVideoAdClosedEvent)(void *_instance);
DWORD RewardedVideoAdStartedEventOffset;
void (*RewardedVideoAdStartedEvent)(void *_instance);
DWORD RewardedVideoAdEndedEventOffset;
void (*RewardedVideoAdEndedEvent)(void *_instance);
DWORD RewardedVideoAdShowFailedEventOffset;
void (*RewardedVideoAdShowFailedEvent)(void *_instance, void *error);
DWORD RewardedVideoAdClickedEventOffset;
void (*RewardedVideoAdClickedEvent)(void *_instance, void *ssp);
DWORD ForceOpenAdCaseOffset;
void (*ForceOpenAdCase)(void *_instance);
DWORD Unlock_Ad_RewardOffset;
void *(*Unlock_Ad_Reward)(void *_instance, bool shouldWait);
DWORD OnCatchRewardFailedOffset;
void (*OnCatchRewardFailed)(void *_instance, monoString *result);
DWORD OnUnlockAdRewardFailedOffset;
void (*OnUnlockAdRewardFailed)(void *_instance, monoString *result);
DWORD ShowAdb__23_0Offset;
void (*ShowAdb__23_0)(void *_instance, monoString *result);
}IronSourceController;
struct PokiAdsController {
DWORD SetupOffset;
void (*Setup)(void *_instance, void *_goldNotification, void *_watchAdPopup, void *_openCaseData);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD IsReadyToUseOffset;
bool (*IsReadyToUse)(void *_instance);
DWORD RewardedVideoAdClosedEventOffset;
void (*RewardedVideoAdClosedEvent)(void *_instance);
DWORD ShowAdOffset;
void (*ShowAd)(void *_instance);
DWORD ShowRewardedVideoButtonClickedOffset;
void (*ShowRewardedVideoButtonClicked)(void *_instance);
DWORD RewardedBreakCompleteOffset;
void (*RewardedBreakComplete)(void *_instance, bool withReward);
DWORD ShowingAdsErrorMessageOffset;
void (*ShowingAdsErrorMessage)(void *_instance);
DWORD OnCatchRewardFailedOffset;
void (*OnCatchRewardFailed)(void *_instance, monoString *result);
DWORD OnCatchRewardCompletedOffset;
void (*OnCatchRewardCompleted)(void *_instance, monoString *result);
DWORD ShowCommercialBreakOffset;
void (*ShowCommercialBreak)(void *_instance, void *_onCommercialBreakCompleted);
DWORD CommercialBreakCompleteOffset;
void (*CommercialBreakComplete)(void *_instance);
DWORD InitSDKOffset;
void (*InitSDK)(void *_instance);
DWORD RewardedVideoAdOpenedEventOffset;
void (*RewardedVideoAdOpenedEvent)(void *_instance);
DWORD ShowOfferwallButtonClickedOffset;
void (*ShowOfferwallButtonClicked)(void *_instance);
DWORD OfferwallClosedEventOffset;
void (*OfferwallClosedEvent)(void *_instance);
DWORD OfferwallOpenedEventOffset;
void (*OfferwallOpenedEvent)(void *_instance);
DWORD ShowAdb__5_0Offset;
void (*ShowAdb__5_0)(void *_instance, monoString *result);
}PokiAdsController;
struct PokiBanner {
DWORD get_BannerIDOffset;
int(*get_BannerID)(void *_instance);
DWORD get_BannerResolutionOffset;
int(*get_BannerResolution)(void *_instance);
DWORD get_SecondaryBannerResolutionOffset;
int(*get_SecondaryBannerResolution)(void *_instance);
DWORD get_MinimumResolutionOffset;
Vector2 (*get_MinimumResolution)(void *_instance);
DWORD get_MinimumResolutionToShowBannerOffset;
Vector2 (*get_MinimumResolutionToShowBanner)(void *_instance);
DWORD get_DebugBannerImgOffset;
void *(*get_DebugBannerImg)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ShowOffset;
void (*Show)(void *_instance);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD CR_ShowAdOffset;
void *(*CR_ShowAd)(void *_instance);
DWORD ModifyBannerSizeOffset;
void (*ModifyBannerSize)(void *_instance);
DWORD CheckBannerSizeOffset;
int(*CheckBannerSize)(void *_instance);
DWORD DestroyAdOffset;
void (*DestroyAd)(void *_instance);
}PokiBanner;
struct PokiBannersController {
DWORD get_IsDisplayingBannerOffset;
bool (*get_IsDisplayingBanner)(void *_instance);
DWORD get_screenWidthOffset;
float (*get_screenWidth)(void *_instance);
DWORD set_screenWidthOffset;
void (*set_screenWidth)(void *_instance, float value);
DWORD get_screenHeightOffset;
float (*get_screenHeight)(void *_instance);
DWORD set_screenHeightOffset;
void (*set_screenHeight)(void *_instance, float value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD SetLoadedScreenOffset;
void (*SetLoadedScreen)(void *_instance, int _loadedScreen);
DWORD SetBannerOffset;
void (*SetBanner)(void *_instance, void *_banner);
DWORD ShowBannerOffset;
void (*ShowBanner)(void *_instance, int _bannerId);
DWORD RemoveCurrentBannerOffset;
void (*RemoveCurrentBanner)(void *_instance);
DWORD OnChangedSceneOffset;
void (*OnChangedScene)(void *_instance, int _current, int _next);
DWORD CheckIfTheResolutionChangeOffset;
void (*CheckIfTheResolutionChange)(void *_instance);
}PokiBannersController;
struct WebGLAdsManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}WebGLAdsManager;
struct WebGLBanners {
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD get_IsDisplayingBannerOffset;
bool (*get_IsDisplayingBanner)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD SetLoadedScreenOffset;
void (*SetLoadedScreen)(void *_instance, int _loadedScreen);
DWORD OnChangedSceneOffset;
void (*OnChangedScene)(void *_instance, int _current, int _next);
DWORD ShowBannerOffset;
void (*ShowBanner)(void *_instance, int _bannerId);
DWORD RemoveCurrentBannerOffset;
void (*RemoveCurrentBanner)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}WebGLBanners;
struct AimingJoystickToggle {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetEnabledOffset;
void (*SetEnabled)(void *_instance, bool e);
DWORD ToggleChangedOffset;
void (*ToggleChanged)(void *_instance, bool value);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}AimingJoystickToggle;
struct AllowedWeaponsController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD StoreWeaponsBySlotOffset;
void (*StoreWeaponsBySlot)(void *_instance);
DWORD FillToggleDataOffset;
void (*FillToggleData)(void *_instance, void *parent, monoString *weaponName, int weaponType);
DWORD FillSectionsOffset;
void (*FillSections)(void *_instance);
DWORD SelectWeaponTypeMenuOffset;
void (*SelectWeaponTypeMenu)(void *_instance, bool value);
DWORD OnWeaponAllowedValueChangedOffset;
void (*OnWeaponAllowedValueChanged)(void *_instance, bool value);
DWORD OnAllWeaponsValueChangedOffset;
void (*OnAllWeaponsValueChanged)(void *_instance, bool value);
DWORD OnOkButtonPressedOffset;
void (*OnOkButtonPressed)(void *_instance);
DWORD HardcodeModeWarningOffset;
void (*HardcodeModeWarning)(void *_instance);
}AllowedWeaponsController;
struct AmmoPickup {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}AmmoPickup;
struct AnimatorCallbacks {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD playFootStepSoundOffset;
void (*playFootStepSound)(void *_instance);
DWORD FinishedTurningOffset;
void (*FinishedTurning)(void *_instance);
DWORD OnAnimatorMoveOffset;
void (*OnAnimatorMove)(void *_instance);
}AnimatorCallbacks;
struct AntiCheatModule {
DWORD InitOffset;
void (*Init)(void *_instance, void *antiCheatSystem);
DWORD GetCheatCheckMessageOffset;
void *(*GetCheatCheckMessage)(void *_instance, void *suspect);
DWORD CheckForCheatOffset;
void (*CheckForCheat)(void *_instance, void *message);
DWORD ConsumeMessageOffset;
bool (*ConsumeMessage)(void *_instance);
DWORD OnSceneLoadedOffset;
void (*OnSceneLoaded)(void *_instance, int scene);
DWORD OnSceneUnloadedOffset;
void (*OnSceneUnloaded)(void *_instance, int scene);
}AntiCheatModule;
struct AntiCheatPunishment {
DWORD AdministerPunishmentOffset;
void (*AdministerPunishment)(monoString *cheaterName, void *offender, monoString *punishment, monoString *warningMessage);
}AntiCheatPunishment;
struct AntiCheatPunishmentTest {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}AntiCheatPunishmentTest;
struct AntiCheatModuleConsumer {
DWORD InvokeOffset;
bool (*Invoke)(void *_instance);
DWORD EndInvokeOffset;
bool (*EndInvoke)(void *_instance, void *result);
}AntiCheatModuleConsumer;
struct AntiCheatSystem {
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD RegisterConsumerOffset;
void (*RegisterConsumer)(void *_instance, void *consumer);
DWORD OnSceneLoadedOffset;
void (*OnSceneLoaded)(void *_instance, int scene, int mode);
DWORD OnSceneUnloadedOffset;
void (*OnSceneUnloaded)(void *_instance, int scene);
DWORD GetModuleOffset;
void *(*GetModule)(void *_instance, monoString *name);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnCheatOffset;
void (*OnCheat)(void *_instance, monoString *cheatName, void *suspect, monoString *extraData);
DWORD SendCheatMessagesOffset;
void *(*SendCheatMessages)(void *_instance, int accusationWindow);
DWORD FetchCheatersOffset;
void (*FetchCheaters)(void *_instance);
DWORD FetchCheatersToKickOffset;
void *(*FetchCheatersToKick)(void *_instance);
DWORD LogOffset;
void (*Log)(void *_instance, monoString *message);
DWORD GetAntiCheatSystemOffset;
void *(*GetAntiCheatSystem)();
}AntiCheatSystem;
struct CheatCheckMessage {
DWORD SetSuspectOffset;
void (*SetSuspect)(void *_instance, void *cheater);
DWORD GetSuspectOffset;
void *(*GetSuspect)(void *_instance);
}CheatCheckMessage;
struct CheatSuspect {
DWORD get_BackendIdOffset;
monoString *(*get_BackendId)(void *_instance);
DWORD get_MultiplayerIdOffset;
int (*get_MultiplayerId)(void *_instance);
DWORD ResetOffset;
void (*Reset)(void *_instance, monoString *backendId, int multiplayerId);
}CheatSuspect;
struct TestPointInValidSpace {
DWORD OnDrawGizmosOffset;
void (*OnDrawGizmos)(void *_instance);
}TestPointInValidSpace;
struct TestSegmentRayIntersection {
DWORD OnDrawGizmosOffset;
void (*OnDrawGizmos)(void *_instance);
}TestSegmentRayIntersection;
struct WallHackAntiCheatMap {
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD AddSectorOffset;
void (*AddSector)(void *_instance, void *currentSector, bool currentSectorIsInvalid);
DWORD IsPositionValidOffset;
bool (*IsPositionValid)(void *_instance, Vector3 position);
DWORD OnDrawGizmosOffset;
void (*OnDrawGizmos)(void *_instance);
DWORD DrawSectorGizmoOffset;
void (*DrawSectorGizmo)(void *_instance, void *sectorData, Color color);
}WallHackAntiCheatMap;
struct WallHackAntiCheatModule {
DWORD OnSceneLoadedOffset;
void (*OnSceneLoaded)(void *_instance, int scene);
DWORD GetWarningMessageOffset;
monoString *(*GetWarningMessage)(void *_instance);
DWORD CheckForCheatImplOffset;
bool (*CheckForCheatImpl)(void *_instance, void *message);
DWORD CreateCheatCheckMessageImplOffset;
void *(*CreateCheatCheckMessageImpl)(void *_instance);
}WallHackAntiCheatModule;
struct WallHackCheatCheckMessage {
DWORD GetCheatNameOffset;
monoString *(*GetCheatName)(void *_instance);
DWORD GetExtraDataOffset;
monoString *(*GetExtraData)(void *_instance);
DWORD TruncateOffset;
monoString *(*Truncate)(void *_instance, float num);
}WallHackCheatCheckMessage;
struct WallHackSector {
DWORD AddOffset;
void (*Add)(void *_instance, Vector3 start, Vector3 end);
DWORD UpdateBoundsOffset;
void (*UpdateBounds)(void *_instance, Vector3 position);
DWORD InsideOffset;
bool (*Inside)(void *_instance, Vector3 position);
DWORD IntersectsWithRayOffset;
bool (*IntersectsWithRay)(int segment, Vector2 origin, Vector2 direction);
}WallHackSector;
struct ApplyGraphicsOptions {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetGraphicsOffset;
void (*SetGraphics)(void *_instance);
}ApplyGraphicsOptions;
struct ApplySplatmap {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}ApplySplatmap;
struct AssetBundlesHelper {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnLevelFinishedLoadingOffset;
void (*OnLevelFinishedLoading)(void *_instance, int scene, int mode);
DWORD CheckIfThereAreSOsPostLoginOffset;
void (*CheckIfThereAreSOsPostLogin)(void *_instance);
DWORD CheckIfThereAreSOsOffset;
void (*CheckIfThereAreSOs)(void *_instance);
DWORD GetRandomOfferOffset;
void *(*GetRandomOffer)(void *_instance);
DWORD InstantiableOfferOffset;
bool (*InstantiableOffer)(void *_instance, void *offer);
DWORD InstantiateSpecialOffersOffset;
void *(*InstantiateSpecialOffers)(void *_instance, bool forceDestroyBoughtOffers);
DWORD GetRootOffset;
void *(*GetRoot)(void *_instance, monoString *root);
DWORD DumpGameObjectOffset;
void (*DumpGameObject)(void *gameObject, void *writer, monoString *indent, monoString *parentName);
DWORD ShouldShowSpecialOfferOffset;
bool (*ShouldShowSpecialOffer)(void *_instance, void *offer);
DWORD RefreshSpecialOffersShownAfterFrameOffset;
void *(*RefreshSpecialOffersShownAfterFrame)(void *_instance);
DWORD RefreshSpecialOffersShownOffset;
void (*RefreshSpecialOffersShown)(void *_instance);
DWORD GetPurchasedOffersOffset;
void (*GetPurchasedOffers)(void *_instance);
DWORD OnSuccessGetPurchasedOffset;
void (*OnSuccessGetPurchased)(void *_instance, monoString *result);
DWORD GetSpecialOffersOffset;
void *(*GetSpecialOffers)(void *_instance);
DWORD UnloadAssetBundlesOffset;
void (*UnloadAssetBundles)(void *_instance);
DWORD GetAssetBundleURLOffset;
monoString *(*GetAssetBundleURL)(void *_instance, monoString *bundlename);
DWORD ClearAssetBundleFromDiskOffset;
void (*ClearAssetBundleFromDisk)(void *_instance, monoString *bundlename);
DWORD SaveTextFileOffset;
void (*SaveTextFile)(void *_instance, monoString *path, monoString *filename, monoString *contents);
DWORD SaveDownloadedAssetBundleOffset;
void (*SaveDownloadedAssetBundle)(void *_instance, monoString *path, void *objSERVER);
DWORD CheckIfThereAreSOsb__15_0Offset;
bool (*CheckIfThereAreSOsb__15_0)(void *_instance, void *x);
DWORD GetRandomOfferb__16_0Offset;
bool (*GetRandomOfferb__16_0)(void *_instance, void *x);
}AssetBundlesHelper;
struct AttachmentManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD GetSightStatsOffset;
int(*GetSightStats)(void *_instance, int t);
DWORD GetBarrelPriceOffset;
int (*GetBarrelPrice)(void *_instance, int t);
DWORD GetBarrelPrefabOffset;
void *(*GetBarrelPrefab)(void *_instance, int t, bool lowPoly);
DWORD BuyBarrelOffset;
void (*BuyBarrel)(void *_instance, int weaponType, int t);
DWORD GetBarrelTypeFromNameOffset;
int(*GetBarrelTypeFromName)(void *_instance, monoString *sightName);
DWORD GetBarrelNameFromTypeOffset;
monoString *(*GetBarrelNameFromType)(void *_instance, int t);
DWORD GetAccessoryPriceOffset;
int (*GetAccessoryPrice)(void *_instance, int t);
DWORD GetAccessoryPrefabOffset;
void *(*GetAccessoryPrefab)(void *_instance, int t, bool lowPoly);
DWORD BuyAccessoryOffset;
void (*BuyAccessory)(void *_instance, int weaponType, int t);
DWORD GetAccessoryTypeFromNameOffset;
int(*GetAccessoryTypeFromName)(void *_instance, monoString *sightName);
DWORD GetAccessoryNameFromTypeOffset;
monoString *(*GetAccessoryNameFromType)(void *_instance, int t);
DWORD GetSightPriceOffset;
int (*GetSightPrice)(void *_instance, int t);
DWORD GetSightPrefabOffset;
void *(*GetSightPrefab)(void *_instance, int t);
DWORD BuySightOffset;
void (*BuySight)(void *_instance, int weaponType, int t);
DWORD GetSightTypeFromNameOffset;
int(*GetSightTypeFromName)(void *_instance, monoString *sightName);
DWORD GetSightNameFromTypeOffset;
monoString *(*GetSightNameFromType)(void *_instance, int t);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}AttachmentManager;
struct AudioManager {
DWORD getRandomStepClipOffset;
void *(*getRandomStepClip)(void *_instance);
DWORD getRandomExplosionClipOffset;
void *(*getRandomExplosionClip)(void *_instance);
DWORD getRandomDeathSoundOffset;
void *(*getRandomDeathSound)(void *_instance);
DWORD getRandomBulletHitClipOffset;
void *(*getRandomBulletHitClip)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetAmbientSoundVolumeOffset;
void (*SetAmbientSoundVolume)(void *_instance, float volume);
DWORD playHealthLowSoundOffset;
void (*playHealthLowSound)(void *_instance);
DWORD PlayNukeSirenOffset;
void (*PlayNukeSiren)(void *_instance);
DWORD PlayNukeExplosionOffset;
void (*PlayNukeExplosion)(void *_instance);
DWORD StopKillstreakSoundOffset;
void (*StopKillstreakSound)(void *_instance);
DWORD FadeOutHealthLowSoundOffset;
void (*FadeOutHealthLowSound)(void *_instance);
DWORD StopHealthLowSoundOffset;
void (*StopHealthLowSound)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD PlayDeathSoundOffset;
void (*PlayDeathSound)(void *_instance, bool indoor);
DWORD playGetHitSoundOffset;
void (*playGetHitSound)(void *_instance);
DWORD PlayTimerTickOffset;
void (*PlayTimerTick)(void *_instance);
DWORD PlayHeadshotSoundOffset;
void (*PlayHeadshotSound)(void *_instance);
DWORD playHitMarkerSoundOffset;
void (*playHitMarkerSound)(void *_instance, float volume);
DWORD PlaySoundOnceOffset;
void (*PlaySoundOnce)(void *_instance, void *sound, float volume);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}AudioManager;
struct BRDFLookupTexture {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ColorRGBOffset;
Color (*ColorRGB)(int r, int g, int b);
DWORD CheckConsistencyOffset;
void (*CheckConsistency)(void *_instance);
DWORD PixelFuncOffset;
Color (*PixelFunc)(void *_instance, float ndotl, float ndoth);
DWORD TextureFuncOffset;
void (*TextureFunc)(void *_instance, void *tex);
DWORD GenerateLookupTextureOffset;
void (*GenerateLookupTexture)(void *_instance, int width, int height);
DWORD PreviewOffset;
void (*Preview)(void *_instance);
DWORD BakeOffset;
void (*Bake)(void *_instance);
}BRDFLookupTexture;
struct BlackFadeScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FadeOffset;
void (*Fade)(void *_instance);
DWORD SetColorOffset;
void (*SetColor)(void *_instance, Color c);
DWORD ClearOffset;
void (*Clear)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}BlackFadeScript;
struct BleedBodyPart {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}BleedBodyPart;
struct BottomText {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetVisibleOffset;
void (*SetVisible)(void *_instance, bool visible);
DWORD SetTextOffset;
void (*SetText)(void *_instance, monoString *txt);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}BottomText;
struct BouncingTurningScript {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetOriginalPositionOffset;
void (*SetOriginalPosition)(void *_instance, Vector3 o);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}BouncingTurningScript;
struct ButtonPlaySound {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}ButtonPlaySound;
struct ButtonPressScaleUp {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}ButtonPressScaleUp;
struct CafebazaarIAP {
}CafebazaarIAP;
struct CafebazaarValidator {
}CafebazaarValidator;
struct DisableBehaviourBazaar {
}DisableBehaviourBazaar;
struct PopupCafeBazaar {
DWORD PurchaseSuccessOffset;
void (*PurchaseSuccess)(void *_instance);
DWORD BazaarNotInitializedOffset;
void (*BazaarNotInitialized)(void *_instance);
DWORD PopupEnableOffset;
void (*PopupEnable)(void *_instance);
}PopupCafeBazaar;
struct CameraFacingBillboard {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}CameraFacingBillboard;
struct CameraTimeLogger {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}CameraTimeLogger;
struct CamoCaseManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD TryOpenCreditCaseOffset;
void (*TryOpenCreditCase)(void *_instance);
DWORD TryOpenCaseOffset;
void (*TryOpenCase)(void *_instance);
DWORD TryOpenCase1Offset;
void (*TryOpenCase1)(void *_instance, int type);
DWORD OnCaseOpenSuccessOffset;
void (*OnCaseOpenSuccess)(void *_instance, void *result);
DWORD OnCaseOpenErrorOffset;
void (*OnCaseOpenError)(void *_instance, monoString *error);
DWORD OpenCaseOffset;
void (*OpenCase)(void *_instance, void *data);
DWORD OpenAdCaseOffset;
void (*OpenAdCase)(void *_instance);
DWORD OpenCaseAnimationOffset;
void (*OpenCaseAnimation)(void *_instance);
DWORD FadeInNamesOffset;
void (*FadeInNames)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD FinishOpeningCaseOffset;
void (*FinishOpeningCase)(void *_instance);
DWORD OpenCaseJsonOffset;
void (*OpenCaseJson)(void *_instance, monoString *json);
DWORD PrepareCaseAssetsOffset;
void (*PrepareCaseAssets)(void *_instance, void *data);
DWORD ShowRightAwardCurrencyOffset;
void (*ShowRightAwardCurrency)(void *_instance, monoString *currencyRewardType);
DWORD ClearPreviousRewardOffset;
void (*ClearPreviousReward)(void *_instance);
DWORD BuyCreditCasesOffset;
void (*BuyCreditCases)(void *_instance, int amount);
DWORD BuyCasesOffset;
void (*BuyCases)(void *_instance, int amount);
DWORD BuyCases1Offset;
void (*BuyCases1)(void *_instance, int amount, int type);
DWORD ConfirmBuyCasesOffset;
void (*ConfirmBuyCases)(void *_instance);
DWORD CreditCasePurchaseSuccessOffset;
void (*CreditCasePurchaseSuccess)(void *_instance);
DWORD CreditCasePurchaseErrorOffset;
void (*CreditCasePurchaseError)(void *_instance, monoString *error);
DWORD CancelConfirmationOffset;
void (*CancelConfirmation)(void *_instance);
DWORD GetCaseAmountTextOffset;
monoString *(*GetCaseAmountText)(void *_instance, int type);
DWORD StopLoadingOffset;
void (*StopLoading)(void *_instance);
DWORD SetCasesOffset;
void (*SetCases)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}CamoCaseManager;
struct CamoManager {
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD set_InstanceOffset;
void (*set_Instance)(void *value);
DWORD get_IsInitializedOffset;
bool (*get_IsInitialized)();
DWORD set_IsInitializedOffset;
void (*set_IsInitialized)(bool value);
DWORD OnSceneLoadedOffset;
void (*OnSceneLoaded)(void *_instance, int scene, int mode);
DWORD GetCamoTextureFromFilenameOffset;
void *(*GetCamoTextureFromFilename)(void *_instance, monoString *t);
DWORD STBRGBOffset;
Color (*STBRGB)(void *_instance, int red, int green, int blue);
DWORD GetCamoColorsOffset;
DWORD PriorizeCamoOffset;
bool (*PriorizeCamo)(void *_instance, int camo);
DWORD Hex2RgbOffset;
Color (*Hex2Rgb)(monoString *colorStr);
DWORD GetCamoTextureOffset;
void *(*GetCamoTexture)(void *_instance, int t);
DWORD GetCamoStatsFromTypeOffset;
void *(*GetCamoStatsFromType)(void *_instance, int t);
DWORD GetCamoStatsFromType1Offset;
void *(*GetCamoStatsFromType1)(void *_instance, int t);
DWORD GetCamoNameFromTypeOffset;
monoString *(*GetCamoNameFromType)(void *_instance, int t);
DWORD GetCamoTypeFromNameOffset;
int(*GetCamoTypeFromName)(void *_instance, monoString *camoName);
DWORD GetCharacterCamoTextureFromNameOffset;
void *(*GetCharacterCamoTextureFromName)(void *_instance, int t);
DWORD GetCharacterCamoStatsFromTypeOffset;
void *(*GetCharacterCamoStatsFromType)(void *_instance, int t);
DWORD GetCharacterCamoTypeFromCamoNameOffset;
int(*GetCharacterCamoTypeFromCamoName)(void *_instance, monoString *camoName);
DWORD GetBulletTracerColorStatsFromTypeOffset;
void *(*GetBulletTracerColorStatsFromType)(void *_instance, int t);
DWORD GetBulletTracerTypeFromColorNameOffset;
int(*GetBulletTracerTypeFromColorName)(void *_instance, monoString *colorName);
DWORD UnlockAndSetWeaponCamoOffset;
void (*UnlockAndSetWeaponCamo)(void *_instance, int weaponType, int camo);
DWORD ClearCamoDataOffset;
void (*ClearCamoData)(void *_instance);
}CamoManager;
struct CamoSetter {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetCharacterCamoOffset;
void (*SetCharacterCamo)(void *_instance, int t, bool fullApplyMult);
DWORD SetCharacterCamo1Offset;
void (*SetCharacterCamo1)(void *_instance, int t, bool fullApplyMult);
DWORD SetCamoOffset;
void (*SetCamo)(void *_instance, int t, bool fullApplyMult);
DWORD SetCamo1Offset;
void (*SetCamo1)(void *_instance, int t, bool fullApplyMult);
DWORD SetBulletTracerColorOffset;
void (*SetBulletTracerColor)(void *_instance, int t, bool fullApplyMult);
DWORD UpdateMaterialOffset;
void (*UpdateMaterial)(void *_instance, void *m, void *data);
DWORD RunMaterialUpdateOffset;
void (*RunMaterialUpdate)(void *_instance, void *m);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD RectTransformToScreenSpaceOffset;
int(*RectTransformToScreenSpace)(void *transform);
}CamoSetter;
struct CanvasGroupTransition {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD FadeInIfInactiveOffset;
void (*FadeInIfInactive)(void *_instance);
DWORD FadeOutIfActiveOffset;
void (*FadeOutIfActive)(void *_instance);
DWORD FadeInOffset;
void (*FadeIn)(void *_instance);
DWORD FadeOutOffset;
void (*FadeOut)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}CanvasGroupTransition;
struct Carousel {
DWORD get_characterCamoCarouselOffset;
bool (*get_characterCamoCarousel)(void *_instance);
DWORD get_weaponCamoCarouselOffset;
bool (*get_weaponCamoCarousel)(void *_instance);
DWORD get_bulletTracerCarouselOffset;
bool (*get_bulletTracerCarousel)(void *_instance);
DWORD get_selectedObjectOffset;
void *(*get_selectedObject)(void *_instance);
DWORD get_activeChildrensOffset;
DWORD get_activeChildrenOffset;
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD NextOffset;
void (*Next)(void *_instance);
DWORD PreviousOffset;
void (*Previous)(void *_instance);
DWORD SelectWithIndexOffset;
void (*SelectWithIndex)(void *_instance, int index);
DWORD FixMaskOffset;
void *(*FixMask)(void *_instance);
DWORD SelectWithObjectOffset;
void (*SelectWithObject)(void *_instance, void *go);
DWORD SelectWithNameOffset;
void (*SelectWithName)(void *_instance, monoString *name);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}Carousel;
struct ChangeTextForLanguage {
DWORD GetSizeOffset;
int (*GetSize)(void *_instance, void *font, monoString *text);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}ChangeTextForLanguage;
struct ChangeTransformWithEvent {
DWORD SetToPositionOffset;
void (*SetToPosition)(void *_instance, int position);
}ChangeTransformWithEvent;
struct ChatButton {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD RefreshVisibleOffset;
void (*RefreshVisible)(void *_instance, bool hudVisible);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}ChatButton;
struct BanOrMuteCommand {
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}BanOrMuteCommand;
struct ChatCommand {
DWORD get_IsOkOffset;
bool (*get_IsOk)(void *_instance);
}ChatCommand;
struct ChatOptions {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD IsEnabledOffset;
bool (*IsEnabled)();
DWORD SetEnabledOffset;
void (*SetEnabled)(bool enabled);
DWORD SetDropdownOffset;
void (*SetDropdown)(void *_instance, int chatStatus);
}ChatOptions;
struct Chatbox {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD activateInputOffset;
void (*activateInput)(void *_instance);
DWORD OnEnableChatConfirmedOffset;
void (*OnEnableChatConfirmed)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD ShowAllOffset;
void (*ShowAll)(void *_instance, bool show);
DWORD deactivateInputOffset;
void (*deactivateInput)(void *_instance);
DWORD SelfSubmitMessageOffset;
void (*SelfSubmitMessage)(void *_instance, monoString *msg);
DWORD RawShowMessageOffset;
void (*RawShowMessage)(void *_instance, monoString *text, Color color);
DWORD UpdateBackgroundHeightOffset;
void (*UpdateBackgroundHeight)(void *_instance);
DWORD ShowMessageOffset;
void (*ShowMessage)(void *_instance, monoString *username, monoString *text, Color color);
DWORD ShowPerkMessageOffset;
void (*ShowPerkMessage)(void *_instance, monoString *username, monoString *text);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}Chatbox;
struct ChatboxItem {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD getTextStringOffset;
monoString *(*getTextString)(void *_instance);
DWORD GetTextColorOffset;
Color (*GetTextColor)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD updateTextOffset;
void (*updateText)(void *_instance, monoString *txt, Color color, bool changed);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}ChatboxItem;
struct CombineAtRuntime {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}CombineAtRuntime;
struct CombineDontBatch {
}CombineDontBatch;
struct ConnectLineRenderers {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}ConnectLineRenderers;
struct ConquestButton {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetColorOffset;
void (*SetColor)(void *_instance, Color c);
DWORD ShowCircleOffset;
void (*ShowCircle)(void *_instance, bool show);
DWORD SelectFlagOffset;
void (*SelectFlag)(void *_instance);
}ConquestButton;
struct ContinueButton {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}ContinueButton;
struct CreditRewards {
DWORD AdjustGameplayRewardOffset;
int (*AdjustGameplayReward)(int reward);
DWORD AdjustGameplayReward1Offset;
int (*AdjustGameplayReward1)(int reward, float percentage);
}CreditRewards;
struct CreditsManager {
DWORD get_creditsPrefsKeyOffset;
monoString *(*get_creditsPrefsKey)();
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ShowLoadingOffset;
void (*ShowLoading)(void *_instance);
DWORD StopLoadingOffset;
void (*StopLoading)(void *_instance);
DWORD HideConfirmationPopUpOffset;
void (*HideConfirmationPopUp)(void *_instance);
DWORD BuyCreditsOffset;
void (*BuyCredits)(void *_instance, int amount);
DWORD ConfirmBuyCreditsOffset;
void (*ConfirmBuyCredits)(void *_instance);
DWORD CancelConfirmationOffset;
void (*CancelConfirmation)(void *_instance);
DWORD BuyCreditsFromServerOffset;
void *(*BuyCreditsFromServer)(void *_instance, int amountToBuy);
DWORD FinishedUploadingCreditsOffset;
void (*FinishedUploadingCredits)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}CreditsManager;
struct CrosshairScript {
DWORD ShowOffset;
void (*Show)(void *_instance, bool shouldShow);
DWORD setTargetDistanceOffset;
void (*setTargetDistance)(void *_instance, float dist);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD LerpPositionOffset;
void (*LerpPosition)(void *_instance, void *t, Vector2 targetPos);
DWORD SetColorOffset;
void (*SetColor)(void *_instance, Color c);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}CrosshairScript;
struct CrouchScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD RefreshVisibleOffset;
void (*RefreshVisible)(void *_instance, bool hudVisible);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}CrouchScript;
struct CryptoRandom {
DWORD NextDoubleOffset;
DWORD NextOffset;
int (*Next)(void *_instance, int minValue, int maxValue);
DWORD Next1Offset;
int (*Next1)(void *_instance);
DWORD Next2Offset;
int (*Next2)(void *_instance, int maxValue);
}CryptoRandom;
struct AbstractCustomization {
DWORD get_CamoNameOffset;
monoString *(*get_CamoName)(void *_instance);
DWORD set_CamoNameOffset;
void (*set_CamoName)(void *_instance, monoString *value);
DWORD GetUnlockedCustomizationKeyOffset;
monoString *(*GetUnlockedCustomizationKey)(int customizationType, int customizationID);
DWORD GetEquippedCustomizationKeyOffset;
monoString *(*GetEquippedCustomizationKey)(int customizationType);
DWORD DeserializeCustomizationsOffset;
void *(*DeserializeCustomizations)(monoString *result);
DWORD get_GetTextureOffset;
void *(*get_GetTexture)(void *_instance);
DWORD get_GetIconOffset;
void *(*get_GetIcon)(void *_instance);
}AbstractCustomization;
struct Armor {
DWORD get_CustomizationTypeOffset;
int(*get_CustomizationType)(void *_instance);
DWORD GetCustomizationIDOffset;
int (*GetCustomizationID)(void *_instance);
DWORD GetCustomizationTypeStringOffset;
monoString *(*GetCustomizationTypeString)(void *_instance);
}Armor;
struct Backpack {
DWORD get_CustomizationTypeOffset;
int(*get_CustomizationType)(void *_instance);
DWORD GetCustomizationIDOffset;
int (*GetCustomizationID)(void *_instance);
DWORD GetCustomizationTypeStringOffset;
monoString *(*GetCustomizationTypeString)(void *_instance);
}Backpack;
struct Belts {
DWORD get_CustomizationTypeOffset;
int(*get_CustomizationType)(void *_instance);
DWORD GetCustomizationIDOffset;
int (*GetCustomizationID)(void *_instance);
DWORD GetCustomizationTypeStringOffset;
monoString *(*GetCustomizationTypeString)(void *_instance);
}Belts;
struct Boots {
DWORD get_CustomizationTypeOffset;
int(*get_CustomizationType)(void *_instance);
DWORD GetCustomizationIDOffset;
int (*GetCustomizationID)(void *_instance);
DWORD GetCustomizationTypeStringOffset;
monoString *(*GetCustomizationTypeString)(void *_instance);
}Boots;
struct CharacterCustomizationsReferences {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD GetBodyPartDefaultMaterialOffset;
void *(*GetBodyPartDefaultMaterial)(void *_instance, int bodyID);
DWORD SetCustomizableOffset;
void (*SetCustomizable)(void *_instance, int bodyPart, int camoID);
DWORD SetOldCharacterCamoOffset;
void (*SetOldCharacterCamo)(void *_instance, int camoType);
}CharacterCustomizationsReferences;
struct CamoDataScriptableObject {
DWORD get_camoTypeOffset;
int(*get_camoType)(void *_instance);
DWORD get_characterCamoTypeOffset;
int(*get_characterCamoType)(void *_instance);
DWORD get_bulletTracerTypeOffset;
int(*get_bulletTracerType)(void *_instance);
DWORD get_nameOffset;
monoString *(*get_name)(void *_instance);
DWORD get_recolorFactorOffset;
float (*get_recolorFactor)(void *_instance);
DWORD get_colorsOffset;
DWORD get_useColorSwitchingOffset;
bool (*get_useColorSwitching)(void *_instance);
DWORD get_colorsTwoOffset;
DWORD get_colorSwitchSpeedOffset;
float (*get_colorSwitchSpeed)(void *_instance);
DWORD get_priceOffset;
int (*get_price)(void *_instance);
DWORD get_textureNameOffset;
monoString *(*get_textureName)(void *_instance);
DWORD get_tilingOffset;
Vector2 (*get_tiling)(void *_instance);
DWORD get_useTextureMovementOffset;
bool (*get_useTextureMovement)(void *_instance);
DWORD get_textureMovementSpeedXOffset;
float (*get_textureMovementSpeedX)(void *_instance);
DWORD get_textureMovementSpeedYOffset;
float (*get_textureMovementSpeedY)(void *_instance);
DWORD get_usesInvisibleShaderOffset;
bool (*get_usesInvisibleShader)(void *_instance);
DWORD get_applyMultOffset;
float (*get_applyMult)(void *_instance);
DWORD get_rarityOffset;
int (*get_rarity)(void *_instance);
DWORD get_isSeasonOnlyOffset;
bool (*get_isSeasonOnly)(void *_instance);
DWORD get_isBannedOffset;
bool (*get_isBanned)(void *_instance);
DWORD SetCamoTypeOffset;
void (*SetCamoType)(void *_instance, int t);
DWORD SetCharacterCamoTypeOffset;
void (*SetCharacterCamoType)(void *_instance, int t);
DWORD SetBulletTracerTypeOffset;
void (*SetBulletTracerType)(void *_instance, int t);
DWORD SetBannedStatusOffset;
void (*SetBannedStatus)(void *_instance, bool _status);
}CamoDataScriptableObject;
struct CustomizableBodyPart {
DWORD get_SkinnedMeshRendererOffset;
void *(*get_SkinnedMeshRenderer)(void *_instance);
DWORD set_SkinnedMeshRendererOffset;
void (*set_SkinnedMeshRenderer)(void *_instance, void *value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD EquipNewCustomizationOffset;
void (*EquipNewCustomization)(void *_instance, int customizableID, void *texture);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD EquipOldCharacterCamoCustomizationOffset;
void (*EquipOldCharacterCamoCustomization)(void *_instance, int camoType);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD RunMaterialUpdateOffset;
void (*RunMaterialUpdate)(void *_instance, void *m);
}CustomizableBodyPart;
struct Customizations {
DWORD get_CustomizationDataLoadedOffset;
bool (*get_CustomizationDataLoaded)(void *_instance);
DWORD set_CustomizationDataLoadedOffset;
void (*set_CustomizationDataLoaded)(void *_instance, bool value);
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD set_InstanceOffset;
void (*set_Instance)(void *value);
DWORD get_IsInitializedOffset;
bool (*get_IsInitialized)();
DWORD set_IsInitializedOffset;
void (*set_IsInitialized)(bool value);
DWORD GetCustomizationsFromBackendOffset;
void (*GetCustomizationsFromBackend)(void *_instance);
DWORD GetOffset;
void *(*Get)(int gloveType);
DWORD Get1Offset;
void *(*Get1)(int headType);
DWORD Get2Offset;
void *(*Get2)(int armorType);
DWORD Get3Offset;
void *(*Get3)(int backpackType);
DWORD Get4Offset;
void *(*Get4)(int beltsType);
DWORD Get5Offset;
void *(*Get5)(int bootsType);
DWORD Get6Offset;
void *(*Get6)(int pantsType);
DWORD Get7Offset;
void *(*Get7)(int shirtType);
DWORD Get8Offset;
void *(*Get8)(int customizationType, int customizationID);
DWORD GetCustomizationsFromBackendb__16_0Offset;
void (*GetCustomizationsFromBackendb__16_0)(void *_instance, monoString *result);
}Customizations;
struct Gloves {
DWORD get_CustomizationTypeOffset;
int(*get_CustomizationType)(void *_instance);
DWORD GetCustomizationIDOffset;
int (*GetCustomizationID)(void *_instance);
DWORD GetCustomizationTypeStringOffset;
monoString *(*GetCustomizationTypeString)(void *_instance);
}Gloves;
struct Head {
DWORD get_CustomizationTypeOffset;
int(*get_CustomizationType)(void *_instance);
DWORD GetCustomizationIDOffset;
int (*GetCustomizationID)(void *_instance);
DWORD GetCustomizationTypeStringOffset;
monoString *(*GetCustomizationTypeString)(void *_instance);
}Head;
struct Pants {
DWORD get_CustomizationTypeOffset;
int(*get_CustomizationType)(void *_instance);
DWORD GetCustomizationIDOffset;
int (*GetCustomizationID)(void *_instance);
DWORD GetCustomizationTypeStringOffset;
monoString *(*GetCustomizationTypeString)(void *_instance);
}Pants;
struct PerlinFlicker {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD TurnOffLightOffset;
void (*TurnOffLight)(void *_instance);
DWORD TurnOnLightOffset;
void (*TurnOnLight)(void *_instance);
}PerlinFlicker;
struct Shirt {
DWORD get_CustomizationTypeOffset;
int(*get_CustomizationType)(void *_instance);
DWORD GetCustomizationIDOffset;
int (*GetCustomizationID)(void *_instance);
DWORD GetCustomizationTypeStringOffset;
monoString *(*GetCustomizationTypeString)(void *_instance);
}Shirt;
struct UICustomizationElement {
}UICustomizationElement;
struct UnlockedCustomizationsScriptableObject {
DWORD GetUnlockedCustomizationOffset;
DWORD GetEquippedCustomizationOffset;
int (*GetEquippedCustomization)(void *_instance, int customizationType);
DWORD FeedEquippedOffset;
void (*FeedEquipped)(void *_instance, int type, int equipped);
DWORD ClearAllDataOffset;
void (*ClearAllData)(void *_instance);
DWORD ClearCustomizationLocalDataOffset;
void (*ClearCustomizationLocalData)(void *_instance, int type);
DWORD ClearEquippedLocalDataOffset;
void (*ClearEquippedLocalData)(void *_instance, int type);
}UnlockedCustomizationsScriptableObject;
struct CustomizeHUDScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD setLocalCurrentSlotOffset;
void (*setLocalCurrentSlot)(void *_instance);
DWORD loadCurrentHudDataOffset;
void (*loadCurrentHudData)(void *_instance);
DWORD updateLocalCurrentSlotOffset;
void (*updateLocalCurrentSlot)(void *_instance);
DWORD getServerHUDSlotsOffset;
void *(*getServerHUDSlots)(void *_instance);
DWORD setServerHUDSlotsOffset;
void *(*setServerHUDSlots)(void *_instance);
DWORD NoServerDataOffset;
void (*NoServerData)(void *_instance);
DWORD ChangeHUDSlotOffset;
void (*ChangeHUDSlot)(void *_instance, int slot);
DWORD registerUIObjectOffset;
void (*registerUIObject)(void *_instance, void *s);
DWORD ScaleSliderValueChangedOffset;
void (*ScaleSliderValueChanged)(void *_instance, float newValue);
DWORD RegisterRecolorObjectOffset;
void (*RegisterRecolorObject)(void *_instance, void *r);
DWORD RecolorImagesOffset;
void (*RecolorImages)(void *_instance, Color c);
DWORD FixImageColorsOffset;
void (*FixImageColors)(void *_instance);
DWORD SetLastEditedObjectOffset;
void (*SetLastEditedObject)(void *_instance, void *u);
DWORD OnAcceptCustomizationHUDPopUpOffset;
void (*OnAcceptCustomizationHUDPopUp)(void *_instance);
DWORD toggleEditingOffset;
void (*toggleEditing)(void *_instance);
DWORD ResetToDefaultOffset;
void (*ResetToDefault)(void *_instance);
DWORD SetButtonsVisibleOffset;
void (*SetButtonsVisible)(void *_instance, bool visible);
DWORD startEditingOffset;
void (*startEditing)(void *_instance);
DWORD stopEditingOffset;
void (*stopEditing)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}CustomizeHUDScript;
struct DecalTest {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}DecalTest;
struct DecayScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD ResetLayerOffset;
void (*ResetLayer)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateLifetimeOffset;
void (*UpdateLifetime)(void *_instance, float l);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD removeOffset;
void (*remove)(void *_instance);
}DecayScript;
struct DefaultLoadoutLoader {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD FetchDefaultDataOffset;
void (*FetchDefaultData)(void *_instance);
}DefaultLoadoutLoader;
struct Detectors {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnSpeedHackDetectedOffset;
void (*OnSpeedHackDetected)(void *_instance);
DWORD OnWallHackDetectedOffset;
void (*OnWallHackDetected)(void *_instance);
}Detectors;
struct DismemberedBloodEffects {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}DismemberedBloodEffects;
struct DisplayPurchasePopUpOnMP {
DWORD OnLevelWasLoadedOffset;
void (*OnLevelWasLoaded)(void *_instance, int level);
DWORD ShowAfterTwoFramesOffset;
void *(*ShowAfterTwoFrames)(void *_instance);
}DisplayPurchasePopUpOnMP;
struct DontDestroyOnLoadManager {
DWORD DontDestroyOnLoadOffset;
void (*DontDestroyOnLoad)(void *gObj);
DWORD DestroyAllOffset;
bool (*DestroyAll)();
}DontDestroyOnLoadManager;
struct DownloadOBB {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD logOffset;
void (*log)(void *_instance, monoString *t);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD CheckDeleteOldOBBsOffset;
void (*CheckDeleteOldOBBs)(void *_instance);
DWORD loadLevelOffset;
void *(*loadLevel)(void *_instance);
}DownloadOBB;
struct Elevator {
DWORD get_closedOffset;
bool (*get_closed)(void *_instance);
DWORD set_closedOffset;
void (*set_closed)(void *_instance, bool value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD CanBeClosedOffset;
bool (*CanBeClosed)(void *_instance);
DWORD PlayElevatorMovingSoundOffset;
void (*PlayElevatorMovingSound)(void *_instance);
DWORD RegisterElevatorOffset;
void *(*RegisterElevator)(void *_instance);
DWORD ButtonPressedOffset;
void (*ButtonPressed)(void *_instance);
DWORD IsPlayerInsideElevatorOffset;
bool (*IsPlayerInsideElevator)(void *_instance, void *player);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
}Elevator;
struct EnemiesRemainingSkirmish {
DWORD StartOffset;
void (*Start)(void *_instance);
}EnemiesRemainingSkirmish;
struct EnemyBodyPartScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD get_angularVelocityOffset;
Vector3 (*get_angularVelocity)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}EnemyBodyPartScript;
struct EnemyRagdollScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD playDeathSoundOffset;
void (*playDeathSound)(void *_instance, bool indoor);
DWORD dieOffset;
void (*die)(void *_instance);
DWORD SetCharacterCamoOffset;
void (*SetCharacterCamo)(void *_instance, int camo);
DWORD ResetRagdollOffset;
void (*ResetRagdoll)(void *_instance);
DWORD DismemberPartOffset;
void (*DismemberPart)(void *_instance, void *part, int ragdollPoolType, void *currentHR, bool overrideVelocity, Vector3 velocity);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}EnemyRagdollScript;
struct EnemyScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD playFootStepSoundOffset;
void (*playFootStepSound)(void *_instance);
DWORD navmeshAgentOffset;
void *(*navmeshAgent)(void *_instance);
DWORD OnTriggerEnterOffset;
void (*OnTriggerEnter)(void *_instance, void *collision);
DWORD UpdateAccessoryOffset;
void (*UpdateAccessory)(void *_instance, int t);
DWORD UpdateBarrelOffset;
void (*UpdateBarrel)(void *_instance, int t);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD explodeEnemyOffset;
void (*explodeEnemy)(void *_instance, Vector3 position, float radius, float force, void *owner);
DWORD canHurtOffset;
bool (*canHurt)(void *_instance);
DWORD SetDestinationOffset;
void (*SetDestination)(void *_instance, Vector3 point);
DWORD damagePersonOffset;
bool (*damagePerson)(void *_instance, float damage, Vector3 hitPoint, Vector3 velocity, float chanceToDismember, bool playDeathSound, void *owner);
DWORD turnIntoRagdollOffset;
void (*turnIntoRagdoll)(void *_instance, bool forceDeathSound);
DWORD dropGunOffset;
void (*dropGun)(void *_instance);
DWORD spawnShellOffset;
void (*spawnShell)(void *_instance);
DWORD get_healthOffset;
float (*get_health)(void *_instance);
DWORD set_healthOffset;
void (*set_health)(void *_instance, float value);
DWORD disableMuzzleFlashOffset;
void (*disableMuzzleFlash)(void *_instance);
DWORD findAndGoToCoverOffset;
bool (*findAndGoToCover)(void *_instance);
DWORD spotPlayerOffset;
void (*spotPlayer)(void *_instance);
DWORD unSpotPlayerOffset;
void (*unSpotPlayer)(void *_instance);
DWORD isLookingAtPlayerOffset;
bool (*isLookingAtPlayer)(void *_instance);
DWORD isAimingAtPlayerOffset;
bool (*isAimingAtPlayer)(void *_instance);
DWORD soundCheckOffset;
void (*soundCheck)(void *_instance);
DWORD FireBulletOffset;
bool (*FireBullet)(void *_instance, int bulletIndex);
DWORD animationStateChangedOffset;
void (*animationStateChanged)(void *_instance);
DWORD getUpFromGroundOffset;
void (*getUpFromGround)(void *_instance);
DWORD enableAgentOffset;
void (*enableAgent)(void *_instance);
DWORD FlashOffset;
void (*Flash)(void *_instance);
DWORD checkForMeleeOffset;
bool (*checkForMelee)(void *_instance);
DWORD hurtFromMeleeOffset;
void (*hurtFromMelee)(void *_instance);
DWORD aimToPlayerOffset;
void (*aimToPlayer)(void *_instance);
DWORD removeCoverOffset;
void (*removeCover)(void *_instance);
DWORD handleHurtOffset;
void (*handleHurt)(void *_instance);
DWORD handleSoundInterestOffset;
void (*handleSoundInterest)(void *_instance);
DWORD calculateAngleOffset;
float (*calculateAngle)(void *_instance, Vector3 position, Vector3 target, float velocity);
DWORD throwGrenadeAtPlayerOffset;
void (*throwGrenadeAtPlayer)(void *_instance);
DWORD throwGrenadeDontCalculateOffset;
void (*throwGrenadeDontCalculate)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}EnemyScript;
struct EnemySpawnTrigger {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnTriggerEnterOffset;
void (*OnTriggerEnter)(void *_instance, void *hit);
}EnemySpawnTrigger;
struct EnemyToBeSpawned {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD spawnEnemyOffset;
void (*spawnEnemy)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}EnemyToBeSpawned;
struct EnemyVehicle {
DWORD DamageOffset;
void (*Damage)(void *_instance, float dmg);
DWORD ExplodeOffset;
void (*Explode)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}EnemyVehicle;
struct EventSystemFix {
DWORD StartOffset;
void (*Start)(void *_instance);
}EventSystemFix;
struct ExtensionMethods {
DWORD SetPivotOffset;
void (*SetPivot)(void *rectTransform, Vector2 pivot);
DWORD LogTestOffset;
void (*LogTest)(monoString *message, void *context);
}ExtensionMethods;
struct FTUEManager {
DWORD get_FTUEActiveOffset;
bool (*get_FTUEActive)(void *_instance);
DWORD OnApplicationStartOffset;
void (*OnApplicationStart)(void *_instance);
DWORD get_IsTutorialCompletedOffset;
bool (*get_IsTutorialCompleted)(void *_instance);
DWORD WasCurrentUsernameTutorialRewardedOffset;
bool (*WasCurrentUsernameTutorialRewarded)(void *_instance, monoString *username);
DWORD get_HaveTutorialJustBeenExecutedOffset;
bool (*get_HaveTutorialJustBeenExecuted)(void *_instance);
DWORD HandleNoFTUEOffset;
void (*HandleNoFTUE)(void *_instance);
DWORD HandleFTUEOffset;
void (*HandleFTUE)(void *_instance);
DWORD HandleHowToContinueQuestionOffset;
void (*HandleHowToContinueQuestion)(void *_instance);
DWORD OnPopupClosedOffset;
void (*OnPopupClosed)(void *_instance);
DWORD HandleHowToContinueImpOffset;
void *(*HandleHowToContinueImp)(void *_instance);
DWORD DoTrainingOffset;
void (*DoTraining)(void *_instance);
DWORD MultiplayerOffset;
void (*Multiplayer)(void *_instance);
DWORD BotsOffset;
void (*Bots)(void *_instance);
DWORD TutorialRewardJustGotOffset;
void (*TutorialRewardJustGot)(void *_instance, monoString *result);
DWORD OnMarkFTUEDoneOffset;
void (*OnMarkFTUEDone)(void *_instance);
DWORD OnTutorialStartedOffset;
void (*OnTutorialStarted)(void *_instance);
DWORD ResetTutorialExecutedKeyOffset;
void (*ResetTutorialExecutedKey)(void *_instance);
DWORD GetTutorialCompletedKeyOffset;
monoString *(*GetTutorialCompletedKey)(void *_instance, bool reward, monoString *username);
DWORD TutorialCompletedOffset;
void (*TutorialCompleted)(void *_instance);
DWORD TutorialUnCompletedOffset;
void (*TutorialUnCompleted)(void *_instance);
DWORD TutorialRewardReceivedOffset;
void (*TutorialRewardReceived)(void *_instance, monoString *username);
DWORD OnMatchAbortedOffset;
void (*OnMatchAborted)(void *_instance);
DWORD OnMatchCompleteOffset;
void (*OnMatchComplete)(void *_instance);
DWORD LogOffset;
void (*Log)(monoString *message);
DWORD GetManagerOffset;
void *(*GetManager)();
DWORD LoadTutorialOffset;
void (*LoadTutorial)(void *_instance);
DWORD onLoadTutorialOffset;
void *(*onLoadTutorial)(void *_instance);
}FTUEManager;
struct FacebookController {
DWORD get_isLoggedInOffset;
bool (*get_isLoggedIn)();
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitCallbackOffset;
void (*InitCallback)(void *_instance);
DWORD OnHideUnityOffset;
void (*OnHideUnity)(void *_instance, bool isGameShown);
DWORD AuthCallbackOffset;
void (*AuthCallback)(void *_instance, void *result);
DWORD OnLogInOffset;
void (*OnLogIn)(void *_instance);
DWORD HandleResultOffset;
void (*HandleResult)(void *_instance, void *result);
DWORD LogSectionLoadedOffset;
void (*LogSectionLoaded)(void *_instance, monoString *sectionName);
DWORD LogBuyCaseOffset;
void (*LogBuyCase)(void *_instance, monoString *contentID, int amount);
DWORD LogBuyCreditsOffset;
void (*LogBuyCredits)(void *_instance, monoString *contentID, int amount);
DWORD LogSpentCreditsEventOffset;
void (*LogSpentCreditsEvent)(void *_instance, monoString *contentData, monoString *contentId, monoString *contentType, float totalValue);
DWORD LogSpentGoldEventOffset;
void (*LogSpentGoldEvent)(void *_instance, monoString *section, monoString *moreInfo, float totalValue);
DWORD LogPurchaseOffset;
void (*LogPurchase)(void *_instance, float purchaseAmount, monoString *currency, monoString *contentId, monoString *contentType);
DWORD LogShopEventOffset;
void (*LogShopEvent)(void *_instance, monoString *platform);
DWORD LogCompletedRegistrationEventOffset;
void (*LogCompletedRegistrationEvent)(void *_instance, monoString *registrationMethod);
}FacebookController;
struct FakeForces {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD ImpulseOffset;
void (*Impulse)(void *_instance, Vector3 velocityChange);
DWORD SetDefaultPositionOffset;
void (*SetDefaultPosition)(void *_instance, Vector3 p);
DWORD TestForceOffset;
void (*TestForce)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}FakeForces;
struct FixStaticCollider {
DWORD StartOffset;
void (*Start)(void *_instance);
}FixStaticCollider;
struct Flag {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateTakenValueOffset;
void (*UpdateTakenValue)(void *_instance, float value);
DWORD UpdateOwnerTeamOffset;
void (*UpdateOwnerTeam)(void *_instance, int t);
DWORD SetFlagOffset;
void (*SetFlag)(void *_instance, bool isTeamFlag, bool isNone);
DWORD SetFlagOutlineColorOffset;
void (*SetFlagOutlineColor)(void *_instance, Color c);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD InitializeObjectsOffset;
void (*InitializeObjects)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
}Flag;
struct FlagStatusUI {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD SetTakenValueOffset;
void (*SetTakenValue)(void *_instance, float value);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}FlagStatusUI;
struct FlashScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FlashOffset;
void (*Flash)(void *_instance, float time);
DWORD ClearFlashOffset;
void (*ClearFlash)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}FlashScript;
struct FootstepSoundSampler {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD CheckGroundOffset;
void (*CheckGround)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD GetFootstepSoundOffset;
void *(*GetFootstepSound)(void *_instance, bool sprinting);
DWORD GetTextureMixOffset;
DWORD GetMainTextureOffset;
int (*GetMainTexture)(void *_instance, Vector3 worldPos, void *terrain);
}FootstepSoundSampler;
struct FirebaseManager {
DWORD set_singletonOffset;
void (*set_singleton)(void *value);
DWORD get_singletonOffset;
void *(*get_singleton)();
DWORD get_RegistrationTokenOffset;
monoString *(*get_RegistrationToken)();
DWORD set_RegistrationTokenOffset;
void (*set_RegistrationToken)(monoString *value);
DWORD get_GameIDOffset;
monoString *(*get_GameID)(void *_instance);
DWORD set_GameIDOffset;
void (*set_GameID)(void *_instance, monoString *value);
DWORD set_allowNotificationsOffset;
void (*set_allowNotifications)(void *_instance, bool value);
DWORD get_allowNotificationsOffset;
bool (*get_allowNotifications)(void *_instance);
DWORD set_isLoginOffset;
void (*set_isLogin)(void *_instance, bool value);
DWORD get_isLoginOffset;
bool (*get_isLogin)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD GetNotificationConfigOffset;
void (*GetNotificationConfig)(void *_instance);
DWORD Call_SetNotificationsConfigOffset;
void (*Call_SetNotificationsConfig)(void *_instance, bool _allowNotifications);
DWORD onSuccessSetNotificationsConfigOffset;
void (*onSuccessSetNotificationsConfig)(void *_instance, monoString *_jsonString);
DWORD Call_GetNotificationsConfigOffset;
void (*Call_GetNotificationsConfig)(void *_instance);
DWORD onSuccessGetNotificationsConfigOffset;
void (*onSuccessGetNotificationsConfig)(void *_instance, monoString *_jsonString);
DWORD onSuccessLogoutOffset;
void (*onSuccessLogout)(void *_instance, monoString *_jsonString);
DWORD Call_RegisterTokenOffset;
void (*Call_RegisterToken)(void *_instance, monoString *_token);
DWORD onSuccessRegisterTokenOffset;
void (*onSuccessRegisterToken)(void *_instance, monoString *_jsonString);
DWORD onSuccessRegisterInStoreMatchOffset;
void (*onSuccessRegisterInStoreMatch)(void *_instance, monoString *_jsonString);
DWORD Call_UnregisterFromMatchOffset;
void (*Call_UnregisterFromMatch)(void *_instance, monoString *_game_id);
DWORD onSuccessUnregisterFromMatchOffset;
void (*onSuccessUnregisterFromMatch)(void *_instance, monoString *_jsonString);
DWORD Call_GetMatchIdOffset;
void (*Call_GetMatchId)(void *_instance, int _player_id);
DWORD onSuccessGetMatchIdOffset;
void (*onSuccessGetMatchId)(void *_instance, monoString *_jsonString);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *_errorMessage);
DWORD ManageMessageOffset;
void (*ManageMessage)(void *_instance, monoString *_jsonString);
DWORD ClearInviteOffset;
void (*ClearInvite)(void *_instance);
DWORD JoinToTheMatchOffset;
void (*JoinToTheMatch)(void *_instance);
DWORD JoinToMatchOffset;
void (*JoinToMatch)(void *_instance, void *_matchData);
DWORD LeaveMatchAndJoinNewMatchOffset;
void *(*LeaveMatchAndJoinNewMatch)(void *_instance);
DWORD JoinMatchCoroutineOffset;
void *(*JoinMatchCoroutine)(void *_instance, void *_matchData);
DWORD JoinToTheMatchCoroutineOffset;
void *(*JoinToTheMatchCoroutine)(void *_instance);
}FirebaseManager;
struct GFL_JoinToMatchMessage {
}GFL_JoinToMatchMessage;
struct GFL_FavoriteOnlineMessage {
}GFL_FavoriteOnlineMessage;
struct GFL_PlayerData {
}GFL_PlayerData;
struct GFL_Logout_Response {
}GFL_Logout_Response;
struct GFL_GetNotificationsConfig {
}GFL_GetNotificationsConfig;
struct GFL_AcceptRequestData {
}GFL_AcceptRequestData;
struct GFL_AddFriendData {
}GFL_AddFriendData;
struct GFL_AllowNotificationsController {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD SetDoNotDisturbOffset;
void (*SetDoNotDisturb)(void *_instance);
}GFL_AllowNotificationsController;
struct GFL_FriendInformationController {
DWORD set_isFavoriteOffset;
void (*set_isFavorite)(void *_instance, bool value);
DWORD get_isFavoriteOffset;
bool (*get_isFavorite)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD JoinMatchOffset;
void (*JoinMatch)(void *_instance);
DWORD InviteFriendOffset;
void (*InviteFriend)(void *_instance);
DWORD Call_MatchInviteOffset;
void (*Call_MatchInvite)(void *_instance);
DWORD onCompleteMatchInviteOffset;
void (*onCompleteMatchInvite)(void *_instance);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *_error);
DWORD GetFriendDataOffset;
void *(*GetFriendData)(void *_instance);
DWORD GetFriendUsernameOffset;
monoString *(*GetFriendUsername)(void *_instance);
DWORD GetFriendOnlineStatusOffset;
bool (*GetFriendOnlineStatus)(void *_instance);
DWORD UpdateFriendUIOffset;
void (*UpdateFriendUI)(void *_instance);
DWORD SetFriendInformationOffset;
void (*SetFriendInformation)(void *_instance, void *_friendData, void *_genericFriendsListManager, void *_friendsListController);
DWORD WaitToInviteAgainOffset;
void *(*WaitToInviteAgain)(void *_instance);
DWORD SelectFavoriteFriendOffset;
void (*SelectFavoriteFriend)(void *_instance);
DWORD ShowConfirmDeleteFriendPopupOffset;
void (*ShowConfirmDeleteFriendPopup)(void *_instance);
DWORD DeleteFriendOffset;
void (*DeleteFriend)(void *_instance);
DWORD onCompleteDeleteFriendOffset;
void (*onCompleteDeleteFriend)(void *_instance);
}GFL_FriendInformationController;
struct GFL_FriendInformationModel {
DWORD set_responseGetMatchIdOffset;
void (*set_responseGetMatchId)(void *_instance, void *value);
DWORD get_responseGetMatchIdOffset;
void *(*get_responseGetMatchId)(void *_instance);
DWORD set_responseMatchInviteOffset;
void (*set_responseMatchInvite)(void *_instance, void *value);
DWORD get_responseMatchInviteOffset;
void *(*get_responseMatchInvite)(void *_instance);
DWORD set_responseRemoveFriendOffset;
void (*set_responseRemoveFriend)(void *_instance, void *value);
DWORD get_responseRemoveFriendOffset;
void *(*get_responseRemoveFriend)(void *_instance);
DWORD onSuccessGetMatchIdOffset;
void (*onSuccessGetMatchId)(void *_instance, monoString *_jsonString);
DWORD onSuccessMatchInviteOffset;
void (*onSuccessMatchInvite)(void *_instance, monoString *_jsonString);
DWORD onSuccessRemoveFriendOffset;
void (*onSuccessRemoveFriend)(void *_instance, monoString *_jsonString);
DWORD WrapJsonStringOffset;
monoString *(*WrapJsonString)(void *_instance, monoString *_jsonString);
}GFL_FriendInformationModel;
struct GFL_FriendsListController {
DWORD set_onlineFriendsOffset;
void (*set_onlineFriends)(void *_instance, int value);
DWORD get_onlineFriendsOffset;
int (*get_onlineFriends)(void *_instance);
DWORD set_totalFriendsOffset;
void (*set_totalFriends)(void *_instance, int value);
DWORD get_totalFriendsOffset;
int (*get_totalFriends)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD RefreshAllOffset;
void (*RefreshAll)(void *_instance);
DWORD SetGenericFriendsListManagerOffset;
void (*SetGenericFriendsListManager)(void *_instance, void *_friendsListManager);
DWORD ShowOffset;
void (*Show)(void *_instance, bool _show);
DWORD GetAllFriendsOffset;
DWORD GetFriendDataOffset;
void *(*GetFriendData)(void *_instance, int _friend_id);
DWORD Call_GetFriendsOffset;
void (*Call_GetFriends)(void *_instance);
DWORD onCompleteOffset;
void (*onComplete)(void *_instance);
DWORD SetFriendsOffset;
void (*SetFriends)(void *_instance, void *_friends);
DWORD DeleteAllFriendsOffset;
void (*DeleteAllFriends)(void *_instance);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *_error);
DWORD RemoveFriendFromListOffset;
void (*RemoveFriendFromList)(void *_instance, void *_friendToRemove);
}GFL_FriendsListController;
struct GFL_FriendsListModel {
DWORD onSuccessOffset;
void (*onSuccess)(void *_instance, monoString *_jsonString);
DWORD GetFriendsDataOffset;
void *(*GetFriendsData)(void *_instance);
DWORD WrapJsonStringOffset;
monoString *(*WrapJsonString)(void *_instance, monoString *_jsonString);
}GFL_FriendsListModel;
struct GFL_GetFriendsResponse {
}GFL_GetFriendsResponse;
struct GFL_GenericResponseData {
}GFL_GenericResponseData;
struct GFL_GetFriendData {
}GFL_GetFriendData;
struct GFL_GetMatchIdData {
}GFL_GetMatchIdData;
struct GFL_GetRequestData {
}GFL_GetRequestData;
struct GFL_PeopleInformationController {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD AddFriendOffset;
void (*AddFriend)(void *_instance);
DWORD onCompleteOffset;
void (*onComplete)(void *_instance);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *_error);
DWORD UpdateUIOffset;
void (*UpdateUI)(void *_instance);
DWORD SetPeopleInformationOffset;
void (*SetPeopleInformation)(void *_instance, void *_peopleData, void *_friendsListController);
}GFL_PeopleInformationController;
struct GFL_PeopleInformationModel {
DWORD onSuccessOffset;
void (*onSuccess)(void *_instance, monoString *_jsonString);
DWORD GetAddFriendDataOffset;
void *(*GetAddFriendData)(void *_instance);
DWORD WrapJsonStringOffset;
monoString *(*WrapJsonString)(void *_instance, monoString *_jsonString);
}GFL_PeopleInformationModel;
struct GFL_AddFriendResponse {
}GFL_AddFriendResponse;
struct GFL_PeopleListController {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD RefreshAllOffset;
void (*RefreshAll)(void *_instance);
DWORD ShowOffset;
void (*Show)(void *_instance, bool _show);
DWORD get_IsShowedOffset;
bool (*get_IsShowed)(void *_instance);
DWORD Call_SearchPeopleOffset;
void (*Call_SearchPeople)(void *_instance, monoString *_peopleNameToFind);
DWORD ClearPeopleFoundOffset;
void (*ClearPeopleFound)(void *_instance);
DWORD onCompleteSearchPeopleOffset;
void (*onCompleteSearchPeople)(void *_instance);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *_error);
}GFL_PeopleListController;
struct GFL_PeopleListModel {
DWORD onSuccessOffset;
void (*onSuccess)(void *_instance, monoString *_jsonString);
DWORD GetSearchPeopleDataOffset;
void *(*GetSearchPeopleData)(void *_instance);
DWORD WrapJsonStringOffset;
monoString *(*WrapJsonString)(void *_instance, monoString *_jsonString);
}GFL_PeopleListModel;
struct GFL_SearchPeopleResponse {
}GFL_SearchPeopleResponse;
struct GFL_RequestInformationController {
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD AcceptRequestOffset;
void (*AcceptRequest)(void *_instance);
DWORD RejectRequestOffset;
void (*RejectRequest)(void *_instance);
DWORD onCompleteAcceptOffset;
void (*onCompleteAccept)(void *_instance);
DWORD onCompleteRejectOffset;
void (*onCompleteReject)(void *_instance);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *error);
DWORD UpdateRequestUIOffset;
void (*UpdateRequestUI)(void *_instance);
DWORD SetRequestInformationOffset;
void (*SetRequestInformation)(void *_instance, void *_requestData, void *_genericFriendsListManager);
}GFL_RequestInformationController;
struct GFL_RequestInformationModel {
DWORD onSuccessAcceptOffset;
void (*onSuccessAccept)(void *_instance, monoString *_jsonString);
DWORD onSuccessRejectOffset;
void (*onSuccessReject)(void *_instance, monoString *_jsonString);
DWORD GetAcceptRequestDataOffset;
void *(*GetAcceptRequestData)(void *_instance);
DWORD WrapJsonStringOffset;
monoString *(*WrapJsonString)(void *_instance, monoString *_jsonString);
}GFL_RequestInformationModel;
struct GFL_RejectRequestResponse {
}GFL_RejectRequestResponse;
struct GFL_AcceptRequestResponse {
}GFL_AcceptRequestResponse;
struct GFL_RequestsListController {
DWORD get_actualPendingRequestsOffset;
int (*get_actualPendingRequests)(void *_instance);
DWORD set_actualPendingRequestsOffset;
void (*set_actualPendingRequests)(void *_instance, int value);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD RefreshAllOffset;
void (*RefreshAll)(void *_instance);
DWORD SetGenericFriendsListManagerOffset;
void (*SetGenericFriendsListManager)(void *_instance, void *_genericFriendsListManager);
DWORD GetRequestsNumberOffset;
int (*GetRequestsNumber)(void *_instance);
DWORD GetRequestsDataOffset;
void *(*GetRequestsData)(void *_instance);
DWORD GetPendingRequestsDataOffset;
void *(*GetPendingRequestsData)(void *_instance);
DWORD Call_GetRequestsOffset;
void (*Call_GetRequests)(void *_instance);
DWORD Call_GetPendingRequestsOffset;
void (*Call_GetPendingRequests)(void *_instance);
DWORD CreateRequestInformationObjectOffset;
void (*CreateRequestInformationObject)(void *_instance, void *_request);
DWORD onCompleteGetRequestsOffset;
void (*onCompleteGetRequests)(void *_instance);
DWORD onCompleteGetPendingRequestsOffset;
void (*onCompleteGetPendingRequests)(void *_instance);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *error);
}GFL_RequestsListController;
struct GFL_RequestsListModel {
DWORD onSuccessGetRequestsOffset;
void (*onSuccessGetRequests)(void *_instance, monoString *_jsonString);
DWORD onSuccessGetPendingRequestsOffset;
void (*onSuccessGetPendingRequests)(void *_instance, monoString *_jsonString);
DWORD GetRequestsDataOffset;
void *(*GetRequestsData)(void *_instance);
DWORD GetPendingRequestsDataOffset;
void *(*GetPendingRequestsData)(void *_instance);
DWORD WrapJsonStringOffset;
monoString *(*WrapJsonString)(void *_instance, monoString *_jsonString);
}GFL_RequestsListModel;
struct GFL_GetRequestsResponse {
}GFL_GetRequestsResponse;
struct GFL_SearchPeopleData {
}GFL_SearchPeopleData;
struct GenericFriendsListManager {
DWORD get_RequestsNumberOffset;
int (*get_RequestsNumber)(void *_instance);
DWORD set_RequestsNumberOffset;
void (*set_RequestsNumber)(void *_instance, int value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD RefreshFriendsOnlineOffset;
void (*RefreshFriendsOnline)(void *_instance);
DWORD GoToLoginSceneOffset;
void (*GoToLoginScene)(void *_instance);
DWORD CancelRegisterUserOffset;
void (*CancelRegisterUser)(void *_instance);
DWORD ActiveGuestUserPopupContainerOffset;
void (*ActiveGuestUserPopupContainer)(void *_instance);
DWORD RefreshAllOffset;
void (*RefreshAll)(void *_instance);
DWORD UpdateRequestsNumberOffset;
void (*UpdateRequestsNumber)(void *_instance, int _requestsNumber);
DWORD ShowNotificationBoxOffset;
void (*ShowNotificationBox)(void *_instance, bool _isActive);
DWORD SetPeopleNameToFindOffset;
void (*SetPeopleNameToFind)(void *_instance, monoString *_peopleNameToFind);
DWORD SearchPeopleOffset;
void (*SearchPeople)(void *_instance);
DWORD CheckVisibleOfNotificationBoxOffset;
void *(*CheckVisibleOfNotificationBox)(void *_instance);
DWORD AddFavoriteFriendOffset;
void (*AddFavoriteFriend)(void *_instance, void *_friendController);
DWORD RemoveFavoriteFriendOffset;
void (*RemoveFavoriteFriend)(void *_instance, void *_friendController);
DWORD SaveFavoritesFriendsOffset;
void (*SaveFavoritesFriends)(void *_instance);
DWORD onSuccessUpdateFavoritesOffset;
void (*onSuccessUpdateFavorites)(void *_instance, monoString *_jsonString);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *_error);
DWORD WrapJsonStringOffset;
monoString *(*WrapJsonString)(void *_instance, monoString *_jsonString);
DWORD ShowFeedbackSavingFavoritesOffset;
void (*ShowFeedbackSavingFavorites)(void *_instance, bool success, bool error);
DWORD ShowConfirmDeleteFriendPopupOffset;
void (*ShowConfirmDeleteFriendPopup)(void *_instance, void *_friendToDelete);
DWORD DeleteFriendOffset;
void (*DeleteFriend)(void *_instance);
DWORD ClearConfirmDeleteFriendPopupOffset;
void (*ClearConfirmDeleteFriendPopup)(void *_instance);
}GenericFriendsListManager;
struct VisibilityFriendsSystemController {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ReviewEnabledStateOffset;
void (*ReviewEnabledState)(void *_instance);
DWORD ShowFriendsSystemOffset;
void (*ShowFriendsSystem)(void *_instance);
DWORD HideFriendsSystemOffset;
void (*HideFriendsSystem)(void *_instance);
}VisibilityFriendsSystemController;
struct VisibilityFriendsSystemMainMenuController {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ReviewEnabledStateOffset;
void (*ReviewEnabledState)(void *_instance);
DWORD ShowFriendsSystemOffset;
void (*ShowFriendsSystem)(void *_instance);
DWORD HideFriendsSystemOffset;
void (*HideFriendsSystem)(void *_instance);
}VisibilityFriendsSystemMainMenuController;
struct GOActivePlayerPrefs {
DWORD StartOffset;
void (*Start)(void *_instance);
}GOActivePlayerPrefs;
struct GOActivePlayerPrefsString {
DWORD StartOffset;
void (*Start)(void *_instance);
}GOActivePlayerPrefsString;
struct GameManager {
DWORD get_CreditsMultiplierOffset;
float (*get_CreditsMultiplier)(void *_instance);
DWORD get_XPMultiplierOffset;
float (*get_XPMultiplier)(void *_instance);
DWORD get_totalHealthInfractionsOffset;
int (*get_totalHealthInfractions)(void *_instance);
DWORD set_totalHealthInfractionsOffset;
void (*set_totalHealthInfractions)(void *_instance, int value);
DWORD SetEnemyInPoolOffset;
void (*SetEnemyInPool)(void *enemy);
DWORD GetPlatformNameOffset;
monoString *(*GetPlatformName)();
DWORD GetTouchDeltaTimeOffset;
float (*GetTouchDeltaTime)(int touch);
DWORD GetTouchScreenDPIOffset;
float (*GetTouchScreenDPI)();
DWORD RefreshHighPingWarningOffset;
void (*RefreshHighPingWarning)(void *_instance, bool hudVisible);
DWORD ShowHighPingWarningOffset;
void (*ShowHighPingWarning)(void *_instance, int currentPing);
DWORD findClosestEnemyInRangeOffset;
void *(*findClosestEnemyInRange)(void *_instance, Vector3 location, float range, Vector3 direction, float angleDiff);
DWORD getBestEnemyPointOffset;
Vector3 (*getBestEnemyPoint)(void *_instance);
DWORD ButtonPressedOffset;
void (*ButtonPressed)(void *_instance);
DWORD CalculatePathLengthOffset;
float (*CalculatePathLength)(void *_instance, Vector3 originalPosition, Vector3 targetPosition);
DWORD getBestSpawnPointOffset;
Vector3 (*getBestSpawnPoint)(void *_instance);
DWORD AddGraphicColorExtraItemOffset;
void (*AddGraphicColorExtraItem)(void *_instance, void *item);
DWORD ToggleHUDEnabledOffset;
void (*ToggleHUDEnabled)(void *_instance, bool usedUI);
DWORD ShowOrQueueCreditsXPRewardPopupOffset;
void (*ShowOrQueueCreditsXPRewardPopup)(int creditsRewarded, int xpRewarded);
DWORD SwitchTeamsOffset;
void (*SwitchTeams)(void *_instance);
DWORD RespawnAsSpectatorOffset;
void (*RespawnAsSpectator)(void *_instance);
DWORD InstantiateSpectatorOffset;
void *(*InstantiateSpectator)(void *_instance);
DWORD ReportPlayerOffset;
void (*ReportPlayer)(void *_instance, monoString *playerName);
DWORD OnVoteProcessInitiatedOffset;
void (*OnVoteProcessInitiated)(void *_instance, monoString *pollId);
DWORD PerformVoteOffset;
void (*PerformVote)(void *_instance);
DWORD PerformAutomaticYesVoteOffset;
void (*PerformAutomaticYesVote)(void *_instance);
DWORD DisplayVoteDataOffset;
void (*DisplayVoteData)(void *_instance, monoString *player, monoString *accused, monoString *vote, int yesVotes, int noVotes);
DWORD PunishPlayerOffset;
void (*PunishPlayer)(void *_instance, monoString *playerName);
DWORD addSoundOffset;
bool (*addSound)(void *_instance, Vector3 location, float timeAlive, void *source);
DWORD throwGrenadeOffset;
void (*throwGrenade)(void *_instance, Vector3 position, float delay, Vector3 velocity, int netID, int grenadeWeaponType);
DWORD createSplatterOffset;
void *(*createSplatter)(void *_instance, Vector3 position, Vector3 normal, bool grow, void *parent, float lScale);
DWORD isSoundInRangeOffset;
Vector3 (*isSoundInRange)(void *_instance, Vector3 location, float range, void *ignoreObject);
DWORD GetAvailableBulletOffset;
int (*GetAvailableBullet)(void *_instance);
DWORD GetSquareDistanceFromPointToLineOffset;
float (*GetSquareDistanceFromPointToLine)(Vector3 point, Vector3 lineStart, Vector3 lineEnd, Vector3 *intersection);
DWORD AddXPOffset;
void (*AddXP)(void *_instance, int amount, bool countToEarnedThisMatch);
DWORD AddMoneyOffset;
void (*AddMoney)(void *_instance, int amount, bool countToEarnedThisMatch);
DWORD createExplosionOffset;
bool (*createExplosion)(void *_instance, Vector3 point, float radius, int netID, int weaponType);
DWORD playExplosionAtPointOffset;
bool (*playExplosionAtPoint)(void *_instance, Vector3 point);
DWORD playHitParticleOffset;
bool (*playHitParticle)(void *_instance, Vector3 point, Vector3 normal, Color col);
DWORD GetAvailableParticleSystemOffset;
int (*GetAvailableParticleSystem)(void *_instance);
DWORD GetAvailableExplosionOffset;
int (*GetAvailableExplosion)(void *_instance);
DWORD GetAvailableHitParticleOffset;
int (*GetAvailableHitParticle)(void *_instance);
DWORD AddPlayerOffset;
void (*AddPlayer)(int ID, void *s);
DWORD JSOffset;
void (*JS)(void *_instance, bool kickOut);
DWORD CancelJSOffset;
void (*CancelJS)(void *_instance);
DWORD LoadLevel3Offset;
void (*LoadLevel3)(void *_instance);
DWORD LogAmountOfTransformsOffset;
void (*LogAmountOfTransforms)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD RefreshHardcoreUIElementsVisibilityOffset;
void (*RefreshHardcoreUIElementsVisibility)(void *_instance, bool hudVisible);
DWORD SetHealthOffset;
void (*SetHealth)(void *_instance, float health, float max);
DWORD GetHealthbarColorOffset;
Color (*GetHealthbarColor)(void *_instance, int healthPercentage);
DWORD showHitMarkerOffset;
void (*showHitMarker)(void *_instance, Vector3 position, Color c, float scale, bool playSound);
DWORD HideHitMarkerOffset;
void (*HideHitMarker)(void *_instance);
DWORD enemyKilledOffset;
void (*enemyKilled)(void *_instance);
DWORD InvokeLoadNextLevelOffset;
void (*InvokeLoadNextLevel)(void *_instance);
DWORD LoadNextLevelOffset;
void (*LoadNextLevel)(void *_instance);
DWORD OnMasterClientSwitchedOffset;
void (*OnMasterClientSwitched)(void *_instance, void *newMaster);
DWORD DisableMessageQueueOffset;
void (*DisableMessageQueue)(void *_instance);
DWORD DestroyMatchManagerOffset;
void (*DestroyMatchManager)(void *_instance);
DWORD InvokeShowLoadingScreenOffset;
void (*InvokeShowLoadingScreen)(void *_instance, float time);
DWORD ShowLoadingScreenOffset;
void (*ShowLoadingScreen)(void *_instance);
DWORD InvokeLoadNewNetworkSceneOffset;
void (*InvokeLoadNewNetworkScene)(void *_instance, float time);
DWORD LoadNewNetworkSceneOffset;
void *(*LoadNewNetworkScene)(void *_instance, float delay);
DWORD SetPlayerLivingOffset;
void (*SetPlayerLiving)(void *_instance, bool value);
DWORD addBulletHoleOffset;
void (*addBulletHole)(void *_instance, Vector3 position, Vector3 normal, float size);
DWORD SpawnStaticBloodSplatterOffset;
void (*SpawnStaticBloodSplatter)(void *_instance, Vector3 position, Vector3 normal);
DWORD createMinimapItemOffset;
void *(*createMinimapItem)(void *_instance, void *target, Color color, void *rotationTarget);
DWORD spawnBloodEffectOffset;
void *(*spawnBloodEffect)(void *_instance, Vector3 position);
DWORD spawnBigBloodEffectOffset;
void *(*spawnBigBloodEffect)(void *_instance, Vector3 position);
DWORD spawnShellOffset;
void *(*spawnShell)(void *_instance, Vector3 position, int rotation, Vector3 velocity, Vector3 rotationalVelocity);
DWORD OnLeftRoomOffset;
void (*OnLeftRoom)(void *_instance);
DWORD OnDisconnectedFromPhotonOffset;
void (*OnDisconnectedFromPhoton)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD enemyDeathOffset;
void (*enemyDeath)(void *_instance, bool actuallyKilled, bool killedByPlayer, bool headshotted, bool knifed);
DWORD OnApplicationQuitOffset;
void (*OnApplicationQuit)(void *_instance);
DWORD spawnEnemyOffset;
void (*spawnEnemy)(void *_instance);
DWORD resetPlayerBodyOffset;
void (*resetPlayerBody)(void *_instance, void *playerBody);
DWORD resetBulletOffset;
void (*resetBullet)(void *_instance, int i);
DWORD PracticeModeFinishedOffset;
void (*PracticeModeFinished)(void *_instance, bool won);
DWORD ReturnToMainMenuOffset;
void (*ReturnToMainMenu)(void *_instance);
DWORD InstantiateWaveOfEnemiesOffset;
void (*InstantiateWaveOfEnemies)(void *_instance, int totalBots);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD LocalPlayerTeamUpdatedOffset;
void (*LocalPlayerTeamUpdated)(void *_instance);
DWORD TakeScreenshotOffset;
void (*TakeScreenshot)(void *_instance, void *cam, int width, int height, void *additionalCam);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD LoadAllowedWeaponsInfoOffset;
void (*LoadAllowedWeaponsInfo)(void *_instance);
DWORD ShowStartMatchButtonOffset;
void (*ShowStartMatchButton)(void *_instance);
DWORD HideStartMatchButtonOffset;
void (*HideStartMatchButton)(void *_instance);
DWORD IsHardcoreMatchOffset;
bool (*IsHardcoreMatch)();
DWORD IsMatchStartedOffset;
bool (*IsMatchStarted)();
DWORD IsRoundStartedOffset;
bool (*IsRoundStarted)();
}GameManager;
struct GameObjectPoolManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD GetObjectPrefabOffset;
void *(*GetObjectPrefab)(void *_instance, int type);
DWORD GetMaxCountForTypeOffset;
int (*GetMaxCountForType)(void *_instance, int type);
DWORD FillListOffset;
void (*FillList)(void *_instance, int type);
DWORD FillLimitedListsOffset;
void (*FillLimitedLists)(void *_instance);
DWORD CreateLimitedObjectOffset;
void *(*CreateLimitedObject)(void *_instance, int type, void *GO, Vector3 Position, int Rotation);
DWORD CreateObjectOffset;
void *(*CreateObject)(void *_instance, void *GO, Vector3 Position, int Rotation, bool justCreate);
DWORD DestroyObjectOffset;
void (*DestroyObject)(void *_instance, void *GO);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}GameObjectPoolManager;
struct GameObjectReferences {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
}GameObjectReferences;
struct GeneralUtils {
DWORD TranslateDropdownOptionsOffset;
void (*TranslateDropdownOptions)(void *dropdown);
}GeneralUtils;
struct Gibs {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD HideGibsOffset;
void (*HideGibs)(void *_instance);
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD SetVelocityOffset;
void (*SetVelocity)(void *_instance, Vector3 vel);
}Gibs;
struct GlobalVehicleCamera {
DWORD setTargetOffset;
void (*setTarget)(void *_instance, void *t, float dist, float hgt, float lookAtOffset, float mult);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD enableCamOffset;
void (*enableCam)(void *_instance);
DWORD disableCamOffset;
void (*disableCam)(void *_instance);
DWORD shakeOffset;
void (*shake)(void *_instance, float intensity);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}GlobalVehicleCamera;
struct GlobalWeaponResourceHandler {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ApplyTexturesAsyncOffset;
void (*ApplyTexturesAsync)(void *_instance, monoString *slotName, monoString *fileName, void *handler);
DWORD ApplyTexturesAsyncCROffset;
void *(*ApplyTexturesAsyncCR)(void *_instance, monoString *slotName, monoString *fileName, void *handler);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}GlobalWeaponResourceHandler;
struct GoToSingleplayer {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD RefreshActiveStateOffset;
void (*RefreshActiveState)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}GoToSingleplayer;
struct GoldManager {
DWORD GetProductIDFromAmountOffset;
monoString *(*GetProductIDFromAmount)(int amount);
DWORD GetAmountFromProductIDOffset;
int (*GetAmountFromProductID)(monoString *productID);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD BuyGoldOffset;
void (*BuyGold)(void *_instance, int amount);
DWORD IAPInitializedOffset;
void (*IAPInitialized)(void *_instance);
DWORD ChangePriceTierTextOffset;
void (*ChangePriceTierText)(void *_instance, void *textLabel, monoString *localizedPrice);
DWORD GetLocalizedPriceAndCurrencyOffset;
DWORD SetGoldOffset;
void (*SetGold)(void *_instance, int amount);
DWORD GoldPurchaseFailedOffset;
void (*GoldPurchaseFailed)(void *_instance);
DWORD BoughtGoldOffset;
void (*BoughtGold)(void *_instance);
}GoldManager;
struct GraphicAnimations {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetGraphicScaleOffset;
void (*SetGraphicScale)(void *_instance, float s);
DWORD SetGraphicScale1Offset;
void (*SetGraphicScale1)(void *_instance, Vector3 _scale);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
DWORD ScaleToOriginalSizeOffset;
void *(*ScaleToOriginalSize)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}GraphicAnimations;
struct GraphicColorExtra {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD CheckTextOffset;
void (*CheckText)(void *_instance);
DWORD CheckImageOffset;
void (*CheckImage)(void *_instance);
DWORD get_rectTransformOffset;
void *(*get_rectTransform)(void *_instance);
DWORD get_raycastTargetOffset;
bool (*get_raycastTarget)(void *_instance);
DWORD set_raycastTargetOffset;
void (*set_raycastTarget)(void *_instance, bool value);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD get_spriteOffset;
void *(*get_sprite)(void *_instance);
DWORD set_spriteOffset;
void (*set_sprite)(void *_instance, void *value);
DWORD get_fontSizeOffset;
int (*get_fontSize)(void *_instance);
DWORD set_fontSizeOffset;
void (*set_fontSize)(void *_instance, int value);
DWORD get_textOffset;
monoString *(*get_text)(void *_instance);
DWORD set_textOffset;
void (*set_text)(void *_instance, monoString *value);
DWORD get_visibleOffset;
bool (*get_visible)(void *_instance);
DWORD set_visibleOffset;
void (*set_visible)(void *_instance, bool value);
DWORD get_colorOffset;
Color (*get_color)(void *_instance);
DWORD set_colorOffset;
void (*set_color)(void *_instance, Color value);
DWORD EnabledCheckOffset;
void (*EnabledCheck)(void *_instance);
}GraphicColorExtra;
struct GraphicsDependentEnabling {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}GraphicsDependentEnabling;
struct GraphicsOptions {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD GetGraphicsOptionOffset;
int(*GetGraphicsOption)(bool recheck);
DWORD ApplyTextureQualityOffset;
void (*ApplyTextureQuality)();
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetTextureQualityOffset;
void (*SetTextureQuality)(void *_instance, int t);
DWORD SetValueOffset;
void (*SetValue)(void *_instance, int v);
}GraphicsOptions;
struct GrenadeButton {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}GrenadeButton;
struct GrenadeScript {
DWORD launchGrenadeOffset;
void (*launchGrenade)(void *_instance, float delay, Vector3 velocity, int netID, int grenadeWeaponType);
DWORD pullPinOffset;
void (*pullPin)(void *_instance, float delay);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnCollisionEnterOffset;
void (*OnCollisionEnter)(void *_instance, void *col);
DWORD CheckForPlayersNearbyOffset;
void (*CheckForPlayersNearby)(void *_instance);
DWORD explodeOffset;
void (*explode)(void *_instance);
DWORD removeGrenadeOffset;
void (*removeGrenade)(void *_instance);
DWORD disableSelfOffset;
void (*disableSelf)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}GrenadeScript;
struct GrenadesLeft {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetTypeOffset;
void (*SetType)(void *_instance, int t);
DWORD getGrenadesLeftOffset;
int (*getGrenadesLeft)(void *_instance);
DWORD GetMaxGrenadesOffset;
int (*GetMaxGrenades)(void *_instance);
DWORD setGrenadesLeftOffset;
void (*setGrenadesLeft)(void *_instance, int amt);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}GrenadesLeft;
struct GuestLogin {
DWORD StartOffset;
void (*Start)(void *_instance);
}GuestLogin;
struct GunAvailableThroughAdsButton {
DWORD set_InstanceOffset;
void (*set_Instance)(void *value);
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD CheckTimeSinceLastAdOffset;
DWORD GetWatchAdButtonTextOffset;
monoString *(*GetWatchAdButtonText)(void *_instance);
DWORD WatchAdOffset;
void (*WatchAd)(void *_instance);
DWORD WatchedAdOffset;
void (*WatchedAd)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}GunAvailableThroughAdsButton;
struct GunCustomizeScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateArmsTeamNumberOffset;
void (*UpdateArmsTeamNumber)(void *_instance, int teamNumber);
DWORD DestroyAttachmentTransformsOffset;
void (*DestroyAttachmentTransforms)(void *_instance);
DWORD LoadLocalPlayerWeaponPrefabOffset;
void (*LoadLocalPlayerWeaponPrefab)(void *_instance);
DWORD InitOriginalCameraAnglesOffset;
void (*InitOriginalCameraAngles)(void *_instance);
DWORD UnloadLocalPlayerWeaponPrefabOffset;
void (*UnloadLocalPlayerWeaponPrefab)(void *_instance);
DWORD LoadLocalPlayerAudioDataOffset;
void (*LoadLocalPlayerAudioData)(void *_instance);
DWORD UnloadLocalPlayerAudioDataOffset;
void (*UnloadLocalPlayerAudioData)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD PopulateSightPositionsOffset;
void (*PopulateSightPositions)(void *_instance);
DWORD GetADSPositionOffset;
Vector3 (*GetADSPosition)(void *_instance, int t);
DWORD GetCameraDeltaOffset;
Vector3 (*GetCameraDelta)(void *_instance);
DWORD SetSightsOffset;
void (*SetSights)(void *_instance, int t);
DWORD SetAccessoryOffset;
void (*SetAccessory)(void *_instance, int t, bool lowPoly);
DWORD SetBarrelOffset;
void (*SetBarrel)(void *_instance, int t, bool lowPoly);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD RemoveCamoOffset;
void (*RemoveCamo)(void *_instance);
DWORD SetCorrectShaderOffset;
void (*SetCorrectShader)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD AddCamoOffset;
void (*AddCamo)(void *_instance, int t);
}GunCustomizeScript;
struct GunScript {
DWORD DestroyGunOffset;
void (*DestroyGun)(void *_instance);
DWORD SetAccessoryOffset;
void (*SetAccessory)(void *_instance, int t);
DWORD CurrentWeaponGOOffset;
void *(*CurrentWeaponGO)(void *_instance);
DWORD PlayShootSoundOffset;
void (*PlayShootSound)(void *_instance);
DWORD ShowMuzzleFlashOffset;
void (*ShowMuzzleFlash)(void *_instance);
DWORD GetMuzzlePositionOffset;
Vector3 (*GetMuzzlePosition)(void *_instance);
DWORD ShowOffset;
void (*Show)(void *_instance, bool shouldShow);
DWORD InitCurrentRenderersOffset;
void (*InitCurrentRenderers)(void *_instance);
DWORD IsShownOffset;
bool (*IsShown)(void *_instance);
DWORD EnablePhysicsOffset;
void (*EnablePhysics)(void *_instance);
DWORD RemoveRigidbodyOffset;
void (*RemoveRigidbody)(void *_instance);
DWORD DisablePhysicsOffset;
void (*DisablePhysics)(void *_instance);
DWORD SetTypeOffset;
void (*SetType)(void *_instance, int type);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD DisableMuzzleFlashOffset;
void (*DisableMuzzleFlash)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetBarrelOffset;
void (*SetBarrel)(void *_instance, int t);
DWORD SetSightOffset;
void (*SetSight)(void *_instance, int t);
DWORD SetCamoOffset;
void (*SetCamo)(void *_instance, int t);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}GunScript;
struct GunSounds {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ShouldPlayOffset;
bool (*ShouldPlay)(void *_instance);
DWORD PlayInsertShellOffset;
void (*PlayInsertShell)(void *_instance);
DWORD PlayChamberOffset;
void (*PlayChamber)(void *_instance);
DWORD PlayCustomSound01Offset;
void (*PlayCustomSound01)(void *_instance);
DWORD PlayCustomSound02Offset;
void (*PlayCustomSound02)(void *_instance);
DWORD PlayCustomSound03Offset;
void (*PlayCustomSound03)(void *_instance);
DWORD PlayCustomSound04Offset;
void (*PlayCustomSound04)(void *_instance);
DWORD PlayCustomSound05Offset;
void (*PlayCustomSound05)(void *_instance);
DWORD PlayCustomSound06Offset;
void (*PlayCustomSound06)(void *_instance);
DWORD PlayCustomSound07Offset;
void (*PlayCustomSound07)(void *_instance);
DWORD PlayCustomSound08Offset;
void (*PlayCustomSound08)(void *_instance);
DWORD PlayCustomSound09Offset;
void (*PlayCustomSound09)(void *_instance);
}GunSounds;
struct GunStats {
DWORD get_gunGameLevelsOffset;
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitializeGunGameLevelsOffset;
void (*InitializeGunGameLevels)(void *_instance);
DWORD PrintGunGameLevelsOffset;
void (*PrintGunGameLevels)(void *_instance, int preset);
DWORD AddGunGameLevelOffset;
void (*AddGunGameLevel)(void *_instance, int kills, int weaponType, int sightType, int accessoryType, int barrelType);
DWORD SetGunGamePreset0Offset;
void (*SetGunGamePreset0)(void *_instance);
DWORD SetGunGamePreset1Offset;
void (*SetGunGamePreset1)(void *_instance);
DWORD SetGunGamePreset2Offset;
void (*SetGunGamePreset2)(void *_instance);
DWORD GetGunGameLevelIndexOffset;
int (*GetGunGameLevelIndex)(void *_instance, int kills);
DWORD IsWeaponAPrimaryWeaponOffset;
bool (*IsWeaponAPrimaryWeapon)(void *_instance, int type);
DWORD GetWeaponNameOffset;
monoString *(*GetWeaponName)(void *_instance, int t);
DWORD GetWeaponName1Offset;
monoString *(*GetWeaponName1)(void *_instance, int t);
DWORD WeaponNameToWeaponTypeOffset;
int(*WeaponNameToWeaponType)(void *_instance, monoString *n);
DWORD GetGunStatsOffset;
int(*GetGunStats)(void *_instance, int type);
DWORD GetGunStats1Offset;
int(*GetGunStats1)(void *_instance, int type);
DWORD GetCountOfPrimaryTypeOffset;
int (*GetCountOfPrimaryType)(void *_instance, int weaponCategory);
DWORD GetAllGunstatsOfCategoryOffset;
DWORD GetPrimaryCategoryUnlockCountOffset;
int (*GetPrimaryCategoryUnlockCount)(void *_instance, int weaponCategory);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}GunStats;
struct GyroscopeMode {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD IsEnabledOffset;
bool (*IsEnabled)();
DWORD SetEnabledOffset;
void (*SetEnabled)(void *_instance, bool enabled);
DWORD SetDropdownOffset;
void (*SetDropdown)(void *_instance, int GyroscopeStatus);
}GyroscopeMode;
struct HeadCamera {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}HeadCamera;
struct HidingPopup {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}HidingPopup;
struct HitSoundScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnCollisionEnterOffset;
void (*OnCollisionEnter)(void *_instance, void *collision);
}HitSoundScript;
struct HumanReferences {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD EnableTeammateCollidersOffset;
void (*EnableTeammateColliders)(void *_instance, bool enable);
}HumanReferences;
struct IAP {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ItemPurchasedOffset;
void (*ItemPurchased)(void *_instance, monoString *productID);
DWORD PurchaseFraudOffset;
void (*PurchaseFraud)(void *_instance, monoString *productID);
DWORD PurchaseFailedOffset;
void (*PurchaseFailed)(void *_instance);
DWORD InitializePurchasingOffset;
void (*InitializePurchasing)(void *_instance);
DWORD IsInitializedOffset;
bool (*IsInitialized)(void *_instance);
DWORD BuyNonConsumableOffset;
void (*BuyNonConsumable)(void *_instance);
DWORD BuyGoldTierOneOffset;
bool (*BuyGoldTierOne)(void *_instance);
DWORD BuyGoldTierTwoOffset;
bool (*BuyGoldTierTwo)(void *_instance);
DWORD BuyGoldTierThreeOffset;
bool (*BuyGoldTierThree)(void *_instance);
DWORD BuyGoldTierFourOffset;
bool (*BuyGoldTierFour)(void *_instance);
DWORD BuyProductIDOffset;
bool (*BuyProductID)(void *_instance, monoString *productId, monoString *uniqueName);
DWORD RestorePurchasesOffset;
void (*RestorePurchases)(void *_instance);
DWORD OnInitializedOffset;
void (*OnInitialized)(void *_instance, void *controller, void *extensions);
DWORD GetProductWithIDOffset;
void *(*GetProductWithID)(void *_instance, monoString *id);
DWORD OnInitializeFailedOffset;
void (*OnInitializeFailed)(void *_instance, int error);
DWORD ProcessPurchaseOffset;
int(*ProcessPurchase)(void *_instance, void *args);
DWORD OnPurchaseFailedOffset;
void (*OnPurchaseFailed)(void *_instance, void *product, int failureReason);
}IAP;
struct ImageFillScreen {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD calculateSizeOffset;
void (*calculateSize)(void *_instance);
}ImageFillScreen;
struct Intro {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD LoadMainMenuOffset;
void (*LoadMainMenu)(void *_instance);
DWORD SetDefaultsOffset;
void (*SetDefaults)(bool forceDefaults);
DWORD StartOffset;
void (*Start)(void *_instance);
}Intro;
struct IntroScript {
DWORD get_AutoLoggingInProcessOffset;
bool (*get_AutoLoggingInProcess)(void *_instance);
DWORD set_AutoLoggingInProcessOffset;
void (*set_AutoLoggingInProcess)(void *_instance, bool value);
DWORD HandleOldVersionOffset;
void (*HandleOldVersion)();
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD LoadCampaignOffset;
void (*LoadCampaign)(void *_instance);
DWORD LoadSkirmishOffset;
void (*LoadSkirmish)(void *_instance);
DWORD HandleAutoLoginOffset;
void (*HandleAutoLogin)(void *_instance, void *onAutoLoginFinished);
DWORD HandleDefaultGraphicsOptionsOffset;
void (*HandleDefaultGraphicsOptions)(void *_instance);
DWORD HandleDefaultLanguageOffset;
void (*HandleDefaultLanguage)(void *_instance);
DWORD InitClanTagOffset;
void (*InitClanTag)(void *_instance);
DWORD InitGameCenterOffset;
void (*InitGameCenter)(void *_instance);
DWORD InitOneSignalOffset;
void (*InitOneSignal)(void *_instance);
DWORD LoadVideosOffset;
void (*LoadVideos)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD WaitAndCheckVersionOffset;
void *(*WaitAndCheckVersion)(void *_instance);
DWORD OnVersionCheckedOffset;
void (*OnVersionChecked)(void *_instance, bool isOldVersion);
DWORD CheckStatusAndVersionFlagsOffset;
void (*CheckStatusAndVersionFlags)(void *_instance);
DWORD OnOfflineModeActivatedOffset;
void (*OnOfflineModeActivated)(void *_instance);
DWORD OnFeatureConfigByRegionInitializedOffset;
void (*OnFeatureConfigByRegionInitialized)(void *_instance);
DWORD HideLoadingPopupOffset;
void (*HideLoadingPopup)(void *_instance);
DWORD ShowLoadingPopupOffset;
void (*ShowLoadingPopup)(void *_instance);
DWORD HideLoadingPopupProcessOffset;
void *(*HideLoadingPopupProcess)(void *_instance);
DWORD CheckNewSettingsAddedOffset;
void (*CheckNewSettingsAdded)(void *_instance);
DWORD LoadVideos1Offset;
void *(*LoadVideos1)(void *_instance, bool isInternal, int startIndex, int type);
DWORD LoadAnnouncementImageOffset;
void *(*LoadAnnouncementImage)(void *_instance, monoString *link, int id);
DWORD AnnouncementLinkButtonPressedOffset;
void (*AnnouncementLinkButtonPressed)(void *_instance, int id);
DWORD AnnouncementLinkPointerUpOffset;
void (*AnnouncementLinkPointerUp)(void *_instance, int id);
DWORD AnnouncementLinkPressedOffset;
void (*AnnouncementLinkPressed)(void *_instance, int id, monoString *deepLinkAction);
DWORD RewardVideoViewOffset;
void *(*RewardVideoView)(void *_instance, void *videoInfo);
DWORD SupportButtonPressedOffset;
void (*SupportButtonPressed)(void *_instance);
DWORD LoggedInOffset;
void (*LoggedIn)(void *_instance, bool isLoggedIn);
DWORD LogoutOffset;
void (*Logout)(void *_instance);
DWORD onSuccessLogoutOffset;
void (*onSuccessLogout)(void *_instance);
DWORD onErrorLogoutOffset;
void (*onErrorLogout)(void *_instance, monoString *_error);
DWORD FinishLogoutOffset;
void (*FinishLogout)(void *_instance);
DWORD OnLogoutFinishedAfterASecondOffset;
void *(*OnLogoutFinishedAfterASecond)(void *_instance);
DWORD ShowLeaderboardsOffset;
void (*ShowLeaderboards)(void *_instance);
DWORD ToggleGraphicsSettingsOffset;
void (*ToggleGraphicsSettings)(void *_instance);
DWORD ShowGraphicsSettingsOffset;
void (*ShowGraphicsSettings)(void *_instance);
DWORD HideGraphicsSettingsOffset;
void (*HideGraphicsSettings)(void *_instance);
DWORD LoadLoadoutOffset;
void (*LoadLoadout)(void *_instance);
DWORD LoadMultiplayerOffset;
void (*LoadMultiplayer)(void *_instance);
DWORD EditClanTagOffset;
void (*EditClanTag)(void *_instance, monoString *tag);
DWORD ChangeUsernameClickedOffset;
void (*ChangeUsernameClicked)(void *_instance);
DWORD OpenServerStatusLinkOffset;
void (*OpenServerStatusLink)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}IntroScript;
struct JoinMatchReferences {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetBeginnerMatchColorsOffset;
void (*SetBeginnerMatchColors)(void *_instance, int rankTier);
DWORD ChangeAndSetOriginalColorOffset;
void (*ChangeAndSetOriginalColor)(void *_instance, Color c);
DWORD SetOriginalColorOffset;
void (*SetOriginalColor)(void *_instance);
}JoinMatchReferences;
struct JoystickToggle {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetEnabledOffset;
void (*SetEnabled)(void *_instance, bool e);
DWORD ToggleChangedOffset;
void (*ToggleChanged)(void *_instance, bool value);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}JoystickToggle;
struct JumpButton {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}JumpButton;
struct KeepCameraPosition {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}KeepCameraPosition;
struct KillLogItem {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetIsFriendlyKillerOffset;
void (*SetIsFriendlyKiller)(void *_instance, bool friendly);
DWORD SetIsFriendlyKilledOffset;
void (*SetIsFriendlyKilled)(void *_instance, bool friendly);
DWORD SetValuesOffset;
void (*SetValues)(void *_instance, monoString *killer, int weapon, monoString *killed, bool _isHeadshot);
DWORD SetValuesSpectatorOffset;
void (*SetValuesSpectator)(void *_instance, monoString *_userName, void *_spectateSprite);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD DestroySelfOffset;
void (*DestroySelf)(void *_instance);
}KillLogItem;
struct KillLogScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD showKillOffset;
void (*showKill)(void *_instance, monoString *killerName, int weaponKilledWith, monoString *killedName, bool isFriendlyKiller, bool isFriendlyKilled, bool headshot);
DWORD ShowSpectatorOffset;
void (*ShowSpectator)(void *_instance, monoString *_userName);
DWORD HideSpectatorOffset;
void (*HideSpectator)(void *_instance, monoString *_userName);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}KillLogScript;
struct KillerStatsScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetWeaponAsThrowingWeaponOffset;
void (*SetWeaponAsThrowingWeapon)(void *_instance, int weaponType);
DWORD ShowRespawnScreenOffset;
void (*ShowRespawnScreen)(void *_instance);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}KillerStatsScript;
struct KillsToWin {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetValueOffset;
void (*SetValue)(void *_instance, float value);
}KillsToWin;
struct KillstreakManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD FillStreakStatsOffset;
void (*FillStreakStats)(void *_instance);
DWORD FillSpritesDictionaryOffset;
void (*FillSpritesDictionary)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD GetKillstreakSpritesFromLoadoutOffset;
DWORD ReloadKillstreaksOffset;
void (*ReloadKillstreaks)(void *_instance);
DWORD SetButtonActiveOffset;
void (*SetButtonActive)(void *_instance, int buttonIndex, bool active);
DWORD ResizeButtonsOffset;
void (*ResizeButtons)(void *_instance);
DWORD LoadKillstreaksOffset;
void (*LoadKillstreaks)(void *_instance);
DWORD DisableKillstreakOffset;
void (*DisableKillstreak)(void *_instance);
DWORD TimeLeftInKillstreakOffset;
float (*TimeLeftInKillstreak)(void *_instance);
DWORD UseKillstreakOffset;
void (*UseKillstreak)(void *_instance, int buttonIndex);
DWORD ForceKillstreakOffset;
void (*ForceKillstreak)(void *_instance, int killstreak, bool isOnTheSameTeam);
DWORD ShowNukeOverlayOffset;
void (*ShowNukeOverlay)(void *_instance);
DWORD HasKillstreakOffset;
bool (*HasKillstreak)(void *_instance, int k);
DWORD GetValidKillstreaksOffset;
DWORD ShowWarningOffset;
void (*ShowWarning)(void *_instance, int k);
DWORD HideKillstreakWarningTextOffset;
void (*HideKillstreakWarningText)(void *_instance);
DWORD GetKillstreakStatsOffset;
int(*GetKillstreakStats)(void *_instance, int p);
DWORD ResetCurrentKillStreakOffset;
void (*ResetCurrentKillStreak)(void *_instance);
DWORD AddKillToKillStreakOffset;
void (*AddKillToKillStreak)(void *_instance);
DWORD GetKillstreakIndexOffset;
int (*GetKillstreakIndex)(void *_instance, int k);
DWORD SetCurrentKillStreakOffset;
void (*SetCurrentKillStreak)(void *_instance, int streak);
DWORD HideKillstreakAvailableTextOffset;
void (*HideKillstreakAvailableText)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD GetActiveKillstreakOffset;
int(*GetActiveKillstreak)(void *_instance, int index);
}KillstreakManager;
struct KillstreakMenuManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetActiveLoadoutOffset;
void (*SetActiveLoadout)(void *_instance, int loadout);
DWORD PopulateKillstreakUIItemsOffset;
void (*PopulateKillstreakUIItems)(void *_instance);
DWORD LoadKillstreaksOffset;
void (*LoadKillstreaks)(void *_instance);
DWORD SaveAllKillstreaksOffset;
void (*SaveAllKillstreaks)(void *_instance);
DWORD SetInSlotOffset;
void (*SetInSlot)(void *_instance, int slotNumber);
DWORD StopUsingKillstreakOffset;
void (*StopUsingKillstreak)(void *_instance);
DWORD RefreshkillsUsedOffset;
void (*RefreshkillsUsed)(void *_instance);
DWORD RefreshKillstreakUIItemColorsOffset;
void (*RefreshKillstreakUIItemColors)(void *_instance);
DWORD ShowKillstreakDescriptionOffset;
void (*ShowKillstreakDescription)(void *_instance, int p);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}KillstreakMenuManager;
struct KillstreakUIItem {
DWORD SetKillstreakTypeOffset;
void (*SetKillstreakType)(void *_instance, int p);
DWORD SetEquippedOffset;
void (*SetEquipped)(void *_instance, bool isEquipped);
DWORD SetSelectedOffset;
void (*SetSelected)(void *_instance, bool isSelected);
DWORD SetCorrectVisualsOffset;
void (*SetCorrectVisuals)(void *_instance);
DWORD ShowKillstreakDescriptionOffset;
void (*ShowKillstreakDescription)(void *_instance);
}KillstreakUIItem;
struct KnifeButton {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
}KnifeButton;
struct LanguageManager {
DWORD get_singletonOffset;
void *(*get_singleton)();
DWORD InitializeOffset;
void (*Initialize)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitStaticStringsOffset;
void (*InitStaticStrings)(void *_instance);
DWORD LanguageChangedOffset;
void (*LanguageChanged)(void *_instance);
DWORD OnLevelWasLoadedOffset;
void (*OnLevelWasLoaded)(void *_instance);
DWORD FillLanguagesOffset;
void (*FillLanguages)(void *_instance);
DWORD FillLanguageOffset;
void (*FillLanguage)(void *_instance, monoString *language);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}LanguageManager;
struct LanguageOptions {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD RemoveWebGLLanguagesOffset;
void (*RemoveWebGLLanguages)(void *_instance);
DWORD ShouldRemoveOffset;
bool (*ShouldRemove)(void *_instance, monoString *option);
DWORD SetLanguageOffset;
void (*SetLanguage)(void *_instance, monoString *language);
DWORD LanguageToIntOffset;
int (*LanguageToInt)(void *_instance, monoString *language);
DWORD SetValueOffset;
void (*SetValue)(void *_instance, int v);
}LanguageOptions;
struct LaserSight {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetAimingDownSightsOffset;
void (*SetAimingDownSights)(void *_instance, bool ads);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}LaserSight;
struct LoadScene {
DWORD StartOffset;
void (*Start)(void *_instance);
}LoadScene;
struct LoadSceneButton {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}LoadSceneButton;
struct LoadingMap {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ShowLoadingScreenOffset;
void (*ShowLoadingScreen)(void *_instance, monoString *mapName, monoString *gameMode);
DWORD HideLoadingScreenOffset;
void (*HideLoadingScreen)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}LoadingMap;
struct LoadoutBulletController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetDefaultColorsOffset;
void (*SetDefaultColors)(void *_instance);
DWORD SetColorOffset;
void (*SetColor)(void *_instance, int _type, Color _newColor);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}LoadoutBulletController;
struct LoadoutGuns {
DWORD GetWeaponPrefabNameOffset;
monoString *(*GetWeaponPrefabName)(void *_instance, int weaponType);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD GetWeaponPrefabOffset;
void *(*GetWeaponPrefab)(void *_instance, int weaponType);
DWORD UnloadWeaponPrefabOffset;
void (*UnloadWeaponPrefab)(void *_instance, int weaponType);
}LoadoutGuns;
struct LoadoutManager {
DWORD GetLoadoutNameOffset;
monoString *(*GetLoadoutName)(int loadoutNumber);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnVersionCheckedOffset;
void (*OnVersionChecked)(void *_instance, bool isOldVersion);
DWORD SetGunRotationPointOffset;
void (*SetGunRotationPoint)(void *_instance, bool customizing);
DWORD SetCustomizingOffset;
void (*SetCustomizing)(void *_instance, bool customizing);
DWORD ShowChooseGunOffset;
void (*ShowChooseGun)(void *_instance);
DWORD AddXPOffset;
void (*AddXP)(void *_instance, int amount);
DWORD GetContainerOffset;
void *(*GetContainer)(void *_instance, monoString *containerName);
DWORD SetGoldOffset;
void (*SetGold)(void *_instance, int amt);
DWORD LoadMultiplayerSceneOffset;
void (*LoadMultiplayerScene)(void *_instance);
DWORD DestroyAll3DObjectsOffset;
void (*DestroyAll3DObjects)(void *_instance);
DWORD ShowCurrentGunObjectOffset;
void (*ShowCurrentGunObject)(void *_instance, bool show);
DWORD RefreshLoadoutOffset;
void (*RefreshLoadout)(void *_instance, bool refreshSlotGun);
DWORD SetActiveLoadoutOffset;
void (*SetActiveLoadout)(void *_instance, int loadout);
DWORD RevertToPreviouslySelectedLoadoutOffset;
void (*RevertToPreviouslySelectedLoadout)(void *_instance);
DWORD FillGunsListOffset;
void (*FillGunsList)(void *_instance, bool isPrimary, int desiredCategory);
DWORD SortGunsListOffset;
void (*SortGunsList)(void *_instance);
DWORD SetBulletTracerColorOffset;
void (*SetBulletTracerColor)(void *_instance);
DWORD SetCorrectBulletTracerColorOffset;
void (*SetCorrectBulletTracerColor)(void *_instance);
DWORD SetCharacterCamoOffset;
void (*SetCharacterCamo)(void *_instance);
DWORD SetCorrectCharacterCamoOffset;
void (*SetCorrectCharacterCamo)(void *_instance);
DWORD SetSlotTypeOffset;
void (*SetSlotType)(void *_instance, int s);
DWORD SetCorrectCharacterCamoAtEndOfFrameOffset;
void *(*SetCorrectCharacterCamoAtEndOfFrame)(void *_instance);
DWORD SetCorrectBulletTracerColorAtEndOfFrameOffset;
void *(*SetCorrectBulletTracerColorAtEndOfFrame)(void *_instance);
DWORD SetCategoryOffset;
void (*SetCategory)(void *_instance);
DWORD StartEditingAttachmentsOffset;
void (*StartEditingAttachments)(void *_instance);
DWORD CostsGoldOffset;
int(*CostsGold)(void *_instance, int weaponType);
DWORD CostsMoneyOffset;
int(*CostsMoney)(void *_instance, int weaponType);
DWORD BuyExtraLoadoutOffset;
void (*BuyExtraLoadout)(void *_instance);
DWORD BuyExtraLoadoutFromServerOffset;
void *(*BuyExtraLoadoutFromServer)(void *_instance);
DWORD GetCostOfGunOffset;
int(*GetCostOfGun)(void *_instance, int weaponType);
DWORD AccountInfoUpdatedOffset;
void (*AccountInfoUpdated)(void *_instance);
DWORD WeaponAttemptedPurchaseOffset;
void (*WeaponAttemptedPurchase)(void *_instance);
DWORD WeaponPricesGotOffset;
void (*WeaponPricesGot)(void *_instance, monoString *wwwResult);
DWORD BuyWeaponOffset;
void *(*BuyWeapon)(void *_instance, int weaponType);
DWORD PurchaseGunOffset;
void (*PurchaseGun)(void *_instance);
DWORD PurchaseBulletTracerColorFromServerOffset;
void (*PurchaseBulletTracerColorFromServer)(void *_instance);
DWORD PurchaseItemFromServerOffset;
void *(*PurchaseItemFromServer)(void *_instance, int weaponID, monoString *itemType, int itemID, int credits);
DWORD ProcessPurchaseItemFromServerResponseOffset;
void (*ProcessPurchaseItemFromServerResponse)(void *_instance, monoString *response, monoString *itemType, int itemID, int creditsToDeduct);
DWORD BuyGunSightOffset;
void (*BuyGunSight)(void *_instance);
DWORD BuyGunBarrelOffset;
void (*BuyGunBarrel)(void *_instance);
DWORD BuyGunAccessoryOffset;
void (*BuyGunAccessory)(void *_instance);
DWORD SetGunAsPrimaryOffset;
void (*SetGunAsPrimary)(void *_instance);
DWORD SetGunAsSecondaryOffset;
void (*SetGunAsSecondary)(void *_instance);
DWORD SetAsThrowableOffset;
void (*SetAsThrowable)(void *_instance);
DWORD SetCorrectWeaponStatsOffset;
void (*SetCorrectWeaponStats)(void *_instance);
DWORD SetGunSightOffset;
void (*SetGunSight)(void *_instance);
DWORD SetGunBarrelOffset;
void (*SetGunBarrel)(void *_instance);
DWORD SetGunAccessoryOffset;
void (*SetGunAccessory)(void *_instance);
DWORD SortUnlockedFirstOffset;
void (*SortUnlockedFirst)(void *_instance, void *transformToSort);
DWORD SortLockedNewOffset;
void (*SortLockedNew)(void *_instance, void *transformToSort);
DWORD RefreshUnlockedCustomizationsOffset;
void (*RefreshUnlockedCustomizations)(void *_instance);
DWORD ShouldAllowNormalSightOffset;
bool (*ShouldAllowNormalSight)(void *_instance, int weaponType);
DWORD OptimizeCarouselOffset;
void (*OptimizeCarousel)(void *_instance, void *carousel);
DWORD GetRarityTextOffset;
monoString *(*GetRarityText)(int camoType);
DWORD GetRarityText1Offset;
monoString *(*GetRarityText1)(int rarity);
DWORD GetCharacterRarityTextOffset;
monoString *(*GetCharacterRarityText)(int camoType);
DWORD SetGunCamoOffset;
void (*SetGunCamo)(void *_instance);
DWORD PreviousGunOffset;
void (*PreviousGun)(void *_instance);
DWORD NextGunOffset;
void (*NextGun)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD RefreshCurrentWeaponCustomizationOffset;
void (*RefreshCurrentWeaponCustomization)(void *_instance);
DWORD SetCurrentGunOffset;
bool (*SetCurrentGun)(void *_instance, int weaponType, bool refreshSlotGun);
DWORD ShouldWeaponShowStatsOffset;
bool (*ShouldWeaponShowStats)(void *_instance, int weaponType);
DWORD ResetPurchaseButtonsOffset;
void (*ResetPurchaseButtons)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD ToggleWaitingPopUpOffset;
void (*ToggleWaitingPopUp)(void *_instance, bool show);
DWORD GetThrowableFromObscuredOffset;
int (*GetThrowableFromObscured)(monoString *throwableId, monoString *username);
}LoadoutManager;
struct LoadoutManagerHelper {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD GetWeaponPricesOffset;
void *(*GetWeaponPrices)(void *_instance);
}LoadoutManagerHelper;
struct LocalPlayer {
DWORD HandlePlayerSerializationRatesOffset;
void (*HandlePlayerSerializationRates)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}LocalPlayer;
struct LocalPlayerWeaponReferences {
}LocalPlayerWeaponReferences;
struct LogStore {
DWORD HandleLogOffset;
void (*HandleLog)(void *_instance, monoString *logString, monoString *stackTrace, int type);
DWORD GetLogOffset;
void *(*GetLog)(void *_instance);
DWORD GetTypeOffset;
}LogStore;
struct LogReporter {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD HandleLogOffset;
void (*HandleLog)(void *_instance, monoString *logString, monoString *stackTrace, int type);
DWORD GetInstanceOffset;
void *(*GetInstance)();
}LogReporter;
struct MasterClientFinder {
DWORD LatencySendOffset;
void (*LatencySend)(void *_instance, int info);
DWORD LatencyReceiveOffset;
void (*LatencyReceive)(void *_instance, int info);
DWORD CheckIfLowPingerOffset;
void (*CheckIfLowPinger)(void *_instance);
DWORD SendLatencyCheckOffset;
void (*SendLatencyCheck)(void *_instance);
DWORD ReceiveLatencyCheckOffset;
void (*ReceiveLatencyCheck)(void *_instance, float roundTripTime);
DWORD LatencyCheckFailedOffset;
void (*LatencyCheckFailed)(void *_instance);
DWORD CheckForNewMasterClientOffset;
void (*CheckForNewMasterClient)(void *_instance);
DWORD BecomeNewMasterClientOffset;
void (*BecomeNewMasterClient)(void *_instance, int info);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnMasterClientSwitchedOffset;
void (*OnMasterClientSwitched)(void *_instance, void *newMaster);
}MasterClientFinder;
struct MasterClientUtils {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateAverageRankOffset;
void (*UpdateAverageRank)();
DWORD GetBestSpawnPointForPlayerOffset;
Vector3 (*GetBestSpawnPointForPlayer)(void *_instance, int flagIDToSpawnOn, int info);
DWORD GetSpawnsForTypeOffset;
DWORD GetWeightNearPositionOffset;
float (*GetWeightNearPosition)(void *_instance, Vector3 position, Vector3 playerPosition, float maxDistance);
DWORD CheckIfSpawnsShouldFlipOffset;
void (*CheckIfSpawnsShouldFlip)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}MasterClientUtils;
struct MatchManager {
DWORD get_IsMatchOverOffset;
bool (*get_IsMatchOver)(void *_instance);
DWORD set_RoomVisibleOffset;
void (*set_RoomVisible)(bool value);
DWORD get_CurrentMapOffset;
monoString *(*get_CurrentMap)(void *_instance);
DWORD get_TimeInMatchOffset;
float (*get_TimeInMatch)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD ResetTimeMatchStartedOffset;
void (*ResetTimeMatchStarted)();
DWORD RelayVoteInitiatedMessageOffset;
void (*RelayVoteInitiatedMessage)(void *_instance, monoString *pollId);
DWORD OnPhotonCustomRoomPropertiesChangedOffset;
void (*OnPhotonCustomRoomPropertiesChanged)(void *_instance, void *propertiesThatChanged);
DWORD FetchVoteDataOffset;
void (*FetchVoteData)(void *_instance, monoString *pollId);
DWORD RelayVoteDataOffset;
void (*RelayVoteData)(void *_instance, monoString *player, monoString *accused, monoString *vote, int yesVotes, int noVotes);
DWORD DisplayVoteDataOffset;
void (*DisplayVoteData)(void *_instance, monoString *player, monoString *accused, monoString *vote, int yesVotes, int noVotes);
DWORD RelayCheatersFetchNecessaryOffset;
void (*RelayCheatersFetchNecessary)(void *_instance);
DWORD FetchCheatersOffset;
void (*FetchCheaters)(void *_instance);
DWORD OpenAllElevatorsOffset;
void (*OpenAllElevators)(void *_instance);
DWORD StartTimerOffset;
void (*StartTimer)(void *_instance);
DWORD OnPhotonPlayerConnectedOffset;
void (*OnPhotonPlayerConnected)(void *_instance, void *player);
DWORD SendNewInfoToPlayerOffset;
void (*SendNewInfoToPlayer)(void *_instance, void *p);
DWORD SendNewInfoToPlayer1Offset;
void *(*SendNewInfoToPlayer1)(void *_instance, float delayTime, void *player);
DWORD RestartMatchAfterTimeOffset;
void (*RestartMatchAfterTime)(void *_instance, float time);
DWORD RestartMatchOffset;
void (*RestartMatch)(void *_instance);
DWORD FlagTakenValueUpdatedOffset;
void (*FlagTakenValueUpdated)(void *_instance, int flagID, float value);
DWORD ElevatorButtonPressedOffset;
void (*ElevatorButtonPressed)(void *_instance, int elevatorID);
DWORD RPCElevatorButtonPressedOffset;
void (*RPCElevatorButtonPressed)(void *_instance, int elevatorID);
DWORD SetElevatorsClosedOffset;
void (*SetElevatorsClosed)(void *_instance, int elevatorID, bool closed);
DWORD TeleportPlayersInsideElevatorsOffset;
void *(*TeleportPlayersInsideElevators)(void *_instance, float delayTime, int elevatorID);
DWORD OpenElevatorsOffset;
void *(*OpenElevators)(void *_instance, float delayTime, int elevatorID);
DWORD UpdateFlagTakenValueOffset;
void (*UpdateFlagTakenValue)(void *_instance, int flagID, float value);
DWORD UpdateFlagOwnerTeamOffset;
void (*UpdateFlagOwnerTeam)(void *_instance, int flagID, int team);
DWORD UpdateTimeInMatchOffset;
void (*UpdateTimeInMatch)(void *_instance, float value, int info);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD MatchOverChangedOffset;
void (*MatchOverChanged)(void *_instance, bool value, int info);
DWORD SetMapsOffset;
void (*SetMaps)(void *_instance, monoString *map1, monoString *map2);
DWORD CalculateWinningTeamOffset;
DWORD CalculateTDMWinningTeamOffset;
DWORD SetNextMPMapOffset;
void (*SetNextMPMap)(void *_instance, monoString *map);
DWORD SetNextMapOffset;
void (*SetNextMap)(void *_instance, monoString *nextMap);
DWORD PrepareToShowVoteMapOffset;
void (*PrepareToShowVoteMap)(void *_instance);
DWORD ShowRoundStatsOffset;
void (*ShowRoundStats)(void *_instance, monoString *roundOverText);
DWORD DestroySelfOffset;
void (*DestroySelf)(void *_instance);
DWORD EnableSceneSyncingOffset;
void (*EnableSceneSyncing)(void *_instance);
DWORD OnPhotonPlayerDisconnectedOffset;
void (*OnPhotonPlayerDisconnected)(void *_instance, void *player);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD RequestVipsOnMasterFromSubordinateOffset;
void (*RequestVipsOnMasterFromSubordinate)(void *_instance, int requesterId);
DWORD CheckHardcoreModeEndOffset;
void (*CheckHardcoreModeEnd)(void *_instance);
DWORD CheckPlayersPlayingAndEndRoundOrMatchOffset;
void (*CheckPlayersPlayingAndEndRoundOrMatch)(void *_instance);
DWORD CheckAlivePlayersOffset;
void (*CheckAlivePlayers)(void *_instance);
DWORD UpdateAlivePlayersOffset;
void (*UpdateAlivePlayers)(void *_instance, int _team0Alive, int _team1Alive);
DWORD HardcoreModeRoundEndedOffset;
void (*HardcoreModeRoundEnded)(void *_instance, bool _timeUp);
DWORD EndMatchOffset;
void (*EndMatch)(void *_instance);
DWORD UpdateHMFFARoundsOffset;
void (*UpdateHMFFARounds)(void *_instance, int playerID, int roundsWon);
DWORD RestartHardcoreModeRoundOffset;
void (*RestartHardcoreModeRound)(void *_instance, int winningTeam);
DWORD RespawnHardcoreModePlayersOffset;
void (*RespawnHardcoreModePlayers)(void *_instance);
DWORD get_RoundStartedOffset;
bool (*get_RoundStarted)(void *_instance);
DWORD set_RoundStartedOffset;
void (*set_RoundStarted)(void *_instance, bool value);
}MatchManager;
struct ScoreLimits {
DWORD GetScoreLimitHardcoreOffset;
int (*GetScoreLimitHardcore)(monoString *map);
DWORD GetScoreLimitOffset;
int (*GetScoreLimit)(monoString *mode, monoString *map);
}ScoreLimits;
struct MathUtils {
DWORD UnixTimeMSOffset;
DWORD UnixTimeSecondsOffset;
}MathUtils;
struct MaxEnemies {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetValueOffset;
void (*SetValue)(void *_instance, float value);
}MaxEnemies;
struct MenuSoldier {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}MenuSoldier;
struct MenuToggleGroup {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SelectMenuOffset;
void (*SelectMenu)(void *_instance, monoString *name);
DWORD GetMenuByNameOffset;
void *(*GetMenuByName)(void *_instance, monoString *name);
}MenuToggleGroup;
struct MeshCombineUtility {
DWORD PrepareForAddingVerticesOffset;
void (*PrepareForAddingVertices)(void *_instance, int numVertices);
DWORD PrepareForAddingTrianglesOffset;
void (*PrepareForAddingTriangles)(void *_instance, int targetSubmeshIndex, int numIndices);
DWORD AddMeshInstanceOffset;
void (*AddMeshInstance)(void *_instance, void *instance);
DWORD CreateCombinedMeshOffset;
void *(*CreateCombinedMesh)(void *_instance);
}MeshCombineUtility;
struct MethodManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD AddMethodOffset;
void (*AddMethod)(void *_instance, void *item);
DWORD RemoveMethodOffset;
void (*RemoveMethod)(void *_instance, void *item);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}MethodManager;
struct Minimap {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD RenderMapImageOffset;
void (*RenderMapImage)(void *_instance);
DWORD CreateMapSpriteOffset;
void *(*CreateMapSprite)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD addItemOffset;
void (*addItem)(void *_instance, void *item);
DWORD removeItemOffset;
void (*removeItem)(void *_instance, void *item);
DWORD updatePlayerTransformOffset;
void (*updatePlayerTransform)(void *_instance, void *t);
DWORD DisableMinimapOffset;
void (*DisableMinimap)(void *_instance);
DWORD EnableMinimapAfterTimeOffset;
void (*EnableMinimapAfterTime)(void *_instance, float time);
DWORD EnableMinimapOffset;
void (*EnableMinimap)(void *_instance);
DWORD rotatePointOffset;
Vector2 (*rotatePoint)(void *_instance, float cx, float cy, float angle, Vector2 p);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}Minimap;
struct MinimapItem {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD FlashOffset;
void (*Flash)(void *_instance, float time);
DWORD SetAsTriangleOffset;
void (*SetAsTriangle)(void *_instance, bool triangle);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ShowOffset;
void (*Show)(void *_instance, bool shouldShow);
DWORD updateColorOffset;
void (*updateColor)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD SetAlwaysDisplayColorOffset;
void (*SetAlwaysDisplayColor)(void *_instance, Color alwaysDisplayColor);
DWORD UnserAlwaysDisplayColorOffset;
void (*UnserAlwaysDisplayColor)(void *_instance);
DWORD SetAlwaysDisplayOffset;
void (*SetAlwaysDisplay)(void *_instance, bool alwaysDisplay);
DWORD UpdateImageStatusOffset;
void (*UpdateImageStatus)(void *_instance);
}MinimapItem;
struct MissionCompleteScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD MissionCompleteTextFinishedOffset;
void (*MissionCompleteTextFinished)(void *_instance);
DWORD MoveMissionCompleteTextUpOffset;
void (*MoveMissionCompleteTextUp)(void *_instance);
DWORD ShowRankTextOffset;
void (*ShowRankText)(void *_instance);
DWORD ShowXPIncreaseOffset;
void (*ShowXPIncrease)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
}MissionCompleteScript;
struct MissionCompleteTextScript {
DWORD StartOffset;
void (*Start)(void *_instance);
}MissionCompleteTextScript;
struct MoveUIObject {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD MoveAnchorOffset;
void (*MoveAnchor)(void *_instance, Vector2 n);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}MoveUIObject;
struct MovieTextureBG {
DWORD set_MusicVolumeOffset;
void (*set_MusicVolume)(void *_instance, float value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ReloadVideoOffset;
void (*ReloadVideo)(void *_instance);
DWORD OnLevelWasLoadedOffset;
void (*OnLevelWasLoaded)(void *_instance, int level);
DWORD RepositionOffset;
void (*Reposition)(void *_instance);
DWORD SetVisualsEnabledOffset;
void (*SetVisualsEnabled)(void *_instance, bool show);
}MovieTextureBG;
struct NameTagScript {
DWORD SetColorOffset;
void (*SetColor)(void *_instance, Color c);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetToCrouchHeightOffset;
void (*SetToCrouchHeight)(void *_instance);
DWORD ResetHeightOffset;
void (*ResetHeight)(void *_instance);
DWORD SetHealthNormalizedOffset;
void (*SetHealthNormalized)(void *_instance, float h);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD HideAllOffset;
void (*HideAll)(void *_instance);
DWORD HideTriangleOffset;
void (*HideTriangle)(void *_instance);
DWORD ShowTriangleOffset;
void (*ShowTriangle)(void *_instance, float time);
DWORD ShowAllButHealthOffset;
void (*ShowAllButHealth)(void *_instance);
DWORD ShowOffset;
void (*Show)(void *_instance);
DWORD SetNameOffset;
void (*SetName)(void *_instance, monoString *name);
}NameTagScript;
struct NameTagUI {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetColorOffset;
void (*SetColor)(void *_instance, Color c);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD RemoveOffset;
void (*Remove)(void *_instance);
DWORD ToggleActiveOffset;
void (*ToggleActive)(void *_instance, bool active);
DWORD SetHealthNormalizedOffset;
void (*SetHealthNormalized)(void *_instance, float h);
DWORD SetPositionOffset;
void (*SetPosition)(void *_instance, Vector3 pos);
DWORD ShowOffset;
void (*Show)(void *_instance, bool show);
}NameTagUI;
struct NetworkManagerExtra {
}NetworkManagerExtra;
struct NoZone {
DWORD GetBoundsOfParentOffset;
int(*GetBoundsOfParent)(void *_instance);
}NoZone;
struct NukeOverlay {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetAsSingletonOffset;
void (*SetAsSingleton)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD ShowNukeOffset;
void (*ShowNuke)(void *_instance);
DWORD HideNukeOffset;
void (*HideNuke)(void *_instance);
DWORD SetColorOffset;
void (*SetColor)(void *_instance, Color c);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}NukeOverlay;
struct ObjectOptimizer {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD CheckVisibilityForAllRenderersOffset;
void (*CheckVisibilityForAllRenderers)(void *_instance);
}ObjectOptimizer;
struct OW_UnlockAdRewardModel {
DWORD onSuccessGetRewardOffset;
void (*onSuccessGetReward)(void *_instance, monoString *_jsonString);
DWORD GetResponseOffset;
void *(*GetResponse)(void *_instance);
DWORD GetResponseJsonOffset;
monoString *(*GetResponseJson)(void *_instance);
}OW_UnlockAdRewardModel;
struct OpenCaseResult {
}OpenCaseResult;
struct OnlineCasesManager {
DWORD SetLastOpenCaseContainerOffset;
void (*SetLastOpenCaseContainer)(void *_instance);
DWORD SetCountOffset;
void (*SetCount)(void *_instance, int caseType, int count);
DWORD GetCountOffset;
int (*GetCount)(void *_instance, int caseType);
DWORD SetCasePriceOffset;
void (*SetCasePrice)(void *_instance, int caseType, int count, monoString *price);
DWORD GetCasePriceOffset;
monoString *(*GetCasePrice)(void *_instance, int caseType, int count);
DWORD UseDebugDataOffset;
monoString *(*UseDebugData)(void *_instance);
DWORD GetManagerOffset;
void *(*GetManager)();
}OnlineCasesManager;
struct OnlyVisibleOnMobile {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD CR_HideOrShowObjectOffset;
void *(*CR_HideOrShowObject)(void *_instance);
}OnlyVisibleOnMobile;
struct OrientationSettler {
DWORD StartOffset;
void (*Start)(void *_instance);
}OrientationSettler;
struct OutOfBoundsHandler {
DWORD get_outOfBoundsOffset;
bool (*get_outOfBounds)(void *_instance);
DWORD set_outOfBoundsOffset;
void (*set_outOfBounds)(void *_instance, bool value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD IsOutsideBoundsOffset;
bool (*IsOutsideBounds)(void *_instance, Vector3 point, int teamNumber);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}OutOfBoundsHandler;
struct ActiveGenericMessagePopup {
DWORD SetMessageOffset;
void (*SetMessage)(void *_instance, monoString *message, bool hideOnTap);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
}ActiveGenericMessagePopup;
struct AllowedWeaponsPopup {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD LoadCommonDataOffset;
void (*LoadCommonData)(void *_instance);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD ClearDataOffset;
void (*ClearData)(void *_instance);
DWORD DestroyChildrenOffset;
void (*DestroyChildren)(void *_instance, void *t);
DWORD CloseOffset;
void (*Close)(void *_instance);
}AllowedWeaponsPopup;
struct AskRegionPopup {
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD ChosenRegionOffset;
void (*ChosenRegion)(void *_instance, int _gameServer);
DWORD GoToMultiplayerOffset;
void (*GoToMultiplayer)(void *_instance);
}AskRegionPopup;
struct SelectRegionButton {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnClickOffset;
void (*OnClick)(void *_instance);
}SelectRegionButton;
struct BanNoticePopup {
DWORD SetReasonOffset;
void (*SetReason)(void *_instance, monoString *reason);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD CloseOffset;
void (*Close)(void *_instance);
}BanNoticePopup;
struct BeginnerJoiningExperiencedMatchPopup {
DWORD get_PlayAnywaysOffset;
bool (*get_PlayAnyways)(void *_instance);
DWORD set_PlayAnywaysOffset;
void (*set_PlayAnyways)(void *_instance, bool value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnYesButtonPressedOffset;
void (*OnYesButtonPressed)(void *_instance);
DWORD OnTDMButtonPressedOffset;
void (*OnTDMButtonPressed)(void *_instance);
DWORD OnGunGameButtonPressedOffset;
void (*OnGunGameButtonPressed)(void *_instance);
}BeginnerJoiningExperiencedMatchPopup;
struct ForceEarnedSkinPopup {
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD ShowPopupOffset;
void (*ShowPopup)(void *_instance);
DWORD SetUpPopupOffset;
void (*SetUpPopup)(void *_instance, int value);
}ForceEarnedSkinPopup;
struct EarnedSkinPopup {
DWORD SetMessageOffset;
void (*SetMessage)(void *_instance, int _characterCamo);
DWORD SetMessage1Offset;
void (*SetMessage1)(void *_instance, int _weaponSkin);
DWORD SetMessage2Offset;
void (*SetMessage2)(void *_instance, int _bulletTracerColor);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD ResetStateOffset;
void (*ResetState)(void *_instance);
DWORD ConfirmClickedOffset;
void (*ConfirmClicked)(void *_instance);
DWORD CloseOffset;
void (*Close)(void *_instance);
}EarnedSkinPopup;
struct FTUEBackground {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}FTUEBackground;
struct FTUEPopup {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD HowToContinueQuestionOffset;
void (*HowToContinueQuestion)(void *_instance);
DWORD DoYouHaveAnAccQuestionOffset;
void (*DoYouHaveAnAccQuestion)(void *_instance);
DWORD OnDoTrainingOffset;
void (*OnDoTraining)(void *_instance);
DWORD OnMultiplayerOffset;
void (*OnMultiplayer)(void *_instance);
DWORD OnBotsOffset;
void (*OnBots)(void *_instance);
DWORD OnYesButtonPressedOffset;
void (*OnYesButtonPressed)(void *_instance);
DWORD OnNoButtonPressedOffset;
void (*OnNoButtonPressed)(void *_instance);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD ActivateLoadingOffset;
void (*ActivateLoading)(void *_instance, monoString *text, bool enableLoadingAnimation);
}FTUEPopup;
struct GenericConfirmationPopup {
DWORD SetMessageOffset;
void (*SetMessage)(void *_instance, monoString *title, monoString *description, void *onConfirm, void *onCancel, monoString *confirmText, monoString *cancelText);
DWORD ConfirmClickedOffset;
void (*ConfirmClicked)(void *_instance);
DWORD CancelClickedOffset;
void (*CancelClicked)(void *_instance);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD CloseOffset;
void (*Close)(void *_instance);
}GenericConfirmationPopup;
struct GenericInformationPopup {
DWORD SetMessageOffset;
void (*SetMessage)(void *_instance, monoString *title, monoString *description, void *onConfirm, int icon, monoString *confirmText);
DWORD ConfirmClickedOffset;
void (*ConfirmClicked)(void *_instance);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD CloseOffset;
void (*Close)(void *_instance);
}GenericInformationPopup;
struct GenericMessagePopup {
DWORD SetMessageOffset;
void (*SetMessage)(void *_instance, monoString *message, bool hideOnTap);
DWORD HideMessageOnTapOffset;
void *(*HideMessageOnTap)(void *_instance);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
}GenericMessagePopup;
struct HardcoreModePopup {
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD DisplayHardcoreOffset;
void (*DisplayHardcore)(void *_instance);
}HardcoreModePopup;
struct OfferwallPopUp {
DWORD SetUpOffset;
void (*SetUp)(void *_instance, void *rewardInfo);
DWORD SetUp1Offset;
void (*SetUp1)(void *_instance);
DWORD SetWatchProgressOffset;
void (*SetWatchProgress)(void *_instance, void *rewardInfo);
DWORD GetInfoLabelOffset;
monoString *(*GetInfoLabel)(void *_instance, void *rewardInfo);
DWORD GetValidDateOffset;
monoString *(*GetValidDate)(void *_instance, void *rewardInfo);
DWORD DisplayWeaponInfoOffset;
void (*DisplayWeaponInfo)(void *_instance, void *rewardInfo);
DWORD SetOpenGoldOffset;
void (*SetOpenGold)(void *_instance, void *rewardInfo);
DWORD SetOpenRewardOffset;
void (*SetOpenReward)(void *_instance, void *rewardInfo);
DWORD OnTryGetRewardOffset;
void (*OnTryGetReward)(void *_instance);
DWORD OnRewardSuccessOffset;
void (*OnRewardSuccess)(void *_instance);
DWORD OnRewardErrorOffset;
void (*OnRewardError)(void *_instance, monoString *result);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD TweenToDesiredFillOffset;
void *(*TweenToDesiredFill)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}OfferwallPopUp;
struct OfferWallRewardInfo {
DWORD get_GoldEarnedOffset;
int (*get_GoldEarned)(void *_instance);
DWORD get_GoldGoalOffset;
int (*get_GoldGoal)(void *_instance);
DWORD get_WeaponCodeOffset;
int (*get_WeaponCode)(void *_instance);
DWORD get_DuplicatedGoldOffset;
int (*get_DuplicatedGold)(void *_instance);
DWORD get_PercentageEarnedOffset;
float (*get_PercentageEarned)(void *_instance);
DWORD get_ExpirationDateOffset;
DWORD get_IsGoldGoalCompletedOffset;
bool (*get_IsGoldGoalCompleted)(void *_instance);
DWORD get_IsInfoOnlyOffset;
bool (*get_IsInfoOnly)(void *_instance);
}OfferWallRewardInfo;
struct OverlayPopup {
DWORD get_IsDisplayedOffset;
bool (*get_IsDisplayed)(void *_instance);
DWORD CloseOffset;
void (*Close)(void *_instance);
}OverlayPopup;
struct OverlayPopupsOrganizer {
DWORD get_GetHardcoreModePopupOffset;
void *(*get_GetHardcoreModePopup)(void *_instance);
DWORD get_SalesPopupOffset;
void *(*get_SalesPopup)(void *_instance);
DWORD get_AskRegionPopupOffset;
void *(*get_AskRegionPopup)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD DisplayPopupOffset;
void (*DisplayPopup)(void *_instance, void *popup);
DWORD HidePopupOffset;
void (*HidePopup)(void *_instance, void *popup);
DWORD GetOrganizerOffset;
void *(*GetOrganizer)();
DWORD GetIconSpriteOffset;
void *(*GetIconSprite)(void *_instance, int icon);
}OverlayPopupsOrganizer;
struct PleaseWaitPopup {
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
}PleaseWaitPopup;
struct PopupAfterLogin2 {
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD CloseOffset;
void (*Close)(void *_instance);
}PopupAfterLogin2;
struct ReadyToOpenRewardPopup {
DWORD SetConfirmActionOffset;
void (*SetConfirmAction)(void *_instance, void *onConfirm);
DWORD ConfirmClickedOffset;
void (*ConfirmClicked)(void *_instance);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD CloseOffset;
void (*Close)(void *_instance);
}ReadyToOpenRewardPopup;
struct ReleaseMessagePopup {
DWORD SetTextOffset;
void (*SetText)(void *_instance, monoString *termsFullText);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD InitReleaseMessageOffset;
void *(*InitReleaseMessage)(void *_instance);
DWORD ReleaseNotesNecessaryOffset;
bool (*ReleaseNotesNecessary)(void *_instance);
DWORD OnAcceptOffset;
void (*OnAccept)(void *_instance);
}ReleaseMessagePopup;
struct ScrollableText {
DWORD SetTextOffset;
void (*SetText)(void *_instance, monoString *richText);
DWORD ResetPositionOffset;
void *(*ResetPosition)(void *_instance);
}ScrollableText;
struct SeasonRewardsEarnedPopup {
DWORD SetUpOffset;
void (*SetUp)(void *_instance, void *tier, int _seasonid);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD FetchRewardsToOpenOffset;
void (*FetchRewardsToOpen)(void *_instance);
DWORD OnFetchRewardsSuccessOffset;
void (*OnFetchRewardsSuccess)(void *_instance);
DWORD OnFetchRewardsFailedOffset;
void (*OnFetchRewardsFailed)(void *_instance, monoString *result);
DWORD OnPressClaimOffset;
void (*OnPressClaim)(void *_instance);
}SeasonRewardsEarnedPopup;
struct SpecialOfferPopup {
DWORD get_OfferImageLoadedOffset;
bool (*get_OfferImageLoaded)(void *_instance);
DWORD set_OfferImageLoadedOffset;
void (*set_OfferImageLoaded)(void *_instance, bool value);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnChangeOfferVisibilityOffset;
void (*OnChangeOfferVisibility)(void *_instance, bool show);
DWORD WaitIAPOffset;
void *(*WaitIAP)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD ShowNextPopUpOffset;
void (*ShowNextPopUp)(void *_instance);
DWORD CloseOffset;
void (*Close)(void *_instance);
DWORD SetPopupsSeenOffset;
void (*SetPopupsSeen)(void *_instance);
DWORD HavePopupsBeenSeenOffset;
bool (*HavePopupsBeenSeen)(void *_instance);
DWORD OnSceneLoadedOffset;
void (*OnSceneLoaded)(void *_instance, int scene, int mode);
DWORD GetOfferOffset;
void (*GetOffer)(void *_instance);
DWORD OnGetOfferSucessOffset;
void (*OnGetOfferSucess)(void *_instance, monoString *result);
DWORD OnGetOfferErrorOffset;
void (*OnGetOfferError)(void *_instance, monoString *result);
DWORD getOfferImageOffset;
void *(*getOfferImage)(void *_instance, monoString *imageURL);
DWORD LoadingPopupVisibilityOffset;
void (*LoadingPopupVisibility)(void *_instance, bool show);
DWORD OnPurchaseButtonPressedOffset;
void (*OnPurchaseButtonPressed)(void *_instance);
}SpecialOfferPopup;
struct Support_1_View {
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD DisplayMessageOffset;
void (*DisplayMessage)(void *_instance, monoString *text, bool hideOnTap);
DWORD HideMessageOnTapOffset;
void *(*HideMessageOnTap)(void *_instance);
DWORD HideMessageOffset;
void (*HideMessage)(void *_instance);
DWORD HideMessageImplOffset;
void *(*HideMessageImpl)(void *_instance);
DWORD SendLogsOffset;
void (*SendLogs)(void *_instance);
DWORD GetLogsEmailOffset;
monoString *(*GetLogsEmail)(void *_instance);
DWORD ToggleSendLogsOffset;
void (*ToggleSendLogs)(void *_instance, bool isOn);
DWORD OnCompleteOffset;
void (*OnComplete)(void *_instance);
DWORD OnErrorOffset;
void (*OnError)(void *_instance, monoString *message);
DWORD CancelOffset;
void (*Cancel)(void *_instance);
}Support_1_View;
struct Support_2_View {
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD OpenSupportPageOffset;
void (*OpenSupportPage)(void *_instance);
DWORD CancelOffset;
void (*Cancel)(void *_instance);
}Support_2_View;
struct TemporalNotification {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD SetUpOffset;
void (*SetUp)(void *_instance);
DWORD SetTimeOffset;
void (*SetTime)(void *_instance, float t);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD TurnOffOffset;
void (*TurnOff)(void *_instance);
DWORD ForceTurnOffOffset;
void (*ForceTurnOff)(void *_instance);
}TemporalNotification;
struct OpenTermsAndConditions {
DWORD OnOpenTermsAndConditionsOffset;
void (*OnOpenTermsAndConditions)(void *_instance);
}OpenTermsAndConditions;
struct TermsAndConditionsPopup {
DWORD InitOffset;
void (*Init)(void *_instance, monoString *username, monoString *password, int docVersion);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
DWORD OnLinkPressedOffset;
void (*OnLinkPressed)(void *_instance);
DWORD OnAcceptOffset;
void (*OnAccept)(void *_instance);
DWORD PerformAcceptProcessOffset;
void *(*PerformAcceptProcess)(void *_instance);
}TermsAndConditionsPopup;
struct UniWebTest {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD DisplayOffset;
void (*Display)(void *_instance);
}UniWebTest;
struct WaitingForSpecialOffers {
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
}WaitingForSpecialOffers;
struct PNetworkManager {
DWORD get_PingTimesOffset;
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetServerIDsOffset;
void (*SetServerIDs)(void *_instance);
DWORD ReconnectOffset;
void (*Reconnect)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD GetBestServerAndConnectOffset;
void (*GetBestServerAndConnect)(void *_instance);
DWORD OnDisconnectedFromPhotonOffset;
void (*OnDisconnectedFromPhoton)(void *_instance);
DWORD ConnectOffset;
void (*Connect)(void *_instance);
DWORD CR_GetBestServerOffset;
void *(*CR_GetBestServer)(void *_instance);
DWORD RedirectDeactivatedRegionOffset;
void (*RedirectDeactivatedRegion)(void *_instance);
DWORD retryConnectOffset;
void (*retryConnect)(void *_instance);
DWORD JoinLobbyRoomOffset;
void (*JoinLobbyRoom)(void *_instance);
DWORD GetRoomListOffset;
DWORD JoinRoomOffset;
void (*JoinRoom)(void *_instance, monoString *name, monoString *mapName);
DWORD ActualCreateRoomOffset;
void (*ActualCreateRoom)(void *_instance, int gunGamePreset, monoString *gameID, monoString *roomID, bool isEvent, bool hardcore);
DWORD OnConnectedToMasterOffset;
void (*OnConnectedToMaster)(void *_instance);
DWORD OnJoinedLobbyOffset;
void (*OnJoinedLobby)(void *_instance);
DWORD OnFailedToConnectToPhotonOffset;
void (*OnFailedToConnectToPhoton)(void *_instance, int cause);
DWORD OnPhotonJoinRoomFailedOffset;
void (*OnPhotonJoinRoomFailed)(void *_instance);
DWORD OnPhotonRandomJoinFailedOffset;
void (*OnPhotonRandomJoinFailed)(void *_instance);
DWORD OnJoinedRoomOffset;
void (*OnJoinedRoom)(void *_instance);
DWORD LoadLevelOffset;
void *(*LoadLevel)(void *_instance, float delay, monoString *level);
DWORD OnLeftRoomOffset;
void (*OnLeftRoom)(void *_instance);
DWORD OnLevelWasLoadedOffset;
void (*OnLevelWasLoaded)(void *_instance, int level);
DWORD ResetTimeMatchStartedOffset;
void (*ResetTimeMatchStarted)(void *_instance);
DWORD SpawnPlayerOffset;
void (*SpawnPlayer)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}PNetworkManager;
struct ParticleSystemDecayScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD removeOffset;
void (*remove)(void *_instance);
}ParticleSystemDecayScript;
struct ChatButtonToggle {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetEnabledOffset;
void (*SetEnabled)(void *_instance, bool enabled);
DWORD IsEnabledOffset;
bool (*IsEnabled)();
}ChatButtonToggle;
struct CrouchButtonToggle {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetEnabledOffset;
void (*SetEnabled)(void *_instance, bool enabled);
DWORD IsEnabledOffset;
bool (*IsEnabled)();
}CrouchButtonToggle;
struct PauseOptions {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD LoadHUDSlotToggleOffset;
void (*LoadHUDSlotToggle)(void *_instance, int slot);
DWORD SetVolumeOffset;
void (*SetVolume)(void *_instance, float s);
DWORD SetScreenScaleOffset;
void (*SetScreenScale)(void *_instance, float s);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}PauseOptions;
struct PauseScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ApplyScreenScaleOffset;
void (*ApplyScreenScale)(void *_instance);
DWORD togglePauseOffset;
void (*togglePause)(void *_instance, bool forcePause);
DWORD ResumeOffset;
void (*Resume)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}PauseScript;
struct PerkManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD FillPerkStatsOffset;
void (*FillPerkStats)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetActiveLoadoutOffset;
void (*SetActiveLoadout)(void *_instance, int loadout);
DWORD PopulatePerkSpriteDictionaryOffset;
void (*PopulatePerkSpriteDictionary)(void *_instance);
DWORD PopulatePerkUIItemsOffset;
void (*PopulatePerkUIItems)(void *_instance);
DWORD LoadPerksOffset;
void (*LoadPerks)(void *_instance);
DWORD SaveAllPerksOffset;
void (*SaveAllPerks)(void *_instance);
DWORD UsePerkOffset;
void (*UsePerk)(void *_instance);
DWORD StopUsingPerkOffset;
void (*StopUsingPerk)(void *_instance);
DWORD GetPointsUsedOffset;
int (*GetPointsUsed)(void *_instance);
DWORD RefreshPointsUsedOffset;
void (*RefreshPointsUsed)(void *_instance);
DWORD GetPerkStatsOffset;
int(*GetPerkStats)(void *_instance, int p);
DWORD RefreshPerkUIItemColorsOffset;
void (*RefreshPerkUIItemColors)(void *_instance);
DWORD ShowPerkDescriptionOffset;
void (*ShowPerkDescription)(void *_instance, int p);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}PerkManager;
struct PerkUIItem {
DWORD SetPerkTypeOffset;
void (*SetPerkType)(void *_instance, int p);
DWORD ConfigurePerkInfoOffset;
void (*ConfigurePerkInfo)(void *_instance, int perkStats);
DWORD ConfigurePerkLockOffset;
void (*ConfigurePerkLock)(void *_instance, bool isLocked);
DWORD SetPerkLockedOffset;
void (*SetPerkLocked)(void *_instance);
DWORD SetPerkUnlockedOffset;
void (*SetPerkUnlocked)(void *_instance);
DWORD SetPerkSelectedOffset;
void (*SetPerkSelected)(void *_instance);
DWORD SetPerkDeselectedOffset;
void (*SetPerkDeselected)(void *_instance);
DWORD SetPerkEquipedOffset;
void (*SetPerkEquiped)(void *_instance);
DWORD SetPerkUnequipedOffset;
void (*SetPerkUnequiped)(void *_instance);
DWORD ShowPerkDescriptionOffset;
void (*ShowPerkDescription)(void *_instance);
}PerkUIItem;
struct Perk_AimFaster {
}Perk_AimFaster;
struct Perk_Base {
DWORD IsAvailableOffset;
bool (*IsAvailable)(void *_instance);
}Perk_Base;
struct Perk_DecreaseExplosiveHurtDamage {
}Perk_DecreaseExplosiveHurtDamage;
struct Perk_DoubleUp {
}Perk_DoubleUp;
struct Perk_ExtendedMagazines {
}Perk_ExtendedMagazines;
struct Perk_ExtraMags {
}Perk_ExtraMags;
struct Perk_ExtraThrowable {
}Perk_ExtraThrowable;
struct Perk_FMJ {
}Perk_FMJ;
struct Perk_FastRegen {
}Perk_FastRegen;
struct Perk_FastSwitching {
}Perk_FastSwitching;
struct Perk_FasterKnife {
}Perk_FasterKnife;
struct Perk_FasterReload {
}Perk_FasterReload;
struct Perk_FasterSprinting {
}Perk_FasterSprinting;
struct Perk_HeadshotsGiveMoreXP {
}Perk_HeadshotsGiveMoreXP;
struct Perk_HearFootstepsLouder {
}Perk_HearFootstepsLouder;
struct Perk_IncreaseExplosiveDamage {
}Perk_IncreaseExplosiveDamage;
struct Perk_InvisibleNametag {
DWORD UseIfAvailableOffset;
void (*UseIfAvailable)(void *_instance, void *_mpNameTag);
}Perk_InvisibleNametag;
struct Perk_Juggernaut {
}Perk_Juggernaut;
struct Perk_Kevlar {
}Perk_Kevlar;
struct Perk_KillStreakRequiresOneLessKill {
}Perk_KillStreakRequiresOneLessKill;
struct Perk_LastLaugh {
DWORD UseIfAvailableOffset;
void (*UseIfAvailable)(void *_instance, void *_player);
}Perk_LastLaugh;
struct Perk_MoveFasterWhileAiming {
}Perk_MoveFasterWhileAiming;
struct Perk_ShowOnMiniMapForLessTime {
}Perk_ShowOnMiniMapForLessTime;
struct Perk_SilentFootsteps {
}Perk_SilentFootsteps;
struct Perk_Teamwork {
}Perk_Teamwork;
struct PerksHandler {
DWORD GetPerksOffset;
DWORD SetNewPerks1Offset;
void (*SetNewPerks1)(void *_instance, int _activeLoadout);
DWORD HasPerkOffset;
bool (*HasPerk)(void *_instance, int _perk);
DWORD GetPerkControllerOffset;
void *(*GetPerkController)(void *_instance, int _perk);
}PerksHandler;
struct PickUpWeapon {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD AddGunScriptOffset;
void (*AddGunScript)(void *_instance, void *s);
DWORD RemoveGunScriptOffset;
void (*RemoveGunScript)(void *_instance, void *s);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD setWeaponTypeOffset;
void (*setWeaponType)(void *_instance, int t);
DWORD showOffset;
void (*show)(void *_instance, bool shouldShow);
DWORD PickUpGunOffset;
void (*PickUpGun)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
DWORD StopPressingOffset;
void (*StopPressing)(void *_instance);
DWORD FindClosestGunScriptOffset;
void (*FindClosestGunScript)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}PickUpWeapon;
struct PingDisplay {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD ShowPingOffset;
void (*ShowPing)(void *_instance);
DWORD DisplaySelectedOffset;
void (*DisplaySelected)(void *_instance);
DWORD ShowNameOnlyOffset;
void (*ShowNameOnly)(void *_instance);
DWORD OnClickOffset;
void (*OnClick)(void *_instance);
}PingDisplay;
struct PlatformAddCameraEffects {
DWORD StartOffset;
void (*Start)(void *_instance);
}PlatformAddCameraEffects;
struct PlatformDependentChangeTextForLanguage {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD GetPlatformStringPairOffset;
void *(*GetPlatformStringPair)(void *_instance);
}PlatformDependentChangeTextForLanguage;
struct PlatformDependentEnabling {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}PlatformDependentEnabling;
struct PlatformDependentMaterial {
DWORD StartOffset;
void (*Start)(void *_instance);
}PlatformDependentMaterial;
struct PlatformDependentShader {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ApplyShaderOffset;
void (*ApplyShader)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
}PlatformDependentShader;
struct PlatformMaterial {
DWORD StartOffset;
void (*Start)(void *_instance);
}PlatformMaterial;
struct PlayFullVersion {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}PlayFullVersion;
struct PlaySoundWhenShot {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD GetHitOffset;
void (*GetHit)(void *_instance);
}PlaySoundWhenShot;
struct PlayerAntiHack {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD IsWeaponUnlockedOffset;
bool (*IsWeaponUnlocked)(void *_instance, int playerID, int weaponType);
DWORD PlayerNameUpdatedOffset;
void (*PlayerNameUpdated)(void *_instance, void *player);
DWORD GetUnlockedWeaponsOffset;
void *(*GetUnlockedWeapons)(void *_instance, monoString *username, int playerID);
DWORD IsInsideOffset;
bool (*IsInside)(void *_instance, void *test, Vector3 point);
DWORD IsInsideNoZoneOffset;
bool (*IsInsideNoZone)(void *_instance, void *col, Vector3 point);
DWORD CheckForOutOfBoundsOffset;
void (*CheckForOutOfBounds)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}PlayerAntiHack;
struct PlayerFootSensorScript {
DWORD onTriggerEnterOffset;
void (*onTriggerEnter)(void *_instance, void *col);
}PlayerFootSensorScript;
struct LoadoutsPrefsHelper {
DWORD GetLoadoutIntValueOffset;
int (*GetLoadoutIntValue)(monoString *keyWithoutPlayerID, monoString *playerID);
DWORD SetLoadoutIntValueOffset;
void (*SetLoadoutIntValue)(monoString *keyWithoutPlayerID, int newValue, monoString *playerID);
DWORD SetPlayerIDOffset;
void (*SetPlayerID)(monoString *playerID);
DWORD MigratePrefsOffset;
void (*MigratePrefs)(monoString *fromUsername, monoString *toUsername);
}LoadoutsPrefsHelper;
struct PrefKeys {
}PrefKeys;
struct PlayerScript {
DWORD get_LastKillerIDOffset;
int (*get_LastKillerID)(void *_instance);
DWORD get_rawUsernameOffset;
monoString *(*get_rawUsername)(void *_instance);
DWORD set_rawUsernameOffset;
void (*set_rawUsername)(void *_instance, monoString *value);
DWORD EncodeRawUserNameOffset;
void (*EncodeRawUserName)(void *_instance, monoString *name);
DWORD DecodeRawUserNameOffset;
monoString *(*DecodeRawUserName)(void *_instance);
DWORD set_PerksHandlerOffset;
void (*set_PerksHandler)(void *_instance, void *value);
DWORD get_PerksHandlerOffset;
void *(*get_PerksHandler)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD LoadPerksOffset;
void (*LoadPerks)(void *_instance);
DWORD PushPerksToPlayerPropertiesOffset;
void (*PushPerksToPlayerProperties)(void *_instance);
DWORD GetBestSpawnPointOffset;
void (*GetBestSpawnPoint)(void *_instance);
DWORD CheckForMatchCountdownBeginOffset;
void (*CheckForMatchCountdownBegin)(void *_instance);
DWORD OnPhotonInstantiateOffset;
void (*OnPhotonInstantiate)(void *_instance, int info);
DWORD RpcForceKillstreakOffset;
void (*RpcForceKillstreak)(void *_instance, int k, bool isOnTheSameTeam);
DWORD UseKillstreakOffset;
void (*UseKillstreak)(void *_instance, int k);
DWORD NukeOffset;
void (*Nuke)(void *_instance);
DWORD NukeKillOffset;
void (*NukeKill)(void *_instance, int info);
DWORD EndKillstreakOnLocalPlayerOffset;
void (*EndKillstreakOnLocalPlayer)(void *_instance);
DWORD OnPhotonPlayerDisconnectedOffset;
void (*OnPhotonPlayerDisconnected)(void *_instance, void *player);
DWORD EnforceGunStatsOffset;
void *(*EnforceGunStats)(void *_instance);
DWORD PunishCheatersOffset;
void (*PunishCheaters)(void *_instance);
DWORD PunishCheatersImplOffset;
void *(*PunishCheatersImpl)(void *_instance);
DWORD cycleWeaponOffset;
int(*cycleWeapon)(void *_instance);
DWORD findNextAvailableWeaponOffset;
int (*findNextAvailableWeapon)(void *_instance, int currentWeaponIndex);
DWORD addAmmoOffset;
bool (*addAmmo)(void *_instance, int amount, int type);
DWORD addAmmoToClipOffset;
bool (*addAmmoToClip)(void *_instance, int amount, int type);
DWORD findWeaponWithTypeOffset;
int (*findWeaponWithType)(void *_instance, int t);
DWORD GetRandomSightForGunOffset;
int(*GetRandomSightForGun)(void *_instance, int t);
DWORD SetRandomGunAttachmentsOffset;
void (*SetRandomGunAttachments)(void *_instance, int index);
DWORD SetGunAccessoryOffset;
void (*SetGunAccessory)(void *_instance, int weapon, int t);
DWORD SetGunCamoOffset;
void (*SetGunCamo)(void *_instance, int weapon, int t);
DWORD SetGunBarrelOffset;
void (*SetGunBarrel)(void *_instance, int weapon, int t);
DWORD SetGunSightOffset;
void (*SetGunSight)(void *_instance, int weapon, int t);
DWORD setWeaponAvailableOffset;
void *(*setWeaponAvailable)(void *_instance, int t);
DWORD DropGunOffset;
void *(*DropGun)(void *_instance, int index);
DWORD isWeaponAvailableOffset;
bool (*isWeaponAvailable)(void *_instance, int t);
DWORD GetGunTransformOffset;
void *(*GetGunTransform)(void *_instance);
DWORD SwitchWeaponCROffset;
void *(*SwitchWeaponCR)(void *_instance);
DWORD shouldHideCrosshairsOffset;
bool (*shouldHideCrosshairs)(void *_instance, int currentWeapon);
DWORD hasADSDisabledOffset;
bool (*hasADSDisabled)(void *_instance, int currentWeapon);
DWORD ShouldADSDissapearOffset;
bool (*ShouldADSDissapear)(void *_instance);
DWORD isAKnifeOffset;
bool (*isAKnife)(void *_instance, int currentWeapon);
DWORD ActualSwitchWeaponOffset;
void (*ActualSwitchWeapon)(void *_instance);
DWORD switchWeaponOffset;
int(*switchWeapon)(void *_instance, int weaponIndex, bool instant);
DWORD focusOnObjectOffset;
void (*focusOnObject)(void *_instance, void *transform, float time, float ts, float movementSpeed, float yDistance);
DWORD resetFixedDeltaTimeOffset;
void (*resetFixedDeltaTime)(void *_instance);
DWORD stopFocusingOffset;
void (*stopFocusing)(void *_instance);
DWORD enableCameraOffset;
void (*enableCamera)(void *_instance);
DWORD disableCameraOffset;
void (*disableCamera)(void *_instance);
DWORD DisableAllCameraFunctionsOffset;
void (*DisableAllCameraFunctions)(void *_instance);
DWORD EnableAllCameraFunctionsOffset;
void (*EnableAllCameraFunctions)(void *_instance);
DWORD setGunStatsOffset;
void (*setGunStats)(void *_instance, int type, int index, int gunObjectIndex);
DWORD ReloadSavedWeaponAttachmentsOffset;
void (*ReloadSavedWeaponAttachments)(void *_instance, int index);
DWORD playFootStepSoundOffset;
void (*playFootStepSound)(void *_instance);
DWORD HeadshottedOffset;
void (*Headshotted)(void *_instance);
DWORD KnifedOffset;
void (*Knifed)(void *_instance);
DWORD UpdateBulletTracerColorOffset;
void (*UpdateBulletTracerColor)(void *_instance);
DWORD UpdateSkinOffset;
void (*UpdateSkin)(void *_instance, bool teammateSkin);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SendNewInfoOffset;
void (*SendNewInfo)(void *_instance);
DWORD SendNewPlayerInfoOffset;
void (*SendNewPlayerInfo)(void *_instance);
DWORD CheckTeamNumberOffset;
void (*CheckTeamNumber)(void *_instance);
DWORD getTeamNumberOffset;
void (*getTeamNumber)(void *_instance);
DWORD CmdGetTeamNumberOffset;
void (*CmdGetTeamNumber)(void *_instance, int vID);
DWORD get_requiresSkinForTeamNumberOffset;
bool (*get_requiresSkinForTeamNumber)(void *_instance);
DWORD JSNowOffset;
void (*JSNow)(void *_instance, int info);
DWORD ActualUpdateTeamNumberOffset;
void (*ActualUpdateTeamNumber)(void *_instance);
DWORD GetIntCamoTypeOffset;
int (*GetIntCamoType)(void *_instance);
DWORD GetWeaponByteOffset;
DWORD updateSensitivityOffset;
void (*updateSensitivity)(void *_instance, float sMult);
DWORD updateAimingSensitivityOffset;
void (*updateAimingSensitivity)(void *_instance, float sMult);
DWORD updateUsernameOffset;
void (*updateUsername)(void *_instance, monoString *name);
DWORD UpdateMPKillsOffset;
void (*UpdateMPKills)(void *_instance, int value, int playerKilledId, bool updateGunGameScore);
DWORD UpdateMPDeathsOffset;
void (*UpdateMPDeaths)(void *_instance, int value);
DWORD UpdateMPRoundsOffset;
void (*UpdateMPRounds)(void *_instance, int value);
DWORD UsernameChangedOffset;
void (*UsernameChanged)(void *_instance, monoString *value);
DWORD AddTabListItemOffset;
void (*AddTabListItem)(void *_instance);
DWORD mpShowMuzzleFlashOffset;
void (*mpShowMuzzleFlash)(void *_instance);
DWORD NormalRespawnOffset;
void (*NormalRespawn)(void *_instance);
DWORD RespawnOffset;
void (*Respawn)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD finishReloadingGunOffset;
void (*finishReloadingGun)(void *_instance);
DWORD enlargeAmmoTextOffset;
void (*enlargeAmmoText)(void *_instance);
DWORD refreshAmmoTextOffset;
void (*refreshAmmoText)(void *_instance);
DWORD reloadRoundsInMagazineOffset;
void (*reloadRoundsInMagazine)(void *_instance);
DWORD TeleportToPositionOffset;
void (*TeleportToPosition)(void *_instance, Vector3 position, int info);
DWORD reloadRoundsInMagazineWithIndexOffset;
void (*reloadRoundsInMagazineWithIndex)(void *_instance, int index, bool subtractFromTotal);
DWORD currentWeaponTypeOffset;
int(*currentWeaponType)(void *_instance);
DWORD WeaponDoTrickOffset;
void (*WeaponDoTrick)(void *_instance);
DWORD FinishWeaponTrickOffset;
void (*FinishWeaponTrick)(void *_instance);
DWORD reloadWeaponOffset;
void (*reloadWeapon)(void *_instance);
DWORD cancelReloadOffset;
void (*cancelReload)(void *_instance);
DWORD getWeaponIndexOfTypeOffset;
int (*getWeaponIndexOfType)(void *_instance, int type);
DWORD TimeLeftInKillstreakOffset;
float (*TimeLeftInKillstreak)(void *_instance);
DWORD CanShowTriangleOffset;
bool (*CanShowTriangle)(void *_instance);
DWORD shouldMoveScopeUpOffset;
bool (*shouldMoveScopeUp)(void *_instance, int currentWeapon);
DWORD isSupressedWeaponOffset;
bool (*isSupressedWeapon)(void *_instance, int currentWeapon);
DWORD goToNextLevelOffset;
void (*goToNextLevel)(void *_instance);
DWORD disableMuzzleFlashLightOffset;
void (*disableMuzzleFlashLight)(void *_instance);
DWORD dieOffset;
void (*die)(void *_instance);
DWORD ACKillOffset;
void (*ACKill)(void *_instance);
DWORD RpcACKillOffset;
void (*RpcACKill)(void *_instance, int info);
DWORD UpdateKillerStatsOffset;
void (*UpdateKillerStats)(void *_instance, float killerHealthPercent, int killerWeaponType);
DWORD BanOrMutePlayerOffset;
void *(*BanOrMutePlayer)(void *_instance, void *command, bool uploadSS, bool calledFromPopup);
DWORD UnbanPlayerOffset;
void *(*UnbanPlayer)(void *_instance, monoString *playername, monoString *type);
DWORD DisconnectFromGameOffset;
void *(*DisconnectFromGame)(void *_instance);
DWORD SendChatMessageOffset;
void (*SendChatMessage)(void *_instance, monoString *message, Color color);
DWORD SendDirectChatMessageOffset;
void (*SendDirectChatMessage)(void *_instance, monoString *message, Color color);
DWORD RestartMatchOffset;
void (*RestartMatch)(void *_instance);
DWORD KickPlayerOffset;
void (*KickPlayer)(void *_instance, monoString *playerToKick, monoString *hashedpass);
DWORD KickPlayerAsMasterOffset;
void (*KickPlayerAsMaster)(void *_instance, void *playerToKick);
DWORD KickPlayerAsMaster1Offset;
void (*KickPlayerAsMaster1)(void *_instance, monoString *playerToKick);
DWORD DelayedKickPlayerOffset;
void *(*DelayedKickPlayer)(void *_instance, monoString *playerToKick);
DWORD GetPlayerFromPartialUsernameOffset;
void *(*GetPlayerFromPartialUsername)(void *_instance, monoString *partialUsername);
DWORD ActualKickPlayerOffset;
void *(*ActualKickPlayer)(void *_instance, monoString *playerToKick, void *kicker);
DWORD ActualRestartMatchOffset;
void *(*ActualRestartMatch)(void *_instance);
DWORD ResetKillsDeathsOffset;
void (*ResetKillsDeaths)(void *_instance);
DWORD RunFunctionIfModOffset;
void (*RunFunctionIfMod)(void *_instance, monoString *playername, void *coroutine);
DWORD RunFunctionIfRestarterOffset;
void (*RunFunctionIfRestarter)(void *_instance, monoString *playername, void *coroutine);
DWORD SetTimeScaleOffset;
void (*SetTimeScale)(void *_instance, float s);
DWORD RpcSendChatMessageOffset;
void (*RpcSendChatMessage)(void *_instance, monoString *msgUsername, monoString *msg, byte r, byte g, byte b, int info);
DWORD RpcShowPerkMessageOffset;
void (*RpcShowPerkMessage)(void *_instance, monoString *msgUsername, monoString *msg);
DWORD AddKillToStreakOffset;
void (*AddKillToStreak)(void *_instance);
DWORD playerKilledOffset;
void (*playerKilled)(void *_instance, int killedID, int killerWeapon);
DWORD playerKilledAnnounceOffset;
void (*playerKilledAnnounce)(void *_instance, int killerID, int killerWeapon, bool addToDeaths, bool headshot);
DWORD mpPlaySoundOffset;
void (*mpPlaySound)(void *_instance, void *clip);
DWORD localDieOffset;
void (*localDie)(void *_instance, int killerWeapon, int killerID);
DWORD FixHumanMeshAnimationOffset;
void (*FixHumanMeshAnimation)(void *_instance);
DWORD RagdollAfterTimeOffset;
void (*RagdollAfterTime)(void *_instance);
DWORD RagdollOffset;
void (*Ragdoll)(void *_instance, bool instant);
DWORD ShowHideHumanMeshOffset;
void (*ShowHideHumanMesh)(void *_instance, bool show);
DWORD LocalTurnIntoRagdollOffset;
void *(*LocalTurnIntoRagdoll)(void *_instance);
DWORD ResetHumanMeshPositionOffset;
void (*ResetHumanMeshPosition)(void *_instance);
DWORD EnableRootMotionOffset;
void (*EnableRootMotion)(void *_instance, bool enable);
DWORD SetExplosionForcePositionOffset;
void (*SetExplosionForcePosition)(void *_instance, Vector3 position);
DWORD mpTurnIntoRagdollOffset;
void (*mpTurnIntoRagdoll)(void *_instance, bool instant);
DWORD resetHumanMeshAnimationOffset;
void (*resetHumanMeshAnimation)(void *_instance);
DWORD localReloadOffset;
void (*localReload)(void *_instance);
DWORD mpFinishReloadOffset;
void (*mpFinishReload)(void *_instance);
DWORD mpReloadOffset;
void (*mpReload)(void *_instance);
DWORD mpUpdateAccessoryOffset;
void (*mpUpdateAccessory)(void *_instance, int t);
DWORD mpUpdateBarrelOffset;
void (*mpUpdateBarrel)(void *_instance, int t);
DWORD mpUpdateSightOffset;
void (*mpUpdateSight)(void *_instance, int t);
DWORD mpUpdateCamoOffset;
void (*mpUpdateCamo)(void *_instance, int camoType);
DWORD localSwitchGunOffset;
void (*localSwitchGun)(void *_instance, int type, int camoType, int oldGun, bool instant);
DWORD SetCurrentGunObjectOffset;
void *(*SetCurrentGunObject)(void *_instance, float delayTime, int type, int camoType);
DWORD setLastDamagerIDOffset;
void (*setLastDamagerID)(void *_instance, int damagerID);
DWORD mpShowHurtAnimationOffset;
void (*mpShowHurtAnimation)(void *_instance);
DWORD HitAtLocalPointOffset;
void (*HitAtLocalPoint)(void *_instance, Vector3 point, void *damager);
DWORD SprayBloodEverywhereOffset;
void (*SprayBloodEverywhere)(void *_instance);
DWORD ShowHitmarkerOffset;
DWORD hurtOffset;
void (*hurt)(void *_instance, float damage, void *damager, Vector3 bulletHitPoint, bool headshot, int damagerWeapon);
DWORD IsHitValidOffset;
bool (*IsHitValid)(void *_instance, int weapon, void *damager, void *receiver, Vector3 damagerPosition, Vector3 receiverPosition);
DWORD AcknowledgeDamageDoneOffset;
void (*AcknowledgeDamageDone)(void *_instance, int status, float damage, int victim);
DWORD AcknowledgeDamageDoneRPCOffset;
void (*AcknowledgeDamageDoneRPC)(void *_instance, monoString *status, float damage, int victimID);
DWORD GotKillAssistOffset;
void (*GotKillAssist)(void *_instance, float amount, int killedID);
DWORD damagePlayerOffset;
void (*damagePlayer)(void *_instance, float damage, void *damager, Vector3 bulletHitPoint, bool locallyHurt, int damagerWeapon);
DWORD getInsideVehicleOffset;
void (*getInsideVehicle)(void *_instance);
DWORD getOutOfVehicleOffset;
void (*getOutOfVehicle)(void *_instance);
DWORD ResetStatsOffset;
void (*ResetStats)(void *_instance);
DWORD ReloadAllRoundsOffset;
void (*ReloadAllRounds)(void *_instance);
DWORD get_gunReloadingOffset;
bool (*get_gunReloading)(void *_instance);
DWORD set_gunReloadingOffset;
void (*set_gunReloading)(void *_instance, bool value);
DWORD get_healthOffset;
float (*get_health)(void *_instance);
DWORD set_healthOffset;
void (*set_health)(void *_instance, float value);
DWORD SetScopeBlacknessTextureEnabledOffset;
void (*SetScopeBlacknessTextureEnabled)(void *_instance, bool shouldShow);
DWORD DisableAllRenderersOffset;
void (*DisableAllRenderers)(void *_instance);
DWORD GetAngleOffset;
float (*GetAngle)(void *_instance, Vector2 v1, Vector2 v2);
DWORD shakeCameraOffset;
void (*shakeCamera)(void *_instance, float intensity);
DWORD ChangeCrouchStateOffset;
void (*ChangeCrouchState)(void *_instance, bool value);
DWORD UpdateTabItemColorForHealthOffset;
void (*UpdateTabItemColorForHealth)(void *_instance, float value);
DWORD IsIndoorOffset;
bool (*IsIndoor)(void *_instance);
DWORD HealthUpdatedOffset;
void (*HealthUpdated)(void *_instance, float value, int info);
DWORD ForcePositionOffset;
void (*ForcePosition)(void *_instance, Vector3 pos, bool beForcedAlive);
DWORD HasSpawnedForFirstTimeOffset;
bool (*HasSpawnedForFirstTime)(void *_instance, bool ignoreForcePosition);
DWORD GetBestSpawnPointForPlayerOffset;
void (*GetBestSpawnPointForPlayer)(void *_instance, int flagIDToSpawnOn, int info);
DWORD SetSpawnPointOffset;
void (*SetSpawnPoint)(void *_instance, Vector3 s);
DWORD MapVotedForOffset;
void (*MapVotedFor)(void *_instance, monoString *mapName);
DWORD VoteForMapOffset;
void (*VoteForMap)(void *_instance, monoString *mapName);
DWORD toggleCrouchOffset;
bool (*toggleCrouch)(void *_instance, bool forceToggle);
DWORD aimToEnemyWithLookRotationOffset;
void (*aimToEnemyWithLookRotation)(void *_instance, int lookRot);
DWORD fixAngleOffset;
float (*fixAngle)(void *_instance, float angle);
DWORD handleDesiredCameraRotationOffset;
void (*handleDesiredCameraRotation)(void *_instance);
DWORD localPlayerOffset;
bool (*localPlayer)(void *_instance);
DWORD ClearChamberOffset;
void (*ClearChamber)(void *_instance);
DWORD spawnShellOffset;
void (*spawnShell)(void *_instance);
DWORD ShowKillerOffset;
void (*ShowKiller)(void *_instance);
DWORD SpectateNextPlayerOnTeamOffset;
void (*SpectateNextPlayerOnTeam)(void *_instance);
DWORD stopClearingChamberOffset;
void (*stopClearingChamber)(void *_instance);
DWORD OnControllerColliderHitOffset;
void (*OnControllerColliderHit)(void *_instance, void *hit);
DWORD CanJumpOffset;
bool (*CanJump)(void *_instance);
DWORD IsGroundedOffset;
bool (*IsGrounded)(void *_instance);
DWORD JumpOffset;
void (*Jump)(void *_instance);
DWORD CheckForMPAimAssistOffset;
void (*CheckForMPAimAssist)(void *_instance);
DWORD HandleAimAssistAndSpreadOffset;
void (*HandleAimAssistAndSpread)(void *_instance);
DWORD SetOriginalFOVOffset;
void (*SetOriginalFOV)(void *_instance, float fov);
DWORD GetGunADSAnglesOffset;
Vector3 (*GetGunADSAngles)(void *_instance);
DWORD getGunAnglesOffset;
Vector3 (*getGunAngles)(void *_instance);
DWORD ShowShootingEffectsOffset;
void (*ShowShootingEffects)(void *_instance);
DWORD isExplosiveOffset;
bool (*isExplosive)(void *_instance, int weaponType);
DWORD CheckForExplosiveSpamOffset;
bool (*CheckForExplosiveSpam)(void *_instance);
DWORD mpPlayShootSoundOffset;
void (*mpPlayShootSound)(void *_instance);
DWORD SemiAutoShootOffset;
void (*SemiAutoShoot)(void *_instance);
DWORD CanShootOffset;
bool (*CanShoot)(void *_instance, bool checkRPM);
DWORD ShowSmokeEffectsOffset;
void (*ShowSmokeEffects)(void *_instance);
DWORD PlayGunSoundOffset;
void (*PlayGunSound)(void *_instance);
DWORD IncreaseGunRecoilOffset;
void (*IncreaseGunRecoil)(void *_instance);
DWORD IncreaseCameraRecoilOffset;
void (*IncreaseCameraRecoil)(void *_instance);
DWORD ProcessMuzzleFlashOffset;
void (*ProcessMuzzleFlash)(void *_instance);
DWORD ProcessBulletFiredOffset;
void (*ProcessBulletFired)(void *_instance);
DWORD ShowAnnouncementOffset;
void (*ShowAnnouncement)(void *_instance, monoString *text, float time);
DWORD HideAnnouncementOffset;
void (*HideAnnouncement)(void *_instance);
DWORD WeaponStabOffset;
void (*WeaponStab)(void *_instance);
DWORD DamageFromWeaponStabOffset;
void (*DamageFromWeaponStab)(void *_instance);
DWORD ShootOffset;
void (*Shoot)(void *_instance);
DWORD StartSprintingOffset;
void (*StartSprinting)(void *_instance);
DWORD StopSprintingOffset;
void (*StopSprinting)(void *_instance);
DWORD handleGunRotationOffset;
void (*handleGunRotation)(void *_instance);
DWORD handleMovementOffset;
void (*handleMovement)(void *_instance);
DWORD FlashOffset;
void (*Flash)(void *_instance, float time);
DWORD KnifeOffset;
void (*Knife)(void *_instance);
DWORD DamageWithKnifeOffset;
void (*DamageWithKnife)(void *_instance);
DWORD disableKnifeArmsOffset;
void (*disableKnifeArms)(void *_instance);
DWORD SpawnThrowingWeaponOffset;
void (*SpawnThrowingWeapon)(void *_instance, void *knifeAnimTransform, int weaponType);
DWORD ThrowWeaponOffset;
void (*ThrowWeapon)(void *_instance, int weaponType);
DWORD throwGrenadeOffset;
void (*throwGrenade)(void *_instance);
DWORD createGrenadeOffset;
void (*createGrenade)(void *_instance);
DWORD CreateGrenadeAtPosOffset;
void (*CreateGrenadeAtPos)(void *_instance, Vector3 position, float delay, Vector3 velocity, int grenadeWeaponType, int id);
DWORD RpcShowHitmarkerOffset;
void (*RpcShowHitmarker)(void *_instance, int info);
DWORD ShowUpperBodyAnimationWithNameAndLayerOffset;
void (*ShowUpperBodyAnimationWithNameAndLayer)(void *_instance, monoString *animationName, int layer, float time);
DWORD ShowUpperBodyAnimationOffset;
void (*ShowUpperBodyAnimation)(void *_instance, int triggerHash, float time);
DWORD mpThrowGrenadeAnimationOffset;
void (*mpThrowGrenadeAnimation)(void *_instance);
DWORD mpMeleeAnimationOffset;
void (*mpMeleeAnimation)(void *_instance);
DWORD disableGrenadeArmsOffset;
void (*disableGrenadeArms)(void *_instance);
DWORD HideExtraArmsOffset;
void (*HideExtraArms)(void *_instance);
DWORD HandleShootingCheckOffset;
void (*HandleShootingCheck)(void *_instance);
DWORD disableGunRenderersOffset;
void (*disableGunRenderers)(void *_instance, bool shouldShowInstead);
DWORD CR_StartKnifeCooldownOffset;
void *(*CR_StartKnifeCooldown)(void *_instance);
DWORD isInTheCorrectRangeToKnifeOffset;
bool (*isInTheCorrectRangeToKnife)(void *_instance);
DWORD handleMouseMovementOffset;
void (*handleMouseMovement)(void *_instance);
DWORD handlePCControllersOffset;
void (*handlePCControllers)(void *_instance);
DWORD handleHurtMarkerOffset;
void (*handleHurtMarker)(void *_instance);
DWORD handleIncrementsOffset;
void (*handleIncrements)(void *_instance);
DWORD OnPhotonSerializeViewOffset;
void (*OnPhotonSerializeView)(void *_instance, void *stream, int info);
DWORD UpdateVitalityOffset;
void (*UpdateVitality)(void *_instance, Vector3 velocity, float vHealth);
DWORD IsAliveAndVitalOffset;
bool (*IsAliveAndVital)(void *_instance);
DWORD ForceHumanMeshVisibleOffset;
void (*ForceHumanMeshVisible)(void *_instance);
DWORD CheckIfWeaponIsValidOffset;
void (*CheckIfWeaponIsValid)(void *_instance);
DWORD CheckDisallowedWeaponOffset;
bool (*CheckDisallowedWeapon)(void *_instance, bool onSpawn);
DWORD CheckDisallowedWeapon1Offset;
bool (*CheckDisallowedWeapon1)(void *_instance, int weapon, bool onSpawn);
DWORD MakeHumanMeshVisibleDelayedOffset;
DWORD CalculateHorizontalVelocityMagnitudeOffset;
float (*CalculateHorizontalVelocityMagnitude)(void *_instance);
DWORD normalizeAngleOffset;
float (*normalizeAngle)(void *_instance, float angle);
DWORD UpdateServerVarsOffset;
void (*UpdateServerVars)(void *_instance, Vector2 aimXY, float moveVelocity, float moveAngle, Vector3 vel);
DWORD CalculateHumanMeshRotationOffset;
int(*CalculateHumanMeshRotation)(void *_instance);
DWORD FinishedTurningOffset;
void (*FinishedTurning)(void *_instance);
DWORD PhysicsLerpServerVariablesOffset;
void (*PhysicsLerpServerVariables)(void *_instance);
DWORD CalculateAimDirXOffset;
float (*CalculateAimDirX)(void *_instance);
DWORD LerpServerVariablesOffset;
void (*LerpServerVariables)(void *_instance);
DWORD ChamberScopeTextureOffset;
void (*ChamberScopeTexture)(void *_instance);
DWORD ResetScopeTextureTransformOffset;
void (*ResetScopeTextureTransform)(void *_instance);
DWORD BalanceTeamsOffset;
void (*BalanceTeams)(void *_instance);
DWORD HasPerkOffset;
bool (*HasPerk)(void *_instance, int p);
DWORD SwitchTeamsOffset;
void (*SwitchTeams)(void *_instance);
DWORD SpawnFailedOffset;
void (*SpawnFailed)(void *_instance);
DWORD GetSpawnIfQueuedOffset;
void (*GetSpawnIfQueued)(void *_instance);
DWORD OnMasterClientSwitchedOffset;
void (*OnMasterClientSwitched)(void *_instance, void *newMaster);
DWORD BuildNameWithTagsOffset;
monoString *(*BuildNameWithTags)(void *_instance);
DWORD SetAllGunsVisibilityOffset;
void (*SetAllGunsVisibility)(void *_instance, bool visible);
DWORD DisconnectFromMultiplayerOffset;
void (*DisconnectFromMultiplayer)(void *_instance);
DWORD ProcessFirstUpdateOffset;
void (*ProcessFirstUpdate)(void *_instance);
DWORD IsVisibleOffset;
bool (*IsVisible)(void *_instance);
DWORD HandleAnimatorSpeedOffset;
void (*HandleAnimatorSpeed)(void *_instance);
DWORD FixSwitchWeaponScreenGlitchOffset;
void (*FixSwitchWeaponScreenGlitch)(void *_instance);
DWORD RefreshMPPerksOffset;
void (*RefreshMPPerks)(void *_instance, void *props);
DWORD AnnounceKillstreakOffset;
void (*AnnounceKillstreak)(void *_instance, int k, bool isUserOnTeam, void *player);
DWORD ShowNukeOverlayOffset;
void (*ShowNukeOverlay)(void *_instance);
DWORD KillstreakFinishedOffset;
void (*KillstreakFinished)(void *_instance, int k, bool isOnTeam);
DWORD UpdatekillstreakOffset;
void (*Updatekillstreak)(void *_instance, int k);
DWORD ProcessMPPlayerCustomPropertiesOffset;
void (*ProcessMPPlayerCustomProperties)(void *_instance, void *props);
DWORD UpdateCumulativeMovingAveragePingOffset;
float (*UpdateCumulativeMovingAveragePing)(void *_instance, float newPing);
DWORD FindNewMasterClientOffset;
void (*FindNewMasterClient)(void *_instance);
DWORD BecomeMasterClientOffset;
void (*BecomeMasterClient)(void *_instance);
DWORD GetNearestEnemyOffset;
void *(*GetNearestEnemy)(void *_instance);
DWORD SetPingOffset;
void (*SetPing)(void *_instance, byte p);
DWORD ProcessLocalPingOffset;
void (*ProcessLocalPing)(void *_instance);
DWORD PlayerKickedForPingOffset;
void (*PlayerKickedForPing)(void *_instance, byte ping);
DWORD GetPingKickedOffset;
void *(*GetPingKicked)(void *_instance, float delayTime, byte ping, byte maxPing);
DWORD IncrementNonLocalMPPlayerVariablesOffset;
void (*IncrementNonLocalMPPlayerVariables)(void *_instance);
DWORD ProcessNonLocalMPShootingEffectsOffset;
void (*ProcessNonLocalMPShootingEffects)(void *_instance);
DWORD SetCorrectTeamNumbersForAllPlayersOffset;
void (*SetCorrectTeamNumbersForAllPlayers)(void *_instance);
DWORD ProcessMPTeamBalancingOffset;
void (*ProcessMPTeamBalancing)(void *_instance);
DWORD SetCorrectGunGameGunOffset;
int (*SetCorrectGunGameGun)(void *_instance, bool instant);
DWORD SetCorrectADSPositionOffset;
void (*SetCorrectADSPosition)(void *_instance, int index);
DWORD LoadGunResourcesOffset;
void (*LoadGunResources)(void *_instance, int index);
DWORD SetCharacterCamoAfterEndOfFrameOffset;
void *(*SetCharacterCamoAfterEndOfFrame)(void *_instance, int camo);
DWORD CR_SetBulletTracerColorAtEndOfFrameOffset;
void *(*CR_SetBulletTracerColorAtEndOfFrame)(void *_instance, int _color);
DWORD UnloadGunResourcesOffset;
void (*UnloadGunResources)(void *_instance, int index);
DWORD UnloadAllUnusedGunResourcesOffset;
void (*UnloadAllUnusedGunResources)(void *_instance);
DWORD LoadCorrectWeaponsOffset;
void (*LoadCorrectWeapons)(void *_instance);
DWORD GetPrimaryOffset;
int(*GetPrimary)(void *_instance);
DWORD GetSecondaryOffset;
int(*GetSecondary)(void *_instance);
DWORD GetThrowableOffset;
int(*GetThrowable)(void *_instance);
DWORD HandleHealthRegenOffset;
void (*HandleHealthRegen)(void *_instance);
DWORD RaycastHitPlayerOffset;
void *(*RaycastHitPlayer)(void *_instance, Vector3 startPosition, Vector3 direction, float maxDistance);
DWORD GetPlayerAimingAtOffset;
void *(*GetPlayerAimingAt)(void *_instance);
DWORD IsLookingAtPlayerOffset;
bool (*IsLookingAtPlayer)(void *_instance, void *player);
DWORD ApplyFinalPositionsOffset;
void (*ApplyFinalPositions)(void *_instance);
DWORD ClientTickOffset;
void (*ClientTick)(void *_instance);
DWORD SetBulletTracerColorOffset;
void (*SetBulletTracerColor)(void *_instance, int _color);
DWORD SetCharacterCamoOffset;
void (*SetCharacterCamo)(void *_instance, int camo);
DWORD HandleCustomPropertiesCheckOffset;
void (*HandleCustomPropertiesCheck)(void *_instance);
DWORD HandleMultiplayerErrorChecksOffset;
void (*HandleMultiplayerErrorChecks)(void *_instance);
DWORD HasBeenVisibleOffset;
bool (*HasBeenVisible)(void *_instance);
DWORD OnLevelWasLoadedOffset;
void (*OnLevelWasLoaded)(void *_instance);
DWORD isConquestTDMorVIPOffset;
bool (*isConquestTDMorVIP)(void *_instance);
DWORD HandleNameTagShowingOffset;
void (*HandleNameTagShowing)(void *_instance);
DWORD HandleUpperBodyWeightOffset;
void (*HandleUpperBodyWeight)(void *_instance);
DWORD ShowDebugCapsuleOffset;
void (*ShowDebugCapsule)(void *_instance, Vector3 pos);
DWORD SetFullLocalHumanMeshAnimatorParamsOffset;
void (*SetFullLocalHumanMeshAnimatorParams)(void *_instance);
DWORD ReliabilityMessageSentOffset;
void (*ReliabilityMessageSent)(void *_instance, int info);
DWORD ReliabilityMessageReceivedOffset;
void (*ReliabilityMessageReceived)(void *_instance);
DWORD HandleMatchStartingTextOffset;
void (*HandleMatchStartingText)(void *_instance);
DWORD HandleReliabilityCheckOffset;
void (*HandleReliabilityCheck)(void *_instance);
DWORD HandleSendRateOffset;
void (*HandleSendRate)(void *_instance);
DWORD HandleBloodOverlayOffset;
void (*HandleBloodOverlay)(void *_instance);
DWORD HandleScopeTextureOffset;
void (*HandleScopeTexture)(void *_instance);
DWORD HandleLocalRespawningOffset;
void (*HandleLocalRespawning)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD get_damageDebuggerOffset;
void *(*get_damageDebugger)(void *_instance);
DWORD PlayerAliveOffset;
bool (*PlayerAlive)(void *_instance, bool ignoreForcePosition);
DWORD GetTabItemOffset;
void *(*GetTabItem)(void *_instance);
DWORD ResetReportedDamageOffset;
void (*ResetReportedDamage)(void *_instance);
DWORD DisplayReportedDamageOffset;
void (*DisplayReportedDamage)(void *_instance, float damage);
DWORD DisplayAcknowledgedDamageOffset;
void (*DisplayAcknowledgedDamage)(void *_instance, monoString *status, float damage);
DWORD DetectWallhackCheatOffset;
void (*DetectWallhackCheat)(void *_instance, void *potentialSuspect, Vector3 position);
DWORD LogOffset;
void (*Log)(void *_instance, monoString *message);
DWORD GetGunStatsOffset;
int(*GetGunStats)(void *_instance, int wt);
}PlayerScript;
struct AnalyticsHelper {
DWORD LogSectionLoadedOffset;
void (*LogSectionLoaded)(monoString *sectionName);
DWORD LogSectionLoadedRevampedOffset;
void (*LogSectionLoadedRevamped)(monoString *sectionName);
DWORD LogBuyCaseOffset;
void (*LogBuyCase)(monoString *contentID, int amount);
DWORD LogBuyCreditsOffset;
void (*LogBuyCredits)(monoString *contentID, int amount);
DWORD LogSpentCreditsEventOffset;
void (*LogSpentCreditsEvent)(monoString *contentData, monoString *contentId, monoString *contentType, float totalValue);
DWORD LogSpentGoldEventOffset;
void (*LogSpentGoldEvent)(monoString *section, monoString *moreInfo, float totalValue);
DWORD LogPurchaseOffset;
void (*LogPurchase)(float purchaseAmount, monoString *currency, monoString *contentId, monoString *contentType);
DWORD LogShopEventOffset;
void (*LogShopEvent)(monoString *platform);
DWORD LogCompletedRegistrationEventOffset;
void (*LogCompletedRegistrationEvent)(monoString *registrationMethod);
}AnalyticsHelper;
struct AnalyticsStandardParams {
DWORD CreateFTUEParametersOffset;
void (*CreateFTUEParameters)();
DWORD InitializeStandardParametersOffset;
void (*InitializeStandardParameters)();
}AnalyticsStandardParams;
struct LeaderboardMemberJson {
DWORD GetUsernameOffset;
monoString *(*GetUsername)(void *_instance);
DWORD GetRankOffset;
int (*GetRank)(void *_instance);
DWORD GetTotalKillsOffset;
int (*GetTotalKills)(void *_instance);
DWORD GetBadgeNumberOffset;
int (*GetBadgeNumber)(void *_instance);
DWORD GetWeaponGroupStringOffset;
monoString *(*GetWeaponGroupString)(void *_instance);
DWORD GetRegionOffset;
monoString *(*GetRegion)(void *_instance);
DWORD GetFavoriteWeaponOffset;
int(*GetFavoriteWeapon)(void *_instance);
}LeaderboardMemberJson;
struct LeaderboardMemberCollection {
}LeaderboardMemberCollection;
struct LeaderboardModel {
DWORD OnSuccessOffset;
void (*OnSuccess)(void *_instance, monoString *jsonString);
DWORD GetLeaderboardOffset;
}LeaderboardModel;
struct PauseMenuToggleAnalyticsTrigger {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}PauseMenuToggleAnalyticsTrigger;
struct PlayerStats {
}PlayerStats;
struct SingleInteraction {
DWORD get_ItemOffset;
int (*get_Item)(void *_instance, int key);
DWORD set_ItemOffset;
void (*set_Item)(void *_instance, int key, int value);
}SingleInteraction;
struct PlayerInteraction {
}PlayerInteraction;
struct PlayerStatsHelper {
DWORD LogInteractionOffset;
void (*LogInteraction)(int weaponID, monoString *killerID, monoString *victimID);
DWORD LogCreditsOffset;
void (*LogCredits)(int _credits);
DWORD LogXPOffset;
void (*LogXP)(int _xp);
DWORD LeftGameOffset;
void (*LeftGame)();
DWORD OnLeftSentOffset;
void (*OnLeftSent)(monoString *responseOrError);
DWORD RandomNumbersOffset;
monoString *(*RandomNumbers)(int length);
DWORD BuildGameIDOffset;
monoString *(*BuildGameID)();
}PlayerStatsHelper;
struct PlayerStatsMaps {
DWORD ConvertRegionID2UIOffset;
monoString *(*ConvertRegionID2UI)(monoString *key);
DWORD ConvertRegionUI2IDOffset;
monoString *(*ConvertRegionUI2ID)(monoString *key);
DWORD ConvertWeaponGroupID2ENOffset;
int(*ConvertWeaponGroupID2EN)(monoString *weaponGroupID);
DWORD ConvertWeaponGroupEN2IDOffset;
monoString *(*ConvertWeaponGroupEN2ID)(int weaponGroup);
DWORD ConvertWeaponGroupUI2IDOffset;
monoString *(*ConvertWeaponGroupUI2ID)(monoString *weaponGroupUI);
DWORD ConvertWeaponGroupID2UIOffset;
monoString *(*ConvertWeaponGroupID2UI)(monoString *weaponGroupID);
}PlayerStatsMaps;
struct SectionLoadedAnalyticsTrigger {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}SectionLoadedAnalyticsTrigger;
struct UIEventTrigger {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnClickOffset;
void (*OnClick)(void *_instance);
}UIEventTrigger;
struct RewardVO {
}RewardVO;
struct RetrieveRewardJson {
}RetrieveRewardJson;
struct WeaponStatVO {
}WeaponStatVO;
struct WeaponStatJson {
}WeaponStatJson;
struct WeaponStatsCollection {
}WeaponStatsCollection;
struct WeaponStatsModel {
DWORD OnSuccessOffset;
void (*OnSuccess)(void *_instance, monoString *jsonString);
DWORD GetWeaponStatsOffset;
DWORD GetRewardsOffset;
DWORD DeleteRewardOffset;
void (*DeleteReward)(void *_instance, int index);
}WeaponStatsModel;
struct PlayerUtils {
DWORD IsPlayerOnTeamOffset;
bool (*IsPlayerOnTeam)(void *a, void *b);
DWORD IsVisibleWithRaycastsOffset;
bool (*IsVisibleWithRaycasts)(int bounds, Vector3 addedPosition, Vector3 extraCheckPoint);
}PlayerUtils;
struct PlayerVisualDamageDebugger {
}PlayerVisualDamageDebugger;
struct PlayersRestrictor {
DWORD OnPlayerKickedOffset;
void (*OnPlayerKicked)(monoString *kickedPlayer);
DWORD AcceptPlayerOffset;
bool (*AcceptPlayer)(void *room, monoString *playerId);
}PlayersRestrictor;
struct PlayerscriptReference {
DWORD StartOffset;
void (*Start)(void *_instance);
}PlayerscriptReference;
struct Points {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetFreeForAllOffset;
void (*SetFreeForAll)(void *_instance, int limit);
DWORD SetTimerOffset;
void (*SetTimer)(void *_instance, monoString *time);
DWORD RefreshMyKillsFFAOffset;
void (*RefreshMyKillsFFA)(void *_instance);
DWORD RefreshEnemyKillsFFAOffset;
void (*RefreshEnemyKillsFFA)(void *_instance);
DWORD UpdateUSPointsOffset;
void (*UpdateUSPoints)(void *_instance, int value);
DWORD UpdateRUPointsOffset;
void (*UpdateRUPoints)(void *_instance, int value);
DWORD GetUSPointsOffset;
int (*GetUSPoints)(void *_instance);
DWORD GetRUPointsOffset;
int (*GetRUPoints)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}Points;
struct PokiException {
}PokiException;
struct PokiUnitySDK {
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD get_isShowingAdOffset;
bool (*get_isShowingAd)(void *_instance);
DWORD set_isShowingAdOffset;
void (*set_isShowingAd)(void *_instance, bool value);
DWORD initOffset;
void (*init)(void *_instance);
DWORD isInitializedOffset;
bool (*isInitialized)(void *_instance);
DWORD adsBlockedOffset;
bool (*adsBlocked)(void *_instance);
DWORD gameLoadingStartOffset;
void (*gameLoadingStart)(void *_instance);
DWORD gameLoadingFinishedOffset;
void (*gameLoadingFinished)(void *_instance);
DWORD roundStartOffset;
void (*roundStart)(void *_instance, monoString *indentifier);
DWORD roundEndOffset;
void (*roundEnd)(void *_instance, monoString *indentifier);
DWORD gameInteractiveOffset;
void (*gameInteractive)(void *_instance);
DWORD customEventOffset;
void (*customEvent)(void *_instance, monoString *eventNoun, monoString *eventVerb, void *eventData);
DWORD setPlayerAgeOffset;
void (*setPlayerAge)(void *_instance, int age);
DWORD togglePlayerAdvertisingConsentOffset;
void (*togglePlayerAdvertisingConsent)(void *_instance, bool consent);
DWORD gameLoadingProgressOffset;
void (*gameLoadingProgress)(void *_instance, void *data);
DWORD gameplayStartOffset;
void (*gameplayStart)(void *_instance);
DWORD gameplayStopOffset;
void (*gameplayStop)(void *_instance);
DWORD commercialBreakOffset;
void (*commercialBreak)(void *_instance);
DWORD rewardedBreakOffset;
void (*rewardedBreak)(void *_instance);
DWORD happyTimeOffset;
void (*happyTime)(void *_instance, float intensity);
DWORD displayAdOffset;
void (*displayAd)(void *_instance, monoString *identifier, monoString *size, monoString *top, monoString *left);
DWORD destroyAdOffset;
void (*destroyAd)(void *_instance, monoString *identifier);
DWORD readyOffset;
void (*ready)(void *_instance);
DWORD adblockOffset;
void (*adblock)(void *_instance);
DWORD commercialBreakCompletedOffset;
void (*commercialBreakCompleted)(void *_instance);
DWORD rewardedBreakCompletedOffset;
void (*rewardedBreakCompleted)(void *_instance, monoString *withReward);
}PokiUnitySDK;
struct PopulateAndTranslateLongText {
DWORD StartOffset;
void (*Start)(void *_instance);
}PopulateAndTranslateLongText;
struct PopupMenuItem {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD SetPointsOffset;
void (*SetPoints)(void *_instance, int p);
DWORD SetFirstPhaseTextOffset;
void (*SetFirstPhaseText)(void *_instance, monoString *t);
DWORD SetSecondPhaseNameOffset;
void (*SetSecondPhaseName)(void *_instance, monoString *t);
DWORD SetSecondPhaseWeaponNameOffset;
void (*SetSecondPhaseWeaponName)(void *_instance, monoString *t);
DWORD SetSizeOffset;
void (*SetSize)(void *_instance, float s);
DWORD PlayOffset;
void (*Play)(void *_instance, bool twoPhases);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}PopupMenuItem;
struct PopupMenuScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD MakePopupOffset;
void *(*MakePopup)(void *_instance, float delayTime, monoString *text, monoString *nameText, int points, int weaponType, float size);
DWORD showPopupOffset;
void (*showPopup)(void *_instance, monoString *text, monoString *nameText, int points, int weaponType, float size);
}PopupMenuScript;
struct SpecialOfferForPopup {
DWORD get_SpecialOffersOffset;
DWORD HasValidOffersOffset;
bool (*HasValidOffers)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD ClearOffersOffset;
void (*ClearOffers)(void *_instance);
}SpecialOfferForPopup;
struct PrefabManager {
DWORD getGunPrefabOffset;
void *(*getGunPrefab)(void *_instance, int type);
DWORD getPlayerGunPrefabOffset;
void *(*getPlayerGunPrefab)(void *_instance, int type);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}PrefabManager;
struct PushNotificationsController {
}PushNotificationsController;
struct RaycastBulletScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD shouldHaveBigBulletOffset;
bool (*shouldHaveBigBullet)(void *_instance, int currentWeapon);
DWORD SetDefaultTrailColorOffset;
void (*SetDefaultTrailColor)(void *_instance);
DWORD SetSniperTrailOffset;
void (*SetSniperTrail)(void *_instance);
DWORD SetBlueColorOffset;
void (*SetBlueColor)(void *_instance);
DWORD SetSelectedCustomColorOffset;
void (*SetSelectedCustomColor)(void *_instance, int _color);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD CheckForSuppressionOffset;
void (*CheckForSuppression)(void *_instance);
DWORD CheckIfHitPlayerOffset;
bool (*CheckIfHitPlayer)(void *_instance, int hit, bool damagePlayer);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD explodeOffset;
void (*explode)(void *_instance, Vector3 point, float radius);
DWORD playAudioClipOffset;
void (*playAudioClip)(void *_instance, void *clip, float maxDistance);
DWORD resetBulletOffset;
void (*resetBullet)(void *_instance);
DWORD IsLayerSolidOffset;
bool (*IsLayerSolid)(void *_instance, int layer);
DWORD RaycastBloodSplatterOffset;
void (*RaycastBloodSplatter)(void *_instance, int hit);
DWORD OnHitOffset;
void (*OnHit)(void *_instance, int hit, Vector3 direction);
DWORD KillBulletOffset;
void (*KillBullet)(void *_instance);
DWORD shouldResetTimeOffset;
bool (*shouldResetTime)(void *_instance, int currentWeapon);
}RaycastBulletScript;
struct BulletMesh {
DWORD GetBulletMeshWithTypeAndColorOffset;
void *(*GetBulletMeshWithTypeAndColor)(void *bulletRenderType, Color bulletColor);
}BulletMesh;
struct RenderType {
DWORD set_scaleOffset;
void (*set_scale)(void *_instance, float value);
DWORD get_colorOffset;
Color (*get_color)(void *_instance);
DWORD set_colorOffset;
void (*set_color)(void *_instance, Color value);
DWORD InitializeOffset;
void (*Initialize)(void *_instance);
DWORD ShowOffset;
void (*Show)(void *_instance);
DWORD HideOffset;
void (*Hide)(void *_instance);
}RenderType;
struct Recoil {
DWORD SetMassOffset;
void (*SetMass)(void *_instance, float m);
DWORD ImpulseOffset;
void (*Impulse)(void *_instance, Vector3 impulse);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}Recoil;
struct RecolorImage {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetOriginalColorOffset;
void (*SetOriginalColor)(void *_instance);
DWORD SetColorOffset;
void (*SetColor)(void *_instance, Color c);
DWORD StartOffset;
void (*Start)(void *_instance);
}RecolorImage;
struct RegisterManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ManageGuestAccountOffset;
void *(*ManageGuestAccount)(void *_instance);
DWORD GoToLoginOffset;
void (*GoToLogin)(void *_instance);
DWORD GoToSettingsOffset;
void (*GoToSettings)(void *_instance);
DWORD GoToOpenCasesOffset;
void (*GoToOpenCases)(void *_instance);
DWORD GoToMultiplayerOffset;
void (*GoToMultiplayer)(void *_instance);
DWORD ShowAskForAccountPopupOffset;
void (*ShowAskForAccountPopup)(void *_instance);
DWORD ShowNewUserPopupOffset;
void (*ShowNewUserPopup)(void *_instance);
DWORD CheckIfUsernameIsUniqueOffset;
void (*CheckIfUsernameIsUnique)(void *_instance);
DWORD CheckIfUsernameIsUnique1Offset;
void (*CheckIfUsernameIsUnique1)(void *_instance, monoString *_username);
DWORD onSuccess_IsUsernameUniqueOffset;
void (*onSuccess_IsUsernameUnique)(void *_instance, monoString *_jsonString);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *_jsonString);
DWORD ShowOneTimePasswordReminderOffset;
void (*ShowOneTimePasswordReminder)(void *_instance);
DWORD ShowOneTimePasswordReminder1Offset;
void (*ShowOneTimePasswordReminder1)(void *_instance, monoString *_password);
DWORD GenerateRandomPasswordOffset;
void (*GenerateRandomPassword)(void *_instance);
DWORD CloseOneTimePasswordReminderOffset;
void (*CloseOneTimePasswordReminder)(void *_instance);
DWORD RegisterNewUserOffset;
void (*RegisterNewUser)(void *_instance, int scene, int loadSceneMode);
DWORD CR_RegisterNewUserOffset;
void *(*CR_RegisterNewUser)(void *_instance);
DWORD LoginOnFinishedTheRegisterOffset;
void (*LoginOnFinishedTheRegister)(void *_instance);
DWORD ShowAfterPurchasePopupOffset;
void (*ShowAfterPurchasePopup)(void *_instance);
DWORD ShowAccountCompletePopupOffset;
void (*ShowAccountCompletePopup)(void *_instance);
}RegisterManager;
struct Response_IsUsernameUnique {
}Response_IsUsernameUnique;
struct UpdateAccountController {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD UpdateAccountDataOffset;
void (*UpdateAccountData)(void *_instance);
DWORD Call_UpdateAccountDataOffset;
void *(*Call_UpdateAccountData)(void *_instance);
DWORD onSuccess_UpdateAccountOffset;
void (*onSuccess_UpdateAccount)(void *_instance, monoString *_jsonString);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *_error);
DWORD CheckFieldsOffset;
bool (*CheckFields)(void *_instance);
DWORD ShowTempPasswordOffset;
void (*ShowTempPassword)(void *_instance);
}UpdateAccountController;
struct Response_UpdateAccount {
}Response_UpdateAccount;
struct ReloadAddAmmo {
DWORD AddOneAmmoOffset;
void (*AddOneAmmo)(void *_instance);
}ReloadAddAmmo;
struct ReloadWeapon {
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}ReloadWeapon;
struct RemoteValidator {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD StartPostOffset;
void (*StartPost)(void *_instance, void *message, monoString *URL, float seconds);
DWORD PostAfterSecondsElapseOffset;
void *(*PostAfterSecondsElapse)(void *_instance, void *message, monoString *URL, float seconds);
DWORD HandleResponseOffset;
void (*HandleResponse)(void *_instance, void *wwwResponse, monoString *productID);
DWORD PostOffset;
void *(*Post)(void *_instance, void *message, monoString *URL);
DWORD isIAPmanagerInitializedOffset;
bool (*isIAPmanagerInitialized)(void *_instance);
DWORD ConfirmPendingPurchaseOffset;
void (*ConfirmPendingPurchase)(void *_instance, monoString *productID);
}RemoteValidator;
struct Replay {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}Replay;
struct HandleVoteManager {
DWORD SetVoteDataOffset;
void (*SetVoteData)(void *_instance, monoString *_pollId, monoString *_vote, monoString *_accused);
DWORD HandleVoteOffset;
void (*HandleVote)(void *_instance);
DWORD SendVoteOffset;
void *(*SendVote)(void *_instance);
}HandleVoteManager;
struct HandleVoteResult {
DWORD QueueVoteResultHandlingOffset;
void (*QueueVoteResultHandling)(void *_instance, monoString *_pollId, float _delay);
DWORD HandleVoteResultImplOffset;
void *(*HandleVoteResultImpl)(void *_instance);
DWORD getHumanReadableYesReasonOffset;
monoString *(*getHumanReadableYesReason)(void *_instance, monoString *serverMessage);
DWORD getHumanReadableNoReasonOffset;
monoString *(*getHumanReadableNoReason)(void *_instance, monoString *serverMessage);
}HandleVoteResult;
struct NotifyOfVoteManager {
DWORD AddLocalPollIdOffset;
void (*AddLocalPollId)(void *_instance, monoString *_pollId);
DWORD SetPollIdOffset;
void (*SetPollId)(void *_instance, monoString *_pollId);
DWORD StartNotificationOffset;
void (*StartNotification)(void *_instance);
DWORD GetVoteDataOffset;
void *(*GetVoteData)(void *_instance);
DWORD GetPollIdOffset;
monoString *(*GetPollId)(void *_instance);
DWORD GetInitiatorOffset;
monoString *(*GetInitiator)(void *_instance);
DWORD GetAccussedOffset;
monoString *(*GetAccussed)(void *_instance);
DWORD GetReasonOffset;
monoString *(*GetReason)(void *_instance);
DWORD GetDetailsOffset;
monoString *(*GetDetails)(void *_instance);
DWORD GetVotingTimeLeftOffset;
int (*GetVotingTimeLeft)(void *_instance);
DWORD GetImageUrlOffset;
monoString *(*GetImageUrl)(void *_instance);
}NotifyOfVoteManager;
struct PerformVoteManager {
DWORD SetVoteDataOffset;
void (*SetVoteData)(void *_instance, monoString *_pollId, monoString *_initiator, monoString *_accussed, monoString *_reason, monoString *_details, monoString *_imageUrl);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD GetImageOffset;
void *(*GetImage)(void *_instance);
DWORD OnYesOffset;
void (*OnYes)(void *_instance);
DWORD OnNoOffset;
void (*OnNo)(void *_instance);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD UpdateVotesOffset;
void (*UpdateVotes)(void *_instance, int _yesVotes, int _noVotes);
DWORD DisplayTimeLeftOffset;
void (*DisplayTimeLeft)(void *_instance, float _timeLeft);
}PerformVoteManager;
struct PunishAPlayerManager {
DWORD SetPunishedPlayerOffset;
void (*SetPunishedPlayer)(void *_instance, monoString *_playerBeingPunished);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD LoadPeriodDropdownOffset;
void (*LoadPeriodDropdown)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnBanMuteToggleValueChangedOffset;
void (*OnBanMuteToggleValueChanged)(void *_instance, bool value);
DWORD GetPunishmentReasonsOffset;
void *(*GetPunishmentReasons)(void *_instance);
DWORD SetPunishmentAPIFinishedOffset;
void (*SetPunishmentAPIFinished)(void *_instance, monoString *message, int id);
DWORD UploadScreenshotOffset;
void *(*UploadScreenshot)(void *_instance, int id);
DWORD OnScreenshotCallbackSuccessOffset;
void (*OnScreenshotCallbackSuccess)(void *_instance, bool successResult);
DWORD CheckUploadssStuckedOffset;
void *(*CheckUploadssStucked)(void *_instance, float time);
DWORD OnBrowseButtonPressedOffset;
void (*OnBrowseButtonPressed)(void *_instance);
DWORD OnKickButtonPressedOffset;
void (*OnKickButtonPressed)(void *_instance);
DWORD OnPunishButtonPressedOffset;
void (*OnPunishButtonPressed)(void *_instance);
DWORD OnImageSelectOffset;
void (*OnImageSelect)(void *_instance, monoString *imgPath, int imgOrientation);
DWORD OnImageLoadOffset;
void (*OnImageLoad)(void *_instance, monoString *imgPath, void *tex, int imgOrientation);
DWORD OnErrorOffset;
void (*OnError)(void *_instance, monoString *errorMsg);
DWORD OnCancelOffset;
void (*OnCancel)(void *_instance);
}PunishAPlayerManager;
struct ReportAPlayerManager {
DWORD SetReportedPlayerOffset;
void (*SetReportedPlayer)(void *_instance, monoString *_playerBeingReported);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD GetPunishmentReasonsOffset;
void *(*GetPunishmentReasons)(void *_instance);
DWORD ReportCheaterOffset;
void *(*ReportCheater)(void *_instance);
DWORD OnScreenshotCallbackSuccessOffset;
void (*OnScreenshotCallbackSuccess)(void *_instance, bool successResult);
DWORD CheckUploadssStuckedOffset;
void *(*CheckUploadssStucked)(void *_instance, float time);
DWORD FillReasonDropdownOffset;
void (*FillReasonDropdown)(void *_instance);
DWORD OnBrowseButtonPressedOffset;
void (*OnBrowseButtonPressed)(void *_instance);
DWORD OnSubmitOffset;
void (*OnSubmit)(void *_instance);
DWORD OnImageSelectOffset;
void (*OnImageSelect)(void *_instance, monoString *imgPath, int imgOrientation);
DWORD OnImageLoadOffset;
void (*OnImageLoad)(void *_instance, monoString *imgPath, void *tex, int imgOrientation);
DWORD OnErrorOffset;
void (*OnError)(void *_instance, monoString *errorMsg);
DWORD OnCancelOffset;
void (*OnCancel)(void *_instance);
}ReportAPlayerManager;
struct VoteToKickManager {
DWORD getGameIdOffset;
monoString *(*getGameId)();
DWORD SetReportedPlayerDataOffset;
void (*SetReportedPlayerData)(void *_instance, monoString *_playerBeingReported, int _playerCount);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD GetPunishmentReasonsOffset;
void *(*GetPunishmentReasons)(void *_instance);
DWORD ReportCheaterOffset;
void *(*ReportCheater)(void *_instance);
DWORD OnScreenshotCallbackSuccessOffset;
void (*OnScreenshotCallbackSuccess)(void *_instance, bool successResult);
DWORD CheckUploadssStuckedOffset;
void *(*CheckUploadssStucked)(void *_instance, float time);
DWORD FillRasonDropdownOffset;
void (*FillRasonDropdown)(void *_instance);
DWORD OnBrowseButtonPressedOffset;
void (*OnBrowseButtonPressed)(void *_instance);
DWORD OnSubmitOffset;
void (*OnSubmit)(void *_instance);
DWORD OnImageSelectOffset;
void (*OnImageSelect)(void *_instance, monoString *imgPath, int imgOrientation);
DWORD OnImageLoadOffset;
void (*OnImageLoad)(void *_instance, monoString *imgPath, void *tex, int imgOrientation);
DWORD OnErrorOffset;
void (*OnError)(void *_instance, monoString *errorMsg);
DWORD OnCancelOffset;
void (*OnCancel)(void *_instance);
}VoteToKickManager;
struct CheckStatusAndVersion {
DWORD IsAdblockEnabledOffset;
bool (*IsAdblockEnabled)();
DWORD OnVersionCheckedOffset;
void (*OnVersionChecked)(monoString *result);
}CheckStatusAndVersion;
struct JsonTypes {
}JsonTypes;
struct RequestProcessor {
DWORD get_keepWaitingOffset;
bool (*get_keepWaiting)(void *_instance);
DWORD OnSuccessOffset;
void (*OnSuccess)(void *_instance, monoString *result);
DWORD OnErrorOffset;
void (*OnError)(void *_instance, monoString *error);
}RequestProcessor;
struct RequestsCreator {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OfflineModeDetectedOffset;
void (*OfflineModeDetected)();
DWORD GetWWWFormOffset;
void *(*GetWWWForm)(void *_instance, void *form, bool forcedMessageConfigEnabled, bool addCredentials);
DWORD LogOffset;
void (*Log)(void *_instance, monoString *text);
}RequestsCreator;
struct RequestsHelper {
DWORD BuildRequestWithScriptNameOffset;
void *(*BuildRequestWithScriptName)(monoString *script, void *form);
DWORD BuildRequestWithScriptName1Offset;
void *(*BuildRequestWithScriptName1)(monoString *script, void *form, bool includeUsernameAndPassword);
DWORD BuildUnityWebRequestOffset;
void *(*BuildUnityWebRequest)(monoString *url, void *form);
DWORD BuildUnityWebRequest1Offset;
void *(*BuildUnityWebRequest1)(monoString *url, void *form, bool includeUsernameAndPassword);
DWORD GetWWWFormOffset;
void *(*GetWWWForm)(void *form, bool includeUsernameAndPassword);
}RequestsHelper;
struct ResizeObjects {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD calculateSizeOffset;
void (*calculateSize)(void *_instance);
}ResizeObjects;
struct RespawnScreen {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD LoadImagesAndTextsOffset;
void (*LoadImagesAndTexts)(void *_instance);
DWORD ShowOffset;
void (*Show)(void *_instance);
DWORD RefreshConquestCurrentLoadoutTextOffset;
void (*RefreshConquestCurrentLoadoutText)(void *_instance);
DWORD ShowLoadoutsOffset;
void (*ShowLoadouts)(void *_instance);
DWORD ShowTopCameraOffset;
void (*ShowTopCamera)(void *_instance);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD SetActiveLoadoutOffset;
void (*SetActiveLoadout)(void *_instance, int loadout);
DWORD SetActiveLoadout1Offset;
void (*SetActiveLoadout1)(void *_instance, void *itemTransform);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD DeployOffset;
void (*Deploy)(void *_instance);
DWORD SelectFlagOffset;
void (*SelectFlag)(void *_instance, monoString *flagText);
DWORD IsFlagValidToSpawnOnOffset;
bool (*IsFlagValidToSpawnOn)(void *_instance, int flagID);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdatePlayerCountIfShowingOffset;
void (*UpdatePlayerCountIfShowing)(void *_instance);
}RespawnScreen;
struct ReviewGame {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD CanReviewGameOffset;
bool (*CanReviewGame)(void *_instance);
DWORD TryShowReviewGameAfterTimeOffset;
void (*TryShowReviewGameAfterTime)(void *_instance, float time);
DWORD ShowPopupOffset;
void (*ShowPopup)(void *_instance);
DWORD ReviewOffset;
void (*Review)(void *_instance);
DWORD OnApplicationPauseOffset;
void (*OnApplicationPause)(void *_instance, bool pauseStatus);
DWORD RewardPlayerOffset;
void (*RewardPlayer)(void *_instance);
}ReviewGame;
struct Rotate {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}Rotate;
struct RoundOverStats {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetWinLoseTextOffset;
void (*SetWinLoseText)(void *_instance, monoString *text);
DWORD PrepareToShowVoteMapScreenOffset;
void (*PrepareToShowVoteMapScreen)(void *_instance);
DWORD LoadDamMapAgainOffset;
void (*LoadDamMapAgain)(void *_instance);
DWORD ShowVoteMapScreenOffset;
void (*ShowVoteMapScreen)(void *_instance);
DWORD ShowMapVotedForOffset;
void (*ShowMapVotedFor)(void *_instance, monoString *mapName);
DWORD GetHighestVotedMapOffset;
monoString *(*GetHighestVotedMap)(void *_instance);
DWORD VoteForMapOffset;
void (*VoteForMap)(void *_instance, int mapNumber);
DWORD ShowAdPopupOffset;
void (*ShowAdPopup)(void *_instance);
DWORD WatchAdNowOffset;
void (*WatchAdNow)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}RoundOverStats;
struct ScopeMaterial {
}ScopeMaterial;
struct AvailableMapsSO {
DWORD VerifyMapsControllerOffset;
void (*VerifyMapsController)(void *_instance);
DWORD GetAvailableMapsOffset;
DWORD GetAvailableMapNamesOffset;
DWORD GetMapDisplayNameOffset;
monoString *(*GetMapDisplayName)(void *_instance, int id);
DWORD GetMapFileNameOffset;
monoString *(*GetMapFileName)(void *_instance, int id);
DWORD GetMapCountOffset;
int (*GetMapCount)(void *_instance);
}AvailableMapsSO;
struct AvailableMapsController {
DWORD get_MapsOffset;
}AvailableMapsController;
struct MapInfo {
DWORD get_DiplayNameOffset;
monoString *(*get_DiplayName)(void *_instance);
DWORD get_FileNameOffset;
monoString *(*get_FileName)(void *_instance);
DWORD get_MapSpriteOffset;
void *(*get_MapSprite)(void *_instance);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, monoString *other);
}MapInfo;
struct CategoryBar {
DWORD get_CurrentWeaponCategoryOffset;
int(*get_CurrentWeaponCategory)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnCategoryClickedOffset;
void (*OnCategoryClicked)(void *_instance, void *weaponCatButton);
DWORD UpdateViewToSelectedCategoryOffset;
void (*UpdateViewToSelectedCategory)(void *_instance, int desiredCategory);
DWORD SetToCategoryOffset;
void (*SetToCategory)(void *_instance, int desiredCategory);
DWORD SetActiveOffset;
void (*SetActive)(void *_instance);
DWORD SetInactiveOffset;
void (*SetInactive)(void *_instance);
}CategoryBar;
struct FriendListScriptableObject {
DWORD UpdateFriendsOffset;
void (*UpdateFriends)(void *_instance);
DWORD OnCompleteOffset;
void (*OnComplete)(void *_instance);
DWORD OnFinishOffset;
void (*OnFinish)(void *_instance, monoString *response);
}FriendListScriptableObject;
struct GameModesScriptableObject {
DWORD get_GameModesOffset;
DWORD get_CurrentIndexOffset;
int (*get_CurrentIndex)(void *_instance);
DWORD GetSelectedModeOffset;
monoString *(*GetSelectedMode)(void *_instance);
DWORD GetModeOffset;
monoString *(*GetMode)(void *_instance, int index);
DWORD GetCountOffset;
int (*GetCount)(void *_instance);
DWORD ClickNextOffset;
void (*ClickNext)(void *_instance);
DWORD ClickPrevOffset;
void (*ClickPrev)(void *_instance);
DWORD ChangeIndexOffset;
void (*ChangeIndex)(void *_instance, int delta);
}GameModesScriptableObject;
struct ImageStateInfoScriptableObject {
DWORD SetImageAsSelectedOffset;
void (*SetImageAsSelected)(void *_instance, void *img, bool ignoreSprite);
DWORD SetImageAsDeselectedOffset;
void (*SetImageAsDeselected)(void *_instance, void *img, bool ignoreSprite);
}ImageStateInfoScriptableObject;
struct OpenCaseDataScriptableObject {
DWORD get_ResultOffset;
void *(*get_Result)(void *_instance);
DWORD FeedOffset;
void (*Feed)(void *_instance, monoString *jsonString);
DWORD Feed1Offset;
void (*Feed1)(void *_instance, void *result);
DWORD ClearOffset;
void (*Clear)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}OpenCaseDataScriptableObject;
struct PingColorInfoScriptableObject {
DWORD GetColorOffset;
Color (*GetColor)(void *_instance, int ping);
DWORD GetColorCodeOffset;
monoString *(*GetColorCode)(void *_instance, int ping);
}PingColorInfoScriptableObject;
struct PlayerLoadoutContainer {
DWORD get_PrimaryWeaponOffset;
int(*get_PrimaryWeapon)(void *_instance);
DWORD get_SecondaryWeaponOffset;
int(*get_SecondaryWeapon)(void *_instance);
DWORD get_ThrowableWeaponOffset;
int(*get_ThrowableWeapon)(void *_instance);
DWORD get_CharacterCamoOffset;
int(*get_CharacterCamo)(void *_instance);
DWORD get_PrimaryWeaponCamoOffset;
int(*get_PrimaryWeaponCamo)(void *_instance);
DWORD get_BulletTracerColorOffset;
int(*get_BulletTracerColor)(void *_instance);
DWORD FeedOffset;
void (*Feed)(void *_instance, int primary, int secondary, int throwableWeapon, int characterCamo, int primaryCamo, int bulletTracerColor);
DWORD DebugLoadoutContainerOffset;
void (*DebugLoadoutContainer)(void *_instance);
}PlayerLoadoutContainer;
struct RankTierColorPairSO {
DWORD GetColorOffset;
Color (*GetColor)(void *_instance, int rewardTier);
}RankTierColorPairSO;
struct ColorRankPair {
DWORD GetTierOffset;
int(*GetTier)(void *_instance);
DWORD GetColorOffset;
Color (*GetColor)(void *_instance);
}ColorRankPair;
struct RegionDataCollection {
DWORD GetRegionByShortNameOffset;
void *(*GetRegionByShortName)(void *_instance, monoString *shortName);
DWORD GetRegionByCodeOffset;
void *(*GetRegionByCode)(void *_instance, int code);
DWORD GetRegionByServerOffset;
void *(*GetRegionByServer)(void *_instance, int server);
DWORD GetRegionByLongNameOffset;
void *(*GetRegionByLongName)(void *_instance, monoString *longName);
DWORD GetRegionByServerIPOffset;
void *(*GetRegionByServerIP)(void *_instance, monoString *_serverIP);
}RegionDataCollection;
struct RegionInfoScriptableObject {
DWORD get_RegionLongNameOffset;
monoString *(*get_RegionLongName)(void *_instance);
DWORD get_RegionShortNameOffset;
monoString *(*get_RegionShortName)(void *_instance);
DWORD get_RegionCodeOffset;
int(*get_RegionCode)(void *_instance);
DWORD get_GameServerOffset;
int(*get_GameServer)(void *_instance);
DWORD get_ServerIPOffset;
monoString *(*get_ServerIP)(void *_instance);
}RegionInfoScriptableObject;
struct SpecialOfferContainer {
DWORD get_SpecialOffferOffset;
void *(*get_SpecialOfffer)(void *_instance);
DWORD FeedSpecialOfferOffset;
void (*FeedSpecialOffer)(void *_instance, void *so);
}SpecialOfferContainer;
struct TextStateInfoScriptableObject {
DWORD SetTextAsSelectedOffset;
void (*SetTextAsSelected)(void *_instance, void *txt, bool ignoreFont);
DWORD SetTextAsDeselectedOffset;
void (*SetTextAsDeselected)(void *_instance, void *txt, bool ignoreFont);
}TextStateInfoScriptableObject;
struct UnlockedPlayerCamosScriptableObject {
DWORD get_UnlockedCamosOffset;
DWORD get_UnlockedWeaponSkinsOffset;
DWORD ReturnNewlyUnlockedCamosOffset;
DWORD ReturnNewlyUnlockedWeaponSkinsOffset;
}UnlockedPlayerCamosScriptableObject;
struct WeaponCategoryInfo {
DWORD get_WeaponCategoryOffset;
int(*get_WeaponCategory)(void *_instance);
DWORD SetTextTitleOffset;
void (*SetTextTitle)(void *_instance, void *text, int unlockedWeapons, int totalWeapons);
DWORD GetNumberStringsOffset;
monoString *(*GetNumberStrings)(void *_instance, int unlockedWeapons, int totalWeapons);
DWORD SetWeaponSpriteOffset;
void (*SetWeaponSprite)(void *_instance, void *image);
}WeaponCategoryInfo;
struct SeasonCaseReward {
DWORD SetRewardOffset;
void (*SetReward)(void *_instance, void *reward);
DWORD ToggleImageOffset;
void (*ToggleImage)(void *_instance, int rewardType);
DWORD GetTitleOffset;
monoString *(*GetTitle)(void *_instance, void *reward);
}SeasonCaseReward;
struct SeasonCurrencyReward {
DWORD SetRewardOffset;
void (*SetReward)(void *_instance, void *reward);
DWORD ToggleImagesOffset;
void (*ToggleImages)(void *_instance, int rewardType);
DWORD GetTitleOffset;
monoString *(*GetTitle)(void *_instance, void *reward);
}SeasonCurrencyReward;
struct SeasonRewardAbstract {
DWORD SetTitleOffset;
void (*SetTitle)(void *_instance, void *reward);
}SeasonRewardAbstract;
struct SeasonSkinReward {
DWORD SetRewardOffset;
void (*SetReward)(void *_instance, void *reward);
DWORD SetCamoOffset;
void (*SetCamo)(void *_instance, void *reward);
DWORD GetTitleOffset;
monoString *(*GetTitle)(void *_instance, void *reward);
}SeasonSkinReward;
struct SeasonWeaponReward {
DWORD SetRewardOffset;
void (*SetReward)(void *_instance, void *reward);
DWORD SetWeaponOffset;
void (*SetWeapon)(void *_instance, void *reward);
DWORD GetTitleOffset;
monoString *(*GetTitle)(void *_instance, void *reward);
}SeasonWeaponReward;
struct DisplaySeasonRewards {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD InstantiateRewardsOffset;
void (*InstantiateRewards)(void *_instance, void *seasonRewardInfo);
}DisplaySeasonRewards;
struct RewardTierController {
DWORD SetUpOffset;
void (*SetUp)(void *_instance, void *rewardEntry, bool ignoreTitle);
}RewardTierController;
struct SeasonRewardInfoController {
DWORD FetchRewardAvailabilityOffset;
void (*FetchRewardAvailability)(void *_instance);
DWORD LoadRewardsOffset;
void (*LoadRewards)(void *_instance);
DWORD OnLoadingSuccessOffset;
void (*OnLoadingSuccess)(void *_instance);
DWORD OnLoadingErrorOffset;
void (*OnLoadingError)(void *_instance, monoString *results);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}SeasonRewardInfoController;
struct BFSeasonRewardsPrefabContainerSO {
DWORD GetRewardPrefabOffset;
void *(*GetRewardPrefab)(void *_instance, int rewardType);
}BFSeasonRewardsPrefabContainerSO;
struct WS_AvailableSeasonsSO {
DWORD DebugJsonOffset;
void (*DebugJson)(void *_instance);
}WS_AvailableSeasonsSO;
struct WS_CheckForRewardSO {
DWORD DebugJsonOffset;
void (*DebugJson)(void *_instance);
}WS_CheckForRewardSO;
struct WS_CurrentSeasonInfoSO {
DWORD DebugJsonOffset;
void (*DebugJson)(void *_instance);
DWORD GetEventNameOffset;
monoString *(*GetEventName)(void *_instance);
DWORD GetGameModeOffset;
monoString *(*GetGameMode)(void *_instance);
DWORD GetEventCodeOffset;
int (*GetEventCode)(void *_instance);
DWORD GetKilledTextOffset;
monoString *(*GetKilledText)(void *_instance);
DWORD GetAllowedWeaponsOffset;
}WS_CurrentSeasonInfoSO;
struct WS_EventLeaderboardSO {
DWORD DebugJsonOffset;
void (*DebugJson)(void *_instance);
}WS_EventLeaderboardSO;
struct WS_SeasonRewardCasesSO {
DWORD FeedOffset;
void (*Feed)(void *_instance, void *_content);
DWORD GetCountOffset;
int (*GetCount)(void *_instance);
DWORD PopCaseOffset;
void *(*PopCase)(void *_instance);
DWORD RemoveOneCaseOffset;
void (*RemoveOneCase)(void *_instance);
DWORD GetRewardOffset;
void *(*GetReward)(void *_instance);
DWORD SaveOffset;
void (*Save)(void *_instance);
DWORD LoadOffset;
void (*Load)(void *_instance);
DWORD DebugJsonOffset;
void (*DebugJson)(void *_instance);
}WS_SeasonRewardCasesSO;
struct WS_SeasonRewardsSO {
DWORD get_RewardInfoOffset;
void *(*get_RewardInfo)(void *_instance);
DWORD DebugJsonOffset;
void (*DebugJson)(void *_instance);
}WS_SeasonRewardsSO;
struct SeasonRewardChecker {
DWORD CheckForRewardOffset;
void (*CheckForReward)(void *_instance);
DWORD FetchRewardAvailabilityOffset;
void (*FetchRewardAvailability)(void *_instance);
DWORD OnCheckRewardSuccessfulOffset;
void (*OnCheckRewardSuccessful)(void *_instance);
DWORD OnCheckRewardFailedOffset;
void (*OnCheckRewardFailed)(void *_instance, monoString *response);
DWORD OnFetchRewardsSuccessOffset;
void (*OnFetchRewardsSuccess)(void *_instance);
DWORD OnFetchRewardsFailedOffset;
void (*OnFetchRewardsFailed)(void *_instance, monoString *response);
}SeasonRewardChecker;
struct SeasonsContainerController {
DWORD LoadSeasonInfoOffset;
void (*LoadSeasonInfo)(void *_instance, void *_eventInfo);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD GetCurrentDateOffset;
DWORD SwitchViewToStateOffset;
void (*SwitchViewToState)(void *_instance, int state);
DWORD SetPreComingSoonViewOffset;
void (*SetPreComingSoonView)(void *_instance);
DWORD ActivateInfoButtonsOffset;
void (*ActivateInfoButtons)(void *_instance);
DWORD GetNextEventLabelOffset;
monoString *(*GetNextEventLabel)(void *_instance, void *seasonInfo, int eventState);
DWORD SetInProgressViewOffset;
void (*SetInProgressView)(void *_instance);
DWORD SetPostComingSoonViewOffset;
void (*SetPostComingSoonView)(void *_instance);
DWORD SetExpiredComingSoonOffset;
void (*SetExpiredComingSoon)(void *_instance);
DWORD SetInvalidOffset;
void (*SetInvalid)(void *_instance);
DWORD OpenEventOffset;
void (*OpenEvent)(void *_instance);
DWORD OpenInfoOffset;
void (*OpenInfo)(void *_instance);
DWORD OpenComingSoonOffset;
void (*OpenComingSoon)(void *_instance);
DWORD OnSuccessSeasonInfoRequestOffset;
void (*OnSuccessSeasonInfoRequest)(void *_instance);
DWORD OnErrorSeasonInfoRequestOffset;
void (*OnErrorSeasonInfoRequest)(void *_instance, monoString *response);
DWORD SetTitleLabelOffset;
void (*SetTitleLabel)(void *_instance, void *seasonInfo);
DWORD SetGameModeLabelOffset;
void (*SetGameModeLabel)(void *_instance, void *seasonInfo);
DWORD LoadEventImageOffset;
void *(*LoadEventImage)(void *_instance, monoString *link);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
}SeasonsContainerController;
struct WS_CurrentSeasonInfo {
DWORD get_StartDateOffset;
DWORD get_EndDateOffset;
DWORD get_NextStartOffset;
DWORD get_NumberOffset;
int (*get_Number)(void *_instance);
DWORD get_IDOffset;
int (*get_ID)(void *_instance);
DWORD get_EventCodeOffset;
int (*get_EventCode)(void *_instance);
DWORD get_EventNameOffset;
monoString *(*get_EventName)(void *_instance);
DWORD get_GameModeOffset;
monoString *(*get_GameMode)(void *_instance);
DWORD get_KilledTextOffset;
monoString *(*get_KilledText)(void *_instance);
DWORD get_ImageURLOffset;
monoString *(*get_ImageURL)(void *_instance);
DWORD CanUserPlaySeasonOffset;
bool (*CanUserPlaySeason)(void *_instance);
DWORD GetEventInfoOffset;
void *(*GetEventInfo)(void *_instance);
DWORD GetAllowedWeaponsOffset;
DWORD GetTimeStampOffset;
int(*GetTimeStamp)(void *_instance, int eventState);
}WS_CurrentSeasonInfo;
struct WS_CurrentSeasonModel {
DWORD GetDebugDataOffset;
monoString *(*GetDebugData)(void *_instance);
DWORD onSuccessGetRequestsOffset;
void (*onSuccessGetRequests)(void *_instance, monoString *_jsonString);
DWORD GetSeasonInfoOffset;
void *(*GetSeasonInfo)(void *_instance);
}WS_CurrentSeasonModel;
struct WS_CheckForReward {
DWORD IsRewardAvailableOffset;
bool (*IsRewardAvailable)(void *_instance);
DWORD GetRewardTierOffset;
int(*GetRewardTier)(void *_instance);
DWORD GetSeasonIdOffset;
int (*GetSeasonId)(void *_instance);
}WS_CheckForReward;
struct WS_CheckForRewardModel {
DWORD GetDebugDataOffset;
monoString *(*GetDebugData)(void *_instance);
DWORD onSuccessGetRequestsOffset;
void (*onSuccessGetRequests)(void *_instance, monoString *_jsonString);
DWORD GetResponseOffset;
void *(*GetResponse)(void *_instance);
}WS_CheckForRewardModel;
struct WS_EventLeaderboard {
DWORD GetUsersOffset;
DWORD GetTotalPlayersOffset;
int (*GetTotalPlayers)(void *_instance);
}WS_EventLeaderboard;
struct WS_EventLeaderboardModel {
DWORD GetDebugDataOffset;
monoString *(*GetDebugData)(void *_instance);
DWORD onSuccessGetRequestsOffset;
void (*onSuccessGetRequests)(void *_instance, monoString *_jsonString);
DWORD GetLeaderboardOffset;
void *(*GetLeaderboard)(void *_instance);
}WS_EventLeaderboardModel;
struct WS_GetAvailableSeason {
DWORD GetAvailableSeasonsOffset;
DWORD GetSeasonNamesOffset;
}WS_GetAvailableSeason;
struct ShortSeasonInfo {
DWORD get_IDOffset;
int (*get_ID)(void *_instance);
DWORD GetDropdownNameOffset;
monoString *(*GetDropdownName)(void *_instance);
DWORD GetIsActiveOffset;
bool (*GetIsActive)(void *_instance);
}ShortSeasonInfo;
struct WS_GetAvailableSeasonModel {
DWORD GetDebugDataOffset;
monoString *(*GetDebugData)(void *_instance);
DWORD onSuccessGetRequestsOffset;
void (*onSuccessGetRequests)(void *_instance, monoString *_jsonString);
DWORD GetAvailableSeasonsOffset;
void *(*GetAvailableSeasons)(void *_instance);
}WS_GetAvailableSeasonModel;
struct WS_SeasonRewardCases {
DWORD GetCountOffset;
int (*GetCount)(void *_instance);
DWORD GetRewardOffset;
void *(*GetReward)(void *_instance);
DWORD RemoveOneRewardOffset;
void (*RemoveOneReward)(void *_instance);
DWORD GetStatusOffset;
int (*GetStatus)(void *_instance);
DWORD GetMessageOffset;
monoString *(*GetMessage)(void *_instance);
DWORD RemoveOneRewardb__5_0Offset;
bool (*RemoveOneRewardb__5_0)(void *_instance, void *w);
}WS_SeasonRewardCases;
struct WS_CaseReward {
DWORD GetJsonOffset;
monoString *(*GetJson)(void *_instance);
}WS_CaseReward;
struct WS_SeasonRewardCasesModel {
DWORD GetDebugDataOffset;
monoString *(*GetDebugData)(void *_instance);
DWORD onSuccessGetRequestsOffset;
void (*onSuccessGetRequests)(void *_instance, monoString *_jsonString);
DWORD GetResponseOffset;
void *(*GetResponse)(void *_instance);
}WS_SeasonRewardCasesModel;
struct SeasonRewardInfo {
DWORD GetRewardsTiersOffset;
DWORD GetTierOffset;
void *(*GetTier)(void *_instance, int tier);
}SeasonRewardInfo;
struct SeasonRewardTier {
DWORD GetTierOffset;
int(*GetTier)(void *_instance);
DWORD GetTitleOffset;
monoString *(*GetTitle)(void *_instance);
DWORD GetSeasonRewardsOffset;
}SeasonRewardTier;
struct WS_SeasonReward {
DWORD GetRewardTypeOffset;
int(*GetRewardType)(void *_instance);
DWORD GetRewardCodeOffset;
int (*GetRewardCode)(void *_instance);
}WS_SeasonReward;
struct WS_SeasonRewardsModel {
DWORD GetDebugDataOffset;
monoString *(*GetDebugData)(void *_instance);
DWORD onSuccessGetRequestsOffset;
void (*onSuccessGetRequests)(void *_instance, monoString *_jsonString);
DWORD GetSeasonInfoOffset;
void *(*GetSeasonInfo)(void *_instance);
}WS_SeasonRewardsModel;
struct SensitivityScript {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD setSensitivityOffset;
void (*setSensitivity)(void *_instance, float s);
DWORD setAimingSensitivityOffset;
void (*setAimingSensitivity)(void *_instance, float s);
}SensitivityScript;
struct SetOtherGameObjectActive {
DWORD SetGameObjectActiveOffset;
void (*SetGameObjectActive)(void *_instance, bool active);
}SetOtherGameObjectActive;
struct SetPlayerPrefs {
DWORD SetIntValueOffset;
void (*SetIntValue)(void *_instance, monoString *key, int value);
DWORD SetFloatValueOffset;
void (*SetFloatValue)(void *_instance, monoString *key, float value);
}SetPlayerPrefs;
struct SetRenderQueueForMaterial {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}SetRenderQueueForMaterial;
struct ChangeUsernamePopup {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnCancelClickedOffset;
void (*OnCancelClicked)(void *_instance);
DWORD ShowErrorOffset;
void (*ShowError)(void *_instance, monoString *error);
DWORD OnSaveClickedOffset;
void (*OnSaveClicked)(void *_instance);
DWORD RequestNameChangeOffset;
void *(*RequestNameChange)(void *_instance, monoString *newName);
}ChangeUsernamePopup;
struct ChangeUsernameTextInputController {
DWORD SetValidOffset;
void (*SetValid)(void *_instance);
DWORD SetInvalidOffset;
void (*SetInvalid)(void *_instance);
}ChangeUsernameTextInputController;
struct InitClanTagOnEnable {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}InitClanTagOnEnable;
struct ShakeCamera {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD DoShakeOffset;
void (*DoShake)(void *_instance, float intensity);
}ShakeCamera;
struct ShootScript {
DWORD IsPlayerOnTeamOffset;
bool (*IsPlayerOnTeam)(void *_instance, void *p);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}ShootScript;
struct Sidebar {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD HideAllSelectionsOffset;
void (*HideAllSelections)(void *_instance);
DWORD ClearSpecialOfferNotificationsOffset;
void (*ClearSpecialOfferNotifications)(void *_instance);
DWORD SpecialOfferAvailableOnIndexOffset;
void (*SpecialOfferAvailableOnIndex)(void *_instance, int index);
DWORD LoadSceneOffset;
void *(*LoadScene)(void *_instance, monoString *sceneName);
DWORD LoadLoginOffset;
void (*LoadLogin)(void *_instance);
DWORD SetErrorMessageOnSceneLoadOffset;
void (*SetErrorMessageOnSceneLoad)(void *_instance, monoString *message);
DWORD LoadRegisterOffset;
void (*LoadRegister)(void *_instance);
DWORD LoadMultiplayerOffset;
void (*LoadMultiplayer)(void *_instance);
DWORD LoadSingleplayerOffset;
void (*LoadSingleplayer)(void *_instance);
DWORD TutorialButtonPressedOffset;
void (*TutorialButtonPressed)(void *_instance);
DWORD LoadLinksOffset;
void (*LoadLinks)(void *_instance);
DWORD LoadSettingsOffset;
void (*LoadSettings)(void *_instance);
DWORD LoadProfileOffset;
void (*LoadProfile)(void *_instance);
DWORD LoadCustomizeOffset;
void (*LoadCustomize)(void *_instance);
DWORD LoadShopOffset;
void (*LoadShop)(void *_instance);
DWORD LoadGoldShopOffset;
void (*LoadGoldShop)(void *_instance);
DWORD LoadCreditsShopOffset;
void (*LoadCreditsShop)(void *_instance);
DWORD LoadDealsShopOffset;
void (*LoadDealsShop)(void *_instance);
DWORD LoadCaseShopOffset;
void (*LoadCaseShop)(void *_instance);
DWORD LoadOpenCaseOffset;
void (*LoadOpenCase)(void *_instance);
DWORD LoadMainMenuOffset;
void (*LoadMainMenu)(void *_instance);
DWORD SetButtonsDisabledOffset;
void (*SetButtonsDisabled)(void *_instance, bool disabled);
DWORD SetGoldOffset;
void (*SetGold)(void *_instance, int amt);
DWORD SetCreditsOffset;
void (*SetCredits)(void *_instance, int amt);
DWORD SetUsernameOffset;
void (*SetUsername)(void *_instance, monoString *name);
DWORD RefreshCreditsOffset;
void (*RefreshCredits)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}Sidebar;
struct SimpleUIElementsManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}SimpleUIElementsManager;
struct SingleplayerMenu {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD NextOffset;
void (*Next)(void *_instance);
DWORD PreviousOffset;
void (*Previous)(void *_instance);
DWORD MoveToIndexOffset;
void (*MoveToIndex)(void *_instance, int i);
DWORD StartPracticeOffset;
void (*StartPractice)(void *_instance);
DWORD StartPracticeAfterTimeOffset;
void *(*StartPracticeAfterTime)(void *_instance, float time);
DWORD OnRunTutorialOffset;
void (*OnRunTutorial)(void *_instance);
DWORD DisconectOffset;
void (*Disconect)(void *_instance);
}SingleplayerMenu;
struct SkinnedMeshCombiner {
DWORD StartOffset;
void (*Start)(void *_instance);
}SkinnedMeshCombiner;
struct SkirmishMenu {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetKillsToWinOffset;
void (*SetKillsToWin)(void *_instance, float killsToWin);
DWORD SetEnemiesOffset;
void (*SetEnemies)(void *_instance, float enemies);
DWORD SetMapToLoadWithIndexOffset;
void (*SetMapToLoadWithIndex)(void *_instance, int i);
DWORD LoadMapOffset;
void (*LoadMap)(void *_instance);
}SkirmishMenu;
struct FTPHelper {
}FTPHelper;
struct FacebookShareButton {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD FailSafeOffset;
void (*FailSafe)(void *_instance);
DWORD ShareScreenshotWithUserNameOffset;
void (*ShareScreenshotWithUserName)(void *_instance);
DWORD TakeScreenshotOffset;
void *(*TakeScreenshot)(void *_instance);
DWORD ShareOnFacebookOffset;
void *(*ShareOnFacebook)(void *_instance, monoString *rootPath, monoString *fileName);
}FacebookShareButton;
struct HtmlHelper {
DWORD BuildHtmlOffset;
}HtmlHelper;
struct SoundOptions {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitVolumeOffset;
void (*InitVolume)();
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetVolumeOffset;
void (*SetVolume)(void *_instance, float s);
DWORD SetVolumeStaticOffset;
void (*SetVolumeStatic)(float s);
DWORD get_MusicVolumeOffset;
float (*get_MusicVolume)();
}SoundOptions;
struct SpecialBatch {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}SpecialBatch;
struct SpecialBatchBatcher {
DWORD CombineOffset;
void (*Combine)(void *_instance, bool specialQueues, bool combineAll);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD CombineMeshesDontBatchOffset;
void (*CombineMeshesDontBatch)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}SpecialBatchBatcher;
struct SpecialOfferButton {
DWORD PurchaseOffset;
void (*Purchase)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD RefreshPriceTextOffset;
void (*RefreshPriceText)(void *_instance);
}SpecialOfferButton;
struct FlyingSpectateMode {
DWORD OnEnterOffset;
void (*OnEnter)(void *_instance);
}FlyingSpectateMode;
struct PlayersSpectateMode {
DWORD OnEnterOffset;
void (*OnEnter)(void *_instance);
DWORD AddPlayerOffset;
void (*AddPlayer)(void *_instance, void *player);
DWORD RemovePlayerOffset;
void (*RemovePlayer)(void *_instance, void *player);
DWORD OnLeftArrowPressedOffset;
void (*OnLeftArrowPressed)(void *_instance);
DWORD swapSpectatedOffset;
void (*swapSpectated)(void *_instance, bool next);
DWORD OnRightArrowPressedOffset;
void (*OnRightArrowPressed)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD getTeamColorOffset;
int(*getTeamColor)(void *_instance);
DWORD UpdateEveryFrameDataOffset;
void (*UpdateEveryFrameData)(void *_instance, int teamColor);
}PlayersSpectateMode;
struct SpectateInfoDisplayer {
DWORD get_UserLabelOffset;
void *(*get_UserLabel)(void *_instance);
DWORD get_UserRankOffset;
void *(*get_UserRank)(void *_instance);
DWORD get_KillCountOffset;
void *(*get_KillCount)(void *_instance);
DWORD get_DeadCountOffset;
void *(*get_DeadCount)(void *_instance);
DWORD get_KDcountOffset;
void *(*get_KDcount)(void *_instance);
DWORD get_RankLabelOffset;
void *(*get_RankLabel)(void *_instance);
DWORD get_HealthLabelOffset;
void *(*get_HealthLabel)(void *_instance);
DWORD get_WeaponInfoOffset;
void *(*get_WeaponInfo)(void *_instance);
DWORD SetupActiveOffset;
void (*SetupActive)(void *_instance);
DWORD SetupInactiveOffset;
void (*SetupInactive)(void *_instance);
}SpectateInfoDisplayer;
struct SpectateManager {
DWORD get_PlayersSpectateModeOffset;
void *(*get_PlayersSpectateMode)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD EnableSpectateForModsOnlyOffset;
void (*EnableSpectateForModsOnly)(void *_instance);
DWORD OnSpectateStartOffset;
void (*OnSpectateStart)(void *_instance);
DWORD OnSpectateEndOffset;
void (*OnSpectateEnd)(void *_instance);
DWORD EnableSpectateForPlayerOffset;
bool (*EnableSpectateForPlayer)(void *_instance);
DWORD DisableHUDOffset;
void (*DisableHUD)(void *_instance);
DWORD OnPauseEnabledOffset;
void (*OnPauseEnabled)(void *_instance);
DWORD OnPauseDisabledOffset;
void (*OnPauseDisabled)(void *_instance);
DWORD OnSpectateModeToggleOffset;
void (*OnSpectateModeToggle)(void *_instance);
DWORD DisableSpectateWidgetsOffset;
void (*DisableSpectateWidgets)(void *_instance);
DWORD OnLeftArrowPressedOffset;
void (*OnLeftArrowPressed)(void *_instance);
DWORD OnRightArrowPressedOffset;
void (*OnRightArrowPressed)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD IsSpectatingOffset;
bool (*IsSpectating)(void *_instance);
}SpectateManager;
struct SpectateMode {
}SpectateMode;
struct Spectator {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD UpdatePlayerOffset;
void (*UpdatePlayer)(void *_instance);
DWORD UpdateLevelOffset;
void (*UpdateLevel)(void *_instance);
DWORD HandleMouseMovementOffset;
void (*HandleMouseMovement)(void *_instance);
}Spectator;
struct SprintButton {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
DWORD StopSprintingOffset;
void (*StopSprinting)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
DWORD ChangeToggleStateOffset;
void (*ChangeToggleState)(void *_instance, bool state);
}SprintButton;
struct SprintButtonToggle {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetEnabledOffset;
void (*SetEnabled)(void *_instance, bool e);
DWORD ToggleChangedOffset;
void (*ToggleChanged)(void *_instance, bool value);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}SprintButtonToggle;
struct SignatureGetter {
}SignatureGetter;
struct MeshColliderSignatureGetter {
DWORD GetSignatureOffset;
int (*GetSignature)(void *_instance, void *unityObject);
DWORD GetStateOffset;
monoString *(*GetState)(void *_instance, void *unityObject);
DWORD GetSignatureTypeOffset;
void *(*GetSignatureType)(void *_instance);
}MeshColliderSignatureGetter;
struct SignedObjects {
}SignedObjects;
struct StateEnforcer {
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD EnforceStateOffset;
void *(*EnforceState)(void *_instance);
}StateEnforcer;
struct StateUtils {
DWORD GetSignatureOffset;
int (*GetSignature)(float floatValue);
DWORD GetSignature1Offset;
int (*GetSignature1)(int boundsValue);
DWORD GetSignature2Offset;
int (*GetSignature2)(bool boolValue);
DWORD GetSignature3Offset;
int (*GetSignature3)(monoString *stringValue);
DWORD GetSignature4Offset;
int (*GetSignature4)(void *transformValue);
DWORD GetSignature5Offset;
int (*GetSignature5)(void *objectValue);
}StateUtils;
struct StatsPage {
DWORD GetKDOffset;
float (*GetKD)();
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnCopyPlayerIDOffset;
void (*OnCopyPlayerID)(void *_instance);
DWORD SetTabOffset;
void (*SetTab)(void *_instance, int index);
DWORD CallGetUserBadgeOffset;
void (*CallGetUserBadge)(void *_instance);
DWORD OnSuccessGetUserBadgeOffset;
void (*OnSuccessGetUserBadge)(void *_instance, monoString *_jsonMessage);
DWORD OnErrorOffset;
void (*OnError)(void *_instance, monoString *_errorMessage);
}StatsPage;
struct StorePlayerJoinData {
}StorePlayerJoinData;
struct StoreAntiHack {
DWORD GetRoomPrefixOffset;
monoString *(*GetRoomPrefix)(void *_instance, void *room);
DWORD RegisterPlayerInStoreMatchOffset;
void *(*RegisterPlayerInStoreMatch)(void *_instance, monoString *roomID, monoString *matchName, int gameServer);
DWORD OnPlayerJoinedOffset;
void (*OnPlayerJoined)(void *_instance, void *player);
DWORD OnPlayerLeftOffset;
void (*OnPlayerLeft)(void *_instance, void *player);
DWORD CheckHackersOffset;
void *(*CheckHackers)(void *_instance);
DWORD LogOffset;
void (*Log)(void *_instance, monoString *message);
DWORD GetInstanceOffset;
void *(*GetInstance)();
}StoreAntiHack;
struct StoreConfig {
DWORD get_CurrentStoreOffset;
int(*get_CurrentStore)();
DWORD InitOffset;
void (*Init)();
}StoreConfig;
struct Suppression {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SuppressOffset;
void (*Suppress)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}Suppression;
struct SwitchServerDynamicallyManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ChangeToProdOffset;
void (*ChangeToProd)(void *_instance);
DWORD ChangeToDevOffset;
void (*ChangeToDev)(void *_instance);
DWORD ChangeServerOffset;
void (*ChangeServer)(void *_instance, bool prod, bool dev);
}SwitchServerDynamicallyManager;
struct SwitchWeapon {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD PopulateWeaponSpritesOffset;
void (*PopulateWeaponSprites)(void *_instance);
DWORD GetWeaponSpriteOffset;
void *(*GetWeaponSprite)(void *_instance, int t);
DWORD GetWeaponSprite1Offset;
void *(*GetWeaponSprite1)(void *_instance, int t);
DWORD IsPointInsideOffset;
bool (*IsPointInside)(void *_instance, Vector2 point);
DWORD refreshSpriteOffset;
void (*refreshSprite)(void *_instance);
DWORD SetCorrectSizesOffset;
void (*SetCorrectSizes)(void *_instance);
DWORD UIScaleChangedOffset;
void (*UIScaleChanged)(void *_instance, float s);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
DWORD OnBeginDragOffset;
void (*OnBeginDrag)(void *_instance, void *data);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}SwitchWeapon;
struct SwitchWeaponSprites {
DWORD GetWeaponSpriteInfoOffset;
void *(*GetWeaponSpriteInfo)(void *_instance, int _weaponNum);
DWORD GetWeaponSpriteInfo1Offset;
void *(*GetWeaponSpriteInfo1)(void *_instance, int _weaponType);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}SwitchWeaponSprites;
struct TabList {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetFreeForAllOffset;
void (*SetFreeForAll)(void *_instance);
DWORD addItemOffset;
void *(*addItem)(void *_instance, monoString *username, int kills, int deaths, int rounds, void *player);
DWORD removeItemOffset;
void (*removeItem)(void *_instance, void *item);
DWORD ResortDataForSideOffset;
void (*ResortDataForSide)(void *_instance, bool teamSide);
DWORD ResortFFADataOffset;
void (*ResortFFAData)(void *_instance);
DWORD ResortDataOnSideWithTransformOffset;
void (*ResortDataOnSideWithTransform)(void *_instance, void *content);
DWORD resortDataOffset;
void (*resortData)(void *_instance);
DWORD GetTopPlayerOffset;
void *(*GetTopPlayer)(void *_instance);
DWORD showOffset;
void (*show)(void *_instance, bool shouldShow);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD ToggleShownOffset;
void (*ToggleShown)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}TabList;
struct TabListButton {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}TabListButton;
struct TabListItem {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateRankOffset;
void (*UpdateRank)(void *_instance, int rank);
DWORD get_isLocalPlayerOffset;
bool (*get_isLocalPlayer)(void *_instance);
DWORD set_isLocalPlayerOffset;
void (*set_isLocalPlayer)(void *_instance, bool value);
DWORD UpdateLivingStatusOffset;
void (*UpdateLivingStatus)(void *_instance, bool isLiving);
DWORD SetRankOnScoreboardOffset;
void (*SetRankOnScoreboard)(void *_instance, int rank);
DWORD UpdateIsOnTeamOffset;
void (*UpdateIsOnTeam)(void *_instance, bool onTeam);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD UpdatePingOffset;
void (*UpdatePing)(void *_instance, int ping);
DWORD updateUsernameOffset;
void (*updateUsername)(void *_instance, monoString *name);
DWORD updateNumberOfKillsOffset;
void (*updateNumberOfKills)(void *_instance, int k);
DWORD updateNumberOfDeathsOffset;
void (*updateNumberOfDeaths)(void *_instance, int d);
DWORD updateNumberOfRoundsOffset;
void (*updateNumberOfRounds)(void *_instance, int r);
DWORD AddSelectionListenerOffset;
void (*AddSelectionListener)(void *_instance, void *itemGO);
DWORD OnItemSelectedOffset;
void (*OnItemSelected)(void *_instance, void *eventData);
DWORD SearchIfFriendOffset;
void (*SearchIfFriend)(void *_instance, monoString *rawUsername);
DWORD onCompleteSearchPeopleOffset;
void (*onCompleteSearchPeople)(void *_instance);
DWORD onErrorOffset;
void (*onError)(void *_instance, monoString *result);
}TabListItem;
struct TapResearchController {
DWORD OnTapResearchInitializedOffset;
void (*OnTapResearchInitialized)();
DWORD IsTapResearchInitializedOffset;
bool (*IsTapResearchInitialized)();
DWORD get_tapResearchPlacementIdentifierOffset;
monoString *(*get_tapResearchPlacementIdentifier)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD InitializeSurveyOffset;
void (*InitializeSurvey)(void *_instance);
DWORD OnTapResearchPlacementReadyOffset;
void (*OnTapResearchPlacementReady)(void *_instance, void *placement);
DWORD OnTapResearchReceiveRewardOffset;
void (*OnTapResearchReceiveReward)(void *_instance, void *reward);
DWORD OnTapResearchSurveyWallOpenedOffset;
void (*OnTapResearchSurveyWallOpened)(void *_instance, void *placement);
DWORD OnTapResearchSurveyWallDismissedOffset;
void (*OnTapResearchSurveyWallDismissed)(void *_instance, void *placement);
DWORD SurveyCompleteOffset;
void (*SurveyComplete)(void *_instance);
DWORD TapResearchButtonPressedOffset;
void (*TapResearchButtonPressed)(void *_instance);
}TapResearchController;
struct TeamSpawnArea {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD IsInsideOffset;
bool (*IsInside)(void *_instance, void *test, Vector3 point);
DWORD IsInsideSpawnOffset;
bool (*IsInsideSpawn)(void *_instance, Vector3 point);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}TeamSpawnArea;
struct TextScaleDown {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD PlayOffset;
void (*Play)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}TextScaleDown;
struct ThirtyFPSMode {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD IsEnabledOffset;
bool (*IsEnabled)();
DWORD SetEnabledOffset;
void (*SetEnabled)(bool enabled);
DWORD SetDropdownOffset;
void (*SetDropdown)(void *_instance, int thirtyFPSStatus);
}ThirtyFPSMode;
struct ThrowingArms {
}ThrowingArms;
struct ThrownWeapon {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ThrowOffset;
void (*Throw)(void *_instance, Vector3 position, Vector3 velocity, int netID);
DWORD OnCollisionEnterOffset;
void (*OnCollisionEnter)(void *_instance, void *collision);
DWORD FixedUpdateOffset;
void (*FixedUpdate)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD DisableSelfOffset;
void (*DisableSelf)(void *_instance);
}ThrownWeapon;
struct ToggleActivity {
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}ToggleActivity;
struct TopCamera {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ShowOffset;
void (*Show)(void *_instance, bool shouldShow);
DWORD ShowFlagsOffset;
void (*ShowFlags)(void *_instance, bool shouldShow);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}TopCamera;
struct TouchDeltaManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD GetTouchWithIDOffset;
int(*GetTouchWithID)(void *_instance, int fingerID);
DWORD FillTouchesListOffset;
void (*FillTouchesList)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}TouchDeltaManager;
struct TrackObject {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}TrackObject;
struct TrailRendererHelper {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD get_TrailEnabledOffset;
bool (*get_TrailEnabled)(void *_instance);
DWORD set_TrailEnabledOffset;
void (*set_TrailEnabled)(void *_instance, bool value);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD ResetTrailsOffset;
void *(*ResetTrails)(void *_instance);
}TrailRendererHelper;
struct TranslateDropdownOptions {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}TranslateDropdownOptions;
struct OutOfBoundController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD IsInsideOffset;
bool (*IsInside)(void *_instance, void *test, Vector3 point);
DWORD IsInsideSpawnOffset;
bool (*IsInsideSpawn)(void *_instance, Vector3 point);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}OutOfBoundController;
struct PlaceToReach {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}PlaceToReach;
struct TutorialButton {
DWORD get_expandRetractOffset;
bool (*get_expandRetract)(void *_instance);
DWORD set_expandRetractOffset;
void (*set_expandRetract)(void *_instance, bool value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}TutorialButton;
struct TutorialController {
DWORD get_botsDownOffset;
int (*get_botsDown)(void *_instance);
DWORD set_botsDownOffset;
void (*set_botsDown)(void *_instance, int value);
DWORD get_CounterForSpecificTasksOffset;
int (*get_CounterForSpecificTasks)(void *_instance);
DWORD set_CounterForSpecificTasksOffset;
void (*set_CounterForSpecificTasks)(void *_instance, int value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD DoTutorialOffset;
void *(*DoTutorial)(void *_instance);
DWORD OnExecutePhaseTwoOffset;
void (*OnExecutePhaseTwo)(void *_instance);
DWORD OnBotDownOffset;
void (*OnBotDown)(void *_instance);
DWORD GoToMainMenuOffset;
void (*GoToMainMenu)(void *_instance);
DWORD InstantiateBotOffset;
void (*InstantiateBot)(void *_instance);
DWORD UpdateAmmoOffset;
void (*UpdateAmmo)(void *_instance);
DWORD TaskDoneOffset;
void (*TaskDone)(int task);
DWORD OnSkipTutorialButtonPressedOffset;
void (*OnSkipTutorialButtonPressed)(void *_instance);
DWORD DisableMoveToObjOffset;
void (*DisableMoveToObj)(void *_instance);
}TutorialController;
struct TutorialUIController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetOverlayTextOffset;
void (*SetOverlayText)(void *_instance, monoString *text, bool hideDescAutomatically);
DWORD HideDescAfterTimeOffset;
void *(*HideDescAfterTime)(void *_instance, float time);
DWORD ShowAfterRespawnPopupOffset;
void (*ShowAfterRespawnPopup)(void *_instance);
DWORD OnPhaseOneEndedOffset;
void (*OnPhaseOneEnded)(void *_instance);
DWORD SetUIForTutorialTaskOffset;
void (*SetUIForTutorialTask)(void *_instance, int currentTask, monoString *title, monoString *popupDesc, monoString *secondDesc, monoString *overlayText, void *buttonToOverlapWBackground);
DWORD ShowAnimatedImageOffset;
void (*ShowAnimatedImage)(void *_instance);
DWORD RestoreHighlightedButtonOffset;
void (*RestoreHighlightedButton)(void *_instance);
}TutorialUIController;
struct AdButtonsInitializer {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD WatchAdButtonPressedOffset;
void (*WatchAdButtonPressed)(void *_instance);
DWORD OpenOfferWallButtonPressedOffset;
void (*OpenOfferWallButtonPressed)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD WatchedAdOffset;
void (*WatchedAd)();
DWORD CheckTimeSinceLastAdOffset;
DWORD GetWatchAdButtonTextOffset;
monoString *(*GetWatchAdButtonText)(void *_instance);
DWORD GetPopupToShowOffset;
int (*GetPopupToShow)();
DWORD get_MatchesWithoutPopupsOffset;
int (*get_MatchesWithoutPopups)();
DWORD set_MatchesWithoutPopupsOffset;
void (*set_MatchesWithoutPopups)(int value);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}AdButtonsInitializer;
struct WeaponGroupBadges {
}WeaponGroupBadges;
struct BadgeNameAndSprite {
}BadgeNameAndSprite;
struct BadgesManager {
DWORD add_RewardsUpdatedOffset;
void (*add_RewardsUpdated)(void *_instance, void *value);
DWORD remove_RewardsUpdatedOffset;
void (*remove_RewardsUpdated)(void *_instance, void *value);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD InitBadgesRequiredKillsOffset;
void (*InitBadgesRequiredKills)(void *_instance);
DWORD ParseBadgeKillsStringOffset;
void (*ParseBadgeKillsString)(void *_instance, monoString *badgeKills);
DWORD InitStatsAndCurrentBadgeOffset;
void (*InitStatsAndCurrentBadge)(void *_instance);
DWORD WeaponStatsModelDataCompleteOffset;
void (*WeaponStatsModelDataComplete)(void *_instance);
DWORD WeaponStatsModelDataErrorOffset;
void (*WeaponStatsModelDataError)(void *_instance, monoString *error);
DWORD ConsumeRewardOffset;
void (*ConsumeReward)(void *_instance, void *vo);
DWORD GetBadgeNameAndSpriteOffset;
void *(*GetBadgeNameAndSprite)(void *_instance, int weaponGroup, int badgeNumber);
DWORD GetBadgeByKillsOffset;
int (*GetBadgeByKills)(void *_instance, int kills);
DWORD GetKillsByBadgeOffset;
int (*GetKillsByBadge)(void *_instance, int badgeNumber);
DWORD SetCurrentWeaponGroupToDisplayOffset;
void (*SetCurrentWeaponGroupToDisplay)(void *_instance, int weaponGroup);
DWORD SetWeaponGroupServerOffset;
void (*SetWeaponGroupServer)(void *_instance, monoString *weaponGroupID);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD GetCurrentWeaponGroupToDisplay1Offset;
void (*GetCurrentWeaponGroupToDisplay1)(void *_instance);
DWORD OnCurrentWeaponGroupToDisplaySuccessOffset;
void (*OnCurrentWeaponGroupToDisplaySuccess)(void *_instance, monoString *jsonResponse);
}BadgesManager;
struct GetDisplayBadgeResponseJson {
}GetDisplayBadgeResponseJson;
struct PlayerBadgeJson {
}PlayerBadgeJson;
struct CustomizeBarController {
DWORD ShowCustomizationOffset;
void (*ShowCustomization)(void *_instance);
DWORD HideCustomizationOffset;
void (*HideCustomization)(void *_instance);
}CustomizeBarController;
struct CustomizeNavigationTabsController {
DWORD SwitchToTabOffset;
void (*SwitchToTab)(void *_instance, int _index);
}CustomizeNavigationTabsController;
struct CustomizeToggleButton {
DWORD DisplaySelectedOffset;
void (*DisplaySelected)(void *_instance);
DWORD DisplayDeselectedOffset;
void (*DisplayDeselected)(void *_instance);
}CustomizeToggleButton;
struct CustomizeToggleController {
DWORD ProcessClickOffset;
void (*ProcessClick)(void *_instance, int index);
}CustomizeToggleController;
struct LoadoutsDropdownController {
DWORD OnDropdownSelectedOffset;
void (*OnDropdownSelected)(void *_instance);
DWORD OnDropdownClickedOffset;
void (*OnDropdownClicked)(void *_instance);
DWORD SetDropdownLocksOffset;
void (*SetDropdownLocks)(void *_instance, int availableLoadouts);
DWORD CountAvailableLoadoutsOffset;
int (*CountAvailableLoadouts)(void *_instance);
DWORD GetTogglesOffset;
DWORD ForceToValueOffset;
void (*ForceToValue)(void *_instance, int value);
}LoadoutsDropdownController;
struct NavigationDividersController {
DWORD SetActiveIndexOffset;
void (*SetActiveIndex)(void *_instance, int index);
DWORD ShowAllOffset;
void (*ShowAll)(void *_instance);
}NavigationDividersController;
struct WeaponCategoryButton {
DWORD UpdateWeaponInfoOffset;
void (*UpdateWeaponInfo)(void *_instance);
DWORD GetWeaponCategoryOffset;
int(*GetWeaponCategory)(void *_instance);
DWORD VisuallySetActiveOffset;
void (*VisuallySetActive)(void *_instance);
DWORD VisuallySetInactiveOffset;
void (*VisuallySetInactive)(void *_instance);
}WeaponCategoryButton;
struct DisplayOfferwallProgress {
DWORD DisplayOfferwallPopupOffset;
void (*DisplayOfferwallPopup)(void *_instance);
}DisplayOfferwallProgress;
struct AddFriendTabList {
DWORD ActivateOffset;
void (*Activate)(void *_instance);
DWORD DeactivateOffset;
void (*Deactivate)(void *_instance);
DWORD SetPlayerNameOffset;
void (*SetPlayerName)(void *_instance, monoString *name);
DWORD SetPlayerIdOffset;
void (*SetPlayerId)(void *_instance, int id);
DWORD AddFriendClickedOffset;
void (*AddFriendClicked)(void *_instance);
DWORD OnConfirmAddFriendOffset;
void (*OnConfirmAddFriend)(void *_instance);
DWORD OnAddFriendSuccessfulOffset;
void (*OnAddFriendSuccessful)(void *_instance);
DWORD OnFailedAddingFriendOffset;
void (*OnFailedAddingFriend)(void *_instance, monoString *result);
}AddFriendTabList;
struct GlowForTime {
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD PlayOffset;
void (*Play)(void *_instance, float timeLimit);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}GlowForTime;
struct GyroscopeSensitivity {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetValueOffset;
void (*SetValue)(void *_instance, float value);
DWORD get_ValueOffset;
float (*get_Value)();
}GyroscopeSensitivity;
struct DisplayKillerRank {
DWORD ShowKillerRankOffset;
void (*ShowKillerRank)(void *_instance, monoString *rankName);
}DisplayKillerRank;
struct DisplaySpectateHolo {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}DisplaySpectateHolo;
struct DisplaySpectateInfo {
DWORD DisplayPlayerHealthOffset;
void (*DisplayPlayerHealth)(void *_instance, monoString *health, Color color);
}DisplaySpectateInfo;
struct DisplaySpectateWeapon {
DWORD DisplayWeaponOffset;
void (*DisplayWeapon)(void *_instance, int weaponType, int weaponGroup);
DWORD DisplayWeaponNameOffset;
void (*DisplayWeaponName)(void *_instance, monoString *weaponName, int weaponType);
DWORD DisplayWeaponImageOffset;
void (*DisplayWeaponImage)(void *_instance, int weaponType);
}DisplaySpectateWeapon;
struct DisplayTeamColoredLabel {
DWORD DisplayInfoOffset;
void (*DisplayInfo)(void *_instance, monoString *_string, int teamColor);
}DisplayTeamColoredLabel;
struct TeamColorUtil {
DWORD GetColorOffset;
Color (*GetColor)(int teamColor);
}TeamColorUtil;
struct SpectateLabel {
DWORD ChangeColoredLabelOffset;
void (*ChangeColoredLabel)(void *_instance, monoString *_string, Color _color);
DWORD DisableLabelOffset;
void (*DisableLabel)(void *_instance);
DWORD EnableLabelOffset;
void (*EnableLabel)(void *_instance);
}SpectateLabel;
struct UIDisplayKDCounts {
DWORD DisplayOffset;
void (*Display)(void *_instance, monoString *amt);
}UIDisplayKDCounts;
struct UIDisplayRank {
DWORD DisplayRankOffset;
void (*DisplayRank)(void *_instance, int weaponGroup, int currentBadge);
DWORD HideRankOffset;
void (*HideRank)(void *_instance);
DWORD ResetRankOffset;
void (*ResetRank)(void *_instance);
}UIDisplayRank;
struct UIDisplayUserLabel {
DWORD DisplayUserInfoOffset;
void (*DisplayUserInfo)(void *_instance, monoString *username, monoString *tag, int teamColor);
}UIDisplayUserLabel;
struct HardcorePoints {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateAlivePlayersOffset;
void (*UpdateAlivePlayers)(void *_instance, int _team0Alive, int _team1Alive);
}HardcorePoints;
struct CasePriceSetter {
DWORD StartOffset;
void (*Start)(void *_instance);
}CasePriceSetter;
struct ControlGoldCaseState {
DWORD OnValueChangedOffset;
void (*OnValueChanged)(void *_instance, Vector2 v2);
DWORD GetNormalizedPosOffset;
float (*GetNormalizedPos)(void *_instance);
}ControlGoldCaseState;
struct ControlMoreOffers {
DWORD RefreshScreenOffset;
void (*RefreshScreen)(void *_instance);
DWORD ScrollToIndexAfterAFrameOffset;
void *(*ScrollToIndexAfterAFrame)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}ControlMoreOffers;
struct LockedLoadoutScreen {
DWORD ShowOffset;
void (*Show)(void *_instance);
DWORD HideOffset;
void (*Hide)(void *_instance);
DWORD ResetTitleTextOffset;
void (*ResetTitleText)(void *_instance);
DWORD DisplayPurchasingTextOffset;
void (*DisplayPurchasingText)(void *_instance);
}LockedLoadoutScreen;
struct LockedForBeginnerController {
DWORD StartOffset;
void (*Start)(void *_instance);
}LockedForBeginnerController;
struct LiveStreamEventController {
DWORD ShowOffset;
void (*Show)(void *_instance, void *eventData);
DWORD HideOffset;
void (*Hide)(void *_instance);
}LiveStreamEventController;
struct LivestreamBarController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD RequestEventOffset;
void *(*RequestEvent)(void *_instance);
DWORD OnLiveServiceCompletedOffset;
void (*OnLiveServiceCompleted)(void *_instance, monoString *response);
DWORD OnLiveServiceFailedOffset;
void (*OnLiveServiceFailed)(void *_instance, monoString *response);
DWORD DisplayBottomBarOffset;
void (*DisplayBottomBar)(void *_instance, void *liveStreamResponse);
}LivestreamBarController;
struct UpdateMainLoadoutWeaponLabel {
DWORD UpdateLabelsOffset;
void (*UpdateLabels)(void *_instance);
}UpdateMainLoadoutWeaponLabel;
struct MainMenuCharacterDresser {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateCharacterOffset;
void (*UpdateCharacter)(void *_instance);
DWORD DressCharacterOffset;
void (*DressCharacter)(void *_instance);
DWORD AddWeaponOffset;
void *(*AddWeapon)(void *_instance);
DWORD AddWeaponCamoOffset;
void (*AddWeaponCamo)(void *_instance, void *weaponRoot);
}MainMenuCharacterDresser;
struct Move3DtoRectTransform {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD TranslateObjectOffset;
void (*TranslateObject)(void *_instance);
}Move3DtoRectTransform;
struct CheckOnlineStatus {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}CheckOnlineStatus;
struct GameModeBarController {
DWORD ClickNextOffset;
void (*ClickNext)(void *_instance);
DWORD ClickPreviousOffset;
void (*ClickPrevious)(void *_instance);
DWORD RefreshViewOffset;
void (*RefreshView)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}GameModeBarController;
struct MPMapSelectionController {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD ClickNextOffset;
void (*ClickNext)(void *_instance);
DWORD ClickPreviousOffset;
void (*ClickPrevious)(void *_instance);
DWORD ChangeIndexOffset;
void (*ChangeIndex)(void *_instance, int delta);
DWORD ApplyChangesOffset;
void (*ApplyChanges)(void *_instance);
}MPMapSelectionController;
struct MapImageDisplay {
DWORD SetMapOffset;
void (*SetMap)(void *_instance, int index);
}MapImageDisplay;
struct MapNameDisplay {
DWORD SetMapOffset;
void (*SetMap)(void *_instance, int index);
}MapNameDisplay;
struct MenuToggleButton {
DWORD SetSelectedOffset;
void (*SetSelected)(void *_instance);
DWORD SetVisualSelectedOffset;
void (*SetVisualSelected)(void *_instance);
DWORD SetDeselectedOffset;
void (*SetDeselected)(void *_instance);
DWORD SetVisualDeselectedOffset;
void (*SetVisualDeselected)(void *_instance);
DWORD DisableButtonOffset;
void (*DisableButton)(void *_instance);
DWORD EnableButtonOffset;
void (*EnableButton)(void *_instance);
}MenuToggleButton;
struct PopulateGameModesDropdown {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}PopulateGameModesDropdown;
struct PopulateMapsDropdown {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}PopulateMapsDropdown;
struct ToggleBarController {
DWORD OnIndexSelectedOffset;
void (*OnIndexSelected)(void *_instance, int index);
DWORD EnableAllOffset;
void (*EnableAll)(void *_instance);
DWORD DisableAllOffset;
void (*DisableAll)(void *_instance);
}ToggleBarController;
struct NotificationPanelController {
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD SetInstanceOffset;
void (*SetInstance)(void *_instance);
DWORD SetupNotificationOffset;
void (*SetupNotification)(void *_instance, monoString *title, float duration);
DWORD SetupNotification1Offset;
void (*SetupNotification1)(void *_instance, monoString *title, float duration, monoString *acceptText, void *acceptAction);
DWORD SetupNotification2Offset;
void (*SetupNotification2)(void *_instance, monoString *title, float duration, monoString *acceptText, void *acceptAction, monoString *cancelText, void *cancelAction);
DWORD ResetAllButtonsOffset;
void (*ResetAllButtons)(void *_instance);
}NotificationPanelController;
struct PlaceUIElementAtWorldPosition {
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD MoveRectTransformOffset;
void (*MoveRectTransform)(void *_instance);
}PlaceUIElementAtWorldPosition;
struct AvailableRewards {
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnRewardsUpdatedOffset;
void (*OnRewardsUpdated)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}AvailableRewards;
struct CurrentBadgeDropdown {
DWORD SetCurrentBadgeOffset;
void (*SetCurrentBadge)(void *_instance, int weaponGroupIndex);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}CurrentBadgeDropdown;
struct DisplaySeasonLeaderboard {
DWORD DisplayOffset;
void (*Display)(void *_instance, void *leaderboard);
DWORD PopulateUIOffset;
void (*PopulateUI)(void *_instance, void *leaderboard);
}DisplaySeasonLeaderboard;
struct GetPlayerId {
}GetPlayerId;
struct LeaderboardEntry {
DWORD GetUsernameLabelOffset;
void *(*GetUsernameLabel)(void *_instance);
DWORD SetupEntryOffset;
void (*SetupEntry)(void *_instance, void *data);
DWORD SetUsernameOffset;
void (*SetUsername)(void *_instance, void *data);
DWORD IsMatchingUserOffset;
bool (*IsMatchingUser)(void *_instance, void *data, monoString *user);
DWORD ProcessIfUsernameOffset;
bool (*ProcessIfUsername)(void *_instance, void *data, monoString *user);
DWORD SetRankOffset;
void (*SetRank)(void *_instance, void *data);
DWORD SetKillsOffset;
void (*SetKills)(void *_instance, void *data);
DWORD SetBadgeOffset;
void (*SetBadge)(void *_instance, void *data);
DWORD SetRegionOffset;
void (*SetRegion)(void *_instance, void *data);
DWORD SetFavoriteWeaponOffset;
void (*SetFavoriteWeapon)(void *_instance, void *data);
DWORD SetRankColorOffset;
void (*SetRankColor)(void *_instance, void *data, int totalPlayers);
}LeaderboardEntry;
struct ProfileLeaderboardEntry {
}ProfileLeaderboardEntry;
struct ProfileRemoteDataProvider {
DWORD add_OnWeaponStatsReadyOffset;
void (*add_OnWeaponStatsReady)(void *_instance, void *value);
DWORD remove_OnWeaponStatsReadyOffset;
void (*remove_OnWeaponStatsReady)(void *_instance, void *value);
DWORD add_OnLeaderboardReadyOffset;
void (*add_OnLeaderboardReady)(void *_instance, void *value);
DWORD remove_OnLeaderboardReadyOffset;
void (*remove_OnLeaderboardReady)(void *_instance, void *value);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD BuildModelsOffset;
void (*BuildModels)(void *_instance);
DWORD FetchDataOffset;
void (*FetchData)(void *_instance);
DWORD FetchDataWithFiltersOffset;
void (*FetchDataWithFilters)(void *_instance, monoString *name, monoString *region, monoString *weapon);
DWORD WeaponStatsModelDataCompleteOffset;
void (*WeaponStatsModelDataComplete)(void *_instance);
DWORD WeaponStatsModelDataErrorOffset;
void (*WeaponStatsModelDataError)(void *_instance, monoString *error);
DWORD LeaderboardModelDataCompleteOffset;
void (*LeaderboardModelDataComplete)(void *_instance);
DWORD LeaderboardModelDataErrorOffset;
void (*LeaderboardModelDataError)(void *_instance, monoString *error);
}ProfileRemoteDataProvider;
struct ProfileRewardEntry {
}ProfileRewardEntry;
struct ProfileWeaponStatsEntry {
}ProfileWeaponStatsEntry;
struct RewardsDisplay {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OpenCaseOffset;
void (*OpenCase)(void *_instance, int camo, int weaponType, bool allWeapons);
DWORD ChangeCamoOffset;
void (*ChangeCamo)(void *_instance);
DWORD OpenCaseAnimationOffset;
void (*OpenCaseAnimation)(void *_instance);
DWORD FadeInNamesOffset;
void (*FadeInNames)(void *_instance);
DWORD FinishOpeningCaseOffset;
void (*FinishOpeningCase)(void *_instance);
}RewardsDisplay;
struct SeasonLeaderboard {
DWORD RequestSeasonsOffset;
void (*RequestSeasons)(void *_instance);
DWORD ChangeStateOffset;
void (*ChangeState)(void *_instance, int loadingState);
DWORD OnAvailableSeasonsSucceedOffset;
void (*OnAvailableSeasonsSucceed)(void *_instance);
DWORD RequestFilteredLeaderboardOffset;
void (*RequestFilteredLeaderboard)(void *_instance);
DWORD RequestLeaderboardOffset;
void (*RequestLeaderboard)(void *_instance, int seasonID, monoString *username, monoString *filteredUser);
DWORD OnSuccessfulLeaderboardOffset;
void (*OnSuccessfulLeaderboard)(void *_instance);
DWORD OnFailedLeaderboardOffset;
void (*OnFailedLeaderboard)(void *_instance, monoString *response);
DWORD OnAvailableSeasonsFailureOffset;
void (*OnAvailableSeasonsFailure)(void *_instance, monoString *response);
DWORD SetNotInitOffset;
void (*SetNotInit)(void *_instance);
DWORD SetLoadingOffset;
void (*SetLoading)(void *_instance);
DWORD SetLoadedOffset;
void (*SetLoaded)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}SeasonLeaderboard;
struct SeasonLeaderboardEntry {
DWORD SetupEntryOffset;
void (*SetupEntry)(void *_instance, void *data);
DWORD SetRankColorOffset;
void (*SetRankColor)(void *_instance, void *data, int totalPlayers);
DWORD GetRewardTierOffset;
int(*GetRewardTier)(void *_instance, int playerRank, int totalPlayers);
DWORD GetPercentageIntOffset;
int (*GetPercentageInt)(void *_instance, int total, float percentage);
}SeasonLeaderboardEntry;
struct TabLeaderboard {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD PopulateUIOffset;
void (*PopulateUI)(void *_instance);
DWORD FetchDataWithFiltersOffset;
void (*FetchDataWithFilters)(void *_instance);
}TabLeaderboard;
struct TabRewards {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD PopulateUIOffset;
void (*PopulateUI)(void *_instance);
DWORD OnClaimClickedOffset;
void (*OnClaimClicked)(void *_instance, void *vo, void *entry);
DWORD OnRewardRetrievedOffset;
void (*OnRewardRetrieved)(void *_instance, monoString *rewardResponse);
}TabRewards;
struct TabWeaponStats {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD PopulateUIOffset;
void (*PopulateUI)(void *_instance);
DWORD OnEntryClickedOffset;
void (*OnEntryClicked)(void *_instance, bool showNormal);
}TabWeaponStats;
struct IntroScriptProxy {
DWORD EditClanTagOffset;
void (*EditClanTag)(void *_instance, monoString *clanTag);
DWORD ChangeUsernameClickedOffset;
void (*ChangeUsernameClicked)(void *_instance);
DWORD LogoutOffset;
void (*Logout)(void *_instance);
}IntroScriptProxy;
struct SideBarProxy {
DWORD LoadCustomizeOffset;
void (*LoadCustomize)(void *_instance);
DWORD LoadMainMenuOffset;
void (*LoadMainMenu)(void *_instance);
DWORD LoadLoginOffset;
void (*LoadLogin)(void *_instance);
DWORD LoadRegisterOffset;
void (*LoadRegister)(void *_instance);
DWORD LoadShopOffset;
void (*LoadShop)(void *_instance);
}SideBarProxy;
struct SalesBannerContainer {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD DeactivateOffset;
void (*Deactivate)(void *_instance);
}SalesBannerContainer;
struct SalesPopup {
DWORD set_IsInitializedOffset;
void (*set_IsInitialized)(void *_instance, bool value);
DWORD get_IsInitializedOffset;
bool (*get_IsInitialized)(void *_instance);
DWORD SetInitialValuesOffset;
void (*SetInitialValues)(void *_instance, monoString *_description, monoString *_endDate);
DWORD OnDisplayOffset;
void (*OnDisplay)(void *_instance);
DWORD OnHideOffset;
void (*OnHide)(void *_instance);
}SalesPopup;
struct SalesPopupInitializer {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD CR_InitOffset;
void *(*CR_Init)(void *_instance);
}SalesPopupInitializer;
struct ScrollPositionReset {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}ScrollPositionReset;
struct SetTextToSliderValue {
DWORD DisplayNumberOffset;
void (*DisplayNumber)(void *_instance, float num);
}SetTextToSliderValue;
struct ShakeEffect {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD ChangeStatusOffset;
void (*ChangeStatus)(void *_instance);
}ShakeEffect;
struct ImageStateChanger {
DWORD SetSelectedOffset;
void (*SetSelected)(void *_instance);
DWORD SetDeselectedOffset;
void (*SetDeselected)(void *_instance);
}ImageStateChanger;
struct ScollTabSelector {
DWORD SelectTabOffset;
void (*SelectTab)(void *_instance, int index);
DWORD SelectTabBasedOnNormalizedValueOffset;
void (*SelectTabBasedOnNormalizedValue)(void *_instance, Vector2 v2);
DWORD SelectTabBasedOnIndexOffset;
void (*SelectTabBasedOnIndex)(void *_instance, int index);
DWORD DeselectAllOtherTabsOffset;
void (*DeselectAllOtherTabs)(void *_instance, int index);
DWORD RecalculateAllFloorCeilsOffset;
void (*RecalculateAllFloorCeils)(void *_instance);
DWORD RecaulculateFloorCeilsAfterAFrameOffset;
void *(*RecaulculateFloorCeilsAfterAFrame)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}ScollTabSelector;
struct ScrollToElement {
DWORD ScrollToIndexOffset;
void (*ScrollToIndex)(void *_instance, int index);
DWORD ScrollToPositionAfterAFrameOffset;
void (*ScrollToPositionAfterAFrame)(void *_instance, int index);
DWORD ScrollToPostCoroutineOffset;
void *(*ScrollToPostCoroutine)(void *_instance, int index);
DWORD GetNormalizedPosOffset;
float (*GetNormalizedPos)(void *_instance, void *rectTransform);
DWORD OnValueChangedOffset;
void (*OnValueChanged)(void *_instance, Vector2 v2);
DWORD OnPositionsUpdatedOffset;
void (*OnPositionsUpdated)(void *_instance);
DWORD UpdateNormalizedPositionsOffset;
void (*UpdateNormalizedPositions)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}ScrollToElement;
struct ShopButton {
DWORD SetSelectedOffset;
void (*SetSelected)(void *_instance);
DWORD SetVisualSelectedOffset;
void (*SetVisualSelected)(void *_instance);
DWORD SetDeselectedOffset;
void (*SetDeselected)(void *_instance);
DWORD SetVisualDeselectedOffset;
void (*SetVisualDeselected)(void *_instance);
DWORD ActivateGOOffset;
void (*ActivateGO)(void *_instance);
DWORD DeactivateGOOffset;
void (*DeactivateGO)(void *_instance);
}ShopButton;
struct TextStateChanger {
DWORD SetSelectedOffset;
void (*SetSelected)(void *_instance);
DWORD SetDeselectedOffset;
void (*SetDeselected)(void *_instance);
DWORD ToggleSelectionOffset;
void (*ToggleSelection)(void *_instance, bool selected);
}TextStateChanger;
struct ShowOfferOnMain {
DWORD ShowOfferOffset;
void (*ShowOffer)(void *_instance);
DWORD ReaccomodateChildrenOffset;
void (*ReaccomodateChildren)(void *_instance, void *go);
DWORD ReaccomodateCoroutineOffset;
void *(*ReaccomodateCoroutine)(void *_instance, void *go);
}ShowOfferOnMain;
struct SkinnedUIComponent {
DWORD SetSkinOffset;
void (*SetSkin)(void *_instance, int _skinIndex);
}SkinnedUIComponent;
struct TweenImageTransparency {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD CalculateSecondsPerTransitionOffset;
void (*CalculateSecondsPerTransition)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}TweenImageTransparency;
struct UIAudioManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD PlayClipOffset;
void (*PlayClip)(void *_instance, void *clip, bool lowPriority);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}UIAudioManager;
struct UIFadeInScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD PlayOffset;
void (*Play)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}UIFadeInScript;
struct UIInitialColorScript {
DWORD StartOffset;
void (*Start)(void *_instance);
}UIInitialColorScript;
struct UIPositionScript {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD GetScaleOffset;
float (*GetScale)(void *_instance);
DWORD SetScaleOffset;
void (*SetScale)(void *_instance, float s);
DWORD SetOriginalGraphicColorOffset;
void (*SetOriginalGraphicColor)(void *_instance);
DWORD ResetToDefaultOffset;
void (*ResetToDefault)(void *_instance);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *data);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
DWORD OnDragOffset;
void (*OnDrag)(void *_instance, void *data);
DWORD LoadPositionOffset;
void (*LoadPosition)(void *_instance, float x, float y);
DWORD LoadScaleOffset;
void (*LoadScale)(void *_instance, float scale);
DWORD GetPositionOffset;
Vector2 (*GetPosition)(void *_instance);
}UIPositionScript;
struct UIRotateZ {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}UIRotateZ;
struct Uploader {
DWORD UploadFileOffset;
void (*UploadFile)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
}Uploader;
struct ActivationLoger {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
}ActivationLoger;
struct ToggleData {
DWORD DisablePersistentListenersOffset;
void (*DisablePersistentListeners)(void *_instance);
DWORD EnablePersistentListenersOffset;
void (*EnablePersistentListeners)(void *_instance);
}ToggleData;
struct BlayzeToggleGroup {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD PopListenersOffset;
void (*PopListeners)(void *_instance);
DWORD PushListenersOffset;
void (*PushListeners)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnToggleValueChangedOffset;
void (*OnToggleValueChanged)(void *_instance, void *change);
}BlayzeToggleGroup;
struct ClickAction {
DWORD OnPointerClickOffset;
void (*OnPointerClick)(void *_instance, void *eventData);
}ClickAction;
struct CollectionsUtil {
}CollectionsUtil;
struct CursorHelper {
DWORD LockCursorOffset;
void (*LockCursor)();
}CursorHelper;
struct DebugLogFromEvent {
DWORD LogOffset;
void (*Log)(void *_instance, monoString *str);
DWORD LogFloatOffset;
void (*LogFloat)(void *_instance, float f);
DWORD LogFloat1Offset;
void (*LogFloat1)(void *_instance, Vector2 v2);
}DebugLogFromEvent;
struct DontDestroyOnLoadSetter {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}DontDestroyOnLoadSetter;
struct EHelper {
}EHelper;
struct FindRenderersByMaterial {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}FindRenderersByMaterial;
struct GlobalDetectionManager {
DWORD OnInjectionDetectedOffset;
void (*OnInjectionDetected)(void *_instance);
DWORD OnObscuredDetectedOffset;
void (*OnObscuredDetected)(void *_instance);
DWORD OnSpeedDetectedOffset;
void (*OnSpeedDetected)(void *_instance);
DWORD OnTimeDetectedOffset;
void (*OnTimeDetected)(void *_instance);
DWORD OnWallDetectedOffset;
void (*OnWallDetected)(void *_instance);
DWORD LogCheatOffset;
void *(*LogCheat)(void *_instance, int reason);
}GlobalDetectionManager;
struct LinkedListExtension {
}LinkedListExtension;
struct MainMenuMessage {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}MainMenuMessage;
struct NativeLogs {
DWORD PrintNativeLogOffset;
void (*PrintNativeLog)(monoString *message);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}NativeLogs;
struct PlayerPrefsRemover {
DWORD StartOffset;
void (*Start)(void *_instance);
}PlayerPrefsRemover;
struct HashablePrimitive {
DWORD GetRepresentationOffset;
int (*GetRepresentation)(void *hashPrimitive);
}HashablePrimitive;
struct HashFloat {
DWORD op_ImplicitOffset;
void *(*op_Implicit)(float value);
DWORD op_Implicit1Offset;
float (*op_Implicit1)(void *value);
DWORD GetRepresentationOffset;
int (*GetRepresentation)(float primitiveValue);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD SetAsCheatOffset;
void (*SetAsCheat)(void *_instance, float cheatValue);
}HashFloat;
struct HashBool {
DWORD op_ImplicitOffset;
void *(*op_Implicit)(bool value);
DWORD op_Implicit1Offset;
bool (*op_Implicit1)(void *value);
DWORD GetRepresentationOffset;
int (*GetRepresentation)(bool primitiveValue);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}HashBool;
struct HashInt {
DWORD op_ImplicitOffset;
void *(*op_Implicit)(int primitiveValue);
DWORD op_Implicit1Offset;
int (*op_Implicit1)(void *value);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}HashInt;
struct SceneManagementUtil {
DWORD NameFromIndexOffset;
monoString *(*NameFromIndex)(int BuildIndex);
DWORD SceneIndexFromNameOffset;
int (*SceneIndexFromName)(monoString *sceneName);
}SceneManagementUtil;
struct ScreenLogger {
DWORD LogOffset;
void (*Log)(void *_instance, monoString *id, monoString *message, float duration);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD GetConsoleOffset;
void *(*GetConsole)();
}ScreenLogger;
struct ScrollRectExtensions {
DWORD GetSnapToPositionToBringChildIntoViewOffset;
Vector2 (*GetSnapToPositionToBringChildIntoView)(void *instance, void *child);
}ScrollRectExtensions;
struct StoreIDGameObjectDisabler {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}StoreIDGameObjectDisabler;
struct StoreItemPrice {
}StoreItemPrice;
struct StoreIDPriceModifier {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}StoreIDPriceModifier;
struct FindWordInPhraseScore {
DWORD GetScoreOffset;
int (*GetScore)(monoString *word, monoString *phrase);
}FindWordInPhraseScore;
struct GameModes {
DWORD GetShortFormOffset;
monoString *(*GetShortForm)(monoString *mode);
}GameModes;
struct StringExtensionMethods {
DWORD ReplaceFirstOffset;
monoString *(*ReplaceFirst)(monoString *text, monoString *search, monoString *replace);
}StringExtensionMethods;
struct RoleHandler {
DWORD GetRoleOffset;
monoString *(*GetRole)(int index);
DWORD GetRoleTagOffset;
monoString *(*GetRoleTag)(int index);
DWORD GetCreatorTagOffset;
monoString *(*GetCreatorTag)(int index);
DWORD IsModOffset;
bool (*IsMod)(int index);
DWORD IsRestarterOffset;
bool (*IsRestarter)(int index);
}RoleHandler;
struct SwipeDetector {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SwipeOffset;
void (*Swipe)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}SwipeDetector;
struct TextureScale {
DWORD PointOffset;
void (*Point)(void *tex, int newWidth, int newHeight);
DWORD BilinearOffset;
void (*Bilinear)(void *tex, int newWidth, int newHeight);
DWORD ThreadedScaleOffset;
void (*ThreadedScale)(void *tex, int newWidth, int newHeight, bool useBilinear);
DWORD ColorLerpUnclampedOffset;
Color (*ColorLerpUnclamped)(Color c1, Color c2, float value);
}TextureScale;
struct TransformExtension {
DWORD DeleteAllChildrenOffset;
void (*DeleteAllChildren)(void *trans);
}TransformExtension;
struct UnityUtil {
}UnityUtil;
struct VIPModeKillsOnTitleAdapter {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateTextOffset;
void (*UpdateText)(void *_instance);
}VIPModeKillsOnTitleAdapter;
struct WallhackSingleCheatReport {
DWORD OnDrawGizmosOffset;
void (*OnDrawGizmos)(void *_instance);
}WallhackSingleCheatReport;
struct WebGLLink {
DWORD OpenLinkJSPluginOffset;
void (*OpenLinkJSPlugin)(void *_instance, monoString *url);
}WebGLLink;
struct WebGLVersionGameObjectDisabler {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}WebGLVersionGameObjectDisabler;
struct VIPGameType {
}VIPGameType;
struct YouAreTheVIPMessageHelper {
DWORD UpdateLocalPlayerAsRegularOffset;
void (*UpdateLocalPlayerAsRegular)(void *_instance);
}YouAreTheVIPMessageHelper;
struct VIPPlayer {
}VIPPlayer;
struct VIPModeOrganizer {
DWORD UpdateOnMasterClientOffset;
bool (*UpdateOnMasterClient)(void *_instance);
DWORD UpdateOnSubordinateClientOffset;
bool (*UpdateOnSubordinateClient)(void *_instance);
DWORD UpdateMinimapOffset;
void (*UpdateMinimap)(void *_instance);
DWORD GetRegularKillScoreOffset;
int (*GetRegularKillScore)(void *_instance);
DWORD GetVIPKillScoreOffset;
int (*GetVIPKillScore)(void *_instance);
DWORD GetWinScoreOffset;
int (*GetWinScore)();
DWORD GetGameLenghtOffset;
int (*GetGameLenght)();
DWORD IsVIPOffset;
bool (*IsVIP)(void *_instance, int playerId);
}VIPModeOrganizer;
struct TeamBasedVipGameType {
DWORD GetRegularKillScoreOffset;
int (*GetRegularKillScore)(void *_instance);
DWORD GetVIPKillScoreOffset;
int (*GetVIPKillScore)(void *_instance);
DWORD ScoreVIPKillOffset;
void (*ScoreVIPKill)(void *_instance, void *player);
DWORD CreateVIPDataOffset;
void *(*CreateVIPData)(void *_instance, void *player);
DWORD GetVIPColorOffset;
Color (*GetVIPColor)(void *_instance, void *player);
}TeamBasedVipGameType;
struct VehicleFlyby {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
}VehicleFlyby;
struct VelocityTracker {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateCumulativeMovingAverageVelOffset;
float (*UpdateCumulativeMovingAverageVel)(void *_instance, float newVelocity);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}VelocityTracker;
struct VersionDisplay {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}VersionDisplay;
struct VersionHandler {
DWORD get_BuildVersionOffset;
monoString *(*get_BuildVersion)(void *_instance);
DWORD get_phpSecretKeyOffset;
monoString *(*get_phpSecretKey)();
DWORD get_phpSecretOffset;
monoString *(*get_phpSecret)();
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD get_betaOffset;
bool (*get_beta)();
DWORD set_betaOffset;
void (*set_beta)(bool value);
DWORD SetDefaultsOffset;
void (*SetDefaults)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnLevelWasLoadedOffset;
void (*OnLevelWasLoaded)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}VersionHandler;
struct VirtualJoystickRegion {
DWORD DisableJoystickOffset;
void (*DisableJoystick)(void *_instance);
DWORD EnableJoystickOffset;
void (*EnableJoystick)(void *_instance);
DWORD ResetJoystickOffset;
void (*ResetJoystick)(void *_instance);
DWORD GetRadiusOffset;
Vector2 (*GetRadius)(void *_instance, Vector2 midPoint, Vector2 endPoint, float maxDistance);
DWORD GetPositionOffset;
void (*GetPosition)(void *_instance);
DWORD GetConstraintsOffset;
void (*GetConstraints)(void *_instance);
DWORD GetControlsOffset;
Vector2 (*GetControls)(void *_instance, Vector2 pos, Vector2 ori);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}VirtualJoystickRegion;
struct KillVolume {
DWORD OnTriggerEnterOffset;
void (*OnTriggerEnter)(void *_instance, void *other);
}KillVolume;
struct VoteToKickButton {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD RefreshVisibleOffset;
void (*RefreshVisible)(void *_instance, bool _hudVisible);
DWORD DisplayVoteWidgetOffset;
void (*DisplayVoteWidget)(void *_instance, float timeLeft, bool enableVote);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD UpdateVotesOffset;
void (*UpdateVotes)(void *_instance, int _yesVotes, int _noVotes);
DWORD UpdateVotes1Offset;
void (*UpdateVotes1)(void *_instance, int _yesVotes, int _noVotes, bool forced);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD FormatTimeOffset;
monoString *(*FormatTime)(void *_instance, float timeLeft);
}VoteToKickButton;
struct GunStatsDescription {
}GunStatsDescription;
struct WeaponBalanceControl {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnSceneLoadedOffset;
void (*OnSceneLoaded)(void *_instance, int scene, int loadSceneMode);
DWORD OnBalancedStatsObtainedOffset;
void (*OnBalancedStatsObtained)(void *_instance);
DWORD OnBalancedStatsProgressOffset;
void (*OnBalancedStatsProgress)(void *_instance, monoString *message);
DWORD OnBalancedStatsErrorOffset;
void (*OnBalancedStatsError)(void *_instance, monoString *error);
DWORD GetFloatValueOffset;
float (*GetFloatValue)(monoString *unparsed);
DWORD GetControlOffset;
void *(*GetControl)();
}WeaponBalanceControl;
struct WeaponBalancer {
DWORD GetBalancerOffset;
void *(*GetBalancer)();
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD DefaultValueOffset;
DWORD DefaultValueStrOffset;
monoString *(*DefaultValueStr)(void *_instance, void *type);
DWORD OnRawResponseOffset;
void (*OnRawResponse)(void *_instance, monoString *response);
}WeaponBalancer;
struct WeaponStatsForDesigners {
}WeaponStatsForDesigners;
struct WeaponResourceHandler {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ApplyTexturesOffset;
void (*ApplyTextures)(void *_instance, monoString *shaderTexName, void *texture);
DWORD LoadResourcesOffset;
void (*LoadResources)(void *_instance);
DWORD UnloadResourcesOffset;
void (*UnloadResources)(void *_instance);
}WeaponResourceHandler;
struct WeaponStatsUI {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetPriceOffset;
void (*SetPrice)(void *_instance, int value);
DWORD SetDamageOffset;
void (*SetDamage)(void *_instance, float value);
DWORD SetAccuracyOffset;
void (*SetAccuracy)(void *_instance, float minAdsSpread, float spreadIncrease);
DWORD SetRangeOffset;
void (*SetRange)(void *_instance, float muzzleVelocity);
DWORD SetStabilityOffset;
void (*SetStability)(void *_instance, Vector2 leftRightRecoil, float muzzleClimb);
DWORD SetHipFireOffset;
void (*SetHipFire)(void *_instance, float minHipSpread, float spreadIncrease);
DWORD SetRateOfFireOffset;
void (*SetRateOfFire)(void *_instance, int rpm);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}WeaponStatsUI;
struct CrazyEventsController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD GameplayStartOffset;
void (*GameplayStart)(void *_instance);
DWORD GameplayStopOffset;
void (*GameplayStop)(void *_instance);
DWORD HappyTimeOffset;
void (*HappyTime)(void *_instance, float intensity);
}CrazyEventsController;
struct GenericWebGLEvents {
DWORD set_IsGameplayStartedOffset;
void (*set_IsGameplayStarted)(void *_instance, bool value);
DWORD get_IsGameplayStartedOffset;
bool (*get_IsGameplayStarted)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}GenericWebGLEvents;
struct PokiEventsController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD GameplayStartOffset;
void (*GameplayStart)(void *_instance);
DWORD GameplayStopOffset;
void (*GameplayStop)(void *_instance);
DWORD HappyTimeOffset;
void (*HappyTime)(void *_instance, float intensity);
}PokiEventsController;
struct XsollaPaystationController {
DWORD OpenPayStationOffset;
void (*OpenPayStation)(void *_instance, int sku);
DWORD OnTokenSuccessOffset;
void (*OnTokenSuccess)(void *_instance, monoString *_response);
DWORD OnTokenErrorOffset;
void (*OnTokenError)(void *_instance, monoString *_error);
DWORD PurchaseTier1CreditsOffset;
void (*PurchaseTier1Credits)(void *_instance);
DWORD PurchaseTier2CreditsOffset;
void (*PurchaseTier2Credits)(void *_instance);
DWORD PurchaseTier3CreditsOffset;
void (*PurchaseTier3Credits)(void *_instance);
}XsollaPaystationController;
struct XsollaPurchaseVerifier {
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD CR_VerifyPurchaseOffset;
void *(*CR_VerifyPurchase)(void *_instance, float waitTime);
DWORD VerifyPurchaseStatusOffset;
void (*VerifyPurchaseStatus)(void *_instance);
DWORD OnChangedSceneOffset;
void (*OnChangedScene)(void *_instance, int scene, int loadSceneMode);
DWORD OnSuccessOffset;
void (*OnSuccess)(void *_instance, monoString *response);
DWORD OnErrorOffset;
void (*OnError)(void *_instance, monoString *response);
}XsollaPurchaseVerifier;
struct XPManager {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD FillRanksAndMoneyForRanksOffset;
void (*FillRanksAndMoneyForRanks)();
DWORD IsHighestRankOffset;
bool (*IsHighestRank)(int rank);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ShowIncreaseOffset;
void (*ShowIncrease)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD FinishShowingMovingXPOffset;
void (*FinishShowingMovingXP)(void *_instance);
DWORD ShowContinueButtonOffset;
void (*ShowContinueButton)(void *_instance);
DWORD ShowPerkUnlockedOffset;
void (*ShowPerkUnlocked)(void *_instance, int p);
DWORD FinishScalingMoneyTextOffset;
void (*FinishScalingMoneyText)(void *_instance);
DWORD FinishShowingUnlockedPerkOffset;
void (*FinishShowingUnlockedPerk)(void *_instance);
DWORD HideMoneyAndPerkTextOffset;
void (*HideMoneyAndPerkText)(void *_instance);
DWORD GetMoneyForEarningRankOffset;
int (*GetMoneyForEarningRank)(void *_instance, int rank);
DWORD GetRankXPLengthOffset;
int (*GetRankXPLength)(int rank);
DWORD GetXPInRankOffset;
int (*GetXPInRank)(int xp);
DWORD GetPastXPOffset;
int (*GetPastXP)(void *_instance);
DWORD GetRankOffset;
int (*GetRank)(int xp);
DWORD GetRankFloorCeilOffset;
DWORD GetXPOffset;
int (*GetXP)();
DWORD addXPOffset;
void (*addXP)(void *_instance, int amt);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD GetRankTierOffset;
int(*GetRankTier)(int rank);
DWORD GetAndSaveCurrentRankTierOffset;
void (*GetAndSaveCurrentRankTier)(void *_instance);
DWORD HasRankTierChangedOffset;
bool (*HasRankTierChanged)(void *_instance);
DWORD GetCurrentRankTierOffset;
int(*GetCurrentRankTier)();
}XPManager;
struct mainMenuButton {
DWORD ExitToMainMenuOffset;
void (*ExitToMainMenu)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
}mainMenuButton;
struct openLink {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *data);
DWORD SetURLOffset;
void (*SetURL)(void *_instance, monoString *defaultURL, monoString *androidURL, monoString *iOSURL);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *eventData);
DWORD OpenLinkJSPluginOffset;
void (*OpenLinkJSPlugin)(void *_instance, monoString *url);
DWORD openWindowOffset;
void (*openWindow)(void *_instance, monoString *url);
}openLink;
struct ExposedToAnalyticsAttribute {
}ExposedToAnalyticsAttribute;
struct CameraFollow {
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
}CameraFollow;
struct DemoUI {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD LoadFPSOffset;
void (*LoadFPS)(void *_instance);
DWORD LoadTPSOffset;
void (*LoadTPS)(void *_instance);
DWORD OnTerrainOffset;
monoString *(*OnTerrain)(void *_instance);
DWORD CurrentTextureOffset;
monoString *(*CurrentTexture)(void *_instance);
}DemoUI;
struct SimpleFirstPersonController {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD GroundedOffset;
bool (*Grounded)(void *_instance);
}SimpleFirstPersonController;
struct SimpleThirdPersonController {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD UpdateAnimatorValuesOffset;
void (*UpdateAnimatorValues)(void *_instance);
}SimpleThirdPersonController;
struct SmartFootstepSystem {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD GetTerrainInfoOffset;
void (*GetTerrainInfo)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD FootstepOffset;
void (*Footstep)(void *_instance);
DWORD GetTextureMixOffset;
DWORD GetMainTextureOffset;
int (*GetMainTexture)(void *_instance, Vector3 worldPos);
DWORD GetRendererTextureOffset;
void *(*GetRendererTexture)(void *_instance);
}SmartFootstepSystem;
struct UniClipboard {
DWORD get_boardOffset;
void *(*get_board)();
DWORD SetTextOffset;
void (*SetText)(monoString *str);
DWORD GetTextOffset;
monoString *(*GetText)();
}UniClipboard;
struct IBoard {
}IBoard;
struct EditorBoard {
DWORD SetTextOffset;
void (*SetText)(void *_instance, monoString *str);
DWORD GetTextOffset;
monoString *(*GetText)(void *_instance);
}EditorBoard;
struct AndroidBoard {
DWORD SetTextOffset;
void (*SetText)(void *_instance, monoString *str);
DWORD GetTextOffset;
monoString *(*GetText)(void *_instance);
}AndroidBoard;
struct UniWebViewInterface {
DWORD SetLogLevelOffset;
void (*SetLogLevel)(int level);
DWORD InitOffset;
void (*Init)(monoString *name, int x, int y, int width, int height);
DWORD DestroyOffset;
void (*Destroy)(monoString *name);
DWORD LoadOffset;
void (*Load)(monoString *name, monoString *url, bool skipEncoding);
DWORD LoadHTMLStringOffset;
void (*LoadHTMLString)(monoString *name, monoString *html, monoString *baseUrl, bool skipEncoding);
DWORD ReloadOffset;
void (*Reload)(monoString *name);
DWORD StopOffset;
void (*Stop)(monoString *name);
DWORD GetUrlOffset;
monoString *(*GetUrl)(monoString *name);
DWORD SetFrameOffset;
void (*SetFrame)(monoString *name, int x, int y, int width, int height);
DWORD SetPositionOffset;
void (*SetPosition)(monoString *name, int x, int y);
DWORD SetSizeOffset;
void (*SetSize)(monoString *name, int width, int height);
DWORD ShowOffset;
bool (*Show)(monoString *name, bool fade, int edge, float duration, monoString *identifier);
DWORD HideOffset;
bool (*Hide)(monoString *name, bool fade, int edge, float duration, monoString *identifier);
DWORD AnimateToOffset;
bool (*AnimateTo)(monoString *name, int x, int y, int width, int height, float duration, float delay, monoString *identifier);
DWORD AddJavaScriptOffset;
void (*AddJavaScript)(monoString *name, monoString *jsString, monoString *identifier);
DWORD EvaluateJavaScriptOffset;
void (*EvaluateJavaScript)(monoString *name, monoString *jsString, monoString *identifier);
DWORD AddUrlSchemeOffset;
void (*AddUrlScheme)(monoString *name, monoString *scheme);
DWORD RemoveUrlSchemeOffset;
void (*RemoveUrlScheme)(monoString *name, monoString *scheme);
DWORD AddSslExceptionDomainOffset;
void (*AddSslExceptionDomain)(monoString *name, monoString *domain);
DWORD RemoveSslExceptionDomainOffset;
void (*RemoveSslExceptionDomain)(monoString *name, monoString *domain);
DWORD AddPermissionTrustDomainOffset;
void (*AddPermissionTrustDomain)(monoString *name, monoString *domain);
DWORD RemovePermissionTrustDomainOffset;
void (*RemovePermissionTrustDomain)(monoString *name, monoString *domain);
DWORD SetHeaderFieldOffset;
void (*SetHeaderField)(monoString *name, monoString *key, monoString *value);
DWORD SetUserAgentOffset;
void (*SetUserAgent)(monoString *name, monoString *userAgent);
DWORD GetUserAgentOffset;
monoString *(*GetUserAgent)(monoString *name);
DWORD SetAllowAutoPlayOffset;
void (*SetAllowAutoPlay)(bool flag);
DWORD SetAllowJavaScriptOpenWindowOffset;
void (*SetAllowJavaScriptOpenWindow)(bool flag);
DWORD SetJavaScriptEnabledOffset;
void (*SetJavaScriptEnabled)(bool enabled);
DWORD CleanCacheOffset;
void (*CleanCache)(monoString *name);
DWORD ClearCookiesOffset;
void (*ClearCookies)();
DWORD SetCookieOffset;
void (*SetCookie)(monoString *url, monoString *cookie, bool skipEncoding);
DWORD GetCookieOffset;
monoString *(*GetCookie)(monoString *url, monoString *key, bool skipEncoding);
DWORD ClearHttpAuthUsernamePasswordOffset;
void (*ClearHttpAuthUsernamePassword)(monoString *host, monoString *realm);
DWORD SetBackgroundColorOffset;
void (*SetBackgroundColor)(monoString *name, float r, float g, float b, float a);
DWORD SetWebViewAlphaOffset;
void (*SetWebViewAlpha)(monoString *name, float alpha);
DWORD GetWebViewAlphaOffset;
float (*GetWebViewAlpha)(monoString *name);
DWORD SetShowSpinnerWhileLoadingOffset;
void (*SetShowSpinnerWhileLoading)(monoString *name, bool show);
DWORD SetSpinnerTextOffset;
void (*SetSpinnerText)(monoString *name, monoString *text);
DWORD CanGoBackOffset;
bool (*CanGoBack)(monoString *name);
DWORD CanGoForwardOffset;
bool (*CanGoForward)(monoString *name);
DWORD GoBackOffset;
void (*GoBack)(monoString *name);
DWORD GoForwardOffset;
void (*GoForward)(monoString *name);
DWORD SetOpenLinksInExternalBrowserOffset;
void (*SetOpenLinksInExternalBrowser)(monoString *name, bool flag);
DWORD SetHorizontalScrollBarEnabledOffset;
void (*SetHorizontalScrollBarEnabled)(monoString *name, bool enabled);
DWORD SetVerticalScrollBarEnabledOffset;
void (*SetVerticalScrollBarEnabled)(monoString *name, bool enabled);
DWORD SetBouncesEnabledOffset;
void (*SetBouncesEnabled)(monoString *name, bool enabled);
DWORD SetZoomEnabledOffset;
void (*SetZoomEnabled)(monoString *name, bool enabled);
DWORD SetBackButtonEnabledOffset;
void (*SetBackButtonEnabled)(monoString *name, bool enabled);
DWORD SetUseWideViewPortOffset;
void (*SetUseWideViewPort)(monoString *name, bool use);
DWORD SetLoadWithOverviewModeOffset;
void (*SetLoadWithOverviewMode)(monoString *name, bool overview);
DWORD SetImmersiveModeEnabledOffset;
void (*SetImmersiveModeEnabled)(monoString *name, bool enabled);
DWORD SetWebContentsDebuggingEnabledOffset;
void (*SetWebContentsDebuggingEnabled)(bool enabled);
DWORD ShowWebViewDialogOffset;
void (*ShowWebViewDialog)(monoString *name, bool show);
DWORD PrintOffset;
void (*Print)(monoString *name);
DWORD CheckPlatformOffset;
void (*CheckPlatform)();
}UniWebViewInterface;
struct UniWebViewAndroidStaticListener {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnJavaMessageOffset;
void (*OnJavaMessage)(void *_instance, monoString *message);
}UniWebViewAndroidStaticListener;
struct UniWebView {
DWORD add_OnPageStartedOffset;
void (*add_OnPageStarted)(void *_instance, void *value);
DWORD remove_OnPageStartedOffset;
void (*remove_OnPageStarted)(void *_instance, void *value);
DWORD add_OnPageFinishedOffset;
void (*add_OnPageFinished)(void *_instance, void *value);
DWORD remove_OnPageFinishedOffset;
void (*remove_OnPageFinished)(void *_instance, void *value);
DWORD add_OnPageErrorReceivedOffset;
void (*add_OnPageErrorReceived)(void *_instance, void *value);
DWORD remove_OnPageErrorReceivedOffset;
void (*remove_OnPageErrorReceived)(void *_instance, void *value);
DWORD add_OnMessageReceivedOffset;
void (*add_OnMessageReceived)(void *_instance, void *value);
DWORD remove_OnMessageReceivedOffset;
void (*remove_OnMessageReceived)(void *_instance, void *value);
DWORD add_OnShouldCloseOffset;
void (*add_OnShouldClose)(void *_instance, void *value);
DWORD remove_OnShouldCloseOffset;
void (*remove_OnShouldClose)(void *_instance, void *value);
DWORD add_OnKeyCodeReceivedOffset;
void (*add_OnKeyCodeReceived)(void *_instance, void *value);
DWORD remove_OnKeyCodeReceivedOffset;
void (*remove_OnKeyCodeReceived)(void *_instance, void *value);
DWORD add_OnOreintationChangedOffset;
void (*add_OnOreintationChanged)(void *_instance, void *value);
DWORD remove_OnOreintationChangedOffset;
void (*remove_OnOreintationChanged)(void *_instance, void *value);
DWORD get_FrameOffset;
int(*get_Frame)(void *_instance);
DWORD set_FrameOffset;
void (*set_Frame)(void *_instance, int value);
DWORD get_ReferenceRectTransformOffset;
void *(*get_ReferenceRectTransform)(void *_instance);
DWORD set_ReferenceRectTransformOffset;
void (*set_ReferenceRectTransform)(void *_instance, void *value);
DWORD get_UrlOffset;
monoString *(*get_Url)(void *_instance);
DWORD UpdateFrameOffset;
void (*UpdateFrame)(void *_instance);
DWORD NextFrameRectOffset;
int(*NextFrameRect)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD LoadOffset;
void (*Load)(void *_instance, monoString *url, bool skipEncoding);
DWORD LoadHTMLStringOffset;
void (*LoadHTMLString)(void *_instance, monoString *htmlString, monoString *baseUrl, bool skipEncoding);
DWORD ReloadOffset;
void (*Reload)(void *_instance);
DWORD StopOffset;
void (*Stop)(void *_instance);
DWORD get_CanGoBackOffset;
bool (*get_CanGoBack)(void *_instance);
DWORD get_CanGoForwardOffset;
bool (*get_CanGoForward)(void *_instance);
DWORD GoBackOffset;
void (*GoBack)(void *_instance);
DWORD GoForwardOffset;
void (*GoForward)(void *_instance);
DWORD SetOpenLinksInExternalBrowserOffset;
void (*SetOpenLinksInExternalBrowser)(void *_instance, bool flag);
DWORD ShowOffset;
bool (*Show)(void *_instance, bool fade, int edge, float duration, void *completionHandler);
DWORD HideOffset;
bool (*Hide)(void *_instance, bool fade, int edge, float duration, void *completionHandler);
DWORD AnimateToOffset;
bool (*AnimateTo)(void *_instance, int frame, float duration, float delay, void *completionHandler);
DWORD AddUrlSchemeOffset;
void (*AddUrlScheme)(void *_instance, monoString *scheme);
DWORD RemoveUrlSchemeOffset;
void (*RemoveUrlScheme)(void *_instance, monoString *scheme);
DWORD AddSslExceptionDomainOffset;
void (*AddSslExceptionDomain)(void *_instance, monoString *domain);
DWORD RemoveSslExceptionDomainOffset;
void (*RemoveSslExceptionDomain)(void *_instance, monoString *domain);
DWORD SetHeaderFieldOffset;
void (*SetHeaderField)(void *_instance, monoString *key, monoString *value);
DWORD SetUserAgentOffset;
void (*SetUserAgent)(void *_instance, monoString *agent);
DWORD GetUserAgentOffset;
monoString *(*GetUserAgent)(void *_instance);
DWORD SetAllowAutoPlayOffset;
void (*SetAllowAutoPlay)(bool flag);
DWORD SetAllowInlinePlayOffset;
void (*SetAllowInlinePlay)(bool flag);
DWORD SetJavaScriptEnabledOffset;
void (*SetJavaScriptEnabled)(bool enabled);
DWORD SetAllowJavaScriptOpenWindowOffset;
void (*SetAllowJavaScriptOpenWindow)(bool flag);
DWORD CleanCacheOffset;
void (*CleanCache)(void *_instance);
DWORD ClearCookiesOffset;
void (*ClearCookies)();
DWORD SetCookieOffset;
void (*SetCookie)(monoString *url, monoString *cookie, bool skipEncoding);
DWORD GetCookieOffset;
monoString *(*GetCookie)(monoString *url, monoString *key, bool skipEncoding);
DWORD ClearHttpAuthUsernamePasswordOffset;
void (*ClearHttpAuthUsernamePassword)(monoString *host, monoString *realm);
DWORD get_BackgroundColorOffset;
Color (*get_BackgroundColor)(void *_instance);
DWORD set_BackgroundColorOffset;
void (*set_BackgroundColor)(void *_instance, Color value);
DWORD get_AlphaOffset;
float (*get_Alpha)(void *_instance);
DWORD set_AlphaOffset;
void (*set_Alpha)(void *_instance, float value);
DWORD SetShowSpinnerWhileLoadingOffset;
void (*SetShowSpinnerWhileLoading)(void *_instance, bool flag);
DWORD SetSpinnerTextOffset;
void (*SetSpinnerText)(void *_instance, monoString *text);
DWORD SetHorizontalScrollBarEnabledOffset;
void (*SetHorizontalScrollBarEnabled)(void *_instance, bool enabled);
DWORD SetVerticalScrollBarEnabledOffset;
void (*SetVerticalScrollBarEnabled)(void *_instance, bool enabled);
DWORD SetBouncesEnabledOffset;
void (*SetBouncesEnabled)(void *_instance, bool enabled);
DWORD SetZoomEnabledOffset;
void (*SetZoomEnabled)(void *_instance, bool enabled);
DWORD AddPermissionTrustDomainOffset;
void (*AddPermissionTrustDomain)(void *_instance, monoString *domain);
DWORD RemovePermissionTrustDomainOffset;
void (*RemovePermissionTrustDomain)(void *_instance, monoString *domain);
DWORD SetBackButtonEnabledOffset;
void (*SetBackButtonEnabled)(void *_instance, bool enabled);
DWORD SetUseWideViewPortOffset;
void (*SetUseWideViewPort)(void *_instance, bool flag);
DWORD SetLoadWithOverviewModeOffset;
void (*SetLoadWithOverviewMode)(void *_instance, bool flag);
DWORD SetImmersiveModeEnabledOffset;
void (*SetImmersiveModeEnabled)(void *_instance, bool enabled);
DWORD SetShowToolbarOffset;
void (*SetShowToolbar)(void *_instance, bool show, bool animated, bool onTop, bool adjustInset);
DWORD SetToolbarDoneButtonTextOffset;
void (*SetToolbarDoneButtonText)(void *_instance, monoString *text);
DWORD SetWebContentsDebuggingEnabledOffset;
void (*SetWebContentsDebuggingEnabled)(bool enabled);
DWORD SetWindowUserResizeEnabledOffset;
void (*SetWindowUserResizeEnabled)(void *_instance, bool enabled);
DWORD PrintOffset;
void (*Print)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD OnApplicationPauseOffset;
void (*OnApplicationPause)(void *_instance, bool pause);
DWORD InternalOnShowTransitionFinishedOffset;
void (*InternalOnShowTransitionFinished)(void *_instance, monoString *identifier);
DWORD InternalOnHideTransitionFinishedOffset;
void (*InternalOnHideTransitionFinished)(void *_instance, monoString *identifier);
DWORD InternalOnAnimateToFinishedOffset;
void (*InternalOnAnimateToFinished)(void *_instance, monoString *identifier);
DWORD InternalOnAddJavaScriptFinishedOffset;
void (*InternalOnAddJavaScriptFinished)(void *_instance, void *payload);
DWORD InternalOnEvalJavaScriptFinishedOffset;
void (*InternalOnEvalJavaScriptFinished)(void *_instance, void *payload);
DWORD InternalOnPageFinishedOffset;
void (*InternalOnPageFinished)(void *_instance, void *payload);
DWORD InternalOnPageStartedOffset;
void (*InternalOnPageStarted)(void *_instance, monoString *url);
DWORD InternalOnPageErrorReceivedOffset;
void (*InternalOnPageErrorReceived)(void *_instance, void *payload);
DWORD InternalOnMessageReceivedOffset;
void (*InternalOnMessageReceived)(void *_instance, monoString *result);
DWORD InternalOnWebViewKeyDownOffset;
void (*InternalOnWebViewKeyDown)(void *_instance, int keyCode);
DWORD InternalOnShouldCloseOffset;
void (*InternalOnShouldClose)(void *_instance);
}UniWebView;
struct UniWebViewHelper {
DWORD StreamingAssetURLForPathOffset;
monoString *(*StreamingAssetURLForPath)(monoString *path);
DWORD PersistentDataURLForPathOffset;
monoString *(*PersistentDataURLForPath)(monoString *path);
}UniWebViewHelper;
struct UniWebViewLogger {
DWORD get_LogLevelOffset;
int(*get_LogLevel)(void *_instance);
DWORD set_LogLevelOffset;
void (*set_LogLevel)(void *_instance, int value);
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD VerboseOffset;
void (*Verbose)(void *_instance, monoString *message);
DWORD DebugOffset;
void (*Debug)(void *_instance, monoString *message);
DWORD InfoOffset;
void (*Info)(void *_instance, monoString *message);
DWORD CriticalOffset;
void (*Critical)(void *_instance, monoString *message);
DWORD LogOffset;
void (*Log)(void *_instance, int level, monoString *message);
}UniWebViewLogger;
struct UniWebViewMessage {
DWORD get_RawMessageOffset;
monoString *(*get_RawMessage)(void *_instance);
DWORD set_RawMessageOffset;
void (*set_RawMessage)(void *_instance, monoString *value);
DWORD get_SchemeOffset;
monoString *(*get_Scheme)(void *_instance);
DWORD set_SchemeOffset;
void (*set_Scheme)(void *_instance, monoString *value);
DWORD get_PathOffset;
monoString *(*get_Path)(void *_instance);
DWORD set_PathOffset;
void (*set_Path)(void *_instance, monoString *value);
DWORD get_ArgsOffset;
}UniWebViewMessage;
struct UniWebViewNativeListener {
DWORD AddListenerOffset;
void (*AddListener)(void *target);
DWORD RemoveListenerOffset;
void (*RemoveListener)(monoString *name);
DWORD GetListenerOffset;
void *(*GetListener)(monoString *name);
DWORD get_NameOffset;
monoString *(*get_Name)(void *_instance);
DWORD PageStartedOffset;
void (*PageStarted)(void *_instance, monoString *url);
DWORD PageFinishedOffset;
void (*PageFinished)(void *_instance, monoString *result);
DWORD PageErrorReceivedOffset;
void (*PageErrorReceived)(void *_instance, monoString *result);
DWORD ShowTransitionFinishedOffset;
void (*ShowTransitionFinished)(void *_instance, monoString *identifer);
DWORD HideTransitionFinishedOffset;
void (*HideTransitionFinished)(void *_instance, monoString *identifer);
DWORD AnimateToFinishedOffset;
void (*AnimateToFinished)(void *_instance, monoString *identifer);
DWORD AddJavaScriptFinishedOffset;
void (*AddJavaScriptFinished)(void *_instance, monoString *result);
DWORD EvalJavaScriptFinishedOffset;
void (*EvalJavaScriptFinished)(void *_instance, monoString *result);
DWORD MessageReceivedOffset;
void (*MessageReceived)(void *_instance, monoString *result);
DWORD WebViewKeyDownOffset;
void (*WebViewKeyDown)(void *_instance, monoString *keyCode);
DWORD WebViewDoneOffset;
void (*WebViewDone)(void *_instance, monoString *param);
}UniWebViewNativeListener;
struct UniWebViewNativeResultPayload {
}UniWebViewNativeResultPayload;
struct UnityDeeplinks {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD onDeeplinkOffset;
void (*onDeeplink)(void *_instance, monoString *deeplink);
}UnityDeeplinks;
struct DeviceDetection {
DWORD IsEmulatorOffset;
bool (*IsEmulator)();
DWORD IsRootedOrJailbrokenOffset;
bool (*IsRootedOrJailbroken)();
}DeviceDetection;
struct FrustumAlways {
DWORD OnDrawGizmosOffset;
void (*OnDrawGizmos)(void *_instance);
}FrustumAlways;
struct WeaponPictureTaker {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD TakePictureOffset;
void (*TakePicture)(void *_instance, monoString *pictureName);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD TakePicturesOffset;
void *(*TakePictures)(void *_instance);
}WeaponPictureTaker;
struct MinigunSounds {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ShouldPlayOffset;
bool (*ShouldPlay)(void *_instance);
DWORD StartRotationOffset;
void (*StartRotation)(void *_instance);
DWORD PlayDieSoundOffset;
void (*PlayDieSound)(void *_instance);
DWORD StopAllAudiosOffset;
void (*StopAllAudios)(void *_instance);
}MinigunSounds;
struct CloseBrowserButton {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD Startb__1_0Offset;
void (*Startb__1_0)(void *_instance);
}CloseBrowserButton;
struct PreloaderScript {
DWORD StartOffset;
void (*Start)(void *_instance);
}PreloaderScript;
struct RotateCircle {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}RotateCircle;
struct SinglePageBrowser2D {
}SinglePageBrowser2D;
struct AuthTokenHelper {
DWORD DeleteTokenOffset;
void (*DeleteToken)(monoString *key);
DWORD SaveTokenOffset;
void (*SaveToken)(monoString *key, void *token);
}AuthTokenHelper;
struct CatalogItemModel {
DWORD get_VirtualPriceOffset;
DWORD get_RealPriceOffset;
DWORD IsVirtualCurrencyOffset;
bool (*IsVirtualCurrency)(void *_instance);
}CatalogItemModel;
struct CatalogVirtualCurrencyModel {
DWORD get_AmountOffset;
DWORD get_CurrencySkuOffset;
monoString *(*get_CurrencySku)(void *_instance);
DWORD set_CurrencySkuOffset;
void (*set_CurrencySku)(void *_instance, monoString *value);
DWORD IsVirtualCurrencyOffset;
bool (*IsVirtualCurrency)(void *_instance);
}CatalogVirtualCurrencyModel;
struct CatalogVirtualItemModel {
DWORD IsVirtualCurrencyOffset;
bool (*IsVirtualCurrency)(void *_instance);
}CatalogVirtualItemModel;
struct UserCatalog {
}UserCatalog;
struct GroupUI {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD get_IdOffset;
monoString *(*get_Id)(void *_instance);
DWORD set_IdOffset;
void (*set_Id)(void *_instance, monoString *value);
DWORD get_NameOffset;
monoString *(*get_Name)(void *_instance);
DWORD set_NameOffset;
void (*set_Name)(void *_instance, monoString *value);
DWORD get_OnGroupClickOffset;
DWORD SelectOffset;
void (*Select)(void *_instance);
DWORD DeselectOffset;
void (*Deselect)(void *_instance);
DWORD IsSelectedOffset;
bool (*IsSelected)(void *_instance);
DWORD Awakeb__1_0Offset;
void (*Awakeb__1_0)(void *_instance, monoString *s);
}GroupUI;
struct GroupsController {
DWORD get_GroupsOffset;
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetPreviousGroupOffset;
void (*SetPreviousGroup)(void *_instance);
DWORD SetNextGroupOffset;
void (*SetNextGroup)(void *_instance);
DWORD AddGroupOffset;
void (*AddGroup)(void *_instance, monoString *groupName);
DWORD SelectGroupOffset;
void (*SelectGroup)(void *_instance, monoString *groupId);
DWORD SelectDefaultOffset;
void (*SelectDefault)(void *_instance);
DWORD GetSelectedGroupOffset;
void *(*GetSelectedGroup)(void *_instance);
}GroupsController;
struct GroupsHotKeys {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD Startb__2_0Offset;
void (*Startb__2_0)(void *_instance);
DWORD Startb__2_1Offset;
void (*Startb__2_1)(void *_instance);
}GroupsHotKeys;
struct IGroup {
}IGroup;
struct HotkeyCoroutine {
DWORD add_KeyPressedEventOffset;
void (*add_KeyPressedEvent)(void *_instance, void *value);
DWORD remove_KeyPressedEventOffset;
void (*remove_KeyPressedEvent)(void *_instance, void *value);
DWORD StartCoroutineOffset;
void *(*StartCoroutine)(void *_instance, int keyCode, float timeout);
DWORD LockOffset;
void (*Lock)();
DWORD UnlockOffset;
void (*Unlock)();
DWORD IsLockedOffset;
bool (*IsLocked)();
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD startCoroutineOffset;
void (*startCoroutine)(void *_instance);
DWORD stopCoroutineOffset;
void (*stopCoroutine)(void *_instance);
DWORD SomeHotkeyCoroutineOffset;
void *(*SomeHotkeyCoroutine)(void *_instance);
DWORD SomeHotkeyCoroutineb__16_0Offset;
bool (*SomeHotkeyCoroutineb__16_0)(void *_instance);
}HotkeyCoroutine;
struct StoreTabsHotkey {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD Startb__3_0Offset;
void (*Startb__3_0)(void *_instance);
DWORD Startb__3_1Offset;
void (*Startb__3_1)(void *_instance);
DWORD Startb__3_2Offset;
void (*Startb__3_2)(void *_instance);
}StoreTabsHotkey;
struct InventoryItemContainer {
}InventoryItemContainer;
struct InventoryItemModel {
DWORD IsVirtualCurrencyOffset;
bool (*IsVirtualCurrency)(void *_instance);
}InventoryItemModel;
struct InventoryItemUI {
}InventoryItemUI;
struct UserInventory {
}UserInventory;
struct VirtualCurrencyBalanceModel {
DWORD IsVirtualCurrencyOffset;
bool (*IsVirtualCurrency)(void *_instance);
DWORD get_AmountOffset;
}VirtualCurrencyBalanceModel;
struct ItemContainer {
}ItemContainer;
struct ItemModel {
}ItemModel;
struct ItemUI {
}ItemUI;
struct ItemsController {
}ItemsController;
struct ItemsTabControl {
}ItemsTabControl;
struct StoreController {
}StoreController;
struct ConsumeButton {
DWORD get_onClickOffset;
void *(*get_onClick)(void *_instance);
DWORD set_onClickOffset;
void (*set_onClick)(void *_instance, void *value);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD Startb__6_0Offset;
void (*Startb__6_0)(void *_instance);
}ConsumeButton;
struct MenuButton {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD PerformClickEventOffset;
void (*PerformClickEvent)(void *_instance);
DWORD SelectOffset;
void (*Select)(void *_instance, bool triggerClickEvent);
DWORD DeselectOffset;
void (*Deselect)(void *_instance);
DWORD get_TextOffset;
monoString *(*get_Text)(void *_instance);
DWORD set_TextOffset;
void (*set_Text)(void *_instance, monoString *value);
DWORD get_IdOffset;
monoString *(*get_Id)(void *_instance);
DWORD set_IdOffset;
void (*set_Id)(void *_instance, monoString *value);
DWORD get_IsSelectedOffset;
bool (*get_IsSelected)(void *_instance);
DWORD OnDragOffset;
void (*OnDrag)(void *_instance, void *eventData);
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *eventData);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *eventData);
DWORD OnNormalOffset;
void (*OnNormal)(void *_instance);
DWORD OnHoverOffset;
void (*OnHover)(void *_instance);
DWORD OnPressedOffset;
void (*OnPressed)(void *_instance);
DWORD OnSelectedOffset;
void (*OnSelected)(void *_instance);
}MenuButton;
struct SimpleButton {
DWORD get_RateLimitMsOffset;
float (*get_RateLimitMs)(void *_instance);
DWORD set_RateLimitMsOffset;
void (*set_RateLimitMs)(void *_instance, float value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDragOffset;
void (*OnDrag)(void *_instance, void *eventData);
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *eventData);
DWORD PerformClickEventOffset;
void (*PerformClickEvent)(void *_instance);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *eventData);
DWORD OnNormalOffset;
void (*OnNormal)(void *_instance);
DWORD OnHoverOffset;
void (*OnHover)(void *_instance);
DWORD OnPressedOffset;
void (*OnPressed)(void *_instance);
}SimpleButton;
struct SimpleButtonLockDecorator {
DWORD LockOffset;
void (*Lock)(void *_instance);
DWORD UnlockOffset;
void (*Unlock)(void *_instance);
DWORD IsLockedOffset;
bool (*IsLocked)(void *_instance);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *eventData);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *eventData);
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
DWORD OnDragOffset;
void (*OnDrag)(void *_instance, void *eventData);
}SimpleButtonLockDecorator;
struct SimpleTextButton {
DWORD get_TextOffset;
monoString *(*get_Text)(void *_instance);
DWORD set_TextOffset;
void (*set_Text)(void *_instance, monoString *value);
DWORD OnNormalOffset;
void (*OnNormal)(void *_instance);
DWORD OnHoverOffset;
void (*OnHover)(void *_instance);
DWORD OnPressedOffset;
void (*OnPressed)(void *_instance);
}SimpleTextButton;
struct LoadingCircle {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}LoadingCircle;
struct HorizontalSizeChanger {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD SetWidthOffset;
void (*SetWidth)(void *_instance, float value);
DWORD GetWidthOffset;
float (*GetWidth)(void *_instance);
}HorizontalSizeChanger;
struct ValueCounter {
DWORD GetValueOffset;
int (*GetValue)(void *_instance);
DWORD IncreaseValueOffset;
void (*IncreaseValue)(void *_instance, int delta);
DWORD DecreaseValueOffset;
void (*DecreaseValue)(void *_instance, int delta);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD op_IncrementOffset;
void *(*op_Increment)(void *value);
DWORD op_DecrementOffset;
void *(*op_Decrement)(void *value);
DWORD op_ImplicitOffset;
int (*op_Implicit)(void *value);
}ValueCounter;
struct ValueCounterControl {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD Counter_ValueChangedOffset;
void (*Counter_ValueChanged)(void *_instance, int value);
DWORD Startb__5_0Offset;
void (*Startb__5_0)(void *_instance);
DWORD Startb__5_1Offset;
void (*Startb__5_1)(void *_instance);
}ValueCounterControl;
struct ValueCounterVisibility {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ChangeVisibilityCoroutineOffset;
void *(*ChangeVisibilityCoroutine)(void *_instance, bool visible);
DWORD ChangeSizeCoroutineOffset;
void *(*ChangeSizeCoroutine)(void *_instance, void *sizeChanger, float newValue, float maxSize);
DWORD ChangeSizeOffset;
bool (*ChangeSize)(void *_instance, void *sizeChanger, float newSize, float step);
DWORD SetVisibilityOffset;
void (*SetVisibility)(void *_instance, bool visibility);
DWORD UnityEngineEventSystemsIPointerEnterHandlerOnPointerEnterOffset;
void (*UnityEngineEventSystemsIPointerEnterHandlerOnPointerEnter)(void *_instance, void *eventData);
DWORD UnityEngineEventSystemsIPointerExitHandlerOnPointerExitOffset;
void (*UnityEngineEventSystemsIPointerExitHandlerOnPointerExit)(void *_instance, void *eventData);
}ValueCounterVisibility;
struct VirtualCurrencyBalanceUI {
DWORD InitializeOffset;
void (*Initialize)(void *_instance, void *item);
DWORD Initializeb__2_0Offset;
void (*Initializeb__2_0)(void *_instance, monoString *_, void *sprite);
}VirtualCurrencyBalanceUI;
struct VirtualCurrencyContainer {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD AddCurrencyOffset;
void *(*AddCurrency)(void *_instance, void *item);
DWORD SetCurrencyBalanceOffset;
void (*SetCurrencyBalance)(void *_instance, void *balance);
}VirtualCurrencyContainer;
struct BasicAuth {
DWORD get_OnSuccessOffset;
DWORD get_OnFailedOffset;
void *(*get_OnFailed)(void *_instance);
DWORD set_OnFailedOffset;
void (*set_OnFailed)(void *_instance, void *value);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD IsValidCredentialsOffset;
bool (*IsValidCredentials)(void *_instance);
DWORD SetUserNameOffset;
void (*SetUserName)(void *_instance, monoString *username);
DWORD SetPasswordOffset;
void (*SetPassword)(void *_instance, monoString *password);
DWORD SetLoginButtonOffset;
void *(*SetLoginButton)(void *_instance, void *button);
DWORD SoftwareAuthOffset;
void (*SoftwareAuth)(void *_instance);
DWORD LoginOffset;
void (*Login)(void *_instance);
DWORD BasicAuthFailedOffset;
void (*BasicAuthFailed)(void *_instance, void *error);
DWORD Loginb__20_0Offset;
void (*Loginb__20_0)(void *_instance, void *token);
}BasicAuth;
struct BasicAuthButton {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD SetButtonOffset;
void *(*SetButton)(void *_instance, void *button);
DWORD SetHandlerOffset;
void *(*SetHandler)(void *_instance, void *clickHandler);
DWORD SoftwareClickOffset;
void (*SoftwareClick)(void *_instance);
DWORD WithRateLimitsOffset;
void *(*WithRateLimits)(void *_instance, void *action);
}BasicAuthButton;
struct ILoginAuthorization {
}ILoginAuthorization;
struct SavedTokenAuth {
DWORD get_OnSuccessOffset;
DWORD get_OnFailedOffset;
void *(*get_OnFailed)(void *_instance);
DWORD set_OnFailedOffset;
void (*set_OnFailed)(void *_instance, void *value);
DWORD StartOffset;
void (*Start)(void *_instance);
}SavedTokenAuth;
struct AuthController {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD PagesEventsOffset;
void (*PagesEvents)(void *_instance);
DWORD PagesControllerOffset;
void (*PagesController)(void *_instance);
DWORD ReturnToTheLogInOffset;
void (*ReturnToTheLogIn)(void *_instance);
DWORD OpenPageOffset;
void (*OpenPage)(void *_instance, void *page);
DWORD OpenSavedOffset;
void (*OpenSaved)(void *_instance);
DWORD CloseAndSaveOffset;
void (*CloseAndSave)(void *_instance);
DWORD CloseAllOffset;
void (*CloseAll)(void *_instance);
DWORD OpenPopUpOffset;
void (*OpenPopUp)(void *_instance, monoString *message, int popUp);
DWORD OpenPopUp1Offset;
void (*OpenPopUp1)(void *_instance, monoString *header, monoString *message);
DWORD OnErrorOffset;
void (*OnError)(void *_instance, void *error);
DWORD OnLoginOffset;
void (*OnLogin)(void *_instance, void *token);
DWORD PagesEventsb__11_0Offset;
void (*PagesEventsb__11_0)(void *_instance);
DWORD PagesControllerb__12_0Offset;
void (*PagesControllerb__12_0)(void *_instance);
DWORD PagesControllerb__12_1Offset;
void (*PagesControllerb__12_1)(void *_instance);
DWORD PagesControllerb__12_2Offset;
void (*PagesControllerb__12_2)(void *_instance);
}AuthController;
struct ChangeCursor {
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}ChangeCursor;
struct ExtendedPopUp {
DWORD set_OnReturnToLoginOffset;
void (*set_OnReturnToLogin)(void *_instance, void *value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ShowPopUpOffset;
void (*ShowPopUp)(void *_instance, monoString *header, monoString *message);
}ExtendedPopUp;
struct LogInHotkeys {
DWORD add_EnterKeyPressedEventOffset;
void (*add_EnterKeyPressedEvent)(void *_instance, void *value);
DWORD remove_EnterKeyPressedEventOffset;
void (*remove_EnterKeyPressedEvent)(void *_instance, void *value);
DWORD add_TabKeyPressedEventOffset;
void (*add_TabKeyPressedEvent)(void *_instance, void *value);
DWORD remove_TabKeyPressedEventOffset;
void (*remove_TabKeyPressedEvent)(void *_instance, void *value);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD Startb__6_0Offset;
void (*Startb__6_0)(void *_instance);
DWORD Startb__6_1Offset;
void (*Startb__6_1)(void *_instance);
}LogInHotkeys;
struct IExtendedPopUp {
}IExtendedPopUp;
struct ILogin {
}ILogin;
struct IPage {
}IPage;
struct IPanelVisualElement {
}IPanelVisualElement;
struct IPopUp {
}IPopUp;
struct IPopUpController {
}IPopUpController;
struct IResetPassword {
}IResetPassword;
struct ISignUp {
}ISignUp;
struct LoginPage {
DWORD get_OnSuccessfulLoginOffset;
DWORD get_OnUnsuccessfulLoginOffset;
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SavedTokenAuthFailedOffset;
void (*SavedTokenAuthFailed)(void *_instance);
DWORD TryBasicAuthOffset;
void (*TryBasicAuth)(void *_instance);
DWORD ConfigBaseAuthOffset;
void (*ConfigBaseAuth)(void *_instance);
DWORD ChangeFocusOffset;
void (*ChangeFocus)(void *_instance);
DWORD Startb__14_0Offset;
void (*Startb__14_0)(void *_instance, bool isPasswordHidden);
DWORD TryBasicAuthb__16_0Offset;
void (*TryBasicAuthb__16_0)(void *_instance, void *error);
}LoginPage;
struct Page {
DWORD CloseOffset;
void (*Close)(void *_instance);
DWORD OpenOffset;
void (*Open)(void *_instance);
}Page;
struct PanelElementVisualize {
DWORD SelectOffset;
void (*Select)(void *_instance);
DWORD DeselectOffset;
void (*Deselect)(void *_instance);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
}PanelElementVisualize;
struct PopUp {
DWORD set_OnCloseOffset;
void (*set_OnClose)(void *_instance, void *value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ShowPopUpOffset;
void (*ShowPopUp)(void *_instance, monoString *message);
}PopUp;
struct PopUpController {
DWORD set_OnClosePopUpOffset;
void (*set_OnClosePopUp)(void *_instance, void *value);
DWORD set_OnReturnToLoginOffset;
void (*set_OnReturnToLogin)(void *_instance, void *value);
DWORD ShowPopUpOffset;
void (*ShowPopUp)(void *_instance, monoString *message, int popUp);
DWORD ShowPopUp1Offset;
void (*ShowPopUp1)(void *_instance, monoString *header, monoString *message);
}PopUpController;
struct ResetPasswordPage {
DWORD get_OnSuccessfulResetPasswordOffset;
void *(*get_OnSuccessfulResetPassword)(void *_instance);
DWORD set_OnSuccessfulResetPasswordOffset;
void (*set_OnSuccessfulResetPassword)(void *_instance, void *value);
DWORD get_OnUnsuccessfulResetPasswordOffset;
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateButtonStateOffset;
void (*UpdateButtonState)(void *_instance);
DWORD SuccessfulResetPasswordOffset;
void (*SuccessfulResetPassword)(void *_instance);
DWORD ResetPasswordOffset;
void (*ResetPassword)(void *_instance);
DWORD Awakeb__10_0Offset;
void (*Awakeb__10_0)(void *_instance, monoString *p0);
}ResetPasswordPage;
struct SignUpPage {
DWORD get_SignUpEmailOffset;
monoString *(*get_SignUpEmail)(void *_instance);
DWORD get_OnSuccessfulSignUpOffset;
DWORD get_OnUnsuccessfulSignUpOffset;
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD ChangeFocusOffset;
void (*ChangeFocus)(void *_instance);
DWORD UpdateButtonStateOffset;
void (*UpdateButtonState)(void *_instance);
DWORD SignUpOffset;
void (*SignUp)(void *_instance);
DWORD SuccessfulRegistrationOffset;
void (*SuccessfulRegistration)(void *_instance, void *response);
DWORD Awakeb__17_0Offset;
void (*Awakeb__17_0)(void *_instance, monoString *p0);
DWORD Awakeb__17_1Offset;
void (*Awakeb__17_1)(void *_instance, monoString *p0);
DWORD Awakeb__17_2Offset;
void (*Awakeb__17_2)(void *_instance, monoString *p0);
DWORD Awakeb__17_3Offset;
void (*Awakeb__17_3)(void *_instance, bool mood);
}SignUpPage;
struct VisualizeInputField {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnSelectOffset;
void (*OnSelect)(void *_instance, void *data);
DWORD OnDeselectOffset;
void (*OnDeselect)(void *_instance, void *data);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
}VisualizeInputField;
struct VisualizeSpecificText {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
}VisualizeSpecificText;
struct VisualizeText {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
}VisualizeText;
struct VisualizeToggle {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
DWORD OnPointerClickOffset;
void (*OnPointerClick)(void *_instance, void *eventData);
}VisualizeToggle;
struct WarningPopUp {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}WarningPopUp;
struct KeyChainBinding {
DWORD get_mSavePathOffset;
monoString *(*get_mSavePath)();
DWORD get_mUniqueIdentifierOffset;
monoString *(*get_mUniqueIdentifier)();
DWORD set_mUniqueIdentifierOffset;
void (*set_mUniqueIdentifier)(monoString *value);
DWORD SetKeyChainDataOffset;
void (*SetKeyChainData)(monoString *applicationKey, monoString *data);
DWORD DeleteKeyChainDataOffset;
void (*DeleteKeyChainData)();
DWORD LogOffset;
void (*Log)(monoString *log);
}KeyChainBinding;
struct KeyChainCrypto {
DWORD CryptOffset;
monoString *(*Crypt)(monoString *text, monoString *secret);
DWORD DecryptOffset;
monoString *(*Decrypt)(monoString *text, monoString *secret);
}KeyChainCrypto;
struct KeyChainDebug {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}KeyChainDebug;
struct IKeyChainPluginPath {
}IKeyChainPluginPath;

namespace AmplifyColor{
struct RenderLayer {
}RenderLayer;
struct VersionInfo {
DWORD StaticToStringOffset;
monoString *(*StaticToString)();
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD get_NumberOffset;
int (*get_Number)(void *_instance);
DWORD CurrentOffset;
void *(*Current)();
DWORD MatchesOffset;
bool (*Matches)(void *version);
}VersionInfo;
struct VolumeEffectField {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, void *pi, void *c);
DWORD IsValidTypeOffset;
bool (*IsValidType)(monoString *type);
}VolumeEffectField;
struct VolumeEffectComponent {
DWORD AddFieldOffset;
void *(*AddField)(void *_instance, void *pi, void *c);
DWORD AddField1Offset;
void *(*AddField1)(void *_instance, void *pi, void *c, int position);
DWORD RemoveEffectFieldOffset;
void (*RemoveEffectField)(void *_instance, void *field);
DWORD ctor1Offset;
void (*ctor1)(void *_instance, void *c, void *compFlags);
DWORD UpdateComponentOffset;
void (*UpdateComponent)(void *_instance, void *c, void *compFlags);
DWORD FindEffectFieldOffset;
void *(*FindEffectField)(void *_instance, monoString *fieldName);
DWORD ListAcceptableFieldsOffset;
DWORD GetFieldNamesOffset;
}VolumeEffectComponent;
struct VolumeEffect {
DWORD BlendValuesToVolumeEffectOffset;
void *(*BlendValuesToVolumeEffect)(void *flags, void *volume1, void *volume2, float blend);
DWORD AddComponentOffset;
void *(*AddComponent)(void *_instance, void *c, void *compFlags);
DWORD RemoveEffectComponentOffset;
void (*RemoveEffectComponent)(void *_instance, void *comp);
DWORD UpdateVolumeOffset;
void (*UpdateVolume)(void *_instance);
DWORD SetValuesOffset;
void (*SetValues)(void *_instance, void *targetColor);
DWORD BlendValuesOffset;
void (*BlendValues)(void *_instance, void *targetColor, void *other, float blendAmount);
DWORD FindEffectComponentOffset;
void *(*FindEffectComponent)(void *_instance, monoString *compName);
DWORD ListAcceptableComponentsOffset;
DWORD GetComponentNamesOffset;
}VolumeEffect;
struct VolumeEffectContainer {
DWORD AddColorEffectOffset;
void (*AddColorEffect)(void *_instance, void *colorEffect);
DWORD AddJustColorEffectOffset;
void *(*AddJustColorEffect)(void *_instance, void *colorEffect);
DWORD FindVolumeEffectOffset;
void *(*FindVolumeEffect)(void *_instance, void *colorEffect);
DWORD RemoveVolumeEffectOffset;
void (*RemoveVolumeEffect)(void *_instance, void *volume);
DWORD GetStoredEffectsOffset;
}VolumeEffectContainer;
struct VolumeEffectFieldFlags {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, void *field);
}VolumeEffectFieldFlags;
struct VolumeEffectComponentFlags {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, void *comp);
DWORD ctor2Offset;
void (*ctor2)(void *_instance, void *c);
DWORD UpdateComponentFlagsOffset;
void (*UpdateComponentFlags)(void *_instance, void *comp);
DWORD UpdateComponentFlags1Offset;
void (*UpdateComponentFlags1)(void *_instance, void *c);
DWORD GetFieldNamesOffset;
}VolumeEffectComponentFlags;
struct VolumeEffectFlags {
DWORD AddComponentOffset;
void (*AddComponent)(void *_instance, void *c);
DWORD UpdateFlagsOffset;
void (*UpdateFlags)(void *_instance, void *effectVol);
DWORD GenerateEffectDataOffset;
void *(*GenerateEffectData)(void *_instance, void *go);
DWORD FindComponentFlagsOffset;
void *(*FindComponentFlags)(void *_instance, monoString *compName);
DWORD GetComponentNamesOffset;
}VolumeEffectFlags;
}
namespace AssetBundles{
struct AssetBundleLoadOperation {
DWORD get_CurrentOffset;
DWORD MoveNextOffset;
bool (*MoveNext)(void *_instance);
DWORD ResetOffset;
void (*Reset)(void *_instance);
}AssetBundleLoadOperation;
struct AssetBundleLoadLevelOperation {
DWORD UpdateOffset;
bool (*Update)(void *_instance);
DWORD IsDoneOffset;
bool (*IsDone)(void *_instance);
}AssetBundleLoadLevelOperation;
struct AssetBundleLoadAssetOperation {
}AssetBundleLoadAssetOperation;
struct AssetBundleLoadAssetOperationSimulation {
DWORD UpdateOffset;
bool (*Update)(void *_instance);
DWORD IsDoneOffset;
bool (*IsDone)(void *_instance);
}AssetBundleLoadAssetOperationSimulation;
struct AssetBundleLoadAssetOperationFull {
DWORD UpdateOffset;
bool (*Update)(void *_instance);
DWORD IsDoneOffset;
bool (*IsDone)(void *_instance);
}AssetBundleLoadAssetOperationFull;
struct AssetBundleLoadManifestOperation {
DWORD UpdateOffset;
bool (*Update)(void *_instance);
}AssetBundleLoadManifestOperation;
struct LoadedAssetBundle {
}LoadedAssetBundle;
struct AssetBundleManager {
DWORD get_logModeOffset;
int(*get_logMode)();
DWORD set_logModeOffset;
void (*set_logMode)(int value);
DWORD get_BaseDownloadingURLOffset;
monoString *(*get_BaseDownloadingURL)();
DWORD set_BaseDownloadingURLOffset;
void (*set_BaseDownloadingURL)(monoString *value);
DWORD get_ActiveVariantsOffset;
DWORD set_AssetBundleManifestObjectOffset;
void (*set_AssetBundleManifestObject)(void *value);
DWORD LogOffset;
void (*Log)(int logType, monoString *text);
DWORD GetStreamingAssetsPathOffset;
monoString *(*GetStreamingAssetsPath)();
DWORD SetSourceAssetBundleDirectoryOffset;
void (*SetSourceAssetBundleDirectory)(monoString *relativePath);
DWORD SetSourceAssetBundleURLOffset;
void (*SetSourceAssetBundleURL)(monoString *absolutePath);
DWORD SetDevelopmentAssetBundleServerOffset;
void (*SetDevelopmentAssetBundleServer)();
DWORD InitializeOffset;
void *(*Initialize)();
DWORD Initialize1Offset;
void *(*Initialize1)(monoString *manifestAssetBundleName);
DWORD LoadAssetBundleOffset;
void (*LoadAssetBundle)(monoString *assetBundleName, bool isLoadingAssetBundleManifest);
DWORD RemapVariantNameOffset;
monoString *(*RemapVariantName)(monoString *assetBundleName);
DWORD LoadAssetBundleInternalOffset;
bool (*LoadAssetBundleInternal)(monoString *assetBundleName, bool isLoadingAssetBundleManifest);
DWORD LoadDependenciesOffset;
void (*LoadDependencies)(monoString *assetBundleName);
DWORD UnloadAssetBundleOffset;
void (*UnloadAssetBundle)(monoString *assetBundleName);
DWORD UnloadDependenciesOffset;
void (*UnloadDependencies)(monoString *assetBundleName);
DWORD UnloadAssetBundleInternalOffset;
void (*UnloadAssetBundleInternal)(monoString *assetBundleName);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD LoadAssetAsyncOffset;
void *(*LoadAssetAsync)(monoString *assetBundleName, monoString *assetName, void *type);
DWORD LoadLevelAsyncOffset;
void *(*LoadLevelAsync)(monoString *assetBundleName, monoString *levelName, bool isAdditive);
}AssetBundleManager;
struct Utility {
DWORD GetPlatformNameOffset;
monoString *(*GetPlatformName)();
DWORD GetPlatformForAssetBundlesOffset;
monoString *(*GetPlatformForAssetBundles)(int platform);
}Utility;
}
namespace BazaarPlugin{
struct AbstractManager {
DWORD getBazaarManagerGameObjectOffset;
void *(*getBazaarManagerGameObject)();
DWORD initializeOffset;
void (*initialize)(void *type);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
}AbstractManager;
struct ActionExtensions {
DWORD SafeInvokeOffset;
void (*SafeInvoke)(void *action);
}ActionExtensions;
struct BazaarIAB {
DWORD GetVersionOffset;
monoString *(*GetVersion)();
DWORD enableLoggingOffset;
void (*enableLogging)(bool enable);
DWORD initOffset;
void (*init)(monoString *publicKey);
DWORD unbindServiceOffset;
void (*unbindService)();
DWORD areSubscriptionsSupportedOffset;
bool (*areSubscriptionsSupported)();
DWORD queryPurchasesOffset;
void (*queryPurchases)();
DWORD purchaseProductOffset;
void (*purchaseProduct)(monoString *sku);
DWORD purchaseProduct1Offset;
void (*purchaseProduct1)(monoString *sku, monoString *developerPayload);
DWORD consumeProductOffset;
void (*consumeProduct)(monoString *sku);
}BazaarIAB;
struct IABEventManager {
DWORD add_billingSupportedEventOffset;
void (*add_billingSupportedEvent)(void *value);
DWORD remove_billingSupportedEventOffset;
void (*remove_billingSupportedEvent)(void *value);
DWORD billingSupportedOffset;
void (*billingSupported)(void *_instance, monoString *empty);
DWORD billingNotSupportedOffset;
void (*billingNotSupported)(void *_instance, monoString *error);
DWORD queryInventorySucceededOffset;
void (*queryInventorySucceeded)(void *_instance, monoString *jsonStr);
DWORD queryInventoryFailedOffset;
void (*queryInventoryFailed)(void *_instance, monoString *error);
DWORD querySkuDetailsSucceededOffset;
void (*querySkuDetailsSucceeded)(void *_instance, monoString *jsonStr);
DWORD querySkuDetailsFailedOffset;
void (*querySkuDetailsFailed)(void *_instance, monoString *error);
DWORD queryPurchasesSucceededOffset;
void (*queryPurchasesSucceeded)(void *_instance, monoString *jsonStr);
DWORD queryPurchasesFailedOffset;
void (*queryPurchasesFailed)(void *_instance, monoString *error);
DWORD purchaseSucceededOffset;
void (*purchaseSucceeded)(void *_instance, monoString *jsonStr);
DWORD purchaseFailedOffset;
void (*purchaseFailed)(void *_instance, monoString *error);
DWORD consumePurchaseSucceededOffset;
void (*consumePurchaseSucceeded)(void *_instance, monoString *jsonStr);
DWORD consumePurchaseFailedOffset;
void (*consumePurchaseFailed)(void *_instance, monoString *error);
}IABEventManager;
struct BazaarPurchase {
DWORD get_PackageNameOffset;
monoString *(*get_PackageName)(void *_instance);
DWORD set_PackageNameOffset;
void (*set_PackageName)(void *_instance, monoString *value);
DWORD get_OrderIdOffset;
monoString *(*get_OrderId)(void *_instance);
DWORD set_OrderIdOffset;
void (*set_OrderId)(void *_instance, monoString *value);
DWORD get_ProductIdOffset;
monoString *(*get_ProductId)(void *_instance);
DWORD set_ProductIdOffset;
void (*set_ProductId)(void *_instance, monoString *value);
DWORD get_DeveloperPayloadOffset;
monoString *(*get_DeveloperPayload)(void *_instance);
DWORD set_DeveloperPayloadOffset;
void (*set_DeveloperPayload)(void *_instance, monoString *value);
DWORD get_TypeOffset;
monoString *(*get_Type)(void *_instance);
DWORD set_TypeOffset;
void (*set_Type)(void *_instance, monoString *value);
DWORD get_PurchaseTimeOffset;
DWORD get_PurchaseStateOffset;
int(*get_PurchaseState)(void *_instance);
DWORD set_PurchaseStateOffset;
void (*set_PurchaseState)(void *_instance, int value);
DWORD get_PurchaseTokenOffset;
monoString *(*get_PurchaseToken)(void *_instance);
DWORD set_PurchaseTokenOffset;
void (*set_PurchaseToken)(void *_instance, monoString *value);
DWORD get_SignatureOffset;
monoString *(*get_Signature)(void *_instance);
DWORD set_SignatureOffset;
void (*set_Signature)(void *_instance, monoString *value);
DWORD get_OriginalJsonOffset;
monoString *(*get_OriginalJson)(void *_instance);
DWORD set_OriginalJsonOffset;
void (*set_OriginalJson)(void *_instance, monoString *value);
DWORD fromJsonArrayOffset;
DWORD fromJsonOffset;
void (*fromJson)(void *_instance, void *json);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}BazaarPurchase;
struct BazaarSkuInfo {
DWORD get_TitleOffset;
monoString *(*get_Title)(void *_instance);
DWORD set_TitleOffset;
void (*set_Title)(void *_instance, monoString *value);
DWORD get_PriceOffset;
monoString *(*get_Price)(void *_instance);
DWORD set_PriceOffset;
void (*set_Price)(void *_instance, monoString *value);
DWORD get_TypeOffset;
monoString *(*get_Type)(void *_instance);
DWORD set_TypeOffset;
void (*set_Type)(void *_instance, monoString *value);
DWORD get_DescriptionOffset;
monoString *(*get_Description)(void *_instance);
DWORD set_DescriptionOffset;
void (*set_Description)(void *_instance, monoString *value);
DWORD get_ProductIdOffset;
monoString *(*get_ProductId)(void *_instance);
DWORD set_ProductIdOffset;
void (*set_ProductId)(void *_instance, monoString *value);
DWORD fromJsonArrayOffset;
DWORD fromJsonOffset;
void (*fromJson)(void *_instance, void *json);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}BazaarSkuInfo;
}
namespace CodeStageAdvancedFPSCounter{
struct APITester {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnFPSLevelChangedOffset;
void (*OnFPSLevelChanged)(void *_instance, int newLevel);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD SliderLabelOffset;
float (*SliderLabel)(float sliderValue, float sliderMinValue, float sliderMaxValue);
}APITester;
struct AFPSCounter {
DWORD get_OperationModeOffset;
int(*get_OperationMode)(void *_instance);
DWORD set_OperationModeOffset;
void (*set_OperationMode)(void *_instance, int value);
DWORD get_ForceFrameRateOffset;
bool (*get_ForceFrameRate)(void *_instance);
DWORD set_ForceFrameRateOffset;
void (*set_ForceFrameRate)(void *_instance, bool value);
DWORD get_ForcedFrameRateOffset;
int (*get_ForcedFrameRate)(void *_instance);
DWORD set_ForcedFrameRateOffset;
void (*set_ForcedFrameRate)(void *_instance, int value);
DWORD get_ScaleFactorOffset;
float (*get_ScaleFactor)(void *_instance);
DWORD set_ScaleFactorOffset;
void (*set_ScaleFactor)(void *_instance, float value);
DWORD get_LabelsFontOffset;
void *(*get_LabelsFont)(void *_instance);
DWORD set_LabelsFontOffset;
void (*set_LabelsFont)(void *_instance, void *value);
DWORD get_FontSizeOffset;
int (*get_FontSize)(void *_instance);
DWORD set_FontSizeOffset;
void (*set_FontSize)(void *_instance, int value);
DWORD get_LineSpacingOffset;
float (*get_LineSpacing)(void *_instance);
DWORD set_LineSpacingOffset;
void (*set_LineSpacing)(void *_instance, float value);
DWORD get_CountersSpacingOffset;
int (*get_CountersSpacing)(void *_instance);
DWORD set_CountersSpacingOffset;
void (*set_CountersSpacing)(void *_instance, int value);
DWORD get_PaddingOffsetOffset;
Vector2 (*get_PaddingOffset)(void *_instance);
DWORD set_PaddingOffsetOffset;
void (*set_PaddingOffset)(void *_instance, Vector2 value);
DWORD get_SortingOrderOffset;
int (*get_SortingOrder)(void *_instance);
DWORD set_SortingOrderOffset;
void (*set_SortingOrder)(void *_instance, int value);
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD set_InstanceOffset;
void (*set_Instance)(void *value);
DWORD get_GetOrCreateInstanceOffset;
void *(*get_GetOrCreateInstance)();
DWORD AddToSceneOffset;
void *(*AddToScene)();
DWORD DisposeOffset;
void (*Dispose)();
DWORD Color32ToHexOffset;
monoString *(*Color32ToHex)(int color);
DWORD CreateInSceneOffset;
void *(*CreateInScene)();
DWORD CreateInScene1Offset;
void *(*CreateInScene1)(bool lookForExistingConatiner);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnLevelWasLoadedOffset;
void (*OnLevelWasLoaded)(void *_instance, int index);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD MakeDrawableLabelDirtyOffset;
void (*MakeDrawableLabelDirty)(void *_instance, int anchor);
DWORD UpdateTextsOffset;
void (*UpdateTexts)(void *_instance);
DWORD ConfigureCanvasOffset;
void (*ConfigureCanvas)(void *_instance);
DWORD ConfigureLabelsOffset;
void (*ConfigureLabels)(void *_instance);
DWORD DisposeInternalOffset;
void (*DisposeInternal)(void *_instance);
DWORD SwitchCounterOffset;
void (*SwitchCounter)(void *_instance);
DWORD ActivateCountersOffset;
void (*ActivateCounters)(void *_instance);
DWORD DeactivateCountersOffset;
void (*DeactivateCounters)(void *_instance);
DWORD RefreshForcedFrameRateOffset;
void (*RefreshForcedFrameRate)(void *_instance);
DWORD RefreshForcedFrameRate1Offset;
void (*RefreshForcedFrameRate1)(void *_instance, bool disabling);
DWORD UpdateFPSCounterOffset;
void *(*UpdateFPSCounter)(void *_instance);
DWORD UpdateMemoryCounterOffset;
void *(*UpdateMemoryCounter)(void *_instance);
}AFPSCounter;
struct UIUtils {
DWORD ResetRectTransformOffset;
void (*ResetRectTransform)(void *rectTransform);
}UIUtils;
}
namespace CodeStageAdvancedFPSCounterCountersData{
struct BaseCounterData {
DWORD get_EnabledOffset;
bool (*get_Enabled)(void *_instance);
DWORD set_EnabledOffset;
void (*set_Enabled)(void *_instance, bool value);
DWORD get_AnchorOffset;
int(*get_Anchor)(void *_instance);
DWORD set_AnchorOffset;
void (*set_Anchor)(void *_instance, int value);
DWORD get_ColorOffset;
Color (*get_Color)(void *_instance);
DWORD set_ColorOffset;
void (*set_Color)(void *_instance, Color value);
DWORD RefreshOffset;
void (*Refresh)(void *_instance);
DWORD UpdateValueOffset;
void (*UpdateValue)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance, void *reference);
DWORD DisposeOffset;
void (*Dispose)(void *_instance);
DWORD ActivateOffset;
void (*Activate)(void *_instance);
DWORD DeactivateOffset;
void (*Deactivate)(void *_instance);
}BaseCounterData;
struct DeviceInfoCounterData {
DWORD get_CpuModelOffset;
bool (*get_CpuModel)(void *_instance);
DWORD set_CpuModelOffset;
void (*set_CpuModel)(void *_instance, bool value);
DWORD get_GpuModelOffset;
bool (*get_GpuModel)(void *_instance);
DWORD set_GpuModelOffset;
void (*set_GpuModel)(void *_instance, bool value);
DWORD get_RamSizeOffset;
bool (*get_RamSize)(void *_instance);
DWORD set_RamSizeOffset;
void (*set_RamSize)(void *_instance, bool value);
DWORD get_ScreenDataOffset;
bool (*get_ScreenData)(void *_instance);
DWORD set_ScreenDataOffset;
void (*set_ScreenData)(void *_instance, bool value);
DWORD get_LastValueOffset;
monoString *(*get_LastValue)(void *_instance);
DWORD set_LastValueOffset;
void (*set_LastValue)(void *_instance, monoString *value);
DWORD ActivateOffset;
void (*Activate)(void *_instance);
DWORD DeactivateOffset;
void (*Deactivate)(void *_instance);
DWORD UpdateValueOffset;
void (*UpdateValue)(void *_instance, bool force);
DWORD CacheCurrentColorOffset;
void (*CacheCurrentColor)(void *_instance);
DWORD HasDataOffset;
bool (*HasData)(void *_instance);
}DeviceInfoCounterData;
struct FPSCounterData {
DWORD get_UpdateIntervalOffset;
float (*get_UpdateInterval)(void *_instance);
DWORD set_UpdateIntervalOffset;
void (*set_UpdateInterval)(void *_instance, float value);
DWORD get_MillisecondsOffset;
bool (*get_Milliseconds)(void *_instance);
DWORD set_MillisecondsOffset;
void (*set_Milliseconds)(void *_instance, bool value);
DWORD get_AverageOffset;
bool (*get_Average)(void *_instance);
DWORD set_AverageOffset;
void (*set_Average)(void *_instance, bool value);
DWORD get_AverageSamplesOffset;
int (*get_AverageSamples)(void *_instance);
DWORD set_AverageSamplesOffset;
void (*set_AverageSamples)(void *_instance, int value);
DWORD get_MinMaxOffset;
bool (*get_MinMax)(void *_instance);
DWORD set_MinMaxOffset;
void (*set_MinMax)(void *_instance, bool value);
DWORD get_MinMaxNewLineOffset;
bool (*get_MinMaxNewLine)(void *_instance);
DWORD set_MinMaxNewLineOffset;
void (*set_MinMaxNewLine)(void *_instance, bool value);
DWORD get_ColorWarningOffset;
Color (*get_ColorWarning)(void *_instance);
DWORD set_ColorWarningOffset;
void (*set_ColorWarning)(void *_instance, Color value);
DWORD get_ColorCriticalOffset;
Color (*get_ColorCritical)(void *_instance);
DWORD set_ColorCriticalOffset;
void (*set_ColorCritical)(void *_instance, Color value);
DWORD get_LastValueOffset;
int (*get_LastValue)(void *_instance);
DWORD set_LastValueOffset;
void (*set_LastValue)(void *_instance, int value);
DWORD get_LastMillisecondsValueOffset;
float (*get_LastMillisecondsValue)(void *_instance);
DWORD set_LastMillisecondsValueOffset;
void (*set_LastMillisecondsValue)(void *_instance, float value);
DWORD get_LastAverageValueOffset;
int (*get_LastAverageValue)(void *_instance);
DWORD set_LastAverageValueOffset;
void (*set_LastAverageValue)(void *_instance, int value);
DWORD get_LastMinimumValueOffset;
int (*get_LastMinimumValue)(void *_instance);
DWORD set_LastMinimumValueOffset;
void (*set_LastMinimumValue)(void *_instance, int value);
DWORD get_LastMaximumValueOffset;
int (*get_LastMaximumValue)(void *_instance);
DWORD set_LastMaximumValueOffset;
void (*set_LastMaximumValue)(void *_instance, int value);
DWORD get_CurrentFpsLevelOffset;
int(*get_CurrentFpsLevel)(void *_instance);
DWORD set_CurrentFpsLevelOffset;
void (*set_CurrentFpsLevel)(void *_instance, int value);
DWORD ResetAverageOffset;
void (*ResetAverage)(void *_instance);
DWORD ResetMinMaxOffset;
void (*ResetMinMax)(void *_instance);
DWORD ActivateOffset;
void (*Activate)(void *_instance);
DWORD DeactivateOffset;
void (*Deactivate)(void *_instance);
DWORD UpdateValueOffset;
void (*UpdateValue)(void *_instance, bool force);
DWORD CacheCurrentColorOffset;
void (*CacheCurrentColor)(void *_instance);
DWORD CacheWarningColorOffset;
void (*CacheWarningColor)(void *_instance);
DWORD CacheCriticalColorOffset;
void (*CacheCriticalColor)(void *_instance);
DWORD RestartCoroutineOffset;
void (*RestartCoroutine)(void *_instance);
DWORD GetAverageFromAccumulatedSamplesOffset;
float (*GetAverageFromAccumulatedSamples)(void *_instance);
}FPSCounterData;
struct MemoryCounterData {
DWORD get_UpdateIntervalOffset;
float (*get_UpdateInterval)(void *_instance);
DWORD set_UpdateIntervalOffset;
void (*set_UpdateInterval)(void *_instance, float value);
DWORD get_PreciseOffset;
bool (*get_Precise)(void *_instance);
DWORD set_PreciseOffset;
void (*set_Precise)(void *_instance, bool value);
DWORD get_TotalOffset;
bool (*get_Total)(void *_instance);
DWORD set_TotalOffset;
void (*set_Total)(void *_instance, bool value);
DWORD get_AllocatedOffset;
bool (*get_Allocated)(void *_instance);
DWORD set_AllocatedOffset;
void (*set_Allocated)(void *_instance, bool value);
DWORD get_MonoUsageOffset;
bool (*get_MonoUsage)(void *_instance);
DWORD set_MonoUsageOffset;
void (*set_MonoUsage)(void *_instance, bool value);
DWORD get_LastTotalValueOffset;
DWORD get_LastAllocatedValueOffset;
DWORD get_LastMonoValueOffset;
DWORD CacheCurrentColorOffset;
void (*CacheCurrentColor)(void *_instance);
DWORD ActivateOffset;
void (*Activate)(void *_instance);
DWORD DeactivateOffset;
void (*Deactivate)(void *_instance);
DWORD UpdateValueOffset;
void (*UpdateValue)(void *_instance, bool force);
DWORD RestartCoroutineOffset;
void (*RestartCoroutine)(void *_instance);
DWORD HasDataOffset;
bool (*HasData)(void *_instance);
}MemoryCounterData;
}
namespace CodeStageAdvancedFPSCounterLabels{
struct DrawableLabel {
DWORD CheckAndUpdateOffset;
void (*CheckAndUpdate)(void *_instance);
DWORD ClearOffset;
void (*Clear)(void *_instance);
DWORD DisposeOffset;
void (*Dispose)(void *_instance);
DWORD ChangeFontOffset;
void (*ChangeFont)(void *_instance, void *labelsFont);
DWORD ChangeFontSizeOffset;
void (*ChangeFontSize)(void *_instance, int newSize);
DWORD ChangeOffsetOffset;
void (*ChangeOffset)(void *_instance, Vector2 newPixelOffset);
DWORD ChangeLineSpacingOffset;
void (*ChangeLineSpacing)(void *_instance, float newValueLineSpacing);
DWORD UpdateTextPositionOffset;
void (*UpdateTextPosition)(void *_instance);
DWORD NormalizeOffsetOffset;
void (*NormalizeOffset)(void *_instance);
DWORD ApplyFontOffset;
void (*ApplyFont)(void *_instance);
}DrawableLabel;
}
namespace CodeStageAntiCheatCommon{
struct ACTkByte4 {
DWORD ShuffleOffset;
void (*Shuffle)(void *_instance);
DWORD UnShuffleOffset;
void (*UnShuffle)(void *_instance);
}ACTkByte4;
struct ACTkByte8 {
DWORD ShuffleOffset;
void (*Shuffle)(void *_instance);
DWORD UnShuffleOffset;
void (*UnShuffle)(void *_instance);
}ACTkByte8;
struct ACTkConstants {
}ACTkConstants;
}
namespace CodeStageAntiCheatDetectors{
struct ActDetectorBase {
}ActDetectorBase;
struct ACTkDetectorBase {
DWORD add_CheatDetectedOffset;
void (*add_CheatDetected)(void *_instance, void *value);
DWORD remove_CheatDetectedOffset;
void (*remove_CheatDetected)(void *_instance, void *value);
DWORD get_IsRunningOffset;
bool (*get_IsRunning)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnApplicationQuitOffset;
void (*OnApplicationQuit)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD OnCheatingDetectedOffset;
void (*OnCheatingDetected)(void *_instance);
DWORD InitOffset;
bool (*Init)(void *_instance, void *instance, monoString *detectorName);
DWORD DisposeInternalOffset;
void (*DisposeInternal)(void *_instance);
DWORD DetectorHasCallbacksOffset;
bool (*DetectorHasCallbacks)(void *_instance);
DWORD StopDetectionInternalOffset;
void (*StopDetectionInternal)(void *_instance);
DWORD PauseDetectorOffset;
void (*PauseDetector)(void *_instance);
DWORD ResumeDetectorOffset;
bool (*ResumeDetector)(void *_instance);
}ACTkDetectorBase;
struct InjectionDetector {
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD StartDetectionOffset;
void (*StartDetection)();
DWORD StopDetectionOffset;
void (*StopDetection)();
DWORD DisposeOffset;
void (*Dispose)();
DWORD StartDetectionAutomaticallyOffset;
void (*StartDetectionAutomatically)(void *_instance);
}InjectionDetector;
struct ObscuredCheatingDetector {
DWORD AddToSceneOrGetExistingOffset;
void *(*AddToSceneOrGetExisting)();
DWORD StartDetectionOffset;
void (*StartDetection)();
DWORD StartDetection1Offset;
void (*StartDetection1)(void *callback);
DWORD StopDetectionOffset;
void (*StopDetection)();
DWORD DisposeOffset;
void (*Dispose)();
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD set_InstanceOffset;
void (*set_Instance)(void *value);
DWORD get_GetOrCreateInstanceOffset;
void *(*get_GetOrCreateInstance)();
DWORD get_ExistsAndIsRunningOffset;
bool (*get_ExistsAndIsRunning)();
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD OnLevelWasLoadedNewOffset;
void (*OnLevelWasLoadedNew)(void *_instance, int scene, int mode);
DWORD StartDetectionInternalOffset;
void (*StartDetectionInternal)(void *_instance, void *callback);
DWORD StartDetectionAutomaticallyOffset;
void (*StartDetectionAutomatically)(void *_instance);
DWORD DisposeInternalOffset;
void (*DisposeInternal)(void *_instance);
}ObscuredCheatingDetector;
struct SpeedHackDetector {
DWORD AddToSceneOrGetExistingOffset;
void *(*AddToSceneOrGetExisting)();
DWORD StartDetectionOffset;
void (*StartDetection)();
DWORD StartDetection1Offset;
void (*StartDetection1)(void *callback);
DWORD StartDetection2Offset;
void (*StartDetection2)(void *callback, float interval);
DWORD StopDetectionOffset;
void (*StopDetection)();
DWORD DisposeOffset;
void (*Dispose)();
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD set_InstanceOffset;
void (*set_Instance)(void *value);
DWORD get_GetOrCreateInstanceOffset;
void *(*get_GetOrCreateInstance)();
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD OnLevelWasLoadedNewOffset;
void (*OnLevelWasLoadedNew)(void *_instance, int scene, int mode);
DWORD OnApplicationPauseOffset;
void (*OnApplicationPause)(void *_instance, bool pause);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD StartDetectionAutomaticallyOffset;
void (*StartDetectionAutomatically)(void *_instance);
DWORD DisposeInternalOffset;
void (*DisposeInternal)(void *_instance);
DWORD ResetStartTicksOffset;
void (*ResetStartTicks)(void *_instance);
DWORD GetReliableTicksOffset;
DWORD TryReadTicksFromAndroidRoutineOffset;
DWORD ReleaseAndroidClassOffset;
void (*ReleaseAndroidClass)(void *_instance);
}SpeedHackDetector;
struct TimeCheatingDetector {
DWORD add_CheatCheckedOffset;
void (*add_CheatChecked)(void *_instance, void *value);
DWORD remove_CheatCheckedOffset;
void (*remove_CheatChecked)(void *_instance, void *value);
DWORD get_RequestUrlOffset;
monoString *(*get_RequestUrl)(void *_instance);
DWORD set_RequestUrlOffset;
void (*set_RequestUrl)(void *_instance, monoString *value);
DWORD get_LastErrorOffset;
int(*get_LastError)(void *_instance);
DWORD set_LastErrorOffset;
void (*set_LastError)(void *_instance, int value);
DWORD get_LastResultOffset;
int(*get_LastResult)(void *_instance);
DWORD set_LastResultOffset;
void (*set_LastResult)(void *_instance, int value);
DWORD get_IsCheckingForCheatOffset;
bool (*get_IsCheckingForCheat)(void *_instance);
DWORD set_IsCheckingForCheatOffset;
void (*set_IsCheckingForCheat)(void *_instance, bool value);
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD set_InstanceOffset;
void (*set_Instance)(void *value);
DWORD get_GetOrCreateInstanceOffset;
void *(*get_GetOrCreateInstance)();
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD OnLevelWasLoadedNewOffset;
void (*OnLevelWasLoadedNew)(void *_instance, int scene, int mode);
DWORD OnApplicationPauseOffset;
void (*OnApplicationPause)(void *_instance, bool pauseStatus);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD AddToSceneOrGetExistingOffset;
void *(*AddToSceneOrGetExisting)();
DWORD StartDetectionOffset;
void (*StartDetection)(void *cheatCheckedEventHandler);
DWORD StartDetection1Offset;
void (*StartDetection1)(float interval, void *cheatCheckedEventHandler);
DWORD StopDetectionOffset;
void (*StopDetection)();
DWORD DisposeOffset;
void (*Dispose)();
DWORD GetOnlineTimeCoroutineOffset;
void *(*GetOnlineTimeCoroutine)(monoString *url, void *callback, int method);
DWORD GetOnlineTimeCoroutine1Offset;
void *(*GetOnlineTimeCoroutine1)(void *uri, void *callback, int method);
DWORD GetOnlineTimeTaskOffset;
DWORD GetOnlineTimeTask1Offset;
DWORD GetWebRequestOffset;
void *(*GetWebRequest)(void *uri, int method);
DWORD UrlToUriOffset;
void *(*UrlToUri)(monoString *url);
DWORD ForceCheckOffset;
bool (*ForceCheck)(void *_instance);
DWORD ForceCheckEnumeratorOffset;
void *(*ForceCheckEnumerator)(void *_instance);
DWORD ForceCheckTaskOffset;
DWORD StartDetectionInternalOffset;
void (*StartDetectionInternal)(void *_instance, float checkInterval, void *cheatCheckedEventHandler);
DWORD InitOffset;
bool (*Init)(void *_instance, void *instance, monoString *detectorName);
DWORD StartDetectionAutomaticallyOffset;
void (*StartDetectionAutomatically)(void *_instance);
DWORD DetectorHasCallbacksOffset;
bool (*DetectorHasCallbacks)(void *_instance);
DWORD PauseDetectorOffset;
void (*PauseDetector)(void *_instance);
DWORD StopDetectionInternalOffset;
void (*StopDetectionInternal)(void *_instance);
DWORD DisposeInternalOffset;
void (*DisposeInternal)(void *_instance);
DWORD CheckForCheatOffset;
void *(*CheckForCheat)(void *_instance);
DWORD ReportCheckResultOffset;
void (*ReportCheckResult)(void *_instance);
DWORD OnOnlineTimeReceivedOffset;
void (*OnOnlineTimeReceived)(void *_instance, int result);
DWORD GetLocalSecondsUtcOffset;
DWORD add_CheckPassedOffset;
void (*add_CheckPassed)(void *_instance, void *value);
DWORD remove_CheckPassedOffset;
void (*remove_CheckPassed)(void *_instance, void *value);
DWORD GetOnlineTimeOffset;
DWORD StartDetection11Offset;
void (*StartDetection11)(void *detectionCallback, int interval);
}TimeCheatingDetector;
struct WallHackDetector {
DWORD get_CheckRigidbodyOffset;
bool (*get_CheckRigidbody)(void *_instance);
DWORD set_CheckRigidbodyOffset;
void (*set_CheckRigidbody)(void *_instance, bool value);
DWORD get_CheckControllerOffset;
bool (*get_CheckController)(void *_instance);
DWORD set_CheckControllerOffset;
void (*set_CheckController)(void *_instance, bool value);
DWORD get_CheckWireframeOffset;
bool (*get_CheckWireframe)(void *_instance);
DWORD set_CheckWireframeOffset;
void (*set_CheckWireframe)(void *_instance, bool value);
DWORD get_CheckRaycastOffset;
bool (*get_CheckRaycast)(void *_instance);
DWORD set_CheckRaycastOffset;
void (*set_CheckRaycast)(void *_instance, bool value);
DWORD AddToSceneOrGetExistingOffset;
void *(*AddToSceneOrGetExisting)();
DWORD StartDetectionOffset;
void (*StartDetection)();
DWORD StartDetection1Offset;
void (*StartDetection1)(void *callback);
DWORD StartDetection2Offset;
void (*StartDetection2)(void *callback, Vector3 spawnPosition);
DWORD StopDetectionOffset;
void (*StopDetection)();
DWORD DisposeOffset;
void (*Dispose)();
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD set_InstanceOffset;
void (*set_Instance)(void *value);
DWORD get_GetOrCreateInstanceOffset;
void *(*get_GetOrCreateInstance)();
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD OnLevelWasLoadedNewOffset;
void (*OnLevelWasLoadedNew)(void *_instance, int scene, int mode);
DWORD FixedUpdateOffset;
void (*FixedUpdate)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD StartDetectionAutomaticallyOffset;
void (*StartDetectionAutomatically)(void *_instance);
DWORD PauseDetectorOffset;
void (*PauseDetector)(void *_instance);
DWORD ResumeDetectorOffset;
bool (*ResumeDetector)(void *_instance);
DWORD StopDetectionInternalOffset;
void (*StopDetectionInternal)(void *_instance);
DWORD DisposeInternalOffset;
void (*DisposeInternal)(void *_instance);
DWORD UpdateServiceContainerOffset;
void (*UpdateServiceContainer)(void *_instance);
DWORD InitDetectorOffset;
void *(*InitDetector)(void *_instance);
DWORD StartRigidModuleOffset;
void (*StartRigidModule)(void *_instance);
DWORD StartControllerModuleOffset;
void (*StartControllerModule)(void *_instance);
DWORD StartWireframeModuleOffset;
void (*StartWireframeModule)(void *_instance);
DWORD ShootWireframeModuleOffset;
void (*ShootWireframeModule)(void *_instance);
DWORD CaptureFrameOffset;
void *(*CaptureFrame)(void *_instance);
DWORD StartRaycastModuleOffset;
void (*StartRaycastModule)(void *_instance);
DWORD ShootRaycastModuleOffset;
void (*ShootRaycastModule)(void *_instance);
DWORD StopRigidModuleOffset;
void (*StopRigidModule)(void *_instance);
DWORD StopControllerModuleOffset;
void (*StopControllerModule)(void *_instance);
DWORD StopWireframeModuleOffset;
void (*StopWireframeModule)(void *_instance);
DWORD StopRaycastModuleOffset;
void (*StopRaycastModule)(void *_instance);
DWORD InitRigidModuleOffset;
void (*InitRigidModule)(void *_instance);
DWORD InitControllerModuleOffset;
void (*InitControllerModule)(void *_instance);
DWORD UninitRigidModuleOffset;
void (*UninitRigidModule)(void *_instance);
DWORD UninitControllerModuleOffset;
void (*UninitControllerModule)(void *_instance);
DWORD DetectOffset;
bool (*Detect)(void *_instance);
DWORD GenerateColorOffset;
int(*GenerateColor)();
DWORD ColorsSimilarOffset;
bool (*ColorsSimilar)(int c1, int c2, int tolerance);
}WallHackDetector;
}
namespace CodeStageAntiCheatExamples{
struct InfiniteRotator {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}InfiniteRotator;
struct ExamplesGUI {
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
DWORD DrawObscuredTypesPageOffset;
void (*DrawObscuredTypesPage)(void *_instance);
DWORD DrawObscuredPrefsPageOffset;
void (*DrawObscuredPrefsPage)(void *_instance);
DWORD DrawDetectorsPageOffset;
void (*DrawDetectorsPage)(void *_instance);
DWORD GetAllSimpleObscuredTypesOffset;
monoString *(*GetAllSimpleObscuredTypes)(void *_instance);
DWORD GetAllObscuredPrefsDataTypesOffset;
monoString *(*GetAllObscuredPrefsDataTypes)(void *_instance);
}ExamplesGUI;
struct ObscuredPerformanceTests {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD StartTestsOffset;
void (*StartTests)(void *_instance);
DWORD TestBoolOffset;
void (*TestBool)(void *_instance);
DWORD TestByteOffset;
void (*TestByte)(void *_instance);
DWORD TestShortOffset;
void (*TestShort)(void *_instance);
DWORD TestUShortOffset;
void (*TestUShort)(void *_instance);
DWORD TestDoubleOffset;
void (*TestDouble)(void *_instance);
DWORD TestFloatOffset;
void (*TestFloat)(void *_instance);
DWORD TestIntOffset;
void (*TestInt)(void *_instance);
DWORD TestLongOffset;
void (*TestLong)(void *_instance);
DWORD TestStringOffset;
void (*TestString)(void *_instance);
DWORD TestUIntOffset;
void (*TestUInt)(void *_instance);
DWORD TestVector3Offset;
void (*TestVector3)(void *_instance);
DWORD TestPrefsOffset;
void (*TestPrefs)(void *_instance);
}ObscuredPerformanceTests;
struct DetectorsExamples {
DWORD OnSpeedHackDetectedOffset;
void (*OnSpeedHackDetected)(void *_instance);
DWORD OnTimeCheatingDetectedOffset;
void (*OnTimeCheatingDetected)(void *_instance);
DWORD OnInjectionDetectedOffset;
void (*OnInjectionDetected)(void *_instance);
DWORD OnInjectionDetectedWithCauseOffset;
void (*OnInjectionDetectedWithCause)(void *_instance, monoString *cause);
DWORD OnObscuredTypeCheatingDetectedOffset;
void (*OnObscuredTypeCheatingDetected)(void *_instance);
DWORD OnWallHackDetectedOffset;
void (*OnWallHackDetected)(void *_instance);
DWORD OnTimeCheatCheckedOffset;
void (*OnTimeCheatChecked)(void *_instance, int checkResult, int errorKind);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SpeedHackDetectorExampleOffset;
void (*SpeedHackDetectorExample)(void *_instance);
DWORD InjectionDetectorExampleOffset;
void (*InjectionDetectorExample)(void *_instance);
DWORD ObscuredCheatingDetectorExampleOffset;
void (*ObscuredCheatingDetectorExample)(void *_instance);
DWORD TimeCheatingDetectorExampleOffset;
void (*TimeCheatingDetectorExample)(void *_instance);
DWORD ForceTimeCheatingDetectorCheckOffset;
void (*ForceTimeCheatingDetectorCheck)(void *_instance);
}DetectorsExamples;
struct ObscuredPrefsExamples {
DWORD get_PreservePlayerPrefsOffset;
bool (*get_PreservePlayerPrefs)(void *_instance);
DWORD set_PreservePlayerPrefsOffset;
void (*set_PreservePlayerPrefs)(void *_instance, bool value);
DWORD get_EmergencyModeOffset;
bool (*get_EmergencyMode)(void *_instance);
DWORD set_EmergencyModeOffset;
void (*set_EmergencyMode)(void *_instance, bool value);
DWORD get_ReadForeignSavesOffset;
bool (*get_ReadForeignSaves)(void *_instance);
DWORD set_ReadForeignSavesOffset;
void (*set_ReadForeignSaves)(void *_instance, bool value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD SavesAlterationDetectedOffset;
void (*SavesAlterationDetected)(void *_instance);
DWORD ForeignSavesDetectedOffset;
void (*ForeignSavesDetected)(void *_instance);
DWORD LoadRegularPrefsOffset;
void (*LoadRegularPrefs)(void *_instance);
DWORD SaveRegularPrefsOffset;
void (*SaveRegularPrefs)(void *_instance);
DWORD DeleteRegularPrefsOffset;
void (*DeleteRegularPrefs)(void *_instance);
DWORD LockObscuredPrefsToDeviceOffset;
void (*LockObscuredPrefsToDevice)(void *_instance, int level);
DWORD LoadObscuredPrefsOffset;
void (*LoadObscuredPrefs)(void *_instance);
DWORD SaveObscuredPrefsOffset;
void (*SaveObscuredPrefs)(void *_instance);
DWORD DeleteObscuredPrefsOffset;
void (*DeleteObscuredPrefs)(void *_instance);
}ObscuredPrefsExamples;
struct ObscuredTypesExamples {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD RandomizeObscuredVarsOffset;
void (*RandomizeObscuredVars)(void *_instance);
DWORD ObscuredStringExampleOffset;
void (*ObscuredStringExample)(void *_instance);
DWORD ObscuredIntExampleOffset;
void (*ObscuredIntExample)(void *_instance);
}ObscuredTypesExamples;
}
namespace CodeStageAntiCheatObscuredTypes{
struct ObscuredBool {
DWORD EncryptOffset;
int (*Encrypt)(bool value);
DWORD DecryptOffset;
bool (*Decrypt)(int value);
DWORD FromEncryptedOffset;
int(*FromEncrypted)(int encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
int (*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, int encrypted);
DWORD GetDecryptedOffset;
bool (*GetDecrypted)(void *_instance);
DWORD InternalDecryptOffset;
bool (*InternalDecrypt)(void *_instance);
DWORD op_ImplicitOffset;
int(*op_Implicit)(bool value);
DWORD op_Implicit1Offset;
bool (*op_Implicit1)(int value);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
DWORD CompareTo1Offset;
int (*CompareTo1)(void *_instance, bool other);
}ObscuredBool;
struct ObscuredByte {
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
DWORD GetDecryptedOffset;
DWORD InternalDecryptOffset;
DWORD op_Implicit1Offset;
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
}ObscuredByte;
struct ObscuredChar {
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
DWORD GetDecryptedOffset;
DWORD InternalDecryptOffset;
DWORD op_Implicit1Offset;
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
}ObscuredChar;
struct ObscuredDecimal {
DWORD EncryptOffset;
int(*Encrypt)(int value);
DWORD InternalEncryptOffset;
int(*InternalEncrypt)(int value);
DWORD DecryptOffset;
int(*Decrypt)(int value);
DWORD FromEncryptedOffset;
int(*FromEncrypted)(int encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
int(*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, int encrypted);
DWORD GetDecryptedOffset;
int(*GetDecrypted)(void *_instance);
DWORD InternalDecryptOffset;
int(*InternalDecrypt)(void *_instance);
DWORD op_ImplicitOffset;
int(*op_Implicit)(int value);
DWORD op_Implicit1Offset;
int(*op_Implicit1)(int value);
DWORD op_ExplicitOffset;
int(*op_Explicit)(int f);
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
DWORD CompareTo1Offset;
int (*CompareTo1)(void *_instance, int other);
}ObscuredDecimal;
struct ObscuredDouble {
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
DWORD GetDecryptedOffset;
DWORD InternalDecryptOffset;
DWORD op_Implicit1Offset;
DWORD op_ExplicitOffset;
int(*op_Explicit)(int f);
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
}ObscuredDouble;
struct ObscuredFloat {
DWORD SetNewCryptoKeyOffset;
void (*SetNewCryptoKey)(int newKey);
DWORD EncryptOffset;
int (*Encrypt)(float value);
DWORD Encrypt1Offset;
int (*Encrypt1)(float value, int key);
DWORD InternalEncryptOffset;
int (*InternalEncrypt)(float value, int key);
DWORD DecryptOffset;
float (*Decrypt)(int value);
DWORD Decrypt1Offset;
float (*Decrypt1)(int value, int key);
DWORD FromEncryptedOffset;
int(*FromEncrypted)(int encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
int (*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, int encrypted);
DWORD GetDecryptedOffset;
float (*GetDecrypted)(void *_instance);
DWORD InternalDecryptOffset;
float (*InternalDecrypt)(void *_instance);
DWORD op_ImplicitOffset;
int(*op_Implicit)(float value);
DWORD op_Implicit1Offset;
float (*op_Implicit1)(int value);
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
DWORD CompareTo1Offset;
int (*CompareTo1)(void *_instance, float other);
}ObscuredFloat;
struct ObscuredInt {
DWORD SetNewCryptoKeyOffset;
void (*SetNewCryptoKey)(int newKey);
DWORD EncryptOffset;
int (*Encrypt)(int value);
DWORD Encrypt1Offset;
int (*Encrypt1)(int value, int key);
DWORD DecryptOffset;
int (*Decrypt)(int value);
DWORD Decrypt1Offset;
int (*Decrypt1)(int value, int key);
DWORD FromEncryptedOffset;
int(*FromEncrypted)(int encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
int (*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, int encrypted);
DWORD GetDecryptedOffset;
int (*GetDecrypted)(void *_instance);
DWORD InternalDecryptOffset;
int (*InternalDecrypt)(void *_instance);
DWORD op_ImplicitOffset;
int(*op_Implicit)(int value);
DWORD op_Implicit1Offset;
int (*op_Implicit1)(int value);
DWORD op_Implicit2Offset;
int(*op_Implicit2)(int value);
DWORD op_Implicit3Offset;
int(*op_Implicit3)(int value);
DWORD op_ExplicitOffset;
int(*op_Explicit)(int value);
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
DWORD CompareTo1Offset;
int (*CompareTo1)(void *_instance, int other);
}ObscuredInt;
struct ObscuredLong {
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
DWORD GetDecryptedOffset;
DWORD InternalDecryptOffset;
DWORD op_Implicit1Offset;
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
}ObscuredLong;
struct ObscuredPrefs {
DWORD set_CryptoKeyOffset;
void (*set_CryptoKey)(monoString *value);
DWORD get_CryptoKeyOffset;
monoString *(*get_CryptoKey)();
DWORD get_DeviceIdOffset;
monoString *(*get_DeviceId)();
DWORD set_DeviceIdOffset;
void (*set_DeviceId)(monoString *value);
DWORD get_DeviceIDOffset;
monoString *(*get_DeviceID)();
DWORD set_DeviceIDOffset;
void (*set_DeviceID)(monoString *value);
DWORD get_DeviceIdHashOffset;
DWORD add_OnAlterationDetectedOffset;
void (*add_OnAlterationDetected)(void *value);
DWORD remove_OnAlterationDetectedOffset;
void (*remove_OnAlterationDetected)(void *value);
DWORD add_OnPossibleForeignSavesDetectedOffset;
void (*add_OnPossibleForeignSavesDetected)(void *value);
DWORD remove_OnPossibleForeignSavesDetectedOffset;
void (*remove_OnPossibleForeignSavesDetected)(void *value);
DWORD ForceLockToDeviceInitOffset;
void (*ForceLockToDeviceInit)();
DWORD SetNewCryptoKeyOffset;
void (*SetNewCryptoKey)(monoString *newKey);
DWORD SetIntOffset;
void (*SetInt)(monoString *key, int value);
DWORD GetIntOffset;
int (*GetInt)(monoString *key);
DWORD GetInt1Offset;
int (*GetInt1)(monoString *key, int defaultValue);
DWORD EncryptIntValueOffset;
monoString *(*EncryptIntValue)(monoString *key, int value);
DWORD DecryptIntValueOffset;
int (*DecryptIntValue)(monoString *key, monoString *encryptedInput, int defaultValue);
DWORD GetUIntOffset;
DWORD SetStringOffset;
void (*SetString)(monoString *key, monoString *value);
DWORD GetStringOffset;
monoString *(*GetString)(monoString *key);
DWORD GetString1Offset;
monoString *(*GetString1)(monoString *key, monoString *defaultValue);
DWORD EncryptStringValueOffset;
monoString *(*EncryptStringValue)(monoString *key, monoString *value);
DWORD DecryptStringValueOffset;
monoString *(*DecryptStringValue)(monoString *key, monoString *encryptedInput, monoString *defaultValue);
DWORD SetFloatOffset;
void (*SetFloat)(monoString *key, float value);
DWORD GetFloatOffset;
float (*GetFloat)(monoString *key);
DWORD GetFloat1Offset;
float (*GetFloat1)(monoString *key, float defaultValue);
DWORD EncryptFloatValueOffset;
monoString *(*EncryptFloatValue)(monoString *key, float value);
DWORD DecryptFloatValueOffset;
float (*DecryptFloatValue)(monoString *key, monoString *encryptedInput, float defaultValue);
DWORD GetDoubleOffset;
DWORD SetDecimalOffset;
void (*SetDecimal)(monoString *key, int value);
DWORD GetDecimalOffset;
int(*GetDecimal)(monoString *key);
DWORD GetDecimal1Offset;
int(*GetDecimal1)(monoString *key, int defaultValue);
DWORD EncryptDecimalValueOffset;
monoString *(*EncryptDecimalValue)(monoString *key, int value);
DWORD DecryptDecimalValueOffset;
int(*DecryptDecimalValue)(monoString *key, monoString *encryptedInput, int defaultValue);
DWORD GetLongOffset;
DWORD GetULongOffset;
DWORD SetBoolOffset;
void (*SetBool)(monoString *key, bool value);
DWORD GetBoolOffset;
bool (*GetBool)(monoString *key);
DWORD GetBool1Offset;
bool (*GetBool1)(monoString *key, bool defaultValue);
DWORD EncryptBoolValueOffset;
monoString *(*EncryptBoolValue)(monoString *key, bool value);
DWORD DecryptBoolValueOffset;
bool (*DecryptBoolValue)(monoString *key, monoString *encryptedInput, bool defaultValue);
DWORD GetByteArrayOffset;
DWORD SetVector2Offset;
void (*SetVector2)(monoString *key, Vector2 value);
DWORD GetVector2Offset;
Vector2 (*GetVector2)(monoString *key);
DWORD GetVector21Offset;
Vector2 (*GetVector21)(monoString *key, Vector2 defaultValue);
DWORD EncryptVector2ValueOffset;
monoString *(*EncryptVector2Value)(monoString *key, Vector2 value);
DWORD DecryptVector2ValueOffset;
Vector2 (*DecryptVector2Value)(monoString *key, monoString *encryptedInput, Vector2 defaultValue);
DWORD SetVector3Offset;
void (*SetVector3)(monoString *key, Vector3 value);
DWORD GetVector3Offset;
Vector3 (*GetVector3)(monoString *key);
DWORD GetVector31Offset;
Vector3 (*GetVector31)(monoString *key, Vector3 defaultValue);
DWORD EncryptVector3ValueOffset;
monoString *(*EncryptVector3Value)(monoString *key, Vector3 value);
DWORD DecryptVector3ValueOffset;
Vector3 (*DecryptVector3Value)(monoString *key, monoString *encryptedInput, Vector3 defaultValue);
DWORD SetQuaternionOffset;
void (*SetQuaternion)(monoString *key, int value);
DWORD GetQuaternionOffset;
int(*GetQuaternion)(monoString *key);
DWORD GetQuaternion1Offset;
int(*GetQuaternion1)(monoString *key, int defaultValue);
DWORD EncryptQuaternionValueOffset;
monoString *(*EncryptQuaternionValue)(monoString *key, int value);
DWORD DecryptQuaternionValueOffset;
int(*DecryptQuaternionValue)(monoString *key, monoString *encryptedInput, int defaultValue);
DWORD SetColorOffset;
void (*SetColor)(monoString *key, int value);
DWORD GetColorOffset;
int(*GetColor)(monoString *key);
DWORD GetColor1Offset;
int(*GetColor1)(monoString *key, int defaultValue);
DWORD SetRectOffset;
void (*SetRect)(monoString *key, int value);
DWORD GetRectOffset;
int(*GetRect)(monoString *key);
DWORD GetRect1Offset;
int(*GetRect1)(monoString *key, int defaultValue);
DWORD EncryptRectValueOffset;
monoString *(*EncryptRectValue)(monoString *key, int value);
DWORD DecryptRectValueOffset;
int(*DecryptRectValue)(monoString *key, monoString *encryptedInput, int defaultValue);
DWORD SetRawValueOffset;
void (*SetRawValue)(monoString *key, monoString *encryptedValue);
DWORD GetRawValueOffset;
monoString *(*GetRawValue)(monoString *key);
DWORD GetRawValueTypeOffset;
int(*GetRawValueType)(monoString *value);
DWORD EncryptKeyOffset;
monoString *(*EncryptKey)(monoString *key);
DWORD HasKeyOffset;
bool (*HasKey)(monoString *key);
DWORD DeleteKeyOffset;
void (*DeleteKey)(monoString *key);
DWORD DeleteAllOffset;
void (*DeleteAll)();
DWORD SaveOffset;
void (*Save)();
DWORD GetEncryptedPrefsStringOffset;
monoString *(*GetEncryptedPrefsString)(monoString *key, monoString *encryptedKey);
DWORD DecryptDataOffset;
DWORD CalculateChecksumOffset;
DWORD SavesTamperedOffset;
void (*SavesTampered)();
DWORD PossibleForeignSavesDetectedOffset;
void (*PossibleForeignSavesDetected)();
DWORD GetDeviceIdOffset;
monoString *(*GetDeviceId)();
DWORD DeprecatedDecryptValueOffset;
monoString *(*DeprecatedDecryptValue)(monoString *value);
DWORD DeprecatedCalculateChecksumOffset;
monoString *(*DeprecatedCalculateChecksum)(monoString *input);
DWORD get_DeprecatedDeviceIdOffset;
monoString *(*get_DeprecatedDeviceId)();
}ObscuredPrefs;
struct BitconverterExt {
DWORD GetBytesOffset;
}BitconverterExt;
struct ObscuredQuaternion {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, float x, float y, float z, float w);
DWORD SetNewCryptoKeyOffset;
void (*SetNewCryptoKey)(int newKey);
DWORD EncryptOffset;
int(*Encrypt)(int value);
DWORD Encrypt1Offset;
int(*Encrypt1)(int value, int key);
DWORD Encrypt2Offset;
int(*Encrypt2)(float x, float y, float z, float w, int key);
DWORD DecryptOffset;
int(*Decrypt)(int value);
DWORD Decrypt1Offset;
int(*Decrypt1)(int value, int key);
DWORD FromEncryptedOffset;
int(*FromEncrypted)(int encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
int(*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, int encrypted);
DWORD GetDecryptedOffset;
int(*GetDecrypted)(void *_instance);
DWORD InternalDecryptOffset;
int(*InternalDecrypt)(void *_instance);
DWORD CompareQuaternionsWithToleranceOffset;
bool (*CompareQuaternionsWithTolerance)(void *_instance, int q1, int q2);
DWORD op_ImplicitOffset;
int(*op_Implicit)(int value);
DWORD op_Implicit1Offset;
int(*op_Implicit1)(int value);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
}ObscuredQuaternion;
struct ObscuredSByte {
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
DWORD GetDecryptedOffset;
DWORD InternalDecryptOffset;
DWORD op_Implicit1Offset;
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
}ObscuredSByte;
struct ObscuredShort {
DWORD SetNewCryptoKeyOffset;
void (*SetNewCryptoKey)(byte newKey);
DWORD EncryptDecryptOffset;
byte (*EncryptDecrypt)(byte value);
DWORD EncryptDecrypt1Offset;
byte (*EncryptDecrypt1)(byte value, byte key);
DWORD FromEncryptedOffset;
int(*FromEncrypted)(byte encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
byte (*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, byte encrypted);
DWORD GetDecryptedOffset;
byte (*GetDecrypted)(void *_instance);
DWORD InternalDecryptOffset;
byte (*InternalDecrypt)(void *_instance);
DWORD op_ImplicitOffset;
int(*op_Implicit)(byte value);
DWORD op_Implicit1Offset;
byte (*op_Implicit1)(int value);
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
DWORD CompareTo1Offset;
int (*CompareTo1)(void *_instance, byte other);
}ObscuredShort;
struct ObscuredString {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, monoString *value);
DWORD SetNewCryptoKeyOffset;
void (*SetNewCryptoKey)(monoString *newKey);
DWORD EncryptDecryptOffset;
monoString *(*EncryptDecrypt)(monoString *value);
DWORD EncryptDecrypt1Offset;
monoString *(*EncryptDecrypt1)(monoString *value, monoString *key);
DWORD FromEncryptedOffset;
void *(*FromEncrypted)(monoString *encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
monoString *(*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, monoString *encrypted);
DWORD GetDecryptedOffset;
monoString *(*GetDecrypted)(void *_instance);
DWORD InternalEncryptOffset;
DWORD InternalEncrypt1Offset;
DWORD InternalDecryptOffset;
monoString *(*InternalDecrypt)(void *_instance);
DWORD get_LengthOffset;
int (*get_Length)(void *_instance);
DWORD op_ImplicitOffset;
void *(*op_Implicit)(monoString *value);
DWORD op_Implicit1Offset;
monoString *(*op_Implicit1)(void *value);
DWORD op_EqualityOffset;
bool (*op_Equality)(void *a, void *b);
DWORD op_InequalityOffset;
bool (*op_Inequality)(void *a, void *b);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, void *value);
DWORD Equals2Offset;
bool (*Equals2)(void *_instance, void *value, int comparisonType);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, void *other);
DWORD CompareTo1Offset;
int (*CompareTo1)(void *_instance, monoString *other);
DWORD GetBytesOffset;
}ObscuredString;
struct ObscuredUInt {
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
DWORD GetDecryptedOffset;
DWORD InternalDecryptOffset;
DWORD op_Implicit1Offset;
DWORD op_ExplicitOffset;
int(*op_Explicit)(int value);
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
}ObscuredUInt;
struct ObscuredULong {
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
DWORD GetDecryptedOffset;
DWORD InternalDecryptOffset;
DWORD op_Implicit1Offset;
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
}ObscuredULong;
struct ObscuredUShort {
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
DWORD GetDecryptedOffset;
DWORD InternalDecryptOffset;
DWORD op_Implicit1Offset;
DWORD op_IncrementOffset;
int(*op_Increment)(int input);
DWORD op_DecrementOffset;
int(*op_Decrement)(int input);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
DWORD ToString2Offset;
monoString *(*ToString2)(void *_instance, void *provider);
DWORD ToString3Offset;
monoString *(*ToString3)(void *_instance, monoString *format, void *provider);
DWORD Equals1Offset;
bool (*Equals1)(void *_instance, int obj);
DWORD CompareToOffset;
int (*CompareTo)(void *_instance, int other);
}ObscuredUShort;
struct ObscuredVector2 {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, float x, float y);
DWORD get_xOffset;
float (*get_x)(void *_instance);
DWORD set_xOffset;
void (*set_x)(void *_instance, float value);
DWORD get_yOffset;
float (*get_y)(void *_instance);
DWORD set_yOffset;
void (*set_y)(void *_instance, float value);
DWORD get_ItemOffset;
float (*get_Item)(void *_instance, int index);
DWORD set_ItemOffset;
void (*set_Item)(void *_instance, int index, float value);
DWORD SetNewCryptoKeyOffset;
void (*SetNewCryptoKey)(int newKey);
DWORD EncryptOffset;
int(*Encrypt)(Vector2 value);
DWORD Encrypt1Offset;
int(*Encrypt1)(Vector2 value, int key);
DWORD Encrypt2Offset;
int(*Encrypt2)(float x, float y, int key);
DWORD DecryptOffset;
Vector2 (*Decrypt)(int value);
DWORD Decrypt1Offset;
Vector2 (*Decrypt1)(int value, int key);
DWORD FromEncryptedOffset;
int(*FromEncrypted)(int encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
int(*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, int encrypted);
DWORD GetDecryptedOffset;
Vector2 (*GetDecrypted)(void *_instance);
DWORD InternalDecryptOffset;
Vector2 (*InternalDecrypt)(void *_instance);
DWORD CompareVectorsWithToleranceOffset;
bool (*CompareVectorsWithTolerance)(void *_instance, Vector2 vector1, Vector2 vector2);
DWORD InternalDecryptFieldOffset;
float (*InternalDecryptField)(void *_instance, int encrypted);
DWORD InternalEncryptFieldOffset;
int (*InternalEncryptField)(void *_instance, float encrypted);
DWORD op_ImplicitOffset;
int(*op_Implicit)(Vector2 value);
DWORD op_Implicit1Offset;
Vector2 (*op_Implicit1)(int value);
DWORD op_Implicit2Offset;
Vector3 (*op_Implicit2)(int value);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
}ObscuredVector2;
struct ObscuredVector2Int {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, int x, int y);
DWORD get_xOffset;
int (*get_x)(void *_instance);
DWORD set_xOffset;
void (*set_x)(void *_instance, int value);
DWORD get_yOffset;
int (*get_y)(void *_instance);
DWORD set_yOffset;
void (*set_y)(void *_instance, int value);
DWORD get_ItemOffset;
int (*get_Item)(void *_instance, int index);
DWORD set_ItemOffset;
void (*set_Item)(void *_instance, int index, int value);
DWORD SetNewCryptoKeyOffset;
void (*SetNewCryptoKey)(int newKey);
DWORD EncryptOffset;
int(*Encrypt)(int value);
DWORD Encrypt1Offset;
int(*Encrypt1)(int value, int key);
DWORD Encrypt2Offset;
int(*Encrypt2)(int x, int y, int key);
DWORD DecryptOffset;
int(*Decrypt)(int value);
DWORD Decrypt1Offset;
int(*Decrypt1)(int value, int key);
DWORD FromEncryptedOffset;
int(*FromEncrypted)(int encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
int(*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, int encrypted);
DWORD GetDecryptedOffset;
int(*GetDecrypted)(void *_instance);
DWORD InternalDecryptOffset;
int(*InternalDecrypt)(void *_instance);
DWORD InternalDecryptFieldOffset;
int (*InternalDecryptField)(void *_instance, int encrypted);
DWORD InternalEncryptFieldOffset;
int (*InternalEncryptField)(void *_instance, int encrypted);
DWORD op_ImplicitOffset;
int(*op_Implicit)(int value);
DWORD op_Implicit1Offset;
int(*op_Implicit1)(int value);
DWORD op_Implicit2Offset;
Vector2 (*op_Implicit2)(int value);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}ObscuredVector2Int;
struct ObscuredVector3 {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, float x, float y, float z);
DWORD get_xOffset;
float (*get_x)(void *_instance);
DWORD set_xOffset;
void (*set_x)(void *_instance, float value);
DWORD get_yOffset;
float (*get_y)(void *_instance);
DWORD set_yOffset;
void (*set_y)(void *_instance, float value);
DWORD get_zOffset;
float (*get_z)(void *_instance);
DWORD set_zOffset;
void (*set_z)(void *_instance, float value);
DWORD get_ItemOffset;
float (*get_Item)(void *_instance, int index);
DWORD set_ItemOffset;
void (*set_Item)(void *_instance, int index, float value);
DWORD SetNewCryptoKeyOffset;
void (*SetNewCryptoKey)(int newKey);
DWORD EncryptOffset;
int(*Encrypt)(Vector3 value);
DWORD Encrypt1Offset;
int(*Encrypt1)(Vector3 value, int key);
DWORD Encrypt2Offset;
int(*Encrypt2)(float x, float y, float z, int key);
DWORD DecryptOffset;
Vector3 (*Decrypt)(int value);
DWORD Decrypt1Offset;
Vector3 (*Decrypt1)(int value, int key);
DWORD FromEncryptedOffset;
int(*FromEncrypted)(int encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
int(*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, int encrypted);
DWORD GetDecryptedOffset;
Vector3 (*GetDecrypted)(void *_instance);
DWORD InternalDecryptOffset;
Vector3 (*InternalDecrypt)(void *_instance);
DWORD CompareVectorsWithToleranceOffset;
bool (*CompareVectorsWithTolerance)(void *_instance, Vector3 vector1, Vector3 vector2);
DWORD InternalDecryptFieldOffset;
float (*InternalDecryptField)(void *_instance, int encrypted);
DWORD InternalEncryptFieldOffset;
int (*InternalEncryptField)(void *_instance, float encrypted);
DWORD op_ImplicitOffset;
int(*op_Implicit)(Vector3 value);
DWORD op_Implicit1Offset;
Vector3 (*op_Implicit1)(int value);
DWORD op_AdditionOffset;
int(*op_Addition)(int a, int b);
DWORD op_Addition1Offset;
int(*op_Addition1)(Vector3 a, int b);
DWORD op_Addition2Offset;
int(*op_Addition2)(int a, Vector3 b);
DWORD op_SubtractionOffset;
int(*op_Subtraction)(int a, int b);
DWORD op_Subtraction1Offset;
int(*op_Subtraction1)(Vector3 a, int b);
DWORD op_Subtraction2Offset;
int(*op_Subtraction2)(int a, Vector3 b);
DWORD op_UnaryNegationOffset;
int(*op_UnaryNegation)(int a);
DWORD op_MultiplyOffset;
int(*op_Multiply)(int a, float d);
DWORD op_Multiply1Offset;
int(*op_Multiply1)(float d, int a);
DWORD op_DivisionOffset;
int(*op_Division)(int a, float d);
DWORD op_EqualityOffset;
bool (*op_Equality)(int lhs, int rhs);
DWORD op_Equality1Offset;
bool (*op_Equality1)(Vector3 lhs, int rhs);
DWORD op_Equality2Offset;
bool (*op_Equality2)(int lhs, Vector3 rhs);
DWORD op_InequalityOffset;
bool (*op_Inequality)(int lhs, int rhs);
DWORD op_Inequality1Offset;
bool (*op_Inequality1)(Vector3 lhs, int rhs);
DWORD op_Inequality2Offset;
bool (*op_Inequality2)(int lhs, Vector3 rhs);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
}ObscuredVector3;
struct ObscuredVector3Int {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, int x, int y, int z);
DWORD get_xOffset;
int (*get_x)(void *_instance);
DWORD set_xOffset;
void (*set_x)(void *_instance, int value);
DWORD get_yOffset;
int (*get_y)(void *_instance);
DWORD set_yOffset;
void (*set_y)(void *_instance, int value);
DWORD get_zOffset;
int (*get_z)(void *_instance);
DWORD set_zOffset;
void (*set_z)(void *_instance, int value);
DWORD get_ItemOffset;
int (*get_Item)(void *_instance, int index);
DWORD set_ItemOffset;
void (*set_Item)(void *_instance, int index, int value);
DWORD SetNewCryptoKeyOffset;
void (*SetNewCryptoKey)(int newKey);
DWORD EncryptOffset;
int(*Encrypt)(int value);
DWORD Encrypt1Offset;
int(*Encrypt1)(int value, int key);
DWORD Encrypt2Offset;
int(*Encrypt2)(int x, int y, int z, int key);
DWORD DecryptOffset;
int(*Decrypt)(int value);
DWORD Decrypt1Offset;
int(*Decrypt1)(int value, int key);
DWORD FromEncryptedOffset;
int(*FromEncrypted)(int encrypted);
DWORD ApplyNewCryptoKeyOffset;
void (*ApplyNewCryptoKey)(void *_instance);
DWORD RandomizeCryptoKeyOffset;
void (*RandomizeCryptoKey)(void *_instance);
DWORD GetEncryptedOffset;
int(*GetEncrypted)(void *_instance);
DWORD SetEncryptedOffset;
void (*SetEncrypted)(void *_instance, int encrypted);
DWORD GetDecryptedOffset;
int(*GetDecrypted)(void *_instance);
DWORD InternalDecryptOffset;
int(*InternalDecrypt)(void *_instance);
DWORD InternalDecryptFieldOffset;
int (*InternalDecryptField)(void *_instance, int encrypted);
DWORD InternalEncryptFieldOffset;
int (*InternalEncryptField)(void *_instance, int encrypted);
DWORD op_ImplicitOffset;
int(*op_Implicit)(int value);
DWORD op_Implicit1Offset;
int(*op_Implicit1)(int value);
DWORD op_Implicit2Offset;
Vector3 (*op_Implicit2)(int value);
DWORD op_AdditionOffset;
int(*op_Addition)(int a, int b);
DWORD op_Addition1Offset;
int(*op_Addition1)(int a, int b);
DWORD op_Addition2Offset;
int(*op_Addition2)(int a, int b);
DWORD op_SubtractionOffset;
int(*op_Subtraction)(int a, int b);
DWORD op_Subtraction1Offset;
int(*op_Subtraction1)(int a, int b);
DWORD op_Subtraction2Offset;
int(*op_Subtraction2)(int a, int b);
DWORD op_MultiplyOffset;
int(*op_Multiply)(int a, int d);
DWORD op_EqualityOffset;
bool (*op_Equality)(int lhs, int rhs);
DWORD op_Equality1Offset;
bool (*op_Equality1)(int lhs, int rhs);
DWORD op_Equality2Offset;
bool (*op_Equality2)(int lhs, int rhs);
DWORD op_InequalityOffset;
bool (*op_Inequality)(int lhs, int rhs);
DWORD op_Inequality1Offset;
bool (*op_Inequality1)(int lhs, int rhs);
DWORD op_Inequality2Offset;
bool (*op_Inequality2)(int lhs, int rhs);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *format);
}ObscuredVector3Int;
}
namespace CodeStageAntiCheatUtils{
struct xxHash {
}xxHash;
}
namespace Crazy{
struct LoadNextScene {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD loadNextSceneOffset;
void (*loadNextScene)(void *_instance);
}LoadNextScene;
struct RotateImg {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
}RotateImg;
}
namespace DigitalOpusMBCore{
struct MBVersionConcrete {
DWORD versionOffset;
monoString *(*version)(void *_instance);
DWORD GetMajorVersionOffset;
int (*GetMajorVersion)(void *_instance);
DWORD GetMinorVersionOffset;
int (*GetMinorVersion)(void *_instance);
DWORD GetActiveOffset;
bool (*GetActive)(void *_instance, void *go);
DWORD SetActiveOffset;
void (*SetActive)(void *_instance, void *go, bool isActive);
DWORD SetActiveRecursivelyOffset;
void (*SetActiveRecursively)(void *_instance, void *go, bool isActive);
DWORD FindSceneObjectsOfTypeOffset;
DWORD IsRunningAndMeshNotReadWriteableOffset;
bool (*IsRunningAndMeshNotReadWriteable)(void *_instance, void *m);
DWORD GetMeshUV1sOffset;
DWORD GetMeshUV3orUV4Offset;
DWORD MeshClearOffset;
void (*MeshClear)(void *_instance, void *m, bool t);
DWORD GetLightmapTilingOffsetOffset;
int(*GetLightmapTilingOffset)(void *_instance, void *r);
DWORD GetBonesOffset;
}MBVersionConcrete;
struct TextureBlender {
}TextureBlender;
struct TextureBlenderFallback {
DWORD DoesShaderNameMatchOffset;
bool (*DoesShaderNameMatch)(void *_instance, monoString *shaderName);
DWORD OnBeforeTintTextureOffset;
void (*OnBeforeTintTexture)(void *_instance, void *sourceMat, monoString *shaderTexturePropertyName);
DWORD OnBlendTexturePixelOffset;
Color (*OnBlendTexturePixel)(void *_instance, monoString *shaderPropertyName, Color pixelColor);
DWORD NonTexturePropertiesAreEqualOffset;
bool (*NonTexturePropertiesAreEqual)(void *_instance, void *a, void *b);
DWORD SetNonTexturePropertyValuesOnResultMaterialOffset;
void (*SetNonTexturePropertyValuesOnResultMaterial)(void *_instance, void *resultMaterial);
DWORD GetColorIfNoTextureOffset;
Color (*GetColorIfNoTexture)(void *_instance, void *mat, void *texProperty);
DWORD _compareColorOffset;
bool (*_compareColor)(void *a, void *b, Color defaultVal, monoString *propertyName);
DWORD _compareFloatOffset;
bool (*_compareFloat)(void *a, void *b, float defaultVal, monoString *propertyName);
}TextureBlenderFallback;
struct TextureBlenderLegacyBumpDiffuse {
DWORD DoesShaderNameMatchOffset;
bool (*DoesShaderNameMatch)(void *_instance, monoString *shaderName);
DWORD OnBeforeTintTextureOffset;
void (*OnBeforeTintTexture)(void *_instance, void *sourceMat, monoString *shaderTexturePropertyName);
DWORD OnBlendTexturePixelOffset;
Color (*OnBlendTexturePixel)(void *_instance, monoString *propertyToDoshaderPropertyName, Color pixelColor);
DWORD NonTexturePropertiesAreEqualOffset;
bool (*NonTexturePropertiesAreEqual)(void *_instance, void *a, void *b);
DWORD SetNonTexturePropertyValuesOnResultMaterialOffset;
void (*SetNonTexturePropertyValuesOnResultMaterial)(void *_instance, void *resultMaterial);
DWORD GetColorIfNoTextureOffset;
Color (*GetColorIfNoTexture)(void *_instance, void *m, void *texPropertyName);
}TextureBlenderLegacyBumpDiffuse;
struct TextureBlenderLegacyDiffuse {
DWORD DoesShaderNameMatchOffset;
bool (*DoesShaderNameMatch)(void *_instance, monoString *shaderName);
DWORD OnBeforeTintTextureOffset;
void (*OnBeforeTintTexture)(void *_instance, void *sourceMat, monoString *shaderTexturePropertyName);
DWORD OnBlendTexturePixelOffset;
Color (*OnBlendTexturePixel)(void *_instance, monoString *propertyToDoshaderPropertyName, Color pixelColor);
DWORD NonTexturePropertiesAreEqualOffset;
bool (*NonTexturePropertiesAreEqual)(void *_instance, void *a, void *b);
DWORD SetNonTexturePropertyValuesOnResultMaterialOffset;
void (*SetNonTexturePropertyValuesOnResultMaterial)(void *_instance, void *resultMaterial);
DWORD GetColorIfNoTextureOffset;
Color (*GetColorIfNoTexture)(void *_instance, void *m, void *texPropertyName);
}TextureBlenderLegacyDiffuse;
struct TextureBlenderStandardMetallic {
DWORD DoesShaderNameMatchOffset;
bool (*DoesShaderNameMatch)(void *_instance, monoString *shaderName);
DWORD OnBeforeTintTextureOffset;
void (*OnBeforeTintTexture)(void *_instance, void *sourceMat, monoString *shaderTexturePropertyName);
DWORD OnBlendTexturePixelOffset;
Color (*OnBlendTexturePixel)(void *_instance, monoString *propertyToDoshaderPropertyName, Color pixelColor);
DWORD NonTexturePropertiesAreEqualOffset;
bool (*NonTexturePropertiesAreEqual)(void *_instance, void *a, void *b);
DWORD SetNonTexturePropertyValuesOnResultMaterialOffset;
void (*SetNonTexturePropertyValuesOnResultMaterial)(void *_instance, void *resultMaterial);
DWORD GetColorIfNoTextureOffset;
Color (*GetColorIfNoTexture)(void *_instance, void *mat, void *texPropertyName);
}TextureBlenderStandardMetallic;
struct TextureBlenderStandardSpecular {
DWORD DoesShaderNameMatchOffset;
bool (*DoesShaderNameMatch)(void *_instance, monoString *shaderName);
DWORD OnBeforeTintTextureOffset;
void (*OnBeforeTintTexture)(void *_instance, void *sourceMat, monoString *shaderTexturePropertyName);
DWORD OnBlendTexturePixelOffset;
Color (*OnBlendTexturePixel)(void *_instance, monoString *propertyToDoshaderPropertyName, Color pixelColor);
DWORD NonTexturePropertiesAreEqualOffset;
bool (*NonTexturePropertiesAreEqual)(void *_instance, void *a, void *b);
DWORD SetNonTexturePropertyValuesOnResultMaterialOffset;
void (*SetNonTexturePropertyValuesOnResultMaterial)(void *_instance, void *resultMaterial);
DWORD GetColorIfNoTextureOffset;
Color (*GetColorIfNoTexture)(void *_instance, void *mat, void *texPropertyName);
}TextureBlenderStandardSpecular;
struct ProgressUpdateDelegate {
DWORD InvokeOffset;
void (*Invoke)(void *_instance, monoString *msg, float progress);
DWORD EndInvokeOffset;
void (*EndInvoke)(void *_instance, void *result);
}ProgressUpdateDelegate;
struct MB2_EditorMethodsInterface {
}MB2_EditorMethodsInterface;
struct MB2_Log {
DWORD LogOffset;
void (*Log)(int l, monoString *msg, int currentThreshold);
}MB2_Log;
struct ObjectLog {
DWORD _CacheLogMessageOffset;
void (*_CacheLogMessage)(void *_instance, monoString *msg);
DWORD LogOffset;
void (*Log)(void *_instance, int l, monoString *msg, int currentThreshold);
DWORD DumpOffset;
monoString *(*Dump)(void *_instance);
}ObjectLog;
struct MBVersionInterface {
}MBVersionInterface;
struct MBVersion {
DWORD _CreateMBVersionConcreteOffset;
void *(*_CreateMBVersionConcrete)();
DWORD versionOffset;
monoString *(*version)();
DWORD GetMajorVersionOffset;
int (*GetMajorVersion)();
DWORD GetMinorVersionOffset;
int (*GetMinorVersion)();
DWORD GetActiveOffset;
bool (*GetActive)(void *go);
DWORD SetActiveOffset;
void (*SetActive)(void *go, bool isActive);
DWORD SetActiveRecursivelyOffset;
void (*SetActiveRecursively)(void *go, bool isActive);
DWORD FindSceneObjectsOfTypeOffset;
DWORD IsRunningAndMeshNotReadWriteableOffset;
bool (*IsRunningAndMeshNotReadWriteable)(void *m);
DWORD GetMeshUV3orUV4Offset;
DWORD MeshClearOffset;
void (*MeshClear)(void *m, bool t);
DWORD GetLightmapTilingOffsetOffset;
int(*GetLightmapTilingOffset)(void *r);
DWORD GetBonesOffset;
}MBVersion;
struct MB2_TexturePacker {
DWORD printTreeOffset;
void (*printTree)(void *r, monoString *spc);
DWORD drawGizmosNodeOffset;
void (*drawGizmosNode)(void *r);
DWORD createFilledTexOffset;
void *(*createFilledTex)(Color c, int w, int h);
DWORD DrawGizmosOffset;
void (*DrawGizmos)(void *_instance);
DWORD StepWidthHeightOffset;
int (*StepWidthHeight)(void *_instance, int oldVal, int step, int maxDim);
DWORD RoundToNearestPositivePowerOfTwoOffset;
int (*RoundToNearestPositivePowerOfTwo)(void *_instance, int x);
DWORD CeilToNearestPowerOfTwoOffset;
int (*CeilToNearestPowerOfTwo)(void *_instance, int x);
DWORD RunTestHarnessOffset;
void (*RunTestHarness)(void *_instance);
}MB2_TexturePacker;
struct MB3_CopyBoneWeights {
}MB3_CopyBoneWeights;
struct MB3_MeshCombiner {
DWORD get_EVAL_VERSIONOffset;
bool (*get_EVAL_VERSION)();
DWORD get_LOG_LEVELOffset;
int(*get_LOG_LEVEL)(void *_instance);
DWORD set_LOG_LEVELOffset;
void (*set_LOG_LEVEL)(void *_instance, int value);
DWORD get_validationLevelOffset;
int(*get_validationLevel)(void *_instance);
DWORD set_validationLevelOffset;
void (*set_validationLevel)(void *_instance, int value);
DWORD get_nameOffset;
monoString *(*get_name)(void *_instance);
DWORD set_nameOffset;
void (*set_name)(void *_instance, monoString *value);
DWORD get_textureBakeResultsOffset;
void *(*get_textureBakeResults)(void *_instance);
DWORD set_textureBakeResultsOffset;
void (*set_textureBakeResults)(void *_instance, void *value);
DWORD get_resultSceneObjectOffset;
void *(*get_resultSceneObject)(void *_instance);
DWORD set_resultSceneObjectOffset;
void (*set_resultSceneObject)(void *_instance, void *value);
DWORD get_targetRendererOffset;
void *(*get_targetRenderer)(void *_instance);
DWORD set_targetRendererOffset;
void (*set_targetRenderer)(void *_instance, void *value);
DWORD get_renderTypeOffset;
int(*get_renderType)(void *_instance);
DWORD set_renderTypeOffset;
void (*set_renderType)(void *_instance, int value);
DWORD get_outputOptionOffset;
int(*get_outputOption)(void *_instance);
DWORD set_outputOptionOffset;
void (*set_outputOption)(void *_instance, int value);
DWORD get_lightmapOptionOffset;
int(*get_lightmapOption)(void *_instance);
DWORD set_lightmapOptionOffset;
void (*set_lightmapOption)(void *_instance, int value);
DWORD get_doNormOffset;
bool (*get_doNorm)(void *_instance);
DWORD set_doNormOffset;
void (*set_doNorm)(void *_instance, bool value);
DWORD get_doTanOffset;
bool (*get_doTan)(void *_instance);
DWORD set_doTanOffset;
void (*set_doTan)(void *_instance, bool value);
DWORD get_doColOffset;
bool (*get_doCol)(void *_instance);
DWORD set_doColOffset;
void (*set_doCol)(void *_instance, bool value);
DWORD get_doUVOffset;
bool (*get_doUV)(void *_instance);
DWORD set_doUVOffset;
void (*set_doUV)(void *_instance, bool value);
DWORD get_doUV1Offset;
bool (*get_doUV1)(void *_instance);
DWORD set_doUV1Offset;
void (*set_doUV1)(void *_instance, bool value);
DWORD doUV2Offset;
bool (*doUV2)(void *_instance);
DWORD get_doUV3Offset;
bool (*get_doUV3)(void *_instance);
DWORD set_doUV3Offset;
void (*set_doUV3)(void *_instance, bool value);
DWORD get_doUV4Offset;
bool (*get_doUV4)(void *_instance);
DWORD set_doUV4Offset;
void (*set_doUV4)(void *_instance, bool value);
DWORD ApplyOffset;
void (*Apply)(void *_instance);
}MB3_MeshCombiner;
struct MB3_MeshCombinerSingle {
DWORD set_textureBakeResultsOffset;
void (*set_textureBakeResults)(void *_instance, void *value);
DWORD set_renderTypeOffset;
void (*set_renderType)(void *_instance, int value);
DWORD set_resultSceneObjectOffset;
void (*set_resultSceneObject)(void *_instance, void *value);
DWORD instance2Combined_MapGetOffset;
void *(*instance2Combined_MapGet)(void *_instance, int gameObjectID);
DWORD instance2Combined_MapAddOffset;
void (*instance2Combined_MapAdd)(void *_instance, int gameObjectID, void *dgo);
DWORD instance2Combined_MapRemoveOffset;
void (*instance2Combined_MapRemove)(void *_instance, int gameObjectID);
DWORD instance2Combined_MapCountOffset;
int (*instance2Combined_MapCount)(void *_instance);
DWORD instance2Combined_MapClearOffset;
void (*instance2Combined_MapClear)(void *_instance);
DWORD instance2Combined_MapContainsKeyOffset;
bool (*instance2Combined_MapContainsKey)(void *_instance, int gameObjectID);
DWORD GetNumObjectsInCombinedOffset;
int (*GetNumObjectsInCombined)(void *_instance);
DWORD GetObjectsInCombinedOffset;
DWORD GetMeshOffset;
void *(*GetMesh)(void *_instance);
DWORD GetBonesOffset;
DWORD GetLightmapIndexOffset;
int (*GetLightmapIndex)(void *_instance);
DWORD GetNumVerticesForOffset;
int (*GetNumVerticesFor)(void *_instance, void *go);
DWORD GetNumVerticesFor1Offset;
int (*GetNumVerticesFor1)(void *_instance, int instanceID);
DWORD _initializeOffset;
void (*_initialize)(void *_instance);
DWORD _validateTextureBakeResultsOffset;
bool (*_validateTextureBakeResults)(void *_instance);
DWORD _validateMeshFlagsOffset;
bool (*_validateMeshFlags)(void *_instance);
DWORD _copyAndAdjustUVsFromMeshOffset;
void (*_copyAndAdjustUVsFromMesh)(void *_instance, void *dgo, void *mesh, int vertsIdx, void *meshChannelsCache);
DWORD _copyAndAdjustUV2FromMeshOffset;
void (*_copyAndAdjustUV2FromMesh)(void *_instance, void *dgo, void *mesh, int vertsIdx, void *meshChannelsCache);
DWORD UpdateSkinnedMeshApproximateBoundsOffset;
void (*UpdateSkinnedMeshApproximateBounds)(void *_instance);
DWORD UpdateSkinnedMeshApproximateBoundsFromBonesOffset;
void (*UpdateSkinnedMeshApproximateBoundsFromBones)(void *_instance);
DWORD UpdateSkinnedMeshApproximateBoundsFromBoundsOffset;
void (*UpdateSkinnedMeshApproximateBoundsFromBounds)(void *_instance);
DWORD _getNumBonesOffset;
int (*_getNumBones)(void *_instance, void *r);
DWORD _getBonesOffset;
DWORD ApplyOffset;
void (*Apply)(void *_instance, void *uv2GenerationMethod);
DWORD ApplyShowHideOffset;
void (*ApplyShowHide)(void *_instance);
DWORD Apply1Offset;
void (*Apply1)(void *_instance, bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones, void *uv2GenerationMethod);
DWORD GetSubmeshTrisWithShowHideAppliedOffset;
DWORD _updateGameObjectOffset;
void (*_updateGameObject)(void *_instance, void *go, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateColors, bool updateSkinningInfo, void *meshChannelCache);
DWORD CombinedMeshContainsOffset;
bool (*CombinedMeshContains)(void *_instance, void *go);
DWORD ClearBuffersOffset;
void (*ClearBuffers)(void *_instance);
DWORD ClearMeshOffset;
void (*ClearMesh)(void *_instance);
DWORD DestroyMeshOffset;
void (*DestroyMesh)(void *_instance);
DWORD DestroyMeshEditorOffset;
void (*DestroyMeshEditor)(void *_instance, void *editorMethods);
DWORD ValidateTargRendererAndMeshAndResultSceneObjOffset;
bool (*ValidateTargRendererAndMeshAndResultSceneObj)(void *_instance);
DWORD IsMirroredOffset;
bool (*IsMirrored)(void *_instance, int tm);
DWORD CheckIntegrityOffset;
void (*CheckIntegrity)(void *_instance);
DWORD _buildBoneIdx2dgoMapOffset;
}MB3_MeshCombinerSingle;
struct MB3_MultiMeshCombiner {
DWORD get_LOG_LEVELOffset;
int(*get_LOG_LEVEL)(void *_instance);
DWORD set_LOG_LEVELOffset;
void (*set_LOG_LEVEL)(void *_instance, int value);
DWORD set_validationLevelOffset;
void (*set_validationLevel)(void *_instance, int value);
DWORD get_validationLevelOffset;
int(*get_validationLevel)(void *_instance);
DWORD get_maxVertsInMeshOffset;
int (*get_maxVertsInMesh)(void *_instance);
DWORD set_maxVertsInMeshOffset;
void (*set_maxVertsInMesh)(void *_instance, int value);
DWORD GetNumObjectsInCombinedOffset;
int (*GetNumObjectsInCombined)(void *_instance);
DWORD GetNumVerticesForOffset;
int (*GetNumVerticesFor)(void *_instance, void *go);
DWORD GetNumVerticesFor1Offset;
int (*GetNumVerticesFor1)(void *_instance, int gameObjectID);
DWORD GetObjectsInCombinedOffset;
DWORD GetLightmapIndexOffset;
int (*GetLightmapIndex)(void *_instance);
DWORD CombinedMeshContainsOffset;
bool (*CombinedMeshContains)(void *_instance, void *go);
DWORD _validateTextureBakeResultsOffset;
bool (*_validateTextureBakeResults)(void *_instance);
DWORD ApplyOffset;
void (*Apply)(void *_instance, void *uv2GenerationMethod);
DWORD Apply1Offset;
void (*Apply1)(void *_instance, bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones, void *uv2GenerationMethod);
DWORD UpdateSkinnedMeshApproximateBoundsOffset;
void (*UpdateSkinnedMeshApproximateBounds)(void *_instance);
DWORD UpdateSkinnedMeshApproximateBoundsFromBonesOffset;
void (*UpdateSkinnedMeshApproximateBoundsFromBones)(void *_instance);
DWORD UpdateSkinnedMeshApproximateBoundsFromBoundsOffset;
void (*UpdateSkinnedMeshApproximateBoundsFromBounds)(void *_instance);
DWORD ClearBuffersOffset;
void (*ClearBuffers)(void *_instance);
DWORD ClearMeshOffset;
void (*ClearMesh)(void *_instance);
DWORD DestroyMeshOffset;
void (*DestroyMesh)(void *_instance);
DWORD DestroyMeshEditorOffset;
void (*DestroyMeshEditor)(void *_instance, void *editorMethods);
DWORD _setMBValuesOffset;
void (*_setMBValues)(void *_instance, void *targ);
DWORD CheckIntegrityOffset;
void (*CheckIntegrity)(void *_instance);
}MB3_MultiMeshCombiner;
struct ShaderTextureProperty {
}ShaderTextureProperty;
struct MB3_TextureCombiner {
DWORD get_textureBakeResultsOffset;
void *(*get_textureBakeResults)(void *_instance);
DWORD set_textureBakeResultsOffset;
void (*set_textureBakeResults)(void *_instance, void *value);
DWORD get_atlasPaddingOffset;
int (*get_atlasPadding)(void *_instance);
DWORD set_atlasPaddingOffset;
void (*set_atlasPadding)(void *_instance, int value);
DWORD get_maxAtlasSizeOffset;
int (*get_maxAtlasSize)(void *_instance);
DWORD set_maxAtlasSizeOffset;
void (*set_maxAtlasSize)(void *_instance, int value);
DWORD get_resizePowerOfTwoTexturesOffset;
bool (*get_resizePowerOfTwoTextures)(void *_instance);
DWORD set_resizePowerOfTwoTexturesOffset;
void (*set_resizePowerOfTwoTextures)(void *_instance, bool value);
DWORD get_fixOutOfBoundsUVsOffset;
bool (*get_fixOutOfBoundsUVs)(void *_instance);
DWORD set_fixOutOfBoundsUVsOffset;
void (*set_fixOutOfBoundsUVs)(void *_instance, bool value);
DWORD get_maxTilingBakeSizeOffset;
int (*get_maxTilingBakeSize)(void *_instance);
DWORD set_maxTilingBakeSizeOffset;
void (*set_maxTilingBakeSize)(void *_instance, int value);
DWORD get_saveAtlasesAsAssetsOffset;
bool (*get_saveAtlasesAsAssets)(void *_instance);
DWORD set_saveAtlasesAsAssetsOffset;
void (*set_saveAtlasesAsAssets)(void *_instance, bool value);
DWORD get_packingAlgorithmOffset;
int(*get_packingAlgorithm)(void *_instance);
DWORD set_packingAlgorithmOffset;
void (*set_packingAlgorithm)(void *_instance, int value);
DWORD get_meshBakerTexturePackerForcePowerOfTwoOffset;
bool (*get_meshBakerTexturePackerForcePowerOfTwo)(void *_instance);
DWORD set_meshBakerTexturePackerForcePowerOfTwoOffset;
void (*set_meshBakerTexturePackerForcePowerOfTwo)(void *_instance, bool value);
DWORD get_customShaderPropNamesOffset;
DWORD get_considerNonTexturePropertiesOffset;
bool (*get_considerNonTextureProperties)(void *_instance);
DWORD set_considerNonTexturePropertiesOffset;
void (*set_considerNonTextureProperties)(void *_instance, bool value);
DWORD RunCorutineWithoutPauseOffset;
void (*RunCorutineWithoutPause)(void *cor, int recursionDepth);
DWORD _LoadTextureBlendersOffset;
void (*_LoadTextureBlenders)(void *_instance);
DWORD _addWatermark1Offset;
void *(*_addWatermark1)(void *_instance, void *texToPack);
DWORD IsPowerOfTwoOffset;
bool (*IsPowerOfTwo)(void *_instance, int x);
DWORD GetAdjustedForScaleAndOffset2DimensionsOffset;
Vector2 (*GetAdjustedForScaleAndOffset2Dimensions)(void *_instance, void *source, Vector2 obUVoffset, Vector2 obUVscale);
DWORD GetAdjustedForScaleAndOffset2Offset;
void *(*GetAdjustedForScaleAndOffset2)(void *_instance, void *source, Vector2 obUVoffset, Vector2 obUVscale);
DWORD GetSourceSamplingRectOffset;
int(*GetSourceSamplingRect)(void *source, Vector2 obUVoffset, Vector2 obUVscale);
DWORD TintTextureWithTextureCombinerOffset;
void *(*TintTextureWithTextureCombiner)(void *_instance, void *t, void *sourceMaterial, void *shaderPropertyName);
DWORD _createTemporaryTextureOffset;
void *(*_createTemporaryTexture)(void *_instance, int w, int h, int texFormat, bool mipMaps);
DWORD _createTextureCopyOffset;
void *(*_createTextureCopy)(void *_instance, void *t);
DWORD _resizeTextureOffset;
void *(*_resizeTexture)(void *_instance, void *t, int w, int h);
DWORD _destroyTemporaryTexturesOffset;
void (*_destroyTemporaryTextures)(void *_instance);
DWORD FindMatchingTextureBlenderOffset;
void *(*FindMatchingTextureBlender)(void *_instance, monoString *shaderName);
DWORD GetColorIfNoTextureOffset;
Color (*GetColorIfNoTexture)(void *texProperty);
DWORD ConvertNormalFormatFromUnity_ToStandardOffset;
int(*ConvertNormalFormatFromUnity_ToStandard)(void *_instance, int c);
DWORD GetSubmeshAreaOffset;
float (*GetSubmeshArea)(void *_instance, void *m, int submeshIdx);
}MB3_TextureCombiner;
struct DRect {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, Vector2 o, Vector2 s);
DWORD ctor2Offset;
void (*ctor2)(void *_instance, float xx, float yy, float w, float h);
DWORD GetRectOffset;
int(*GetRect)(void *_instance);
DWORD get_minOffset;
Vector2 (*get_min)(void *_instance);
DWORD get_maxOffset;
Vector2 (*get_max)(void *_instance);
DWORD get_sizeOffset;
Vector2 (*get_size)(void *_instance);
DWORD op_EqualityOffset;
bool (*op_Equality)(int a, int b);
DWORD op_InequalityOffset;
bool (*op_Inequality)(int a, int b);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD EnclosesOffset;
bool (*Encloses)(void *_instance, int smallToTestIfFits);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
}DRect;
struct MB3_UVTransformUtility {
DWORD TestOffset;
void (*Test)();
}MB3_UVTransformUtility;
struct MB_Utility {
DWORD createTextureCopyOffset;
void *(*createTextureCopy)(void *source);
DWORD GetGOMaterialsOffset;
DWORD GetMeshOffset;
void *(*GetMesh)(void *go);
DWORD GetRendererOffset;
void *(*GetRenderer)(void *go);
DWORD DisableRendererInSourceOffset;
void (*DisableRendererInSource)(void *go);
DWORD setSolidColorOffset;
void (*setSolidColor)(void *t, Color c);
DWORD resampleTextureOffset;
void *(*resampleTexture)(void *source, int newWidth, int newHeight);
DWORD DestroyOffset;
void (*Destroy)(void *o);
}MB_Utility;
}
namespace ExitGamesClientDemoParticle{
struct TimeKeeper {
DWORD get_IntervalOffset;
int (*get_Interval)(void *_instance);
DWORD set_IntervalOffset;
void (*set_Interval)(void *_instance, int value);
DWORD get_IsEnabledOffset;
bool (*get_IsEnabled)(void *_instance);
DWORD set_IsEnabledOffset;
void (*set_IsEnabled)(void *_instance, bool value);
DWORD get_ShouldExecuteOffset;
bool (*get_ShouldExecute)(void *_instance);
DWORD set_ShouldExecuteOffset;
void (*set_ShouldExecute)(void *_instance, bool value);
DWORD ResetOffset;
void (*Reset)(void *_instance);
}TimeKeeper;
}
namespace ExitGamesClientGUI{
struct GizmoTypeDrawer {
DWORD DrawOffset;
void (*Draw)(Vector3 center, int type, Color color, float size);
}GizmoTypeDrawer;
}
namespace ExitGamesUtilityScripts{
struct PlayerRoomIndexing {
DWORD get_PlayerIdsOffset;
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnJoinedRoomOffset;
void (*OnJoinedRoom)(void *_instance);
DWORD OnLeftRoomOffset;
void (*OnLeftRoom)(void *_instance);
DWORD OnPhotonPlayerConnectedOffset;
void (*OnPhotonPlayerConnected)(void *_instance, void *newPlayer);
DWORD OnPhotonPlayerDisconnectedOffset;
void (*OnPhotonPlayerDisconnected)(void *_instance, void *otherPlayer);
DWORD OnPhotonCustomRoomPropertiesChangedOffset;
void (*OnPhotonCustomRoomPropertiesChanged)(void *_instance, void *propertiesThatChanged);
DWORD OnMasterClientSwitchedOffset;
void (*OnMasterClientSwitched)(void *_instance, void *newMasterClient);
DWORD GetRoomIndexOffset;
int (*GetRoomIndex)(void *_instance, void *player);
DWORD SanitizeIndexingOffset;
void (*SanitizeIndexing)(void *_instance, bool forceIndexing);
DWORD RefreshDataOffset;
void (*RefreshData)(void *_instance);
DWORD AssignIndexOffset;
void (*AssignIndex)(void *_instance, void *player);
DWORD UnAssignIndexOffset;
void (*UnAssignIndex)(void *_instance, void *player);
}PlayerRoomIndexing;
struct PlayerRoomIndexingExtensions {
DWORD GetRoomIndexOffset;
int (*GetRoomIndex)(void *player);
}PlayerRoomIndexingExtensions;
struct ButtonInsideScrollList {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UnityEngineEventSystemsIPointerDownHandlerOnPointerDownOffset;
void (*UnityEngineEventSystemsIPointerDownHandlerOnPointerDown)(void *_instance, void *eventData);
DWORD UnityEngineEventSystemsIPointerUpHandlerOnPointerUpOffset;
void (*UnityEngineEventSystemsIPointerUpHandlerOnPointerUp)(void *_instance, void *eventData);
}ButtonInsideScrollList;
struct TextButtonTransition {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
}TextButtonTransition;
struct TextToggleIsOnTransition {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnValueChangedOffset;
void (*OnValueChanged)(void *_instance, bool isOn);
DWORD OnPointerEnterOffset;
void (*OnPointerEnter)(void *_instance, void *eventData);
DWORD OnPointerExitOffset;
void (*OnPointerExit)(void *_instance, void *eventData);
}TextToggleIsOnTransition;
}
namespace Horizon{
struct HorizonCompensateZFighting {
DWORD UpdateOffset;
void (*Update)(void *_instance);
}HorizonCompensateZFighting;
struct HorizonCopyMaterialProps {
DWORD SyncOffset;
void (*Sync)(void *_instance, bool enabled_only_flag);
DWORD CopyFloatOffset;
void (*CopyFloat)(void *_instance, monoString *propName, void *sourceMaterial, void *targetMaterial);
DWORD CopyFloat1Offset;
void (*CopyFloat1)(void *_instance, monoString *propName, monoString *targetPropName, void *sourceMaterial, void *targetMaterial);
DWORD CopyColorOffset;
void (*CopyColor)(void *_instance, monoString *propName, void *sourceMaterial, void *targetMaterial);
DWORD CopyColor1Offset;
void (*CopyColor1)(void *_instance, monoString *propName, monoString *targetPropName, void *sourceMaterial, void *targetMaterial);
DWORD CopyVectorOffset;
void (*CopyVector)(void *_instance, monoString *propName, void *sourceMaterial, void *targetMaterial);
DWORD CopyVector1Offset;
void (*CopyVector1)(void *_instance, monoString *propName, monoString *targetPropName, void *sourceMaterial, void *targetMaterial);
DWORD CopyTextureOffset;
void (*CopyTexture)(void *_instance, monoString *propName, void *sourceMaterial, void *targetMaterial);
DWORD CopyTexture1Offset;
void (*CopyTexture1)(void *_instance, monoString *propName, monoString *targetPropName, void *sourceMaterial, void *targetMaterial);
DWORD CopyTextureTilingOffsetOffset;
void (*CopyTextureTilingOffset)(void *_instance, monoString *propName, void *sourceMaterial, void *targetMaterial);
DWORD CopyTextureTilingOffset1Offset;
void (*CopyTextureTilingOffset1)(void *_instance, monoString *propName, monoString *targetPropName, void *sourceMaterial, void *targetMaterial);
DWORD CheckEnabledOffset;
bool (*CheckEnabled)(void *_instance, monoString *propName, void *mat);
DWORD CheckTypeOffset;
float (*CheckType)(void *_instance, monoString *propName, void *mat);
DWORD CompareTexturesOffset;
bool (*CompareTextures)(void *_instance, monoString *sourcePropName, void *sourceMaterial, monoString *targetPropName, void *targetMaterial);
}HorizonCopyMaterialProps;
struct HorizonMaster {
}HorizonMaster;
struct HorizON_LayerProps {
}HorizON_LayerProps;
struct HorizonDecoPainterSettings {
}HorizonDecoPainterSettings;
struct HorizonDecoParent {
}HorizonDecoParent;
struct HorizonDisplacementHelper {
DWORD AdjustBoundsOffset;
void (*AdjustBounds)(void *gameObject);
DWORD DisplaceMeshOffset;
void (*DisplaceMesh)(void *gameObject);
DWORD GetPropsOffset;
bool (*GetProps)(void *gameObject);
DWORD TRANSFORM_TEXOffset;
Vector2 (*TRANSFORM_TEX)(Vector2 uv_in, int scaleOffset);
DWORD DisplaceOffset;
float (*Displace)(Vector2 uv);
DWORD dispOffset;
float (*disp)(Vector2 uv);
DWORD getUVsOffset;
Vector2 (*getUVs)(Vector2 objCenterXZ, Vector2 worldPosXZ);
}HorizonDisplacementHelper;
struct HorizonPrefabList {
}HorizonPrefabList;
}
namespace IronSourceJSON{
struct Json {
DWORD DeserializeOffset;
}Json;
}
namespace LitJson{
struct IJsonWrapper {
}IJsonWrapper;
struct JsonData {
DWORD get_CountOffset;
int (*get_Count)(void *_instance);
DWORD get_IsArrayOffset;
bool (*get_IsArray)(void *_instance);
DWORD get_IsBooleanOffset;
bool (*get_IsBoolean)(void *_instance);
DWORD get_IsDoubleOffset;
bool (*get_IsDouble)(void *_instance);
DWORD get_IsIntOffset;
bool (*get_IsInt)(void *_instance);
DWORD get_IsLongOffset;
bool (*get_IsLong)(void *_instance);
DWORD get_IsObjectOffset;
bool (*get_IsObject)(void *_instance);
DWORD get_IsStringOffset;
bool (*get_IsString)(void *_instance);
DWORD SystemCollectionsICollectionget_CountOffset;
int (*SystemCollectionsICollectionget_Count)(void *_instance);
DWORD SystemCollectionsICollectionget_IsSynchronizedOffset;
bool (*SystemCollectionsICollectionget_IsSynchronized)(void *_instance);
DWORD SystemCollectionsICollectionget_SyncRootOffset;
DWORD SystemCollectionsIDictionaryget_IsFixedSizeOffset;
bool (*SystemCollectionsIDictionaryget_IsFixedSize)(void *_instance);
DWORD SystemCollectionsIDictionaryget_IsReadOnlyOffset;
bool (*SystemCollectionsIDictionaryget_IsReadOnly)(void *_instance);
DWORD get_KeysOffset;
void *(*get_Keys)(void *_instance);
DWORD SystemCollectionsIDictionaryget_ValuesOffset;
void *(*SystemCollectionsIDictionaryget_Values)(void *_instance);
DWORD LitJsonIJsonWrapperget_IsArrayOffset;
bool (*LitJsonIJsonWrapperget_IsArray)(void *_instance);
DWORD LitJsonIJsonWrapperget_IsBooleanOffset;
bool (*LitJsonIJsonWrapperget_IsBoolean)(void *_instance);
DWORD LitJsonIJsonWrapperget_IsDoubleOffset;
bool (*LitJsonIJsonWrapperget_IsDouble)(void *_instance);
DWORD LitJsonIJsonWrapperget_IsIntOffset;
bool (*LitJsonIJsonWrapperget_IsInt)(void *_instance);
DWORD LitJsonIJsonWrapperget_IsLongOffset;
bool (*LitJsonIJsonWrapperget_IsLong)(void *_instance);
DWORD LitJsonIJsonWrapperget_IsObjectOffset;
bool (*LitJsonIJsonWrapperget_IsObject)(void *_instance);
DWORD LitJsonIJsonWrapperget_IsStringOffset;
bool (*LitJsonIJsonWrapperget_IsString)(void *_instance);
DWORD SystemCollectionsIListget_IsFixedSizeOffset;
bool (*SystemCollectionsIListget_IsFixedSize)(void *_instance);
DWORD SystemCollectionsIListget_IsReadOnlyOffset;
bool (*SystemCollectionsIListget_IsReadOnly)(void *_instance);
DWORD SystemCollectionsSpecializedIOrderedDictionaryget_ItemOffset;
DWORD SystemCollectionsIListget_ItemOffset;
DWORD get_ItemOffset;
void *(*get_Item)(void *_instance, monoString *prop_name);
DWORD set_ItemOffset;
void (*set_Item)(void *_instance, monoString *prop_name, void *value);
DWORD get_Item1Offset;
void *(*get_Item1)(void *_instance, int index);
DWORD set_Item1Offset;
void (*set_Item1)(void *_instance, int index, void *value);
DWORD ctor1Offset;
void (*ctor1)(void *_instance, bool boolean);
DWORD ctor3Offset;
void (*ctor3)(void *_instance, int number);
DWORD ctor6Offset;
void (*ctor6)(void *_instance, monoString *str);
DWORD op_ImplicitOffset;
void *(*op_Implicit)(bool data);
DWORD op_Implicit2Offset;
void *(*op_Implicit2)(int data);
DWORD op_Implicit4Offset;
void *(*op_Implicit4)(monoString *data);
DWORD op_ExplicitOffset;
bool (*op_Explicit)(void *data);
DWORD op_Explicit1Offset;
DWORD op_Explicit2Offset;
int (*op_Explicit2)(void *data);
DWORD op_Explicit3Offset;
DWORD op_Explicit4Offset;
monoString *(*op_Explicit4)(void *data);
DWORD SystemCollectionsICollectionCopyToOffset;
void (*SystemCollectionsICollectionCopyTo)(void *_instance, void *array, int index);
DWORD SystemCollectionsIDictionaryClearOffset;
void (*SystemCollectionsIDictionaryClear)(void *_instance);
DWORD SystemCollectionsIDictionaryGetEnumeratorOffset;
void *(*SystemCollectionsIDictionaryGetEnumerator)(void *_instance);
DWORD SystemCollectionsIEnumerableGetEnumeratorOffset;
void *(*SystemCollectionsIEnumerableGetEnumerator)(void *_instance);
DWORD LitJsonIJsonWrapperGetBooleanOffset;
bool (*LitJsonIJsonWrapperGetBoolean)(void *_instance);
DWORD LitJsonIJsonWrapperGetDoubleOffset;
DWORD LitJsonIJsonWrapperGetIntOffset;
int (*LitJsonIJsonWrapperGetInt)(void *_instance);
DWORD LitJsonIJsonWrapperGetLongOffset;
DWORD LitJsonIJsonWrapperGetStringOffset;
monoString *(*LitJsonIJsonWrapperGetString)(void *_instance);
DWORD LitJsonIJsonWrapperSetBooleanOffset;
void (*LitJsonIJsonWrapperSetBoolean)(void *_instance, bool val);
DWORD LitJsonIJsonWrapperSetIntOffset;
void (*LitJsonIJsonWrapperSetInt)(void *_instance, int val);
DWORD LitJsonIJsonWrapperSetStringOffset;
void (*LitJsonIJsonWrapperSetString)(void *_instance, monoString *val);
DWORD LitJsonIJsonWrapperToJsonOffset;
monoString *(*LitJsonIJsonWrapperToJson)(void *_instance);
DWORD LitJsonIJsonWrapperToJson1Offset;
void (*LitJsonIJsonWrapperToJson1)(void *_instance, void *writer);
DWORD SystemCollectionsIListClearOffset;
void (*SystemCollectionsIListClear)(void *_instance);
DWORD SystemCollectionsIListRemoveAtOffset;
void (*SystemCollectionsIListRemoveAt)(void *_instance, int index);
DWORD SystemCollectionsSpecializedIOrderedDictionaryGetEnumeratorOffset;
void *(*SystemCollectionsSpecializedIOrderedDictionaryGetEnumerator)(void *_instance);
DWORD SystemCollectionsSpecializedIOrderedDictionaryRemoveAtOffset;
void (*SystemCollectionsSpecializedIOrderedDictionaryRemoveAt)(void *_instance, int idx);
DWORD EnsureCollectionOffset;
void *(*EnsureCollection)(void *_instance);
DWORD EnsureDictionaryOffset;
void *(*EnsureDictionary)(void *_instance);
DWORD EnsureListOffset;
void *(*EnsureList)(void *_instance);
DWORD WriteJsonOffset;
void (*WriteJson)(void *obj, void *writer);
DWORD ClearOffset;
void (*Clear)(void *_instance);
DWORD EqualsOffset;
bool (*Equals)(void *_instance, void *x);
DWORD GetJsonTypeOffset;
int(*GetJsonType)(void *_instance);
DWORD SetJsonTypeOffset;
void (*SetJsonType)(void *_instance, int type);
DWORD ToJsonOffset;
monoString *(*ToJson)(void *_instance);
DWORD ToJson1Offset;
void (*ToJson1)(void *_instance, void *writer);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}JsonData;
struct OrderedDictionaryEnumerator {
DWORD get_CurrentOffset;
DWORD get_EntryOffset;
int(*get_Entry)(void *_instance);
DWORD get_KeyOffset;
DWORD get_ValueOffset;
DWORD MoveNextOffset;
bool (*MoveNext)(void *_instance);
DWORD ResetOffset;
void (*Reset)(void *_instance);
}OrderedDictionaryEnumerator;
struct JsonException {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, int token);
DWORD ctor2Offset;
void (*ctor2)(void *_instance, int token, void *inner_exception);
DWORD ctor3Offset;
void (*ctor3)(void *_instance, int c);
DWORD ctor4Offset;
void (*ctor4)(void *_instance, int c, void *inner_exception);
DWORD ctor5Offset;
void (*ctor5)(void *_instance, monoString *message);
DWORD ctor6Offset;
void (*ctor6)(void *_instance, monoString *message, void *inner_exception);
}JsonException;
struct ArrayMetadata {
DWORD get_ElementTypeOffset;
void *(*get_ElementType)(void *_instance);
DWORD set_ElementTypeOffset;
void (*set_ElementType)(void *_instance, void *value);
DWORD get_IsArrayOffset;
bool (*get_IsArray)(void *_instance);
DWORD set_IsArrayOffset;
void (*set_IsArray)(void *_instance, bool value);
DWORD get_IsListOffset;
bool (*get_IsList)(void *_instance);
DWORD set_IsListOffset;
void (*set_IsList)(void *_instance, bool value);
}ArrayMetadata;
struct ObjectMetadata {
DWORD get_ElementTypeOffset;
void *(*get_ElementType)(void *_instance);
DWORD set_ElementTypeOffset;
void (*set_ElementType)(void *_instance, void *value);
DWORD get_IsDictionaryOffset;
bool (*get_IsDictionary)(void *_instance);
DWORD set_IsDictionaryOffset;
void (*set_IsDictionary)(void *_instance, bool value);
DWORD get_PropertiesOffset;
}ObjectMetadata;
struct ExporterFunc {
DWORD EndInvokeOffset;
void (*EndInvoke)(void *_instance, void *result);
}ExporterFunc;
struct ImporterFunc {
DWORD EndInvokeOffset;
}ImporterFunc;
struct WrapperFactory {
DWORD InvokeOffset;
void *(*Invoke)(void *_instance);
DWORD EndInvokeOffset;
void *(*EndInvoke)(void *_instance, void *result);
}WrapperFactory;
struct JsonMapper {
DWORD AddArrayMetadataOffset;
void (*AddArrayMetadata)(void *type);
DWORD AddObjectMetadataOffset;
void (*AddObjectMetadata)(void *type);
DWORD AddTypePropertiesOffset;
void (*AddTypeProperties)(void *type);
DWORD GetConvOpOffset;
void *(*GetConvOp)(void *t1, void *t2);
DWORD ReadValueOffset;
DWORD ReadValue1Offset;
void *(*ReadValue1)(void *factory, void *reader);
DWORD RegisterBaseExportersOffset;
void (*RegisterBaseExporters)();
DWORD RegisterBaseImportersOffset;
void (*RegisterBaseImporters)();
DWORD ToObjectOffset;
void *(*ToObject)(void *reader);
DWORD ToObject1Offset;
void *(*ToObject1)(void *reader);
DWORD ToObject2Offset;
void *(*ToObject2)(monoString *json);
DWORD ToWrapperOffset;
void *(*ToWrapper)(void *factory, void *reader);
DWORD ToWrapper1Offset;
void *(*ToWrapper1)(void *factory, monoString *json);
DWORD UnregisterExportersOffset;
void (*UnregisterExporters)();
DWORD UnregisterImportersOffset;
void (*UnregisterImporters)();
}JsonMapper;
struct JsonReader {
DWORD get_AllowCommentsOffset;
bool (*get_AllowComments)(void *_instance);
DWORD set_AllowCommentsOffset;
void (*set_AllowComments)(void *_instance, bool value);
DWORD get_AllowSingleQuotedStringsOffset;
bool (*get_AllowSingleQuotedStrings)(void *_instance);
DWORD set_AllowSingleQuotedStringsOffset;
void (*set_AllowSingleQuotedStrings)(void *_instance, bool value);
DWORD get_EndOfInputOffset;
bool (*get_EndOfInput)(void *_instance);
DWORD get_EndOfJsonOffset;
bool (*get_EndOfJson)(void *_instance);
DWORD get_TokenOffset;
int(*get_Token)(void *_instance);
DWORD get_ValueOffset;
DWORD ctor1Offset;
void (*ctor1)(void *_instance, void *reader);
DWORD ctor2Offset;
void (*ctor2)(void *_instance, void *reader, bool owned);
DWORD PopulateParseTableOffset;
void (*PopulateParseTable)();
DWORD TableAddRowOffset;
void (*TableAddRow)(int rule);
DWORD ProcessNumberOffset;
void (*ProcessNumber)(void *_instance, monoString *number);
DWORD ProcessSymbolOffset;
void (*ProcessSymbol)(void *_instance);
DWORD ReadTokenOffset;
bool (*ReadToken)(void *_instance);
DWORD CloseOffset;
void (*Close)(void *_instance);
DWORD ReadOffset;
bool (*Read)(void *_instance);
}JsonReader;
struct WriterContext {
}WriterContext;
struct JsonWriter {
DWORD get_IndentValueOffset;
int (*get_IndentValue)(void *_instance);
DWORD set_IndentValueOffset;
void (*set_IndentValue)(void *_instance, int value);
DWORD get_PrettyPrintOffset;
bool (*get_PrettyPrint)(void *_instance);
DWORD set_PrettyPrintOffset;
void (*set_PrettyPrint)(void *_instance, bool value);
DWORD get_TextWriterOffset;
void *(*get_TextWriter)(void *_instance);
DWORD get_ValidateOffset;
bool (*get_Validate)(void *_instance);
DWORD set_ValidateOffset;
void (*set_Validate)(void *_instance, bool value);
DWORD ctor1Offset;
void (*ctor1)(void *_instance, void *sb);
DWORD ctor2Offset;
void (*ctor2)(void *_instance, void *writer);
DWORD DoValidationOffset;
void (*DoValidation)(void *_instance, int cond);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD IndentOffset;
void (*Indent)(void *_instance);
DWORD PutOffset;
void (*Put)(void *_instance, monoString *str);
DWORD PutNewlineOffset;
void (*PutNewline)(void *_instance);
DWORD PutNewline1Offset;
void (*PutNewline1)(void *_instance, bool add_comma);
DWORD PutStringOffset;
void (*PutString)(void *_instance, monoString *str);
DWORD UnindentOffset;
void (*Unindent)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD WriteOffset;
void (*Write)(void *_instance, bool boolean);
DWORD Write1Offset;
void (*Write1)(void *_instance, int number);
DWORD Write3Offset;
void (*Write3)(void *_instance, int number);
DWORD Write5Offset;
void (*Write5)(void *_instance, monoString *str);
DWORD WriteArrayEndOffset;
void (*WriteArrayEnd)(void *_instance);
DWORD WriteArrayStartOffset;
void (*WriteArrayStart)(void *_instance);
DWORD WriteObjectEndOffset;
void (*WriteObjectEnd)(void *_instance);
DWORD WriteObjectStartOffset;
void (*WriteObjectStart)(void *_instance);
DWORD WritePropertyNameOffset;
void (*WritePropertyName)(void *_instance, monoString *property_name);
}JsonWriter;
struct FsmContext {
}FsmContext;
struct Lexer {
DWORD get_AllowCommentsOffset;
bool (*get_AllowComments)(void *_instance);
DWORD set_AllowCommentsOffset;
void (*set_AllowComments)(void *_instance, bool value);
DWORD get_AllowSingleQuotedStringsOffset;
bool (*get_AllowSingleQuotedStrings)(void *_instance);
DWORD set_AllowSingleQuotedStringsOffset;
void (*set_AllowSingleQuotedStrings)(void *_instance, bool value);
DWORD get_EndOfInputOffset;
bool (*get_EndOfInput)(void *_instance);
DWORD get_TokenOffset;
int (*get_Token)(void *_instance);
DWORD get_StringValueOffset;
monoString *(*get_StringValue)(void *_instance);
DWORD HexValueOffset;
int (*HexValue)(int digit);
DWORD PopulateFsmTablesOffset;
void (*PopulateFsmTables)();
DWORD ProcessEscCharOffset;
DWORD State1Offset;
bool (*State1)(void *ctx);
DWORD State2Offset;
bool (*State2)(void *ctx);
DWORD State3Offset;
bool (*State3)(void *ctx);
DWORD State4Offset;
bool (*State4)(void *ctx);
DWORD State5Offset;
bool (*State5)(void *ctx);
DWORD State6Offset;
bool (*State6)(void *ctx);
DWORD State7Offset;
bool (*State7)(void *ctx);
DWORD State8Offset;
bool (*State8)(void *ctx);
DWORD State9Offset;
bool (*State9)(void *ctx);
DWORD State10Offset;
bool (*State10)(void *ctx);
DWORD State11Offset;
bool (*State11)(void *ctx);
DWORD State12Offset;
bool (*State12)(void *ctx);
DWORD State13Offset;
bool (*State13)(void *ctx);
DWORD State14Offset;
bool (*State14)(void *ctx);
DWORD State15Offset;
bool (*State15)(void *ctx);
DWORD State16Offset;
bool (*State16)(void *ctx);
DWORD State17Offset;
bool (*State17)(void *ctx);
DWORD State18Offset;
bool (*State18)(void *ctx);
DWORD State19Offset;
bool (*State19)(void *ctx);
DWORD State20Offset;
bool (*State20)(void *ctx);
DWORD State21Offset;
bool (*State21)(void *ctx);
DWORD State22Offset;
bool (*State22)(void *ctx);
DWORD State23Offset;
bool (*State23)(void *ctx);
DWORD State24Offset;
bool (*State24)(void *ctx);
DWORD State25Offset;
bool (*State25)(void *ctx);
DWORD State26Offset;
bool (*State26)(void *ctx);
DWORD State27Offset;
bool (*State27)(void *ctx);
DWORD State28Offset;
bool (*State28)(void *ctx);
DWORD GetCharOffset;
bool (*GetChar)(void *_instance);
DWORD NextCharOffset;
int (*NextChar)(void *_instance);
DWORD NextTokenOffset;
bool (*NextToken)(void *_instance);
DWORD UngetCharOffset;
void (*UngetChar)(void *_instance);
}Lexer;
}
namespace LostPolygonSwiftShadows{
struct ColliderToRendererBoundsCache {
DWORD ClearOffset;
void (*Clear)(void *_instance);
}ColliderToRendererBoundsCache;
struct ShadowManager {
DWORD get_IsDestroyedOffset;
bool (*get_IsDestroyed)();
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD get_ShadowManagersOffset;
DWORD get_ColliderToRendererBoundsCacheOffset;
void *(*get_ColliderToRendererBoundsCache)(void *_instance);
DWORD UpdateCameraEventsOffset;
void (*UpdateCameraEvents)(void *_instance);
DWORD UpdateCameraEvents1Offset;
void (*UpdateCameraEvents1)(void *_instance, void *camera);
DWORD UpdateCameraEvents2Offset;
void (*UpdateCameraEvents2)(void *_instance, void *camera, int hideFlags);
DWORD OnCameraPreCullOffset;
void (*OnCameraPreCull)(void *_instance, void *camera);
DWORD UpdateStaticShadowsOffset;
void (*UpdateStaticShadows)(void *_instance);
DWORD RegisterShadowOffset;
void (*RegisterShadow)(void *_instance, void *shadow);
DWORD UnregisterShadowOffset;
void (*UnregisterShadow)(void *_instance, void *shadow);
DWORD ClearOffset;
void (*Clear)(void *_instance);
DWORD Clear1Offset;
void (*Clear1)(void *_instance, bool isClearManagers);
DWORD Clear2Offset;
void (*Clear2)(void *_instance, bool isClearManagers, bool isClearCameras);
DWORD InitializeOffset;
void (*Initialize)(void *_instance);
DWORD RenderOffset;
void (*Render)(void *_instance, void *camera);
DWORD UpdateAndDrawMeshManagerOffset;
void (*UpdateAndDrawMeshManager)(void *_instance, void *meshManager, void *camera, int cameraCullingMask);
DWORD GetMeshManagerOffset;
void *(*GetMeshManager)(void *_instance, void *shadow);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD SceneManagerOnSceneLoadedOffset;
void (*SceneManagerOnSceneLoaded)(void *_instance, int scene, int loadSceneMode);
DWORD SceneLoadedHandlerOffset;
void (*SceneLoadedHandler)(void *_instance, int buildIndex);
}ShadowManager;
struct ShadowMeshManager {
DWORD get_ShadowsCountOffset;
int (*get_ShadowsCount)(void *_instance);
DWORD get_VisibleShadowsCountOffset;
int (*get_VisibleShadowsCount)(void *_instance);
DWORD get_ShadowsListOffset;
DWORD get_IsStaticOffset;
bool (*get_IsStatic)(void *_instance);
DWORD get_MaterialOffset;
void *(*get_Material)(void *_instance);
DWORD get_LayerOffset;
int (*get_Layer)(void *_instance);
DWORD get_LayerMaskOffset;
int (*get_LayerMask)(void *_instance);
DWORD get_MeshOffset;
void *(*get_Mesh)(void *_instance);
DWORD FreeMeshOffset;
void (*FreeMesh)(void *_instance);
DWORD GetInstanceHashCodeOffset;
int (*GetInstanceHashCode)(void *_instance);
DWORD RegisterShadowOffset;
void (*RegisterShadow)(void *_instance, void *shadow);
DWORD UnregisterShadowOffset;
bool (*UnregisterShadow)(void *_instance, void *shadow);
DWORD ForceStaticRecalculateOffset;
void (*ForceStaticRecalculate)(void *_instance);
DWORD DrawMeshOffset;
void (*DrawMesh)(void *_instance, void *camera);
DWORD CreateMeshOffset;
void (*CreateMesh)(void *_instance);
DWORD RebuildMeshOffset;
void (*RebuildMesh)(void *_instance, bool forceRebuildTriangles);
DWORD CalculateMeshManagerHashCodeOffset;
int (*CalculateMeshManagerHashCode)(bool isStatic, void *material, int layer);
DWORD DisposeOffset;
void (*Dispose)(void *_instance);
}ShadowMeshManager;
struct NoShadowsCamera {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
}NoShadowsCamera;
struct ShadowsCameraEvents {
DWORD get_IsUserCreatedOffset;
bool (*get_IsUserCreated)(void *_instance);
DWORD set_IsUserCreatedOffset;
void (*set_IsUserCreated)(void *_instance, bool value);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnPreCullOffset;
void (*OnPreCull)(void *_instance);
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD RemoveOtherInstancesOffset;
void (*RemoveOtherInstances)(void *_instance);
}ShadowsCameraEvents;
struct SwiftShadow {
DWORD get_IsVisibleOffset;
bool (*get_IsVisible)(void *_instance);
DWORD get_NormalOffset;
Vector3 (*get_Normal)(void *_instance);
DWORD get_CurrentColorOffset;
int(*get_CurrentColor)(void *_instance);
DWORD get_InitialColorOffset;
int(*get_InitialColor)(void *_instance);
DWORD set_InitialColorOffset;
void (*set_InitialColor)(void *_instance, int value);
DWORD get_TextureUVOffset;
DWORD get_TextureUVRectOffset;
int(*get_TextureUVRect)(void *_instance);
DWORD set_TextureUVRectOffset;
void (*set_TextureUVRect)(void *_instance, int value);
DWORD get_SpriteOffset;
void *(*get_Sprite)(void *_instance);
DWORD set_SpriteOffset;
void (*set_Sprite)(void *_instance, void *value);
DWORD get_MaterialOffset;
void *(*get_Material)(void *_instance);
DWORD set_MaterialOffset;
void (*set_Material)(void *_instance, void *value);
DWORD get_LayerMaskOffset;
int(*get_LayerMask)(void *_instance);
DWORD set_LayerMaskOffset;
void (*set_LayerMask)(void *_instance, int value);
DWORD get_IsStaticOffset;
bool (*get_IsStatic)(void *_instance);
DWORD set_IsStaticOffset;
void (*set_IsStatic)(void *_instance, bool value);
DWORD get_LightVectorSourceOffset;
int(*get_LightVectorSource)(void *_instance);
DWORD set_LightVectorSourceOffset;
void (*set_LightVectorSource)(void *_instance, int value);
DWORD get_LightVectorOffset;
Vector3 (*get_LightVector)(void *_instance);
DWORD set_LightVectorOffset;
void (*set_LightVector)(void *_instance, Vector3 value);
DWORD get_LightSourceObjectOffset;
void *(*get_LightSourceObject)(void *_instance);
DWORD set_LightSourceObjectOffset;
void (*set_LightSourceObject)(void *_instance, void *value);
DWORD get_ShadowSizeOffset;
float (*get_ShadowSize)(void *_instance);
DWORD set_ShadowSizeOffset;
void (*set_ShadowSize)(void *_instance, float value);
DWORD get_SizeScaleStartDistanceOffset;
float (*get_SizeScaleStartDistance)(void *_instance);
DWORD set_SizeScaleStartDistanceOffset;
void (*set_SizeScaleStartDistance)(void *_instance, float value);
DWORD get_SizeScaleEndDistanceOffset;
float (*get_SizeScaleEndDistance)(void *_instance);
DWORD set_SizeScaleEndDistanceOffset;
void (*set_SizeScaleEndDistance)(void *_instance, float value);
DWORD get_SizeEndScaleOffset;
float (*get_SizeEndScale)(void *_instance);
DWORD set_SizeEndScaleOffset;
void (*set_SizeEndScale)(void *_instance, float value);
DWORD get_ShadowOffsetOffset;
float (*get_ShadowOffset)(void *_instance);
DWORD set_ShadowOffsetOffset;
void (*set_ShadowOffset)(void *_instance, float value);
DWORD get_ProjectionDistanceOffset;
float (*get_ProjectionDistance)(void *_instance);
DWORD set_ProjectionDistanceOffset;
void (*set_ProjectionDistance)(void *_instance, float value);
DWORD get_FadeDistanceOffset;
float (*get_FadeDistance)(void *_instance);
DWORD set_FadeDistanceOffset;
void (*set_FadeDistance)(void *_instance, float value);
DWORD get_IsPerspectiveProjectionOffset;
bool (*get_IsPerspectiveProjection)(void *_instance);
DWORD set_IsPerspectiveProjectionOffset;
void (*set_IsPerspectiveProjection)(void *_instance, bool value);
DWORD get_AutoStaticTimeOffset;
float (*get_AutoStaticTime)(void *_instance);
DWORD set_AutoStaticTimeOffset;
void (*set_AutoStaticTime)(void *_instance, float value);
DWORD get_AngleFadeMinOffset;
float (*get_AngleFadeMin)(void *_instance);
DWORD set_AngleFadeMinOffset;
void (*set_AngleFadeMin)(void *_instance, float value);
DWORD get_AngleFadeMaxOffset;
float (*get_AngleFadeMax)(void *_instance);
DWORD set_AngleFadeMaxOffset;
void (*set_AngleFadeMax)(void *_instance, float value);
DWORD get_AspectRatioOffset;
float (*get_AspectRatio)(void *_instance);
DWORD set_AspectRatioOffset;
void (*set_AspectRatio)(void *_instance, float value);
DWORD get_ShadowVerticesOffset;
DWORD get_CullInvisibleOffset;
bool (*get_CullInvisible)(void *_instance);
DWORD set_CullInvisibleOffset;
void (*set_CullInvisible)(void *_instance, bool value);
DWORD get_LayerOffset;
int (*get_Layer)(void *_instance);
DWORD get_UseForceLayerOffset;
bool (*get_UseForceLayer)(void *_instance);
DWORD set_UseForceLayerOffset;
void (*set_UseForceLayer)(void *_instance, bool value);
DWORD get_ForceLayerOffset;
int (*get_ForceLayer)(void *_instance);
DWORD set_ForceLayerOffset;
void (*set_ForceLayer)(void *_instance, int value);
DWORD get_IsSmoothRotationOffset;
bool (*get_IsSmoothRotation)(void *_instance);
DWORD set_IsSmoothRotationOffset;
void (*set_IsSmoothRotation)(void *_instance, bool value);
DWORD get_SmoothRotationSpeedOffset;
float (*get_SmoothRotationSpeed)(void *_instance);
DWORD set_SmoothRotationSpeedOffset;
void (*set_SmoothRotationSpeed)(void *_instance, float value);
DWORD RegisterShadowOffset;
void (*RegisterShadow)(void *_instance);
DWORD UnregisterShadowOffset;
void (*UnregisterShadow)(void *_instance);
DWORD GetMeshManagerHashCodeOffset;
int (*GetMeshManagerHashCode)(void *_instance);
DWORD UpdateDirectionalLightOffset;
void (*UpdateDirectionalLight)(void *_instance);
DWORD UpdatePropertiesOffset;
void (*UpdateProperties)(void *_instance);
DWORD UpdateTextureUVOffset;
void (*UpdateTextureUV)(void *_instance);
DWORD InitializeOffset;
void (*Initialize)(void *_instance);
DWORD UpdateComponentsOffset;
void (*UpdateComponents)(void *_instance);
DWORD SetTextureUVOffset;
void (*SetTextureUV)(void *_instance, int uvRect);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD OnDrawGizmosSelectedOffset;
void (*OnDrawGizmosSelected)(void *_instance);
}SwiftShadow;
}
namespace LostPolygonSwiftShadowsInternal{
struct FastMath {
DWORD FastSqrtOffset;
float (*FastSqrt)(float x);
DWORD FastInvMagnitudeOffset;
float (*FastInvMagnitude)(Vector3 vector);
DWORD FastMagnitudeOffset;
float (*FastMagnitude)(Vector3 vector);
DWORD FastNormalizedOffset;
Vector3 (*FastNormalized)(Vector3 vector);
DWORD FastPseudoAcosOffset;
float (*FastPseudoAcos)(float x);
}FastMath;
}
namespace OldMoatGames{
struct GifDecoder {
DWORD get_NumberOfFramesOffset;
int (*get_NumberOfFrames)(void *_instance);
DWORD set_NumberOfFramesOffset;
void (*set_NumberOfFrames)(void *_instance, int value);
DWORD get_AllFramesReadOffset;
bool (*get_AllFramesRead)(void *_instance);
DWORD set_AllFramesReadOffset;
void (*set_AllFramesRead)(void *_instance, bool value);
DWORD GetDelayCurrentFrameOffset;
float (*GetDelayCurrentFrame)(void *_instance);
DWORD GetFrameCountOffset;
int (*GetFrameCount)(void *_instance);
DWORD GetLoopCountOffset;
int (*GetLoopCount)(void *_instance);
DWORD GetCurrentFrameOffset;
void *(*GetCurrentFrame)(void *_instance);
DWORD GetFrameWidthOffset;
int (*GetFrameWidth)(void *_instance);
DWORD GetFrameHeightOffset;
int (*GetFrameHeight)(void *_instance);
DWORD ReadOffset;
int(*Read)(void *_instance, void *inStream);
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD CloseOffset;
void (*Close)(void *_instance);
DWORD ErrorOffset;
bool (*Error)(void *_instance);
DWORD ReadNextFrameOffset;
void (*ReadNextFrame)(void *_instance, bool loop);
DWORD RewindReaderOffset;
void (*RewindReader)(void *_instance);
DWORD SetPixelsOffset;
void (*SetPixels)(void *_instance);
DWORD DecodeImageDataOffset;
void (*DecodeImageData)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD Read1Offset;
int (*Read1)(void *_instance);
DWORD ReadBlockOffset;
int (*ReadBlock)(void *_instance);
DWORD ReadColorTableOffset;
DWORD ReadGraphicControlExtOffset;
void (*ReadGraphicControlExt)(void *_instance);
DWORD ReadHeaderOffset;
void (*ReadHeader)(void *_instance);
DWORD ReadImageOffset;
void (*ReadImage)(void *_instance);
DWORD ReadLsdOffset;
void (*ReadLsd)(void *_instance);
DWORD ReadNetscapeExtOffset;
void (*ReadNetscapeExt)(void *_instance);
DWORD ReadShortOffset;
int (*ReadShort)(void *_instance);
DWORD ResetFrameOffset;
void (*ResetFrame)(void *_instance);
DWORD SkipOffset;
void (*Skip)(void *_instance);
}GifDecoder;
struct AnimatedGifPlayer {
DWORD get_WidthOffset;
int (*get_Width)(void *_instance);
DWORD get_HeightOffset;
int (*get_Height)(void *_instance);
DWORD get_TargetComponentOffset;
void *(*get_TargetComponent)(void *_instance);
DWORD set_TargetComponentOffset;
void (*set_TargetComponent)(void *_instance, void *value);
DWORD get_TargetMaterialNumberOffset;
int (*get_TargetMaterialNumber)(void *_instance);
DWORD set_TargetMaterialNumberOffset;
void (*set_TargetMaterialNumber)(void *_instance, int value);
DWORD get_StateOffset;
int(*get_State)(void *_instance);
DWORD set_StateOffset;
void (*set_State)(void *_instance, int value);
DWORD add_OnReadyOffset;
void (*add_OnReady)(void *_instance, void *value);
DWORD remove_OnReadyOffset;
void (*remove_OnReady)(void *_instance, void *value);
DWORD add_OnLoadErrorOffset;
void (*add_OnLoadError)(void *_instance, void *value);
DWORD remove_OnLoadErrorOffset;
void (*remove_OnLoadError)(void *_instance, void *value);
DWORD get_CurrentFrameOffset;
void *(*get_CurrentFrame)(void *_instance);
DWORD set_CurrentFrameOffset;
void (*set_CurrentFrame)(void *_instance, void *value);
DWORD get_CurrentFrameNumberOffset;
int (*get_CurrentFrameNumber)(void *_instance);
DWORD set_CurrentFrameNumberOffset;
void (*set_CurrentFrameNumber)(void *_instance, int value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnApplicationQuitOffset;
void (*OnApplicationQuit)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD PlayOffset;
void (*Play)(void *_instance);
DWORD PauseOffset;
void (*Pause)(void *_instance);
DWORD GetNumberOfFramesOffset;
int (*GetNumberOfFrames)(void *_instance);
DWORD LoadOffset;
void *(*Load)(void *_instance);
DWORD CreateTargetTextureOffset;
void (*CreateTargetTexture)(void *_instance);
DWORD SetTextureOffset;
void (*SetTexture)(void *_instance);
DWORD GetTargetComponentOffset;
void *(*GetTargetComponent)(void *_instance);
DWORD SetTargetTextureOffset;
void (*SetTargetTexture)(void *_instance);
DWORD CreateTextureOffset;
void *(*CreateTexture)(int width, int height);
DWORD BufferFramesOffset;
void (*BufferFrames)(void *_instance);
DWORD AddFrameToCacheOffset;
void (*AddFrameToCache)(void *_instance, void *frame);
DWORD StartDecoderOffset;
void (*StartDecoder)(void *_instance);
DWORD SetNextFrameTimeOffset;
void (*SetNextFrameTime)(void *_instance);
DWORD UpdateFrameTimeOffset;
void (*UpdateFrameTime)(void *_instance);
DWORD UpdateFrameOffset;
void (*UpdateFrame)(void *_instance);
DWORD CheckFrameChangeOffset;
void (*CheckFrameChange)(void *_instance);
DWORD UpdateTextureOffset;
void (*UpdateTexture)(void *_instance);
DWORD StartReadFrameOffset;
void (*StartReadFrame)(void *_instance);
DWORD StartDecodeThreadOffset;
void (*StartDecodeThread)(void *_instance);
DWORD EndDecodeThreadOffset;
void (*EndDecodeThread)(void *_instance);
DWORD FrameDataThreadOffset;
void (*FrameDataThread)(void *_instance);
}AnimatedGifPlayer;
}
namespace Photon{
struct MonoBehaviour {
DWORD get_photonViewOffset;
void *(*get_photonView)(void *_instance);
}MonoBehaviour;
struct PunBehaviour {
DWORD OnConnectedToPhotonOffset;
void (*OnConnectedToPhoton)(void *_instance);
DWORD OnLeftRoomOffset;
void (*OnLeftRoom)(void *_instance);
DWORD OnMasterClientSwitchedOffset;
void (*OnMasterClientSwitched)(void *_instance, void *newMasterClient);
DWORD OnCreatedRoomOffset;
void (*OnCreatedRoom)(void *_instance);
DWORD OnJoinedLobbyOffset;
void (*OnJoinedLobby)(void *_instance);
DWORD OnLeftLobbyOffset;
void (*OnLeftLobby)(void *_instance);
DWORD OnFailedToConnectToPhotonOffset;
void (*OnFailedToConnectToPhoton)(void *_instance, int cause);
DWORD OnDisconnectedFromPhotonOffset;
void (*OnDisconnectedFromPhoton)(void *_instance);
DWORD OnConnectionFailOffset;
void (*OnConnectionFail)(void *_instance, int cause);
DWORD OnPhotonInstantiateOffset;
void (*OnPhotonInstantiate)(void *_instance, int info);
DWORD OnReceivedRoomListUpdateOffset;
void (*OnReceivedRoomListUpdate)(void *_instance);
DWORD OnJoinedRoomOffset;
void (*OnJoinedRoom)(void *_instance);
DWORD OnPhotonPlayerConnectedOffset;
void (*OnPhotonPlayerConnected)(void *_instance, void *newPlayer);
DWORD OnPhotonPlayerDisconnectedOffset;
void (*OnPhotonPlayerDisconnected)(void *_instance, void *otherPlayer);
DWORD OnConnectedToMasterOffset;
void (*OnConnectedToMaster)(void *_instance);
DWORD OnPhotonMaxCccuReachedOffset;
void (*OnPhotonMaxCccuReached)(void *_instance);
DWORD OnPhotonCustomRoomPropertiesChangedOffset;
void (*OnPhotonCustomRoomPropertiesChanged)(void *_instance, void *propertiesThatChanged);
DWORD OnUpdatedFriendListOffset;
void (*OnUpdatedFriendList)(void *_instance);
DWORD OnCustomAuthenticationFailedOffset;
void (*OnCustomAuthenticationFailed)(void *_instance, monoString *debugMessage);
DWORD OnWebRpcResponseOffset;
void (*OnWebRpcResponse)(void *_instance, void *response);
DWORD OnLobbyStatisticsUpdateOffset;
void (*OnLobbyStatisticsUpdate)(void *_instance);
DWORD OnPhotonPlayerActivityChangedOffset;
void (*OnPhotonPlayerActivityChanged)(void *_instance, void *otherPlayer);
}PunBehaviour;
}
namespace PhotonChat{
struct ChannelCreationOptions {
DWORD get_PublishSubscribersOffset;
bool (*get_PublishSubscribers)(void *_instance);
DWORD set_PublishSubscribersOffset;
void (*set_PublishSubscribers)(void *_instance, bool value);
DWORD get_MaxSubscribersOffset;
int (*get_MaxSubscribers)(void *_instance);
DWORD set_MaxSubscribersOffset;
void (*set_MaxSubscribers)(void *_instance, int value);
}ChannelCreationOptions;
struct ChannelWellKnownProperties {
}ChannelWellKnownProperties;
struct ChatChannel {
DWORD get_IsPrivateOffset;
bool (*get_IsPrivate)(void *_instance);
DWORD set_IsPrivateOffset;
void (*set_IsPrivate)(void *_instance, bool value);
DWORD get_MessageCountOffset;
int (*get_MessageCount)(void *_instance);
DWORD get_LastMsgIdOffset;
int (*get_LastMsgId)(void *_instance);
DWORD set_LastMsgIdOffset;
void (*set_LastMsgId)(void *_instance, int value);
DWORD get_PublishSubscribersOffset;
bool (*get_PublishSubscribers)(void *_instance);
DWORD set_PublishSubscribersOffset;
void (*set_PublishSubscribers)(void *_instance, bool value);
DWORD get_MaxSubscribersOffset;
int (*get_MaxSubscribers)(void *_instance);
DWORD set_MaxSubscribersOffset;
void (*set_MaxSubscribers)(void *_instance, int value);
DWORD TruncateMessagesOffset;
void (*TruncateMessages)(void *_instance);
DWORD ClearMessagesOffset;
void (*ClearMessages)(void *_instance);
DWORD ToStringMessagesOffset;
monoString *(*ToStringMessages)(void *_instance);
DWORD ClearPropertiesOffset;
void (*ClearProperties)(void *_instance);
}ChatChannel;
struct ChatClient {
DWORD get_NameServerAddressOffset;
monoString *(*get_NameServerAddress)(void *_instance);
DWORD set_NameServerAddressOffset;
void (*set_NameServerAddress)(void *_instance, monoString *value);
DWORD get_FrontendAddressOffset;
monoString *(*get_FrontendAddress)(void *_instance);
DWORD set_FrontendAddressOffset;
void (*set_FrontendAddress)(void *_instance, monoString *value);
DWORD get_ChatRegionOffset;
monoString *(*get_ChatRegion)(void *_instance);
DWORD set_ChatRegionOffset;
void (*set_ChatRegion)(void *_instance, monoString *value);
DWORD get_StateOffset;
int(*get_State)(void *_instance);
DWORD set_StateOffset;
void (*set_State)(void *_instance, int value);
DWORD get_DisconnectedCauseOffset;
int(*get_DisconnectedCause)(void *_instance);
DWORD set_DisconnectedCauseOffset;
void (*set_DisconnectedCause)(void *_instance, int value);
DWORD get_CanChatOffset;
bool (*get_CanChat)(void *_instance);
DWORD CanChatInChannelOffset;
bool (*CanChatInChannel)(void *_instance, monoString *channelName);
DWORD get_HasPeerOffset;
bool (*get_HasPeer)(void *_instance);
DWORD get_AppVersionOffset;
monoString *(*get_AppVersion)(void *_instance);
DWORD set_AppVersionOffset;
void (*set_AppVersion)(void *_instance, monoString *value);
DWORD get_AppIdOffset;
monoString *(*get_AppId)(void *_instance);
DWORD set_AppIdOffset;
void (*set_AppId)(void *_instance, monoString *value);
DWORD get_AuthValuesOffset;
void *(*get_AuthValues)(void *_instance);
DWORD set_AuthValuesOffset;
void (*set_AuthValues)(void *_instance, void *value);
DWORD get_UserIdOffset;
monoString *(*get_UserId)(void *_instance);
DWORD set_UserIdOffset;
void (*set_UserId)(void *_instance, monoString *value);
DWORD get_UseBackgroundWorkerForSendingOffset;
bool (*get_UseBackgroundWorkerForSending)(void *_instance);
DWORD set_UseBackgroundWorkerForSendingOffset;
void (*set_UseBackgroundWorkerForSending)(void *_instance, bool value);
DWORD get_TransportProtocolOffset;
int(*get_TransportProtocol)(void *_instance);
DWORD set_TransportProtocolOffset;
void (*set_TransportProtocol)(void *_instance, int value);
DWORD get_SocketImplementationConfigOffset;
DWORD ConnectOffset;
bool (*Connect)(void *_instance, monoString *appId, monoString *appVersion, void *authValues);
DWORD ServiceOffset;
void (*Service)(void *_instance);
DWORD SendOutgoingInBackgroundOffset;
bool (*SendOutgoingInBackground)(void *_instance);
DWORD SendAcksOnlyOffset;
void (*SendAcksOnly)(void *_instance);
DWORD DisconnectOffset;
void (*Disconnect)(void *_instance);
DWORD StopThreadOffset;
void (*StopThread)(void *_instance);
DWORD SetOnlineStatus1Offset;
bool (*SetOnlineStatus1)(void *_instance, int status);
DWORD GetPrivateChannelNameByUserOffset;
monoString *(*GetPrivateChannelNameByUser)(void *_instance, monoString *userName);
DWORD set_DebugOutOffset;
void (*set_DebugOut)(void *_instance, int value);
DWORD get_DebugOutOffset;
int(*get_DebugOut)(void *_instance);
DWORD ExitGamesClientPhotonIPhotonPeerListenerDebugReturnOffset;
void (*ExitGamesClientPhotonIPhotonPeerListenerDebugReturn)(void *_instance, int level, monoString *message);
DWORD ExitGamesClientPhotonIPhotonPeerListenerOnEventOffset;
void (*ExitGamesClientPhotonIPhotonPeerListenerOnEvent)(void *_instance, void *eventData);
DWORD ExitGamesClientPhotonIPhotonPeerListenerOnOperationResponseOffset;
void (*ExitGamesClientPhotonIPhotonPeerListenerOnOperationResponse)(void *_instance, void *operationResponse);
DWORD ExitGamesClientPhotonIPhotonPeerListenerOnStatusChangedOffset;
void (*ExitGamesClientPhotonIPhotonPeerListenerOnStatusChanged)(void *_instance, int statusCode);
DWORD HandlePrivateMessageEventOffset;
void (*HandlePrivateMessageEvent)(void *_instance, void *eventData);
DWORD HandleChatMessagesEventOffset;
void (*HandleChatMessagesEvent)(void *_instance, void *eventData);
DWORD HandleSubscribeEventOffset;
void (*HandleSubscribeEvent)(void *_instance, void *eventData);
DWORD HandleUnsubscribeEventOffset;
void (*HandleUnsubscribeEvent)(void *_instance, void *eventData);
DWORD HandleAuthResponseOffset;
void (*HandleAuthResponse)(void *_instance, void *operationResponse);
DWORD HandleStatusUpdateOffset;
void (*HandleStatusUpdate)(void *_instance, void *eventData);
DWORD ConnectToFrontEndOffset;
void (*ConnectToFrontEnd)(void *_instance);
DWORD AuthenticateOnFrontEndOffset;
bool (*AuthenticateOnFrontEnd)(void *_instance);
DWORD HandleUserUnsubscribedEventOffset;
void (*HandleUserUnsubscribedEvent)(void *_instance, void *eventData);
DWORD HandleUserSubscribedEventOffset;
void (*HandleUserSubscribedEvent)(void *_instance, void *eventData);
DWORD Subscribe11Offset;
bool (*Subscribe11)(void *_instance, monoString *channel, int lastMsgId, int messagesFromHistory, void *creationOptions);
}ChatClient;
struct ChatEventCode {
}ChatEventCode;
struct ChatOperationCode {
}ChatOperationCode;
struct ChatParameterCode {
}ChatParameterCode;
struct ChatPeer {
DWORD get_NameServerAddressOffset;
monoString *(*get_NameServerAddress)(void *_instance);
DWORD get_IsProtocolSecureOffset;
bool (*get_IsProtocolSecure)(void *_instance);
DWORD ConfigUnitySocketsOffset;
void (*ConfigUnitySockets)(void *_instance);
DWORD GetNameServerAddressOffset;
monoString *(*GetNameServerAddress)(void *_instance);
DWORD ConnectOffset;
bool (*Connect)(void *_instance);
DWORD AuthenticateOnNameServerOffset;
bool (*AuthenticateOnNameServer)(void *_instance, monoString *appId, monoString *appVersion, monoString *region, void *authValues);
}ChatPeer;
struct AuthenticationValues {
DWORD get_AuthTypeOffset;
int(*get_AuthType)(void *_instance);
DWORD set_AuthTypeOffset;
void (*set_AuthType)(void *_instance, int value);
DWORD get_AuthGetParametersOffset;
monoString *(*get_AuthGetParameters)(void *_instance);
DWORD set_AuthGetParametersOffset;
void (*set_AuthGetParameters)(void *_instance, monoString *value);
DWORD get_AuthPostDataOffset;
DWORD get_TokenOffset;
monoString *(*get_Token)(void *_instance);
DWORD set_TokenOffset;
void (*set_Token)(void *_instance, monoString *value);
DWORD get_UserIdOffset;
monoString *(*get_UserId)(void *_instance);
DWORD set_UserIdOffset;
void (*set_UserId)(void *_instance, monoString *value);
DWORD ctor1Offset;
void (*ctor1)(void *_instance, monoString *userId);
DWORD SetAuthPostDataOffset;
void (*SetAuthPostData)(void *_instance, monoString *stringData);
DWORD AddAuthParameterOffset;
void (*AddAuthParameter)(void *_instance, monoString *key, monoString *value);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}AuthenticationValues;
struct ParameterCode {
}ParameterCode;
struct ErrorCode {
}ErrorCode;
struct IChatClientListener {
}IChatClientListener;
}
namespace PhotonRealtime{
struct PhotonPing {
DWORD StartPingOffset;
bool (*StartPing)(void *_instance, monoString *ip);
DWORD DoneOffset;
bool (*Done)(void *_instance);
DWORD DisposeOffset;
void (*Dispose)(void *_instance);
DWORD InitOffset;
void (*Init)(void *_instance);
}PhotonPing;
struct PingMono {
DWORD StartPingOffset;
bool (*StartPing)(void *_instance, monoString *ip);
DWORD DoneOffset;
bool (*Done)(void *_instance);
DWORD DisposeOffset;
void (*Dispose)(void *_instance);
}PingMono;
}
namespace RWDTools{
struct ExtensionMethods {
DWORD ToAngleDegOffset;
float (*ToAngleDeg)(Vector2 vector);
DWORD DegToVectorOffset;
Vector2 (*DegToVector)(float angle);
DWORD isPowerOfTwoOffset;
bool (*isPowerOfTwo)(int x);
}ExtensionMethods;
}
namespace RoboRyanTronUnite2017Events{
struct GameEvent {
DWORD RaiseOffset;
void (*Raise)(void *_instance);
DWORD RegisterListenerOffset;
void (*RegisterListener)(void *_instance, void *listener);
DWORD UnregisterListenerOffset;
void (*UnregisterListener)(void *_instance, void *listener);
}GameEvent;
struct GameEventListener {
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnEventRaisedOffset;
void (*OnEventRaised)(void *_instance);
}GameEventListener;
}
namespace SimpleJSON{
struct JSONNode {
DWORD AddOffset;
void (*Add)(void *_instance, monoString *aKey, void *aItem);
DWORD get_ItemOffset;
void *(*get_Item)(void *_instance, int aIndex);
DWORD set_ItemOffset;
void (*set_Item)(void *_instance, int aIndex, void *value);
DWORD get_Item1Offset;
void *(*get_Item1)(void *_instance, monoString *aKey);
DWORD set_Item1Offset;
void (*set_Item1)(void *_instance, monoString *aKey, void *value);
DWORD get_ValueOffset;
monoString *(*get_Value)(void *_instance);
DWORD set_ValueOffset;
void (*set_Value)(void *_instance, monoString *value);
DWORD get_CountOffset;
int (*get_Count)(void *_instance);
DWORD Add1Offset;
void (*Add1)(void *_instance, void *aItem);
DWORD RemoveOffset;
void *(*Remove)(void *_instance, monoString *aKey);
DWORD Remove1Offset;
void *(*Remove1)(void *_instance, int aIndex);
DWORD Remove2Offset;
void *(*Remove2)(void *_instance, void *aNode);
DWORD get_ChildsOffset;
DWORD get_DeepChildsOffset;
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *aPrefix);
DWORD get_AsIntOffset;
int (*get_AsInt)(void *_instance);
DWORD set_AsIntOffset;
void (*set_AsInt)(void *_instance, int value);
DWORD get_AsFloatOffset;
float (*get_AsFloat)(void *_instance);
DWORD set_AsFloatOffset;
void (*set_AsFloat)(void *_instance, float value);
DWORD get_AsDoubleOffset;
DWORD get_AsBoolOffset;
bool (*get_AsBool)(void *_instance);
DWORD set_AsBoolOffset;
void (*set_AsBool)(void *_instance, bool value);
DWORD get_AsArrayOffset;
void *(*get_AsArray)(void *_instance);
DWORD get_AsObjectOffset;
void *(*get_AsObject)(void *_instance);
DWORD op_ImplicitOffset;
void *(*op_Implicit)(monoString *s);
DWORD op_Implicit1Offset;
monoString *(*op_Implicit1)(void *d);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD EscapeOffset;
monoString *(*Escape)(monoString *aText);
DWORD ParseOffset;
void *(*Parse)(monoString *aJSON);
DWORD SerializeOffset;
void (*Serialize)(void *_instance, void *aWriter);
DWORD SaveToStreamOffset;
void (*SaveToStream)(void *_instance, void *aData);
DWORD SaveToCompressedStreamOffset;
void (*SaveToCompressedStream)(void *_instance, void *aData);
DWORD SaveToCompressedFileOffset;
void (*SaveToCompressedFile)(void *_instance, monoString *aFileName);
DWORD SaveToCompressedBase64Offset;
monoString *(*SaveToCompressedBase64)(void *_instance);
DWORD SaveToFileOffset;
void (*SaveToFile)(void *_instance, monoString *aFileName);
DWORD SaveToBase64Offset;
monoString *(*SaveToBase64)(void *_instance);
DWORD DeserializeOffset;
void *(*Deserialize)(void *aReader);
DWORD LoadFromCompressedFileOffset;
void *(*LoadFromCompressedFile)(monoString *aFileName);
DWORD LoadFromCompressedStreamOffset;
void *(*LoadFromCompressedStream)(void *aData);
DWORD LoadFromCompressedBase64Offset;
void *(*LoadFromCompressedBase64)(monoString *aBase64);
DWORD LoadFromStreamOffset;
void *(*LoadFromStream)(void *aData);
DWORD LoadFromFileOffset;
void *(*LoadFromFile)(monoString *aFileName);
DWORD LoadFromBase64Offset;
void *(*LoadFromBase64)(monoString *aBase64);
}JSONNode;
struct JSONArray {
DWORD get_ItemOffset;
void *(*get_Item)(void *_instance, int aIndex);
DWORD set_ItemOffset;
void (*set_Item)(void *_instance, int aIndex, void *value);
DWORD get_Item1Offset;
void *(*get_Item1)(void *_instance, monoString *aKey);
DWORD set_Item1Offset;
void (*set_Item1)(void *_instance, monoString *aKey, void *value);
DWORD get_CountOffset;
int (*get_Count)(void *_instance);
DWORD AddOffset;
void (*Add)(void *_instance, monoString *aKey, void *aItem);
DWORD RemoveOffset;
void *(*Remove)(void *_instance, int aIndex);
DWORD Remove1Offset;
void *(*Remove1)(void *_instance, void *aNode);
DWORD get_ChildsOffset;
DWORD GetEnumeratorOffset;
void *(*GetEnumerator)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *aPrefix);
DWORD SerializeOffset;
void (*Serialize)(void *_instance, void *aWriter);
}JSONArray;
struct JSONClass {
DWORD get_ItemOffset;
void *(*get_Item)(void *_instance, monoString *aKey);
DWORD set_ItemOffset;
void (*set_Item)(void *_instance, monoString *aKey, void *value);
DWORD get_Item1Offset;
void *(*get_Item1)(void *_instance, int aIndex);
DWORD set_Item1Offset;
void (*set_Item1)(void *_instance, int aIndex, void *value);
DWORD get_CountOffset;
int (*get_Count)(void *_instance);
DWORD AddOffset;
void (*Add)(void *_instance, monoString *aKey, void *aItem);
DWORD RemoveOffset;
void *(*Remove)(void *_instance, monoString *aKey);
DWORD Remove1Offset;
void *(*Remove1)(void *_instance, int aIndex);
DWORD Remove2Offset;
void *(*Remove2)(void *_instance, void *aNode);
DWORD get_ChildsOffset;
DWORD GetEnumeratorOffset;
void *(*GetEnumerator)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *aPrefix);
DWORD SerializeOffset;
void (*Serialize)(void *_instance, void *aWriter);
}JSONClass;
struct JSONData {
DWORD get_ValueOffset;
monoString *(*get_Value)(void *_instance);
DWORD set_ValueOffset;
void (*set_Value)(void *_instance, monoString *value);
DWORD ctor1Offset;
void (*ctor1)(void *_instance, float aData);
DWORD ctor3Offset;
void (*ctor3)(void *_instance, bool aData);
DWORD ctor4Offset;
void (*ctor4)(void *_instance, int aData);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *aPrefix);
DWORD SerializeOffset;
void (*Serialize)(void *_instance, void *aWriter);
}JSONData;
struct JSONLazyCreator {
DWORD ctor1Offset;
void (*ctor1)(void *_instance, void *aNode, monoString *aKey);
DWORD SetOffset;
void (*Set)(void *_instance, void *aVal);
DWORD get_ItemOffset;
void *(*get_Item)(void *_instance, int aIndex);
DWORD set_ItemOffset;
void (*set_Item)(void *_instance, int aIndex, void *value);
DWORD get_Item1Offset;
void *(*get_Item1)(void *_instance, monoString *aKey);
DWORD set_Item1Offset;
void (*set_Item1)(void *_instance, monoString *aKey, void *value);
DWORD AddOffset;
void (*Add)(void *_instance, void *aItem);
DWORD Add1Offset;
void (*Add1)(void *_instance, monoString *aKey, void *aItem);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
DWORD ToString1Offset;
monoString *(*ToString1)(void *_instance, monoString *aPrefix);
DWORD get_AsIntOffset;
int (*get_AsInt)(void *_instance);
DWORD set_AsIntOffset;
void (*set_AsInt)(void *_instance, int value);
DWORD get_AsFloatOffset;
float (*get_AsFloat)(void *_instance);
DWORD set_AsFloatOffset;
void (*set_AsFloat)(void *_instance, float value);
DWORD get_AsDoubleOffset;
DWORD get_AsBoolOffset;
bool (*get_AsBool)(void *_instance);
DWORD set_AsBoolOffset;
void (*set_AsBool)(void *_instance, bool value);
DWORD get_AsArrayOffset;
void *(*get_AsArray)(void *_instance);
DWORD get_AsObjectOffset;
void *(*get_AsObject)(void *_instance);
}JSONLazyCreator;
struct JSON {
DWORD ParseOffset;
void *(*Parse)(monoString *aJSON);
}JSON;
}
namespace SimpleLightProbePlacer{
struct LightProbeGroupControl {
DWORD get_MergeDistanceOffset;
float (*get_MergeDistance)(void *_instance);
DWORD set_MergeDistanceOffset;
void (*set_MergeDistance)(void *_instance, float value);
DWORD get_MergedProbesOffset;
int (*get_MergedProbes)(void *_instance);
DWORD get_UsePointLightsOffset;
bool (*get_UsePointLights)(void *_instance);
DWORD set_UsePointLightsOffset;
void (*set_UsePointLights)(void *_instance, bool value);
DWORD get_PointLightRangeOffset;
float (*get_PointLightRange)(void *_instance);
DWORD set_PointLightRangeOffset;
void (*set_PointLightRange)(void *_instance, float value);
DWORD get_LightProbeGroupOffset;
void *(*get_LightProbeGroup)(void *_instance);
DWORD DeleteAllOffset;
void (*DeleteAll)(void *_instance);
DWORD CreateOffset;
void (*Create)(void *_instance);
DWORD MergeOffset;
void (*Merge)(void *_instance);
DWORD CreatePositionsOffset;
DWORD CreateAroundPointLightsOffset;
DWORD CreatePositionsAroundOffset;
DWORD Mergeb__20_0Offset;
Vector3 (*Mergeb__20_0)(void *_instance, Vector3 x);
}LightProbeGroupControl;
struct LightProbeVolume {
DWORD get_TypeOffset;
int(*get_Type)(void *_instance);
DWORD set_TypeOffset;
void (*set_Type)(void *_instance, int value);
DWORD get_DensityOffset;
Vector3 (*get_Density)(void *_instance);
DWORD set_DensityOffset;
void (*set_Density)(void *_instance, Vector3 value);
DWORD get_EditorColorOffset;
Color (*get_EditorColor)();
DWORD CreatePositionsOffset;
DWORD CreatePositions1Offset;
DWORD CreatePositionsFixedOffset;
DWORD CreatePositionsFloatOffset;
}LightProbeVolume;
struct TransformVolume {
DWORD get_VolumeOffset;
int(*get_Volume)(void *_instance);
DWORD set_VolumeOffset;
void (*set_Volume)(void *_instance, int value);
DWORD get_OriginOffset;
Vector3 (*get_Origin)(void *_instance);
DWORD get_SizeOffset;
Vector3 (*get_Size)(void *_instance);
DWORD IsInVolume1Offset;
bool (*IsInVolume1)(void *_instance, Vector3 position);
DWORD GetCornersOffset;
DWORD GetBoundsOffset;
int(*GetBounds)(void *_instance);
DWORD GetGameObjectsInBoundsOffset;
DWORD GetSideDirectionOffset;
Vector3 (*GetSideDirection)(void *_instance, int side);
DWORD GetSidePositionOffset;
Vector3 (*GetSidePosition)(void *_instance, int side);
DWORD GetSizeAxisOffset;
float (*GetSizeAxis)(void *_instance, int side);
DWORD IsOnBorderb__9_0Offset;
bool (*IsOnBorderb__9_0)(void *_instance, Vector3 x);
}TransformVolume;
struct Volume {
DWORD get_OriginOffset;
Vector3 (*get_Origin)(void *_instance);
DWORD get_SizeOffset;
Vector3 (*get_Size)(void *_instance);
DWORD op_EqualityOffset;
bool (*op_Equality)(int left, int right);
DWORD op_InequalityOffset;
bool (*op_Inequality)(int left, int right);
DWORD EqualsOffset;
bool (*Equals)(void *_instance, int other);
DWORD GetHashCodeOffset;
int (*GetHashCode)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}Volume;
}
namespace SystemCollections{
struct Fa {
DWORD faConvertOffset;
monoString *(*faConvert)(monoString *input);
DWORD faConvertLineOffset;
monoString *(*faConvertLine)(monoString *input);
DWORD convertCharOffset;
}Fa;
}
namespace UnityEngineAnalyticsExperimental{
struct AnalyticsEvent {
DWORD get_sdkVersionOffset;
monoString *(*get_sdkVersion)();
DWORD get_debugModeOffset;
bool (*get_debugMode)();
DWORD set_debugModeOffset;
void (*set_debugMode)(bool value);
DWORD OnValidationFailedOffset;
void (*OnValidationFailed)(monoString *message);
DWORD SplitCamelCaseOffset;
monoString *(*SplitCamelCase)(monoString *input);
}AnalyticsEvent;
}
namespace UnityEngineAnalyticsExperimentalTracker{
struct AnalyticsEventTracker {
DWORD get_payloadOffset;
void *(*get_payload)(void *_instance);
DWORD TriggerEventOffset;
void (*TriggerEvent)(void *_instance);
DWORD SendEventOffset;
int(*SendEvent)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnApplicationPauseOffset;
void (*OnApplicationPause)(void *_instance, bool paused);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD TimedTriggerOffset;
void *(*TimedTrigger)(void *_instance);
}AnalyticsEventTracker;
struct AnalyticsEventTrackerSettings {
}AnalyticsEventTrackerSettings;
struct AnalyticsEventParam {
DWORD get_requirementTypeOffset;
int(*get_requirementType)(void *_instance);
DWORD get_groupIDOffset;
monoString *(*get_groupID)(void *_instance);
DWORD get_valuePropertyOffset;
void *(*get_valueProperty)(void *_instance);
DWORD get_nameOffset;
monoString *(*get_name)(void *_instance);
DWORD get_valueOffset;
}AnalyticsEventParam;
struct CustomEventPayload {
}CustomEventPayload;
struct AnalyticsEventParamListContainer {
DWORD get_parametersOffset;
}AnalyticsEventParamListContainer;
struct StandardEventPayload {
DWORD get_parametersOffset;
void *(*get_parameters)(void *_instance);
DWORD get_nameOffset;
monoString *(*get_name)(void *_instance);
DWORD set_nameOffset;
void (*set_name)(void *_instance, monoString *value);
DWORD SendOffset;
int(*Send)(void *_instance);
DWORD GetParametersOffset;
DWORD IsCustomDataValidOffset;
bool (*IsCustomDataValid)(void *_instance);
DWORD IsRequiredDataValidOffset;
bool (*IsRequiredDataValid)(void *_instance);
}StandardEventPayload;
struct TrackableField {
DWORD GetValueOffset;
}TrackableField;
struct TrackableProperty {
}TrackableProperty;
struct ValueProperty {
DWORD get_valueTypeOffset;
monoString *(*get_valueType)(void *_instance);
DWORD set_valueTypeOffset;
void (*set_valueType)(void *_instance, monoString *value);
DWORD get_propertyValueOffset;
monoString *(*get_propertyValue)(void *_instance);
DWORD get_targetOffset;
void *(*get_target)(void *_instance);
DWORD IsValidOffset;
bool (*IsValid)(void *_instance);
}ValueProperty;
struct TriggerListContainer {
DWORD get_rulesOffset;
}TriggerListContainer;
struct EventTrigger {
DWORD get_triggerTypeOffset;
int(*get_triggerType)(void *_instance);
DWORD get_lifecycleEventOffset;
int(*get_lifecycleEvent)(void *_instance);
DWORD get_initTimeOffset;
float (*get_initTime)(void *_instance);
DWORD set_initTimeOffset;
void (*set_initTime)(void *_instance, float value);
DWORD get_repeatTimeOffset;
float (*get_repeatTime)(void *_instance);
DWORD set_repeatTimeOffset;
void (*set_repeatTime)(void *_instance, float value);
DWORD get_repetitionsOffset;
int (*get_repetitions)(void *_instance);
DWORD set_repetitionsOffset;
void (*set_repetitions)(void *_instance, int value);
DWORD AddRuleOffset;
void (*AddRule)(void *_instance);
DWORD RemoveRuleOffset;
void (*RemoveRule)(void *_instance, int index);
DWORD TestOffset;
bool (*Test)(void *_instance, void *gameObject);
}EventTrigger;
struct TrackableTrigger {
}TrackableTrigger;
struct TriggerMethod {
}TriggerMethod;
struct TriggerRule {
DWORD TestOffset;
bool (*Test)(void *_instance);
DWORD TestByEnumOffset;
bool (*TestByEnum)(void *_instance, monoString *currentValue);
DWORD TestByStringOffset;
bool (*TestByString)(void *_instance, monoString *currentValue);
DWORD TestByBoolOffset;
bool (*TestByBool)(void *_instance, bool currentValue);
}TriggerRule;
}
namespace UnityEngineUI{
struct LetterSpacing {
DWORD get_spacingOffset;
float (*get_spacing)(void *_instance);
DWORD set_spacingOffset;
void (*set_spacing)(void *_instance, float value);
DWORD ModifyMeshOffset;
void (*ModifyMesh)(void *_instance, void *vh);
}LetterSpacing;
}
namespace UnityEngineUIExtensions{
struct IScrollSnap {
}IScrollSnap;
struct ScrollSnap {
DWORD add_onPageChangeOffset;
void (*add_onPageChange)(void *_instance, void *value);
DWORD remove_onPageChangeOffset;
void (*remove_onPageChange)(void *_instance, void *value);
DWORD set_AutoScrollTimeOffset;
void (*set_AutoScrollTime)(void *_instance, float value);
DWORD get_AutoScrollTimeOffset;
float (*get_AutoScrollTime)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD CancelAndInvokeAutoScrollOffset;
void (*CancelAndInvokeAutoScroll)(void *_instance);
DWORD DoAutoScrollOffset;
void (*DoAutoScroll)(void *_instance);
DWORD OnPageButtonChangedOffset;
void (*OnPageButtonChanged)(void *_instance, bool _isOn);
DWORD UpdateListItemsSizeOffset;
void (*UpdateListItemsSize)(void *_instance);
DWORD UpdateListItemPositionsOffset;
void (*UpdateListItemPositions)(void *_instance);
DWORD ResetPageOffset;
void (*ResetPage)(void *_instance);
DWORD UpdateScrollbarOffset;
void (*UpdateScrollbar)(void *_instance, bool linkSteps);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD SetScreenOffset;
void (*SetScreen)(void *_instance, int newPage);
DWORD NextScreenOffset;
void (*NextScreen)(void *_instance);
DWORD PreviousScreenOffset;
void (*PreviousScreen)(void *_instance);
DWORD NextScreenCommandOffset;
void (*NextScreenCommand)(void *_instance);
DWORD PrevScreenCommandOffset;
void (*PrevScreenCommand)(void *_instance);
DWORD CurrentPageOffset;
int (*CurrentPage)(void *_instance);
DWORD SetLerpOffset;
void (*SetLerp)(void *_instance, bool value);
DWORD ChangePageOffset;
void (*ChangePage)(void *_instance, int page);
DWORD SetPageButtonActiveOffset;
void (*SetPageButtonActive)(void *_instance, int index);
DWORD PageChangedOffset;
void (*PageChanged)(void *_instance, int currentPage);
DWORD OnBeginDragOffset;
void (*OnBeginDrag)(void *_instance, void *eventData);
DWORD OnEndDragOffset;
void (*OnEndDrag)(void *_instance, void *eventData);
DWORD OnDragOffset;
void (*OnDrag)(void *_instance, void *eventData);
DWORD StartScreenChangeOffset;
void (*StartScreenChange)(void *_instance);
DWORD Startb__42_0Offset;
void (*Startb__42_0)(void *_instance);
DWORD Startb__42_1Offset;
void (*Startb__42_1)(void *_instance);
DWORD Startb__42_2Offset;
void (*Startb__42_2)(void *_instance, bool _isOn);
}ScrollSnap;
struct ScrollSnapScrollbarHelper {
DWORD OnBeginDragOffset;
void (*OnBeginDrag)(void *_instance, void *eventData);
DWORD OnDragOffset;
void (*OnDrag)(void *_instance, void *eventData);
DWORD OnEndDragOffset;
void (*OnEndDrag)(void *_instance, void *eventData);
DWORD OnPointerDownOffset;
void (*OnPointerDown)(void *_instance, void *eventData);
DWORD OnPointerUpOffset;
void (*OnPointerUp)(void *_instance, void *eventData);
DWORD OnScrollBarDownOffset;
void (*OnScrollBarDown)(void *_instance);
DWORD OnScrollBarUpOffset;
void (*OnScrollBarUp)(void *_instance);
}ScrollSnapScrollbarHelper;
}
namespace UnityFBXExporter{
struct FBXExporter {
DWORD ExportGameObjToFBXOffset;
bool (*ExportGameObjToFBX)(void *gameObj, monoString *newPath, bool copyMaterials, bool copyTextures);
DWORD get_VersionInformationOffset;
monoString *(*get_VersionInformation)();
DWORD GetRandomFBXIdOffset;
DWORD MeshToStringOffset;
monoString *(*MeshToString)(void *gameObj, monoString *newPath, bool copyMaterials, bool copyTextures);
DWORD CopyComplexMaterialsToPathOffset;
void (*CopyComplexMaterialsToPath)(void *gameObj, monoString *path, bool copyTextures, monoString *texturesFolder, monoString *materialsFolder);
DWORD CopyAndRenameAssetOffset;
bool (*CopyAndRenameAsset)(void *obj, monoString *newName, monoString *newFolderPath);
DWORD GetFileNameOffset;
monoString *(*GetFileName)(monoString *path);
DWORD CopyTexturesAndAssignCopiesToMaterialOffset;
void *(*CopyTexturesAndAssignCopiesToMaterial)(void *material, monoString *newPath);
DWORD GetTextureUpdateMaterialWithPathOffset;
void (*GetTextureUpdateMaterialWithPath)(void *material, monoString *textureShaderName, monoString *newPath);
DWORD CopyAndRenameAssetReturnObjectOffset;
void *(*CopyAndRenameAssetReturnObject)(void *obj, monoString *newName, monoString *newFolderPath);
}FBXExporter;
struct FBXUnityMaterialGetter {
}FBXUnityMaterialGetter;
struct FBXUnityMeshGetter {
}FBXUnityMeshGetter;
}
namespace UnityStandardAssetsCrossPlatformInput{
struct ActualJoystick {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD RefreshAimingJoystickEnabledOffset;
void (*RefreshAimingJoystickEnabled)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SwitchJoystickTypeOffset;
void (*SwitchJoystickType)(void *_instance, bool isStatic, int screenWidth);
DWORD UpdateVirtualAxesOffset;
void (*UpdateVirtualAxes)(void *_instance, Vector3 value);
DWORD CreateVirtualAxesOffset;
void (*CreateVirtualAxes)(void *_instance);
DWORD IsPointInRangeOffset;
bool (*IsPointInRange)(void *_instance, Vector2 point);
DWORD UpdateFastOffset;
void (*UpdateFast)(void *_instance);
DWORD moveJoystickOffset;
void (*moveJoystick)(void *_instance, int data);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
}ActualJoystick;
}
namespace UnityStandardAssetsImageEffects{
struct Antialiasing {
DWORD CurrentAAMaterialOffset;
void *(*CurrentAAMaterial)(void *_instance);
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}Antialiasing;
struct Bloom {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD AddToOffset;
void (*AddTo)(void *_instance, float intensity_, void *from, void *to);
DWORD BlendFlaresOffset;
void (*BlendFlares)(void *_instance, void *from, void *to);
DWORD BrightFilterOffset;
void (*BrightFilter)(void *_instance, float thresh, void *from, void *to);
DWORD BrightFilter1Offset;
void (*BrightFilter1)(void *_instance, Color threshColor, void *from, void *to);
DWORD VignetteOffset;
void (*Vignette)(void *_instance, float amount, void *from, void *to);
}Bloom;
struct BloomAndFlares {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD AddToOffset;
void (*AddTo)(void *_instance, float intensity_, void *from, void *to);
DWORD BlendFlaresOffset;
void (*BlendFlares)(void *_instance, void *from, void *to);
DWORD BrightFilterOffset;
void (*BrightFilter)(void *_instance, float thresh, float useAlphaAsMask, void *from, void *to);
DWORD VignetteOffset;
void (*Vignette)(void *_instance, float amount, void *from, void *to);
}BloomAndFlares;
struct BloomOptimized {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}BloomOptimized;
struct Blur {
DWORD get_materialOffset;
void *(*get_material)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD FourTapConeOffset;
void (*FourTapCone)(void *_instance, void *source, void *dest, int iteration);
DWORD DownSample4xOffset;
void (*DownSample4x)(void *_instance, void *source, void *dest);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}Blur;
struct BlurOptimized {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}BlurOptimized;
struct CameraMotionBlur {
DWORD CalculateViewProjectionOffset;
void (*CalculateViewProjection)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD RememberOffset;
void (*Remember)(void *_instance);
DWORD GetTmpCamOffset;
void *(*GetTmpCam)(void *_instance);
DWORD StartFrameOffset;
void (*StartFrame)(void *_instance);
DWORD divRoundUpOffset;
int (*divRoundUp)(int x, int d);
}CameraMotionBlur;
struct ColorCorrectionCurves {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD UpdateParametersOffset;
void (*UpdateParameters)(void *_instance);
DWORD UpdateTexturesOffset;
void (*UpdateTextures)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}ColorCorrectionCurves;
struct ColorCorrectionLookup {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD SetIdentityLutOffset;
void (*SetIdentityLut)(void *_instance);
DWORD ValidDimensionsOffset;
bool (*ValidDimensions)(void *_instance, void *tex2d);
DWORD ConvertOffset;
void (*Convert)(void *_instance, void *temp2DTex, monoString *path);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}ColorCorrectionLookup;
struct ColorCorrectionRamp {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}ColorCorrectionRamp;
struct ContrastEnhance {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}ContrastEnhance;
struct ContrastStretch {
DWORD get_materialLumOffset;
void *(*get_materialLum)(void *_instance);
DWORD get_materialReduceOffset;
void *(*get_materialReduce)(void *_instance);
DWORD get_materialAdaptOffset;
void *(*get_materialAdapt)(void *_instance);
DWORD get_materialApplyOffset;
void *(*get_materialApply)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD CalculateAdaptationOffset;
void (*CalculateAdaptation)(void *_instance, void *curTexture);
}ContrastStretch;
struct CreaseShading {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}CreaseShading;
struct DepthOfFieldDeprecated {
DWORD CreateMaterialsOffset;
void (*CreateMaterials)(void *_instance);
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD FocalDistance01Offset;
float (*FocalDistance01)(void *_instance, float worldDist);
DWORD GetDividerBasedOnQualityOffset;
int (*GetDividerBasedOnQuality)(void *_instance);
DWORD GetLowResolutionDividerBasedOnQualityOffset;
int (*GetLowResolutionDividerBasedOnQuality)(void *_instance, int baseDivider);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD BlurOffset;
void (*Blur)(void *_instance, void *from, void *to, int iterations, int blurPass, float spread);
DWORD BlurFgOffset;
void (*BlurFg)(void *_instance, void *from, void *to, int iterations, int blurPass, float spread);
DWORD BlurHexOffset;
void (*BlurHex)(void *_instance, void *from, void *to, int blurPass, float spread, void *tmp);
DWORD DownsampleOffset;
void (*Downsample)(void *_instance, void *from, void *to);
DWORD AddBokehOffset;
void (*AddBokeh)(void *_instance, void *bokehInfo, void *tempTex, void *finalTarget);
DWORD ReleaseTexturesOffset;
void (*ReleaseTextures)(void *_instance);
DWORD AllocateTexturesOffset;
void (*AllocateTextures)(void *_instance, bool blurForeground, void *source, int divider, int lowTexDivider);
}DepthOfFieldDeprecated;
struct EdgeDetection {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD SetCameraFlagOffset;
void (*SetCameraFlag)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}EdgeDetection;
struct Fisheye {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}Fisheye;
struct GlobalFog {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD CustomGraphicsBlitOffset;
void (*CustomGraphicsBlit)(void *source, void *dest, void *fxMaterial, int passNr);
}GlobalFog;
struct Grayscale {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}Grayscale;
struct ImageEffectBase {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD get_materialOffset;
void *(*get_material)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
}ImageEffectBase;
struct ImageEffects {
DWORD RenderDistortionOffset;
void (*RenderDistortion)(void *material, void *source, void *destination, float angle, Vector2 center, Vector2 radius);
DWORD BlitOffset;
void (*Blit)(void *source, void *dest);
DWORD BlitWithMaterialOffset;
void (*BlitWithMaterial)(void *material, void *source, void *dest);
}ImageEffects;
struct MotionBlur {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}MotionBlur;
struct NoiseAndGrain {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD DrawNoiseQuadGridOffset;
void (*DrawNoiseQuadGrid)(void *source, void *dest, void *fxMaterial, void *noise, int passNr);
}NoiseAndGrain;
struct NoiseAndScratches {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD get_materialOffset;
void *(*get_material)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD SanitizeParametersOffset;
void (*SanitizeParameters)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}NoiseAndScratches;
struct PostEffectsBase {
DWORD CheckShaderAndCreateMaterialOffset;
void *(*CheckShaderAndCreateMaterial)(void *_instance, void *s, void *m2Create);
DWORD CreateMaterialOffset;
void *(*CreateMaterial)(void *_instance, void *s, void *m2Create);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD CheckSupportOffset;
bool (*CheckSupport)(void *_instance);
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD CheckSupport1Offset;
bool (*CheckSupport1)(void *_instance, bool needDepth);
DWORD CheckSupport2Offset;
bool (*CheckSupport2)(void *_instance, bool needDepth, bool needHdr);
DWORD Dx11SupportOffset;
bool (*Dx11Support)(void *_instance);
DWORD ReportAutoDisableOffset;
void (*ReportAutoDisable)(void *_instance);
DWORD CheckShaderOffset;
bool (*CheckShader)(void *_instance, void *s);
DWORD NotSupportedOffset;
void (*NotSupported)(void *_instance);
DWORD DrawBorderOffset;
void (*DrawBorder)(void *_instance, void *dest, void *material);
}PostEffectsBase;
struct PostEffectsHelper {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
DWORD DrawLowLevelPlaneAlignedWithCameraOffset;
void (*DrawLowLevelPlaneAlignedWithCamera)(float dist, void *source, void *dest, void *material, void *cameraForProjectionMatrix);
DWORD DrawBorderOffset;
void (*DrawBorder)(void *dest, void *material);
DWORD DrawLowLevelQuadOffset;
void (*DrawLowLevelQuad)(float x1, float x2, float y1, float y2, void *source, void *dest, void *material);
}PostEffectsHelper;
struct Quads {
DWORD HasMeshesOffset;
bool (*HasMeshes)();
DWORD CleanupOffset;
void (*Cleanup)();
DWORD GetMeshesOffset;
DWORD GetMeshOffset;
void *(*GetMesh)(int triCount, int triOffset, int totalWidth, int totalHeight);
}Quads;
struct ScreenOverlay {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}ScreenOverlay;
struct ScreenSpaceAmbientObscurance {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}ScreenSpaceAmbientObscurance;
struct ScreenSpaceAmbientOcclusion {
DWORD CreateMaterialOffset;
void *(*CreateMaterial)(void *shader);
DWORD DestroyMaterialOffset;
void (*DestroyMaterial)(void *mat);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD CreateMaterialsOffset;
void (*CreateMaterials)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}ScreenSpaceAmbientOcclusion;
struct SepiaTone {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}SepiaTone;
struct SunShafts {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}SunShafts;
struct TiltShift {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}TiltShift;
struct Tonemapping {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD UpdateCurveOffset;
float (*UpdateCurve)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD CreateInternalRenderTextureOffset;
bool (*CreateInternalRenderTexture)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}Tonemapping;
struct Triangles {
DWORD HasMeshesOffset;
bool (*HasMeshes)();
DWORD CleanupOffset;
void (*Cleanup)();
DWORD GetMeshesOffset;
DWORD GetMeshOffset;
void *(*GetMesh)(int triCount, int triOffset, int totalWidth, int totalHeight);
}Triangles;
struct Twirl {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}Twirl;
struct VignetteAndChromaticAberration {
DWORD CheckResourcesOffset;
bool (*CheckResources)(void *_instance);
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}VignetteAndChromaticAberration;
struct Vortex {
DWORD OnRenderImageOffset;
void (*OnRenderImage)(void *_instance, void *source, void *destination);
}Vortex;
}
namespace UnityStandardAssetsUtility{
struct SmoothFollow {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
}SmoothFollow;
}
namespace Util{
struct Noise {
}Noise;
}
namespace XsollaCore{
struct BrowserHelper {
}BrowserHelper;
struct Error {
DWORD get_IsNetworkErrorOffset;
bool (*get_IsNetworkError)(void *_instance);
DWORD set_IsNetworkErrorOffset;
void (*set_IsNetworkError)(void *_instance, bool value);
DWORD get_NetworkErrorOffset;
void *(*get_NetworkError)();
DWORD get_UnknownErrorOffset;
void *(*get_UnknownError)();
DWORD IsValidOffset;
bool (*IsValid)(void *_instance);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}Error;
struct ImageLoader {
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD LoadImageOffset;
void *(*LoadImage)(void *_instance, monoString *url);
}ImageLoader;
struct RegionalCurrency {
DWORD get_CurrencyCodeOffset;
monoString *(*get_CurrencyCode)();
DWORD get_CurrencySymbolOffset;
monoString *(*get_CurrencySymbol)();
DWORD GetCurrencySymbolOffset;
monoString *(*GetCurrencySymbol)(monoString *code);
}RegionalCurrency;
struct AuthToken {
DWORD get_FromSteamOffset;
bool (*get_FromSteam)(void *_instance);
DWORD set_FromSteamOffset;
void (*set_FromSteam)(void *_instance, bool value);
DWORD get_SteamUserIdOffset;
monoString *(*get_SteamUserId)(void *_instance);
DWORD set_SteamUserIdOffset;
void (*set_SteamUserId)(void *_instance, monoString *value);
DWORD op_ImplicitOffset;
monoString *(*op_Implicit)(void *token);
DWORD ToStringOffset;
monoString *(*ToString)(void *_instance);
}AuthToken;
struct Utils {
DWORD ParseErrorOffset;
void *(*ParseError)(monoString *json);
DWORD GetJsonSettingsOffset;
void *(*GetJsonSettings)();
}Utils;
struct WebRequestHeader {
DWORD get_NameOffset;
monoString *(*get_Name)(void *_instance);
DWORD set_NameOffset;
void (*set_Name)(void *_instance, monoString *value);
DWORD get_ValueOffset;
monoString *(*get_Value)(void *_instance);
DWORD set_ValueOffset;
void (*set_Value)(void *_instance, monoString *value);
DWORD AuthHeaderOffset;
void *(*AuthHeader)(monoString *bearerTokenValue);
DWORD AuthBasicOffset;
void *(*AuthBasic)(monoString *basicTokenValue);
DWORD ContentTypeHeaderOffset;
void *(*ContentTypeHeader)();
DWORD AcceptHeaderOffset;
void *(*AcceptHeader)();
DWORD SteamPaymentHeaderOffset;
void *(*SteamPaymentHeader)(monoString *steamUserId);
}WebRequestHeader;
struct WebRequestHelper {
DWORD AddOptionalHeadersToOffset;
void (*AddOptionalHeadersTo)(void *_instance, void *request);
DWORD AddContentTypeHeaderToOffset;
void (*AddContentTypeHeaderTo)(void *_instance, void *request);
DWORD AttachHeadersToDeleteRequestOffset;
void (*AttachHeadersToDeleteRequest)(void *_instance, void *webRequest, void *requestHeader);
DWORD AttachHeadersToPutRequestOffset;
void (*AttachHeadersToPutRequest)(void *_instance, void *webRequest, void *requestHeader);
DWORD CheckResponseForErrorsOffset;
void *(*CheckResponseForErrors)(void *_instance, void *webRequest);
DWORD CheckResponsePayloadForErrorsOffset;
void *(*CheckResponsePayloadForErrors)(void *_instance, void *webRequest);
DWORD TryParseErrorMessageOffset;
void *(*TryParseErrorMessage)(void *_instance, monoString *json);
DWORD IsBusyOffset;
bool (*IsBusy)(void *_instance);
DWORD StopAllOffset;
void (*StopAll)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD InternalPerformWebRequestOffset;
void *(*InternalPerformWebRequest)(void *_instance, void *webRequest, void *requestProccesAction);
DWORD SendWebRequestOffset;
void *(*SendWebRequest)(void *_instance, void *webRequest);
}WebRequestHelper;
struct XsollaSettings {
DWORD get_PlayfabTitleIdOffset;
monoString *(*get_PlayfabTitleId)();
DWORD set_PlayfabTitleIdOffset;
void (*set_PlayfabTitleId)(monoString *value);
DWORD get_ServerlessProjectIdOffset;
DWORD get_IsSandboxOffset;
bool (*get_IsSandbox)();
DWORD set_IsSandboxOffset;
void (*set_IsSandbox)(bool value);
DWORD get_InAppBrowserEnabledOffset;
bool (*get_InAppBrowserEnabled)();
DWORD set_InAppBrowserEnabledOffset;
void (*set_InAppBrowserEnabled)(bool value);
DWORD get_PaystationThemeOffset;
int(*get_PaystationTheme)();
DWORD set_PaystationThemeOffset;
void (*set_PaystationTheme)(int value);
DWORD get_InstanceOffset;
void *(*get_Instance)();
DWORD GetSdkPathOffset;
monoString *(*GetSdkPath)();
DWORD GetAbsoluteSdkPathOffset;
monoString *(*GetAbsoluteSdkPath)();
DWORD FindEditorOffset;
monoString *(*FindEditor)(monoString *path);
DWORD SaveAssetOffset;
void (*SaveAsset)(monoString *directory, monoString *name);
DWORD MarkAssetDirtyOffset;
void (*MarkAssetDirty)();
}XsollaSettings;
}
namespace XsollaCorePopup{
struct ConfirmationCodePopup {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD XsollaCorePopupIConfirmationCodePopupSetTitleOffset;
void *(*XsollaCorePopupIConfirmationCodePopupSetTitle)(void *_instance, monoString *titleText);
DWORD XsollaCorePopupIConfirmationCodePopupSetConfirmButtonTextOffset;
void *(*XsollaCorePopupIConfirmationCodePopupSetConfirmButtonText)(void *_instance, monoString *buttonText);
DWORD XsollaCorePopupIConfirmationCodePopupSetCancelCallbackOffset;
void *(*XsollaCorePopupIConfirmationCodePopupSetCancelCallback)(void *_instance, void *buttonPressed);
DWORD XsollaCorePopupIConfirmationCodePopupSetCancelButtonTextOffset;
void *(*XsollaCorePopupIConfirmationCodePopupSetCancelButtonText)(void *_instance, monoString *buttonText);
DWORD Awakeb__6_0Offset;
void (*Awakeb__6_0)(void *_instance);
DWORD Awakeb__6_1Offset;
void (*Awakeb__6_1)(void *_instance);
}ConfirmationCodePopup;
struct ConfirmationPopup {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD XsollaCorePopupIConfirmationPopupSetMessageOffset;
void *(*XsollaCorePopupIConfirmationPopupSetMessage)(void *_instance, monoString *messageText);
DWORD XsollaCorePopupIConfirmationPopupSetTitleOffset;
void *(*XsollaCorePopupIConfirmationPopupSetTitle)(void *_instance, monoString *titleText);
DWORD XsollaCorePopupIConfirmationPopupSetConfirmCallbackOffset;
void *(*XsollaCorePopupIConfirmationPopupSetConfirmCallback)(void *_instance, void *buttonPressed);
DWORD XsollaCorePopupIConfirmationPopupSetConfirmButtonTextOffset;
void *(*XsollaCorePopupIConfirmationPopupSetConfirmButtonText)(void *_instance, monoString *buttonText);
DWORD XsollaCorePopupIConfirmationPopupSetCancelCallbackOffset;
void *(*XsollaCorePopupIConfirmationPopupSetCancelCallback)(void *_instance, void *buttonPressed);
DWORD XsollaCorePopupIConfirmationPopupSetCancelButtonTextOffset;
void *(*XsollaCorePopupIConfirmationPopupSetCancelButtonText)(void *_instance, monoString *buttonText);
DWORD Awakeb__6_0Offset;
void (*Awakeb__6_0)(void *_instance);
DWORD Awakeb__6_1Offset;
void (*Awakeb__6_1)(void *_instance);
}ConfirmationPopup;
struct ErrorPopup {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD XsollaCorePopupIErrorPopupSetButtonTextOffset;
void *(*XsollaCorePopupIErrorPopupSetButtonText)(void *_instance, monoString *buttonText);
DWORD XsollaCorePopupIErrorPopupSetCallbackOffset;
void *(*XsollaCorePopupIErrorPopupSetCallback)(void *_instance, void *buttonPressed);
DWORD XsollaCorePopupIErrorPopupSetMessageOffset;
void *(*XsollaCorePopupIErrorPopupSetMessage)(void *_instance, monoString *messageText);
DWORD XsollaCorePopupIErrorPopupSetTitleOffset;
void *(*XsollaCorePopupIErrorPopupSetTitle)(void *_instance, monoString *titleText);
DWORD Awakeb__4_0Offset;
void (*Awakeb__4_0)(void *_instance);
}ErrorPopup;
struct IConfirmationCodePopup {
}IConfirmationCodePopup;
struct IConfirmationPopup {
}IConfirmationPopup;
struct IErrorPopup {
}IErrorPopup;
struct ISuccessPopup {
}ISuccessPopup;
struct GameObjectPopupExtensions {
DWORD AddBackgroundOffset;
void *(*AddBackground)(void *popup, void *backgroundPrefab);
DWORD CreateObjectForOffset;
void *(*CreateObjectFor)(void *prefab, void *parent);
}GameObjectPopupExtensions;
struct PopupFactory {
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD CreateDefaultPopupOffset;
void *(*CreateDefaultPopup)(void *_instance, void *prefab, void *parent);
DWORD CreateSuccessOffset;
void *(*CreateSuccess)(void *_instance);
DWORD CreateErrorOffset;
void *(*CreateError)(void *_instance);
DWORD CreateConfirmationOffset;
void *(*CreateConfirmation)(void *_instance);
DWORD CreateCodeConfirmationOffset;
void *(*CreateCodeConfirmation)(void *_instance);
}PopupFactory;
struct SuccessPopup {
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD XsollaCorePopupISuccessPopupSetButtonTextOffset;
void *(*XsollaCorePopupISuccessPopupSetButtonText)(void *_instance, monoString *text);
DWORD XsollaCorePopupISuccessPopupSetCallbackOffset;
void *(*XsollaCorePopupISuccessPopupSetCallback)(void *_instance, void *buttonPressed);
DWORD XsollaCorePopupISuccessPopupSetMessageOffset;
void *(*XsollaCorePopupISuccessPopupSetMessage)(void *_instance, monoString *messageText);
DWORD XsollaCorePopupISuccessPopupSetTitleOffset;
void *(*XsollaCorePopupISuccessPopupSetTitle)(void *_instance, monoString *titleText);
DWORD Awakeb__4_0Offset;
void (*Awakeb__4_0)(void *_instance);
}SuccessPopup;
}
namespace XsollaDemo{
struct StoreDemoPopup {
DWORD ShowSuccessOffset;
void (*ShowSuccess)(monoString *message);
DWORD ShowErrorOffset;
void *(*ShowError)(void *error);
DWORD ShowConfirmOffset;
void (*ShowConfirm)(void *confirmCase, void *cancelCase, monoString *message);
}StoreDemoPopup;
}
namespace XsollaDemoServerlessIntegration{
struct ServerlessCatalogItem {
DWORD IsCurrencyOffset;
bool (*IsCurrency)(void *_instance);
DWORD IsVirtualItemOffset;
bool (*IsVirtualItem)(void *_instance);
}ServerlessCatalogItem;
struct ServerlessUserCatalog {
DWORD GetCatalogOffset;
}ServerlessUserCatalog;
struct ExtraController {
}ExtraController;
struct ExtraPanelInfoButtons {
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD EnableInfoButtonOffset;
void (*EnableInfoButton)(void *_instance, void *go, monoString *url);
}ExtraPanelInfoButtons;
struct PurchaseHelper {
DWORD StopProccessingOffset;
void (*StopProccessing)(void *_instance, monoString *transactionId);
DWORD IsWrongProjectSettingsOffset;
bool (*IsWrongProjectSettings)(void *_instance, void *response);
DWORD CheckUserFlowOffset;
void (*CheckUserFlow)(void *_instance, monoString *transactionId, monoString *status);
DWORD IsUserCompletePurchaseFlowOffset;
bool (*IsUserCompletePurchaseFlow)(void *_instance, monoString *transactionId);
DWORD NeedToRequestStatusAgainOffset;
bool (*NeedToRequestStatusAgain)(void *_instance, monoString *transactionId);
DWORD TransactionIsStoppedOffset;
bool (*TransactionIsStopped)(void *_instance, monoString *transactionId);
DWORD IsTheInGameBrowserOpenOffset;
bool (*IsTheInGameBrowserOpen)(void *_instance);
}PurchaseHelper;
struct TransactionCache {
}TransactionCache;
struct ServerlessDemoImplementation {
DWORD GetCatalogGroupsByItemOffset;
}ServerlessDemoImplementation;
struct ServerlessStoreController {
}ServerlessStoreController;
}
namespace XsollaDemoStore{
struct ExtraController {
}ExtraController;
struct ExtraPanelAccountButtons {
DWORD InitOffset;
void (*Init)(void *_instance);
}ExtraPanelAccountButtons;
struct ExtraPanelInfoButtons {
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD EnableInfoButtonOffset;
void (*EnableInfoButton)(void *_instance, void *go, monoString *url);
}ExtraPanelInfoButtons;
struct ItemGroupsHelper {
DWORD GetAllAsListOffset;
DWORD GetAllAsNamesOffset;
DWORD GetAllAsFlagsOffset;
int(*GetAllAsFlags)();
DWORD GetByOffset;
int(*GetBy)(void *virtualItem);
DWORD GetNamesByOffset;
DWORD GetNamesBy1Offset;
}ItemGroupsHelper;
struct PlayfabDemoImplementation {
DWORD WaitCatalogCoroutineOffset;
void *(*WaitCatalogCoroutine)(void *_instance);
DWORD GetCatalogGroupsByItemOffset;
DWORD CatalogRequestCoroutineb__5_0Offset;
void (*CatalogRequestCoroutineb__5_0)(void *_instance, void *c);
DWORD WaitCatalogCoroutineb__6_0Offset;
bool (*WaitCatalogCoroutineb__6_0)(void *_instance);
}PlayfabDemoImplementation;
struct PlayfabStoreController {
}PlayfabStoreController;
struct PurchaseHelper {
}PurchaseHelper;
}
namespace XsollaPayments{
struct AccessDataEntity {
}AccessDataEntity;
struct PaystationThemeHelper {
DWORD ConvertToSettingsOffset;
monoString *(*ConvertToSettings)(int theme);
}PaystationThemeHelper;
}
namespace XsollaPaymentsApiPlayfab{
struct PlayfabApi {
DWORD get_TokenOffset;
void *(*get_Token)(void *_instance);
DWORD set_TokenOffset;
void (*set_Token)(void *_instance, void *value);
DWORD InitOffset;
void (*Init)(void *_instance);
DWORD GetAuthHeaderOffset;
void *(*GetAuthHeader)(void *_instance);
DWORD GetFormattedUrlOffset;
monoString *(*GetFormattedUrl)(monoString *urlTemplate);
}PlayfabApi;
}
namespace XsollaPaymentsApiPlayfabAuth{
struct PlayfabUserAuthEntity {
}PlayfabUserAuthEntity;
struct PlayfabUserAuthResponseEntity {
DWORD get_SessionTicketOffset;
monoString *(*get_SessionTicket)(void *_instance);
DWORD get_TokenExpirationOffset;
monoString *(*get_TokenExpiration)(void *_instance);
}PlayfabUserAuthResponseEntity;
struct PlayfabUserRegistrationEntity {
}PlayfabUserRegistrationEntity;
struct PlayfabUserRegistrationResponseEntity {
DWORD get_SessionTicketOffset;
monoString *(*get_SessionTicket)(void *_instance);
DWORD get_TokenExpirationOffset;
monoString *(*get_TokenExpiration)(void *_instance);
}PlayfabUserRegistrationResponseEntity;
struct PlayfabUserResetPasswordEntity {
}PlayfabUserResetPasswordEntity;
struct PlayfabAuth {
}PlayfabAuth;
}
namespace XsollaPaymentsApiPlayfabCatalog{
struct CatalogItemEntity {
DWORD IsVirtualCurrencyOffset;
bool (*IsVirtualCurrency)(void *_instance);
DWORD IsConsumableOffset;
bool (*IsConsumable)(void *_instance);
DWORD GetVirtualPriceOffset;
DWORD GetRealPriceOffset;
DWORD GetVirtualCurrencySkuOffset;
monoString *(*GetVirtualCurrencySku)(void *_instance);
DWORD GetVirtualCurrencyAmountOffset;
}CatalogItemEntity;
struct CatalogItemsEntity {
}CatalogItemsEntity;
struct CatalogRequestEntity {
}CatalogRequestEntity;
struct CatalogResponseEntity {
}CatalogResponseEntity;
struct VirtualCurrencyItem {
}VirtualCurrencyItem;
struct PlayfabCatalog {
}PlayfabCatalog;
}
namespace XsollaPaymentsApiPlayfabInventory{
struct ConsumeItemRequestEntity {
}ConsumeItemRequestEntity;
struct InventoryItem {
}InventoryItem;
struct InventoryResponseEntity {
}InventoryResponseEntity;
struct UserInventoryEntity {
}UserInventoryEntity;
struct PlayfabInventory {
}PlayfabInventory;
}
namespace XsollaPaymentsApiPlayfabPurchases{
struct CloudScriptRequestEntity {
}CloudScriptRequestEntity;
struct CloudScriptResponseEntity {
}CloudScriptResponseEntity;
struct CloudScriptResultEntity {
}CloudScriptResultEntity;
struct PurchaseForVcRequestEntity {
}PurchaseForVcRequestEntity;
struct PurchaseRequestEntity {
}PurchaseRequestEntity;
struct PurchaseResponseEntity {
}PurchaseResponseEntity;
struct PurchaseStatusEntity {
}PurchaseStatusEntity;
struct PurchaseStatusRequestEntity {
}PurchaseStatusRequestEntity;
struct PurchaseStatusResponseEntity {
}PurchaseStatusResponseEntity;
struct PurchaseTransactionEntity {
}PurchaseTransactionEntity;
struct StartPurchaseRequestEntity {
}StartPurchaseRequestEntity;
struct StartPurchaseResponseEntity {
}StartPurchaseResponseEntity;
struct StartPurchaseResultEntity {
}StartPurchaseResultEntity;
struct Token {
}Token;
struct PlayfabPurchases {
}PlayfabPurchases;
}
namespace XsollaPaymentsApiServerlessIntegration{
struct TransactionStatusResponse {
}TransactionStatusResponse;
struct TransactionStatus {
DWORD IsSuccessOffset;
bool (*IsSuccess)(monoString *transactionStatus);
DWORD IsFailedOffset;
bool (*IsFailed)(monoString *transactionStatus);
DWORD IsInProgressOffset;
bool (*IsInProgress)(monoString *transactionStatus);
}TransactionStatus;
struct ServerlessIntegrationApi {
}ServerlessIntegrationApi;
}
namespace mset{
struct Gamma {
}Gamma;
struct RGB {
}RGB;
struct CubeBuffer {
DWORD set_filterModeOffset;
void (*set_filterMode)(void *_instance, int value);
DWORD get_filterModeOffset;
int(*get_filterMode)(void *_instance);
DWORD get_widthOffset;
int (*get_width)(void *_instance);
DWORD get_heightOffset;
int (*get_height)(void *_instance);
DWORD FinalizeOffset;
void (*Finalize)(void *_instance);
DWORD clearOffset;
void (*clear)(void *_instance);
DWORD emptyOffset;
bool (*empty)(void *_instance);
DWORD applyExposure1Offset;
void (*applyExposure1)(void *_instance, float mult);
DWORD toIndexOffset;
int (*toIndex)(void *_instance, int face, int x, int y);
DWORD toIndex1Offset;
int (*toIndex1)(void *_instance, int face, int x, int y);
DWORD linkEdgesOffset;
void (*linkEdges)();
DWORD toIndexLinkedOffset;
int (*toIndexLinked)(void *_instance, int face, int u, int v);
DWORD resizeOffset;
void (*resize)(void *_instance, int newFaceSize);
DWORD resize1Offset;
void (*resize1)(void *_instance, int newFaceSize, Color clearColor);
DWORD resampleOffset;
void (*resample)(void *_instance, int newSize);
DWORD fromCubeOffset;
void (*fromCube)(void *_instance, void *cube, int mip, int cubeColorMode, bool useGamma);
DWORD fromBufferOffset;
void (*fromBuffer)(void *_instance, void *src);
DWORD fromPanoTextureOffset;
void (*fromPanoTexture)(void *_instance, void *tex, int _faceSize, int texColorMode, bool useGamma);
DWORD fromColTextureOffset;
void (*fromColTexture)(void *_instance, void *tex, int texColorMode, bool useGamma);
DWORD fromColTexture1Offset;
void (*fromColTexture1)(void *_instance, void *tex, int mip, int texColorMode, bool useGamma);
DWORD fromHorizCrossTextureOffset;
void (*fromHorizCrossTexture)(void *_instance, void *tex, int texColorMode, bool useGamma);
DWORD fromHorizCrossTexture1Offset;
void (*fromHorizCrossTexture1)(void *_instance, void *tex, int mip, int texColorMode, bool useGamma);
}CubeBuffer;
struct FreeProbe {
DWORD get_targetCubeOffset;
void *(*get_targetCube)(void *_instance);
DWORD set_targetCubeOffset;
void (*set_targetCube)(void *_instance, void *value);
DWORD UpdateFaceTextureOffset;
void (*UpdateFaceTexture)(void *_instance);
DWORD FreeFaceTextureOffset;
void (*FreeFaceTexture)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD QueueCubemapOffset;
void (*QueueCubemap)(void *_instance, void *cube, bool HDR, Vector3 pos, int rot);
DWORD ClearQueueOffset;
void (*ClearQueue)(void *_instance);
DWORD RunQueueOffset;
void (*RunQueue)(void *_instance);
DWORD StartStageOffset;
void (*StartStage)(void *_instance, int nextStage);
DWORD OnPreCullOffset;
void (*OnPreCull)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnPostRenderOffset;
void (*OnPostRender)(void *_instance);
DWORD SetFacePixelsOffset;
void (*SetFacePixels)(void *cube, int face, void *tex, int mip, bool flipHorz, bool flipVert, bool convertHDR);
DWORD toggleKeywordPairOffset;
void (*toggleKeywordPair)(monoString *on, monoString *off, bool yes);
DWORD toggleKeywordPair1Offset;
void (*toggleKeywordPair1)(void *mat, monoString *on, monoString *off, bool yes);
}FreeProbe;
struct GLUtil {
DWORD StripFirstVertexOffset;
void (*StripFirstVertex)(Vector3 v);
DWORD StripFirstVertex3Offset;
void (*StripFirstVertex3)(float x, float y, float z);
DWORD StripVertex3Offset;
void (*StripVertex3)(float x, float y, float z);
DWORD StripVertexOffset;
void (*StripVertex)(Vector3 v);
DWORD DrawCubeOffset;
void (*DrawCube)(Vector3 pos, Vector3 radius);
DWORD DrawWireCubeOffset;
void (*DrawWireCube)(Vector3 pos, Vector3 radius);
}GLUtil;
struct Logo {
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD updateTexRectOffset;
void (*updateTexRect)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}Logo;
struct QPow {
DWORD Pow1Offset;
float (*Pow1)(float f);
DWORD Pow2Offset;
float (*Pow2)(float f);
DWORD Pow4Offset;
float (*Pow4)(float f);
DWORD Pow8Offset;
float (*Pow8)(float f);
DWORD Pow16Offset;
float (*Pow16)(float f);
DWORD Pow32Offset;
float (*Pow32)(float f);
DWORD Pow64Offset;
float (*Pow64)(float f);
DWORD Pow128Offset;
float (*Pow128)(float f);
DWORD Pow256Offset;
float (*Pow256)(float f);
DWORD Pow512Offset;
float (*Pow512)(float f);
DWORD closestPowFuncOffset;
void *(*closestPowFunc)(int exp);
DWORD Log2iOffset;
int (*Log2i)(int val);
DWORD clampedDownShiftOffset;
int (*clampedDownShift)(int val, int shift);
DWORD clampedDownShift1Offset;
int (*clampedDownShift1)(int val, int shift, int minVal);
}QPow;
struct SHEncoding {
DWORD clearToBlackOffset;
void (*clearToBlack)(void *_instance);
DWORD equalsOffset;
bool (*equals)(void *_instance, void *other);
DWORD copyFromOffset;
void (*copyFrom)(void *_instance, void *src);
DWORD copyToBufferOffset;
void (*copyToBuffer)(void *_instance);
}SHEncoding;
struct SHEncodingFile {
}SHEncodingFile;
struct SHUtil {
DWORD project_l0_m0Offset;
float (*project_l0_m0)(Vector3 u);
DWORD project_l1_mneg1Offset;
float (*project_l1_mneg1)(Vector3 u);
DWORD project_l1_m0Offset;
float (*project_l1_m0)(Vector3 u);
DWORD project_l1_m1Offset;
float (*project_l1_m1)(Vector3 u);
DWORD project_l2_mneg2Offset;
float (*project_l2_mneg2)(Vector3 u);
DWORD project_l2_mneg1Offset;
float (*project_l2_mneg1)(Vector3 u);
DWORD project_l2_m0Offset;
float (*project_l2_m0)(Vector3 u);
DWORD project_l2_m1Offset;
float (*project_l2_m1)(Vector3 u);
DWORD project_l2_m2Offset;
float (*project_l2_m2)(Vector3 u);
}SHUtil;
struct ShaderIDs {
DWORD get_validOffset;
bool (*get_valid)(void *_instance);
DWORD LinkOffset;
void (*Link)(void *_instance);
DWORD Link1Offset;
void (*Link1)(void *_instance, monoString *postfix);
}ShaderIDs;
struct Sky {
DWORD get_SpecularCubeOffset;
void *(*get_SpecularCube)(void *_instance);
DWORD set_SpecularCubeOffset;
void (*set_SpecularCube)(void *_instance, void *value);
DWORD get_SkyboxCubeOffset;
void *(*get_SkyboxCube)(void *_instance);
DWORD set_SkyboxCubeOffset;
void (*set_SkyboxCube)(void *_instance, void *value);
DWORD get_DimensionsOffset;
int(*get_Dimensions)(void *_instance);
DWORD set_DimensionsOffset;
void (*set_Dimensions)(void *_instance, int value);
DWORD get_DirtyOffset;
bool (*get_Dirty)(void *_instance);
DWORD set_DirtyOffset;
void (*set_Dirty)(void *_instance, bool value);
DWORD get_MasterIntensityOffset;
float (*get_MasterIntensity)(void *_instance);
DWORD set_MasterIntensityOffset;
void (*set_MasterIntensity)(void *_instance, float value);
DWORD get_SkyIntensityOffset;
float (*get_SkyIntensity)(void *_instance);
DWORD set_SkyIntensityOffset;
void (*set_SkyIntensity)(void *_instance, float value);
DWORD get_SpecIntensityOffset;
float (*get_SpecIntensity)(void *_instance);
DWORD set_SpecIntensityOffset;
void (*set_SpecIntensity)(void *_instance, float value);
DWORD get_DiffIntensityOffset;
float (*get_DiffIntensity)(void *_instance);
DWORD set_DiffIntensityOffset;
void (*set_DiffIntensity)(void *_instance, float value);
DWORD get_CamExposureOffset;
float (*get_CamExposure)(void *_instance);
DWORD set_CamExposureOffset;
void (*set_CamExposure)(void *_instance, float value);
DWORD get_SpecIntensityLMOffset;
float (*get_SpecIntensityLM)(void *_instance);
DWORD set_SpecIntensityLMOffset;
void (*set_SpecIntensityLM)(void *_instance, float value);
DWORD get_DiffIntensityLMOffset;
float (*get_DiffIntensityLM)(void *_instance);
DWORD set_DiffIntensityLMOffset;
void (*set_DiffIntensityLM)(void *_instance, float value);
DWORD get_HDRSkyOffset;
bool (*get_HDRSky)(void *_instance);
DWORD set_HDRSkyOffset;
void (*set_HDRSky)(void *_instance, bool value);
DWORD get_HDRSpecOffset;
bool (*get_HDRSpec)(void *_instance);
DWORD set_HDRSpecOffset;
void (*set_HDRSpec)(void *_instance, bool value);
DWORD get_LinearSpaceOffset;
bool (*get_LinearSpace)(void *_instance);
DWORD set_LinearSpaceOffset;
void (*set_LinearSpace)(void *_instance, bool value);
DWORD get_AutoDetectColorSpaceOffset;
bool (*get_AutoDetectColorSpace)(void *_instance);
DWORD set_AutoDetectColorSpaceOffset;
void (*set_AutoDetectColorSpace)(void *_instance, bool value);
DWORD get_HasDimensionsOffset;
bool (*get_HasDimensions)(void *_instance);
DWORD set_HasDimensionsOffset;
void (*set_HasDimensions)(void *_instance, bool value);
DWORD get_blackCubeOffset;
void *(*get_blackCube)(void *_instance);
DWORD get_SkyboxMaterialOffset;
void *(*get_SkyboxMaterial)(void *_instance);
DWORD getTargetMaterialsOffset;
DWORD ApplyOffset;
void (*Apply)(void *_instance);
DWORD Apply1Offset;
void (*Apply1)(void *_instance, int blendIndex);
DWORD Apply2Offset;
void (*Apply2)(void *_instance, void *target);
DWORD Apply3Offset;
void (*Apply3)(void *_instance, void *target, int blendIndex);
DWORD ApplyFastOffset;
void (*ApplyFast)(void *_instance, void *target, int blendIndex);
DWORD Apply11Offset;
void (*Apply11)(void *_instance, void *target);
DWORD Apply21Offset;
void (*Apply21)(void *_instance, void *target, int blendIndex);
DWORD ApplyToMaterialOffset;
void (*ApplyToMaterial)(void *_instance, void *mat, void *bids);
DWORD ApplySkyTransformOffset;
void (*ApplySkyTransform)(void *_instance, void *bids);
DWORD ApplyGloballyOffset;
void (*ApplyGlobally)(void *_instance, void *bids);
DWORD ScrubGlobalKeywordsOffset;
void (*ScrubGlobalKeywords)();
DWORD EnableProjectionSupportOffset;
void (*EnableProjectionSupport)(bool enable);
DWORD EnableGlobalProjectionOffset;
void (*EnableGlobalProjection)(bool enable);
DWORD EnableProjection1Offset;
void (*EnableProjection1)(void *mat, bool enable);
DWORD EnableBlendingSupportOffset;
void (*EnableBlendingSupport)(bool enable);
DWORD EnableTerrainBlendingOffset;
void (*EnableTerrainBlending)(bool enable);
DWORD EnableGlobalBlendingOffset;
void (*EnableGlobalBlending)(bool enable);
DWORD EnableBlending1Offset;
void (*EnableBlending1)(void *mat, bool enable);
DWORD SetBlendWeightOffset;
void (*SetBlendWeight)(float weight);
DWORD SetBlendWeight1Offset;
void (*SetBlendWeight1)(void *target, float weight);
DWORD SetBlendWeight2Offset;
void (*SetBlendWeight2)(void *mat, float weight);
DWORD SetUniformOcclusionOffset;
void (*SetUniformOcclusion)(void *target, float diffuse, float specular);
DWORD SetCustomExposureOffset;
void (*SetCustomExposure)(void *_instance, float diffInt, float specInt, float skyInt, float camExpo);
DWORD SetCustomExposure1Offset;
void (*SetCustomExposure1)(void *_instance, void *target, float diffInt, float specInt, float skyInt, float camExpo);
DWORD ToggleChildLightsOffset;
void (*ToggleChildLights)(void *_instance, bool enable);
DWORD UpdateSkySizeOffset;
void (*UpdateSkySize)(void *_instance);
DWORD UpdateSkyTransformOffset;
void (*UpdateSkyTransform)(void *_instance);
DWORD UpdateExposuresOffset;
void (*UpdateExposures)(void *_instance);
DWORD UpdatePropertyIDsOffset;
void (*UpdatePropertyIDs)(void *_instance);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD ResetOffset;
void (*Reset)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnLevelWasLoadedOffset;
void (*OnLevelWasLoaded)(void *_instance, int level);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD UpdateOffset;
void (*Update)(void *_instance);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD DrawProjectionCubeOffset;
void (*DrawProjectionCube)(void *_instance, Vector3 center, Vector3 radius);
DWORD OnTriggerEnterOffset;
void (*OnTriggerEnter)(void *_instance, void *other);
DWORD OnPostRenderOffset;
void (*OnPostRender)(void *_instance);
}Sky;
struct SkyAnchor {
DWORD get_CurrentSkyOffset;
void *(*get_CurrentSky)(void *_instance);
DWORD get_PreviousSkyOffset;
void *(*get_PreviousSky)(void *_instance);
DWORD get_BlendTimeOffset;
float (*get_BlendTime)(void *_instance);
DWORD set_BlendTimeOffset;
void (*set_BlendTime)(void *_instance, float value);
DWORD get_IsStaticOffset;
bool (*get_IsStatic)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD UpdateMaterialsOffset;
void (*UpdateMaterials)(void *_instance);
DWORD CleanUpMaterialsOffset;
void (*CleanUpMaterials)(void *_instance);
DWORD SnapToSkyOffset;
void (*SnapToSky)(void *_instance, void *nusky);
DWORD BlendToSkyOffset;
void (*BlendToSky)(void *_instance, void *nusky);
DWORD SnapToGlobalSkyOffset;
void (*SnapToGlobalSky)(void *_instance, void *nusky);
DWORD BlendToGlobalSkyOffset;
void (*BlendToGlobalSky)(void *_instance, void *nusky);
DWORD ApplyOffset;
void (*Apply)(void *_instance);
DWORD GetCenterOffset;
void (*GetCenter)(void *_instance, Vector3 *_center);
DWORD ComputeCenterOffset;
void (*ComputeCenter)(void *_instance, Vector3 *_center);
DWORD OnDestroyOffset;
void (*OnDestroy)(void *_instance);
DWORD OnApplicationQuitOffset;
void (*OnApplicationQuit)(void *_instance);
}SkyAnchor;
struct SkyApplicator {
DWORD get_TriggerDimensionsOffset;
int(*get_TriggerDimensions)(void *_instance);
DWORD set_TriggerDimensionsOffset;
void (*set_TriggerDimensions)(void *_instance, int value);
DWORD AwakeOffset;
void (*Awake)(void *_instance);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD OnEnableOffset;
void (*OnEnable)(void *_instance);
DWORD OnDisableOffset;
void (*OnDisable)(void *_instance);
DWORD RemoveRendererOffset;
void (*RemoveRenderer)(void *_instance, void *rend);
DWORD AddRendererOffset;
void (*AddRenderer)(void *_instance, void *rend);
DWORD ApplyInsideOffset;
bool (*ApplyInside)(void *_instance, void *rend);
DWORD RendererInsideOffset;
bool (*RendererInside)(void *_instance, void *rend);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
}SkyApplicator;
struct SkyBlender {
DWORD get_BlendTimeOffset;
float (*get_BlendTime)(void *_instance);
DWORD set_BlendTimeOffset;
void (*set_BlendTime)(void *_instance, float value);
DWORD get_blendTimerOffset;
float (*get_blendTimer)(void *_instance);
DWORD set_blendTimerOffset;
void (*set_blendTimer)(void *_instance, float value);
DWORD get_BlendWeightOffset;
float (*get_BlendWeight)(void *_instance);
DWORD get_IsBlendingOffset;
bool (*get_IsBlending)(void *_instance);
DWORD WasBlendingOffset;
bool (*WasBlending)(void *_instance, float secAgo);
DWORD ApplyOffset;
void (*Apply)(void *_instance);
DWORD Apply1Offset;
void (*Apply1)(void *_instance, void *target);
DWORD ApplyToTerrainOffset;
void (*ApplyToTerrain)(void *_instance);
DWORD SnapToSkyOffset;
void (*SnapToSky)(void *_instance, void *nusky);
DWORD BlendToSkyOffset;
void (*BlendToSky)(void *_instance, void *nusky);
DWORD SkipTimeOffset;
void (*SkipTime)(void *_instance, float sec);
}SkyBlender;
struct SkyDebug {
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD GetDebugStringOffset;
monoString *(*GetDebugString)(void *_instance);
DWORD OnDrawGizmosSelectedOffset;
void (*OnDrawGizmosSelected)(void *_instance);
DWORD OnGUIOffset;
void (*OnGUI)(void *_instance);
}SkyDebug;
struct SkyManager {
DWORD GetOffset;
void *(*Get)();
DWORD get_BlendingSupportOffset;
bool (*get_BlendingSupport)(void *_instance);
DWORD set_BlendingSupportOffset;
void (*set_BlendingSupport)(void *_instance, bool value);
DWORD get_ProjectionSupportOffset;
bool (*get_ProjectionSupport)(void *_instance);
DWORD set_ProjectionSupportOffset;
void (*set_ProjectionSupport)(void *_instance, bool value);
DWORD get_GlobalSkyOffset;
void *(*get_GlobalSky)(void *_instance);
DWORD set_GlobalSkyOffset;
void (*set_GlobalSky)(void *_instance, void *value);
DWORD BlendToGlobalSkyOffset;
void (*BlendToGlobalSky)(void *_instance, void *next);
DWORD BlendToGlobalSky1Offset;
void (*BlendToGlobalSky1)(void *_instance, void *next, float blendTime);
DWORD BlendToGlobalSky2Offset;
void (*BlendToGlobalSky2)(void *_instance, void *next, float blendTime, float skipTime);
DWORD ResetLightBlendOffset;
void (*ResetLightBlend)(void *_instance);
DWORD StartLightBlendOffset;
void (*StartLightBlend)(void *_instance, void *prev, void *next);
DWORD UpdateLightBlendOffset;
void (*UpdateLightBlend)(void *_instance);
DWORD HandleGlobalSkyChangeOffset;
void (*HandleGlobalSkyChange)(void *_instance);
DWORD get_SkyboxMaterialOffset;
void *(*get_SkyboxMaterial)(void *_instance);
DWORD get_ShowSkyboxOffset;
bool (*get_ShowSkybox)(void *_instance);
DWORD set_ShowSkyboxOffset;
void (*set_ShowSkybox)(void *_instance, bool value);
DWORD StartOffset;
void (*Start)(void *_instance);
DWORD RegisterApplicatorOffset;
void (*RegisterApplicator)(void *_instance, void *app);
DWORD UnregisterRendererOffset;
void (*UnregisterRenderer)(void *_instance, void *rend);
DWORD RegisterNewRendererOffset;
void (*RegisterNewRenderer)(void *_instance, void *rend);
DWORD SeekNewRenderersOffset;
void (*SeekNewRenderers)(void *_instance);
DWORD ApplyCorrectSkyOffset;
void (*ApplyCorrectSky)(void *_instance, void *rend);
DWORD EditorUpdateOffset;
void (*EditorUpdate)(void *_instance, bool forceApply);
DWORD EditorApplySkiesOffset;
void (*EditorApplySkies)(void *_instance, bool forceApply);
DWORD LateUpdateOffset;
void (*LateUpdate)(void *_instance);
DWORD GameApplySkiesOffset;
void (*GameApplySkies)(void *_instance, bool forceApply);
}SkyManager;
struct SkyProbe {
DWORD buildRandomValueTableOffset;
void (*buildRandomValueTable)();
DWORD bindRandomValueTableOffset;
void (*bindRandomValueTable)(void *mat, monoString *paramName, int inputFaceSize);
DWORD buildRandomValueCodeOffset;
void (*buildRandomValueCode)();
DWORD blurOffset;
void (*blur)(void *_instance, void *targetCube, void *sourceCube, bool dstRGBM, bool srcRGBM, bool linear);
DWORD convolveOffset;
void (*convolve)(void *_instance, void *targetCube, void *sourceCube, bool dstRGBM, bool srcRGBM, bool linear);
DWORD captureOffset;
bool (*capture)(void *_instance, void *targetCube, Vector3 position, int rotation, bool HDR, bool linear, bool convolve);
DWORD toggleKeywordPairOffset;
void (*toggleKeywordPair)(monoString *on, monoString *off, bool yes);
DWORD toggleKeywordPair1Offset;
void (*toggleKeywordPair1)(void *mat, monoString *on, monoString *off, bool yes);
DWORD copy_internalOffset;
void (*copy_internal)(void *_instance, void *dstCube, void *srcCube, bool dstRGBM, bool srcRGBM, bool linear, void *cam, void *skyMat, int matrix);
DWORD convolve_internalOffset;
void (*convolve_internal)(void *_instance, void *dstTex, void *srcCube, bool dstRGBM, bool srcRGBM, bool linear, void *cam, void *skyMat, int matrix);
}SkyProbe;
struct Util {
}Util;
}
void AssignPointers() 
 { 
 Mask.get_maskMappingWorldAxisOffset = getRealOffset(0x9F8BD4);
Mask.get_maskMappingWorldAxis = (int (*)(void*))Mask.get_maskMappingWorldAxisOffset;

Mask.set_maskMappingWorldAxisOffset = getRealOffset(0x9F8BDC);
Mask.set_maskMappingWorldAxis = (void(*)(void*, int))Mask.set_maskMappingWorldAxisOffset;

Mask.get_invertAxisOffset = getRealOffset(0x9F8DBC);
Mask.get_invertAxis = (bool(*)(void*))Mask.get_invertAxisOffset;

Mask.set_invertAxisOffset = getRealOffset(0x9F8DC4);
Mask.set_invertAxis = (void(*)(void*, bool))Mask.set_invertAxisOffset;

Mask.get_clampAlphaHorizontallyOffset = getRealOffset(0x9F8DF4);
Mask.get_clampAlphaHorizontally = (bool(*)(void*))Mask.get_clampAlphaHorizontallyOffset;

Mask.set_clampAlphaHorizontallyOffset = getRealOffset(0x9F8DFC);
Mask.set_clampAlphaHorizontally = (void(*)(void*, bool))Mask.set_clampAlphaHorizontallyOffset;

Mask.get_clampAlphaVerticallyOffset = getRealOffset(0x9F9324);
Mask.get_clampAlphaVertically = (bool(*)(void*))Mask.get_clampAlphaVerticallyOffset;

Mask.set_clampAlphaVerticallyOffset = getRealOffset(0x9F932C);
Mask.set_clampAlphaVertically = (void(*)(void*, bool))Mask.set_clampAlphaVerticallyOffset;

Mask.get_clampingBorderOffset = getRealOffset(0x9F9394);
Mask.get_clampingBorder = (float(*)(void*))Mask.get_clampingBorderOffset;

Mask.set_clampingBorderOffset = getRealOffset(0x9F939C);
Mask.set_clampingBorder = (void(*)(void*, float))Mask.set_clampingBorderOffset;

Mask.get_useMaskAlphaChannelOffset = getRealOffset(0x9F98E8);
Mask.get_useMaskAlphaChannel = (bool(*)(void*))Mask.get_useMaskAlphaChannelOffset;

Mask.set_useMaskAlphaChannelOffset = getRealOffset(0x9F98F0);
Mask.set_useMaskAlphaChannel = (void(*)(void*, bool))Mask.set_useMaskAlphaChannelOffset;

Mask.StartOffset = getRealOffset(0x9F9958);
Mask.Start = (void(*)(void*))Mask.StartOffset;

Mask.UpdateOffset = getRealOffset(0x9F9A7C);
Mask.Update = (void(*)(void*))Mask.UpdateOffset;

Mask.SetMaskMappingAxisInMaterialsOffset = getRealOffset(0x9FB134);
Mask.SetMaskMappingAxisInMaterials = (void(*)(void*, int))Mask.SetMaskMappingAxisInMaterialsOffset;

Mask.SetMaskMappingAxisInMaterialOffset = getRealOffset(0x9FB5F4);
Mask.SetMaskMappingAxisInMaterial = (void(*)(void*, int, void *))Mask.SetMaskMappingAxisInMaterialOffset;

Mask.SetMaskFloatValueInMaterialsOffset = getRealOffset(0x9F9410);
Mask.SetMaskFloatValueInMaterials = (void(*)(void*, monoString*, float))Mask.SetMaskFloatValueInMaterialsOffset;

Mask.SetMaskBoolValueInMaterialsOffset = getRealOffset(0x9F8E64);
Mask.SetMaskBoolValueInMaterials = (void(*)(void*, monoString*, bool))Mask.SetMaskBoolValueInMaterialsOffset;

Mask.SetMaskBoolValueInMaterialOffset = getRealOffset(0x9FB9B8);
Mask.SetMaskBoolValueInMaterial = (void(*)(void*, monoString*, bool, void *))Mask.SetMaskBoolValueInMaterialOffset;

Mask.CreateAndAssignQuadOffset = getRealOffset(0x9FBB7C);
Mask.CreateAndAssignQuad = (void(*)(void*, void *))Mask.CreateAndAssignQuadOffset;

Mask.SetMaskRendererActiveOffset = getRealOffset(0x9FC14C);
Mask.SetMaskRendererActive = (void(*)(void*, bool))Mask.SetMaskRendererActiveOffset;

Mask.ChangeMappingAxisOffset = getRealOffset(0x9F8C08);
Mask.ChangeMappingAxis = (void(*)(void*, int, int, bool))Mask.ChangeMappingAxisOffset;

LogoSpecularityAnimator.StartOffset = getRealOffset(0x6F8150);
LogoSpecularityAnimator.Start = (void(*)(void*))LogoSpecularityAnimator.StartOffset;

LogoSpecularityAnimator.UpdateOffset = getRealOffset(0x6F81F4);
LogoSpecularityAnimator.Update = (void(*)(void*))LogoSpecularityAnimator.UpdateOffset;

LogoSpecularityAnimator.AnimateSpecularityOffset = getRealOffset(0x6F8174);
LogoSpecularityAnimator.AnimateSpecularity = (void *(*)(void*))LogoSpecularityAnimator.AnimateSpecularityOffset;

NightAndDayMaskAnimator.StartOffset = getRealOffset(0x546D38);
NightAndDayMaskAnimator.Start = (void(*)(void*))NightAndDayMaskAnimator.StartOffset;

NightAndDayMaskAnimator.UpdateOffset = getRealOffset(0x546DA0);
NightAndDayMaskAnimator.Update = (void(*)(void*))NightAndDayMaskAnimator.UpdateOffset;

ShipMover.StartOffset = getRealOffset(0x61D944);
ShipMover.Start = (void(*)(void*))ShipMover.StartOffset;

ShipMover.UpdateOffset = getRealOffset(0x61D990);
ShipMover.Update = (void(*)(void*))ShipMover.UpdateOffset;

UVAnimator.StartOffset = getRealOffset(0x5E1F1C);
UVAnimator.Start = (void(*)(void*))UVAnimator.StartOffset;

UVAnimator.UpdateOffset = getRealOffset(0x5E1F20);
UVAnimator.Update = (void(*)(void*))UVAnimator.UpdateOffset;

AmplifyColorBase.get_DefaultLutOffset = getRealOffset(0x82E554);
AmplifyColorBase.get_DefaultLut = (void *(*)(void*))AmplifyColorBase.get_DefaultLutOffset;

AmplifyColorBase.get_IsBlendingOffset = getRealOffset(0x82E8F4);
AmplifyColorBase.get_IsBlending = (bool(*)(void*))AmplifyColorBase.get_IsBlendingOffset;

AmplifyColorBase.get_effectVolumesBlendAdjustedOffset = getRealOffset(0x82E8FC);
AmplifyColorBase.get_effectVolumesBlendAdjusted = (float(*)(void*))AmplifyColorBase.get_effectVolumesBlendAdjustedOffset;

AmplifyColorBase.get_SharedInstanceIDOffset = getRealOffset(0x82E9B4);
AmplifyColorBase.get_SharedInstanceID = (monoString *(*)(void*))AmplifyColorBase.get_SharedInstanceIDOffset;

AmplifyColorBase.get_WillItBlendOffset = getRealOffset(0x82E9BC);
AmplifyColorBase.get_WillItBlend = (bool(*)(void*))AmplifyColorBase.get_WillItBlendOffset;

AmplifyColorBase.NewSharedInstanceIDOffset = getRealOffset(0x82EA98);
AmplifyColorBase.NewSharedInstanceID = (void(*)(void*))AmplifyColorBase.NewSharedInstanceIDOffset;

AmplifyColorBase.ReportMissingShadersOffset = getRealOffset(0x82EB44);
AmplifyColorBase.ReportMissingShaders = (void(*)(void*))AmplifyColorBase.ReportMissingShadersOffset;

AmplifyColorBase.ReportNotSupportedOffset = getRealOffset(0x82EBDC);
AmplifyColorBase.ReportNotSupported = (void(*)(void*))AmplifyColorBase.ReportNotSupportedOffset;

AmplifyColorBase.CheckShaderOffset = getRealOffset(0x82EC74);
AmplifyColorBase.CheckShader = (bool(*)(void*, void *))AmplifyColorBase.CheckShaderOffset;

AmplifyColorBase.CheckShadersOffset = getRealOffset(0x82ED44);
AmplifyColorBase.CheckShaders = (bool(*)(void*))AmplifyColorBase.CheckShadersOffset;

AmplifyColorBase.CheckSupportOffset = getRealOffset(0x82EDC8);
AmplifyColorBase.CheckSupport = (bool(*)(void*))AmplifyColorBase.CheckSupportOffset;

AmplifyColorBase.OnEnableOffset = getRealOffset(0x82EDFC);
AmplifyColorBase.OnEnable = (void(*)(void*))AmplifyColorBase.OnEnableOffset;

AmplifyColorBase.OnDisableOffset = getRealOffset(0x82F2C4);
AmplifyColorBase.OnDisable = (void(*)(void*))AmplifyColorBase.OnDisableOffset;

AmplifyColorBase.VolumesBlendToOffset = getRealOffset(0x82F52C);
AmplifyColorBase.VolumesBlendTo = (void(*)(void*, void *, float))AmplifyColorBase.VolumesBlendToOffset;

AmplifyColorBase.BlendToOffset = getRealOffset(0x82F54C);
AmplifyColorBase.BlendTo = (void(*)(void*, void *, float, void *))AmplifyColorBase.BlendToOffset;

AmplifyColorBase.CheckCameraOffset = getRealOffset(0x82F570);
AmplifyColorBase.CheckCamera = (void(*)(void*))AmplifyColorBase.CheckCameraOffset;

AmplifyColorBase.StartOffset = getRealOffset(0x82F694);
AmplifyColorBase.Start = (void(*)(void*))AmplifyColorBase.StartOffset;

AmplifyColorBase.UpdateOffset = getRealOffset(0x82F6F8);
AmplifyColorBase.Update = (void(*)(void*))AmplifyColorBase.UpdateOffset;

AmplifyColorBase.EnterVolumeOffset = getRealOffset(0x8303A8);
AmplifyColorBase.EnterVolume = (void(*)(void*, void *))AmplifyColorBase.EnterVolumeOffset;

AmplifyColorBase.ExitVolumeOffset = getRealOffset(0x830458);
AmplifyColorBase.ExitVolume = (void(*)(void*, void *))AmplifyColorBase.ExitVolumeOffset;

AmplifyColorBase.UpdateVolumesOffset = getRealOffset(0x82FBA0);
AmplifyColorBase.UpdateVolumes = (void(*)(void*))AmplifyColorBase.UpdateVolumesOffset;

AmplifyColorBase.SetupShaderOffset = getRealOffset(0x830500);
AmplifyColorBase.SetupShader = (void(*)(void*))AmplifyColorBase.SetupShaderOffset;

AmplifyColorBase.ReleaseMaterialsOffset = getRealOffset(0x82F3B4);
AmplifyColorBase.ReleaseMaterials = (void(*)(void*))AmplifyColorBase.ReleaseMaterialsOffset;

AmplifyColorBase.CreateDefaultLutOffset = getRealOffset(0x82E5F0);
AmplifyColorBase.CreateDefaultLut = (void *(*)(void*))AmplifyColorBase.CreateDefaultLutOffset;

AmplifyColorBase.CreateDepthCurveLutOffset = getRealOffset(0x830638);
AmplifyColorBase.CreateDepthCurveLut = (void *(*)(void*))AmplifyColorBase.CreateDepthCurveLutOffset;

AmplifyColorBase.UpdateDepthCurveLutOffset = getRealOffset(0x8307DC);
AmplifyColorBase.UpdateDepthCurveLut = (void(*)(void*))AmplifyColorBase.UpdateDepthCurveLutOffset;

AmplifyColorBase.CheckUpdateDepthCurveLutOffset = getRealOffset(0x830984);
AmplifyColorBase.CheckUpdateDepthCurveLut = (void(*)(void*))AmplifyColorBase.CheckUpdateDepthCurveLutOffset;

AmplifyColorBase.CreateHelperTexturesOffset = getRealOffset(0x830B98);
AmplifyColorBase.CreateHelperTextures = (void(*)(void*))AmplifyColorBase.CreateHelperTexturesOffset;

AmplifyColorBase.CheckMaterialAndShaderOffset = getRealOffset(0x830E34);
AmplifyColorBase.CheckMaterialAndShader = (bool(*)(void*, void *, monoString*))AmplifyColorBase.CheckMaterialAndShaderOffset;

AmplifyColorBase.CreateMaterialsOffset = getRealOffset(0x82F01C);
AmplifyColorBase.CreateMaterials = (bool(*)(void*))AmplifyColorBase.CreateMaterialsOffset;

AmplifyColorBase.SetMaterialKeywordOffset = getRealOffset(0x831018);
AmplifyColorBase.SetMaterialKeyword = (void(*)(void*, monoString*, bool))AmplifyColorBase.SetMaterialKeywordOffset;

AmplifyColorBase.ReleaseTexturesOffset = getRealOffset(0x82F484);
AmplifyColorBase.ReleaseTextures = (void(*)(void*))AmplifyColorBase.ReleaseTexturesOffset;

AmplifyColorBase.ValidateLutDimensionsOffset = getRealOffset(0x831298);
AmplifyColorBase.ValidateLutDimensions = (bool(*)(void *))AmplifyColorBase.ValidateLutDimensionsOffset;

AmplifyColorBase.UpdatePostEffectParamsOffset = getRealOffset(0x831464);
AmplifyColorBase.UpdatePostEffectParams = (void(*)(void*))AmplifyColorBase.UpdatePostEffectParamsOffset;

AmplifyColorBase.ComputeShaderPassOffset = getRealOffset(0x831504);
AmplifyColorBase.ComputeShaderPass = (int(*)(void*))AmplifyColorBase.ComputeShaderPassOffset;

AmplifyColorBase.OnRenderImageOffset = getRealOffset(0x83157C);
AmplifyColorBase.OnRenderImage = (void(*)(void*, void *, void *))AmplifyColorBase.OnRenderImageOffset;

AmplifyColorRenderMaskBase.OnEnableOffset = getRealOffset(0x832644);
AmplifyColorRenderMaskBase.OnEnable = (void(*)(void*))AmplifyColorRenderMaskBase.OnEnableOffset;

AmplifyColorRenderMaskBase.OnDisableOffset = getRealOffset(0x8328CC);
AmplifyColorRenderMaskBase.OnDisable = (void(*)(void*))AmplifyColorRenderMaskBase.OnDisableOffset;

AmplifyColorRenderMaskBase.DestroyCameraOffset = getRealOffset(0x8328E8);
AmplifyColorRenderMaskBase.DestroyCamera = (void(*)(void*))AmplifyColorRenderMaskBase.DestroyCameraOffset;

AmplifyColorRenderMaskBase.DestroyRenderTexturesOffset = getRealOffset(0x8329C8);
AmplifyColorRenderMaskBase.DestroyRenderTextures = (void(*)(void*))AmplifyColorRenderMaskBase.DestroyRenderTexturesOffset;

AmplifyColorRenderMaskBase.UpdateRenderTexturesOffset = getRealOffset(0x832A98);
AmplifyColorRenderMaskBase.UpdateRenderTextures = (void(*)(void*, bool))AmplifyColorRenderMaskBase.UpdateRenderTexturesOffset;

AmplifyColorRenderMaskBase.UpdateCameraPropertiesOffset = getRealOffset(0x832DF0);
AmplifyColorRenderMaskBase.UpdateCameraProperties = (void(*)(void*))AmplifyColorRenderMaskBase.UpdateCameraPropertiesOffset;

AmplifyColorRenderMaskBase.OnPreRenderOffset = getRealOffset(0x832F54);
AmplifyColorRenderMaskBase.OnPreRender = (void(*)(void*))AmplifyColorRenderMaskBase.OnPreRenderOffset;

AmplifyColorTriggerProxy.StartOffset = getRealOffset(0x8339C4);
AmplifyColorTriggerProxy.Start = (void(*)(void*))AmplifyColorTriggerProxy.StartOffset;

AmplifyColorTriggerProxy.LateUpdateOffset = getRealOffset(0x833AC4);
AmplifyColorTriggerProxy.LateUpdate = (void(*)(void*))AmplifyColorTriggerProxy.LateUpdateOffset;

AmplifyColorTriggerProxy2D.StartOffset = getRealOffset(0x833B94);
AmplifyColorTriggerProxy2D.Start = (void(*)(void*))AmplifyColorTriggerProxy2D.StartOffset;

AmplifyColorTriggerProxy2D.LateUpdateOffset = getRealOffset(0x833C94);
AmplifyColorTriggerProxy2D.LateUpdate = (void(*)(void*))AmplifyColorTriggerProxy2D.LateUpdateOffset;

AmplifyColorVolume.OnTriggerEnterOffset = getRealOffset(0x833D5C);
AmplifyColorVolume.OnTriggerEnter = (void(*)(void*, void *))AmplifyColorVolume.OnTriggerEnterOffset;

AmplifyColorVolume.OnTriggerExitOffset = getRealOffset(0x833EB0);
AmplifyColorVolume.OnTriggerExit = (void(*)(void*, void *))AmplifyColorVolume.OnTriggerExitOffset;

AmplifyColorVolume2D.OnTriggerEnter2DOffset = getRealOffset(0x83408C);
AmplifyColorVolume2D.OnTriggerEnter2D = (void(*)(void*, void *))AmplifyColorVolume2D.OnTriggerEnter2DOffset;

AmplifyColorVolume2D.OnTriggerExit2DOffset = getRealOffset(0x8341E0);
AmplifyColorVolume2D.OnTriggerExit2D = (void(*)(void*, void *))AmplifyColorVolume2D.OnTriggerExit2DOffset;

AmplifyColorVolumeBase.OnDrawGizmosOffset = getRealOffset(0x834338);
AmplifyColorVolumeBase.OnDrawGizmos = (void(*)(void*))AmplifyColorVolumeBase.OnDrawGizmosOffset;

AmplifyColorVolumeBase.OnDrawGizmosSelectedOffset = getRealOffset(0x834660);
AmplifyColorVolumeBase.OnDrawGizmosSelected = (void(*)(void*))AmplifyColorVolumeBase.OnDrawGizmosSelectedOffset;

Fix3dTextCS.StartOffset = getRealOffset(0x72315C);
Fix3dTextCS.Start = (void(*)(void*))Fix3dTextCS.StartOffset;

Fix3dTextCS.UpdateOffset = getRealOffset(0x72320C);
Fix3dTextCS.Update = (void(*)(void*))Fix3dTextCS.UpdateOffset;

FixGUITextCS.StartOffset = getRealOffset(0x723220);
FixGUITextCS.Start = (void(*)(void*))FixGUITextCS.StartOffset;

FixGUITextCS.UpdateOffset = getRealOffset(0x7232D8);
FixGUITextCS.Update = (void(*)(void*))FixGUITextCS.UpdateOffset;

SetArabicTextExample.StartOffset = getRealOffset(0x61CDFC);
SetArabicTextExample.Start = (void(*)(void*))SetArabicTextExample.StartOffset;

SetArabicTextExample.UpdateOffset = getRealOffset(0x61CEF4);
SetArabicTextExample.Update = (void(*)(void*))SetArabicTextExample.UpdateOffset;

Noise.UpdateOffset = getRealOffset(0x54725C);
Noise.Update = (float(*)(void*))Noise.UpdateOffset;

CameraShake.StartOffset = getRealOffset(0x6CFDB0);
CameraShake.Start = (void(*)(void*))CameraShake.StartOffset;

CameraShake.UpdateOffset = getRealOffset(0x6CFEC4);
CameraShake.Update = (void(*)(void*))CameraShake.UpdateOffset;

BakeryLightMesh.OnDrawGizmosSelectedOffset = getRealOffset(0x6C182C);
BakeryLightMesh.OnDrawGizmosSelected = (void(*)(void*))BakeryLightMesh.OnDrawGizmosSelectedOffset;

BakeryLightmapGroup.GetPlainStructOffset = getRealOffset(0x6C1A8C);
BakeryLightmapGroup.GetPlainStruct = (int (*)(void*))BakeryLightmapGroup.GetPlainStructOffset;

ftLightmaps.RefreshFullOffset = getRealOffset(0x9352A4);
ftLightmaps.RefreshFull = (void(*)())ftLightmaps.RefreshFullOffset;

ftLightmaps.FindInSceneOffset = getRealOffset(0x937674);
ftLightmaps.FindInScene = (void *(*)(monoString*, int))ftLightmaps.FindInSceneOffset;

ftLightmaps.GetEmptyDirectionTexOffset = getRealOffset(0x937804);
ftLightmaps.GetEmptyDirectionTex = (void *(*)(void *))ftLightmaps.GetEmptyDirectionTexOffset;

ftLightmaps.RefreshSceneOffset = getRealOffset(0x9354C4);
ftLightmaps.RefreshScene = (void(*)(int, void *, bool))ftLightmaps.RefreshSceneOffset;

ftLightmaps.UnloadSceneOffset = getRealOffset(0x937824);
ftLightmaps.UnloadScene = (void(*)(void *))ftLightmaps.UnloadSceneOffset;

ftLightmaps.RefreshScene2Offset = getRealOffset(0x937BBC);
ftLightmaps.RefreshScene2 = (void(*)(int, void *))ftLightmaps.RefreshScene2Offset;

ftLightmapsStorage.AwakeOffset = getRealOffset(0x937E80);
ftLightmapsStorage.Awake = (void(*)(void*))ftLightmapsStorage.AwakeOffset;

ftLightmapsStorage.StartOffset = getRealOffset(0x937F2C);
ftLightmapsStorage.Start = (void(*)(void*))ftLightmapsStorage.StartOffset;

ftLightmapsStorage.OnDestroyOffset = getRealOffset(0x937FCC);
ftLightmapsStorage.OnDestroy = (void(*)(void*))ftLightmapsStorage.OnDestroyOffset;

ftUniqueIDRegistry.DeregisterOffset = getRealOffset(0x9383F8);
ftUniqueIDRegistry.Deregister = (void(*)(int))ftUniqueIDRegistry.DeregisterOffset;

ftUniqueIDRegistry.RegisterOffset = getRealOffset(0x9385C0);
ftUniqueIDRegistry.Register = (void(*)(int, int))ftUniqueIDRegistry.RegisterOffset;

ftUniqueIDRegistry.GetInstanceIdOffset = getRealOffset(0x9384F8);
ftUniqueIDRegistry.GetInstanceId = (int(*)(int))ftUniqueIDRegistry.GetInstanceIdOffset;

ftUniqueIDRegistry.GetUIDOffset = getRealOffset(0x9386F8);
ftUniqueIDRegistry.GetUID = (int(*)(int))ftUniqueIDRegistry.GetUIDOffset;

CloudConnector.get_InstanceOffset = getRealOffset(0x784864);
CloudConnector.get_Instance = (void *(*)())CloudConnector.get_InstanceOffset;

CloudConnectorCore.CreateObject1Offset = getRealOffset(0x785B7C);
CloudConnectorCore.CreateObject1 = (void(*)(monoString*, monoString*, bool))CloudConnectorCore.CreateObject1Offset;

CloudConnectorCore.GetObjectsByFieldOffset = getRealOffset(0x786068);
CloudConnectorCore.GetObjectsByField = (void(*)(monoString*, monoString*, monoString*, bool))CloudConnectorCore.GetObjectsByFieldOffset;

CloudConnectorCore.GetTableOffset = getRealOffset(0x786270);
CloudConnectorCore.GetTable = (void(*)(monoString*, bool))CloudConnectorCore.GetTableOffset;

CloudConnectorCore.GetAllTablesOffset = getRealOffset(0x786424);
CloudConnectorCore.GetAllTables = (void(*)(bool))CloudConnectorCore.GetAllTablesOffset;

CloudConnectorCore.UpdateObjectsOffset = getRealOffset(0x786574);
CloudConnectorCore.UpdateObjects = (void(*)(monoString*, monoString*, monoString*, monoString*, monoString*, bool))CloudConnectorCore.UpdateObjectsOffset;

CloudConnectorCore.DeleteObjectsOffset = getRealOffset(0x786820);
CloudConnectorCore.DeleteObjects = (void(*)(monoString*, monoString*, monoString*, bool))CloudConnectorCore.DeleteObjectsOffset;

CloudConnectorCore.UnpackJsonOffset = getRealOffset(0x786A28);
CloudConnectorCore.UnpackJson = (void(*)(monoString*))CloudConnectorCore.UnpackJsonOffset;

CloudConnectorCore.ProcessResponseOffset = getRealOffset(0x7852EC);
CloudConnectorCore.ProcessResponse = (void(*)(monoString*, float))CloudConnectorCore.ProcessResponseOffset;

CloudConnectorCore.UpdateStatusOffset = getRealOffset(0x784E14);
CloudConnectorCore.UpdateStatus = (void(*)(monoString*))CloudConnectorCore.UpdateStatusOffset;

GSFU_Demo_Runtime.OnEnableOffset = getRealOffset(0x73164C);
GSFU_Demo_Runtime.OnEnable = (void(*)(void*))GSFU_Demo_Runtime.OnEnableOffset;

GSFU_Demo_Runtime.OnDisableOffset = getRealOffset(0x7317AC);
GSFU_Demo_Runtime.OnDisable = (void(*)(void*))GSFU_Demo_Runtime.OnDisableOffset;

GSFU_Demo_Runtime.OnGUIOffset = getRealOffset(0x73190C);
GSFU_Demo_Runtime.OnGUI = (void(*)(void*))GSFU_Demo_Runtime.OnGUIOffset;

GSFU_Demo_Runtime.CreatePlayerOffset = getRealOffset(0x731D80);
GSFU_Demo_Runtime.CreatePlayer = (void *(*)(void*))GSFU_Demo_Runtime.CreatePlayerOffset;

GSFU_Demo_Runtime.ParseResponseOffset = getRealOffset(0x732418);
GSFU_Demo_Runtime.ParseResponse = (void(*)(void*, monoString*))GSFU_Demo_Runtime.ParseResponseOffset;

GSFU_Demo_Utils.CreatePlayerTableOffset = getRealOffset(0x73255C);
GSFU_Demo_Utils.CreatePlayerTable = (void(*)(bool))GSFU_Demo_Utils.CreatePlayerTableOffset;

GSFU_Demo_Utils.SaveGandalfOffset = getRealOffset(0x731DEC);
GSFU_Demo_Utils.SaveGandalf = (void(*)(bool))GSFU_Demo_Utils.SaveGandalfOffset;

GSFU_Demo_Utils.UpdateGandalfOffset = getRealOffset(0x731F3C);
GSFU_Demo_Utils.UpdateGandalf = (void(*)(bool))GSFU_Demo_Utils.UpdateGandalfOffset;

GSFU_Demo_Utils.RetrieveGandalfOffset = getRealOffset(0x732088);
GSFU_Demo_Utils.RetrieveGandalf = (void(*)(bool))GSFU_Demo_Utils.RetrieveGandalfOffset;

GSFU_Demo_Utils.GetAllPlayersOffset = getRealOffset(0x7321B4);
GSFU_Demo_Utils.GetAllPlayers = (void(*)(bool))GSFU_Demo_Utils.GetAllPlayersOffset;

GSFU_Demo_Utils.GetAllTablesOffset = getRealOffset(0x7322B4);
GSFU_Demo_Utils.GetAllTables = (void(*)(bool))GSFU_Demo_Utils.GetAllTablesOffset;

CrazyAdsDemoPlayer.StartOffset = getRealOffset(0x8218D4);
CrazyAdsDemoPlayer.Start = (void(*)(void*))CrazyAdsDemoPlayer.StartOffset;

CrazyAdsDemoPlayer.FixedUpdateOffset = getRealOffset(0x821974);
CrazyAdsDemoPlayer.FixedUpdate = (void(*)(void*))CrazyAdsDemoPlayer.FixedUpdateOffset;

CrazyAdsDemoPlayer.respawnOffset = getRealOffset(0x821B24);
CrazyAdsDemoPlayer.respawn = (void(*)(void*))CrazyAdsDemoPlayer.respawnOffset;

CrazyBannerDemoController.AwakeOffset = getRealOffset(0x822408);
CrazyBannerDemoController.Awake = (void(*)(void*))CrazyBannerDemoController.AwakeOffset;

CrazyBannerDemoController.UpdateBannersDisplayOffset = getRealOffset(0x82258C);
CrazyBannerDemoController.UpdateBannersDisplay = (void(*)(void*))CrazyBannerDemoController.UpdateBannersDisplayOffset;

CrazyBannerDemoController.DisableLastBannerOffset = getRealOffset(0x8225AC);
CrazyBannerDemoController.DisableLastBanner = (void(*)(void*))CrazyBannerDemoController.DisableLastBannerOffset;

CrazyBannerDemoController.AddBannerOffset = getRealOffset(0x82268C);
CrazyBannerDemoController.AddBanner = (void(*)(void*))CrazyBannerDemoController.AddBannerOffset;

CrazyBannerDemoController.MarkAllForRefreshOffset = getRealOffset(0x822840);
CrazyBannerDemoController.MarkAllForRefresh = (void(*)(void*))CrazyBannerDemoController.MarkAllForRefreshOffset;

CrazyBannerDemoController.BannerErrorOffset = getRealOffset(0x822918);
CrazyBannerDemoController.BannerError = (void(*)(void*, monoString*, monoString*))CrazyBannerDemoController.BannerErrorOffset;

CrazyBannerDemoController.BannerRenderedOffset = getRealOffset(0x8229D8);
CrazyBannerDemoController.BannerRendered = (void(*)(void*, monoString*))CrazyBannerDemoController.BannerRenderedOffset;

CrazyAds.get_InstanceOffset = getRealOffset(0x81D084);
CrazyAds.get_Instance = (void *(*)())CrazyAds.get_InstanceOffset;

CrazyAds.InitializeOffset = getRealOffset(0x81D244);
CrazyAds.Initialize = (void(*)(void*))CrazyAds.InitializeOffset;

CrazyAds.get_IsRunningAdOffset = getRealOffset(0x81D9AC);
CrazyAds.get_IsRunningAd = (bool(*)(void*))CrazyAds.get_IsRunningAdOffset;

CrazyAds.set_IsRunningAdOffset = getRealOffset(0x81D9B4);
CrazyAds.set_IsRunningAd = (void(*)(void*, bool))CrazyAds.set_IsRunningAdOffset;

CrazyAds.beginAdBreakRewardedOffset = getRealOffset(0x81DBD8);
CrazyAds.beginAdBreakRewarded = (void(*)(void*, void *, void *))CrazyAds.beginAdBreakRewardedOffset;

CrazyAds.beginAdBreakOffset = getRealOffset(0x81DBF4);
CrazyAds.beginAdBreak = (void(*)(void*, void *, void *, int))CrazyAds.beginAdBreakOffset;

CrazyAds.completedAdRequestOffset = getRealOffset(0x81DFCC);
CrazyAds.completedAdRequest = (void(*)(void*))CrazyAds.completedAdRequestOffset;

CrazyAds.completedAdRequest1Offset = getRealOffset(0x81DFD4);
CrazyAds.completedAdRequest1 = (void(*)(void*, int))CrazyAds.completedAdRequest1Offset;

CrazyAds.AdErrorOffset = getRealOffset(0x81E520);
CrazyAds.AdError = (void(*)(void*, monoString*))CrazyAds.AdErrorOffset;

CrazyAds.AdFinishedOffset = getRealOffset(0x81E5C8);
CrazyAds.AdFinished = (void(*)(void*))CrazyAds.AdFinishedOffset;

CrazyAds.AdStartedOffset = getRealOffset(0x81E670);
CrazyAds.AdStarted = (void(*)(void*))CrazyAds.AdStartedOffset;

CrazyAds.updateBannersDisplayOffset = getRealOffset(0x81E718);
CrazyAds.updateBannersDisplay = (void(*)(void*))CrazyAds.updateBannersDisplayOffset;

CrazyAds.listenToBannerRenderedOffset = getRealOffset(0x81EABC);
CrazyAds.listenToBannerRendered = (void(*)(void*, void *))CrazyAds.listenToBannerRenderedOffset;

CrazyAds.listenToBannerErrorOffset = getRealOffset(0x81EBC0);
CrazyAds.listenToBannerError = (void(*)(void*, void *))CrazyAds.listenToBannerErrorOffset;

CrazyAds.BannerErrorOffset = getRealOffset(0x81ECC4);
CrazyAds.BannerError = (void(*)(void*, monoString*))CrazyAds.BannerErrorOffset;

CrazyAds.BannerRenderedOffset = getRealOffset(0x81ED74);
CrazyAds.BannerRendered = (void(*)(void*, monoString*))CrazyAds.BannerRenderedOffset;

CrazyAds.Initializeb__3_0Offset = getRealOffset(0x81EE3C);
CrazyAds.Initializeb__3_0 = (void(*)(void*, void *))CrazyAds.Initializeb__3_0Offset;

CrazyAds.Initializeb__3_1Offset = getRealOffset(0x81EF14);
CrazyAds.Initializeb__3_1 = (void(*)(void*, void *))CrazyAds.Initializeb__3_1Offset;

CrazyAds.Initializeb__3_2Offset = getRealOffset(0x81EF18);
CrazyAds.Initializeb__3_2 = (void(*)(void*, void *))CrazyAds.Initializeb__3_2Offset;

CrazyAds.Initializeb__3_3Offset = getRealOffset(0x81EF1C);
CrazyAds.Initializeb__3_3 = (void(*)(void*, void *))CrazyAds.Initializeb__3_3Offset;

CrazyAds.Initializeb__3_4Offset = getRealOffset(0x81EFE8);
CrazyAds.Initializeb__3_4 = (void(*)(void*, void *))CrazyAds.Initializeb__3_4Offset;

CrazyBanner.get_SizeOffset = getRealOffset(0x821CE0);
CrazyBanner.get_Size = (int (*)(void*))CrazyBanner.get_SizeOffset;

CrazyBanner.set_SizeOffset = getRealOffset(0x821CE8);
CrazyBanner.set_Size = (void(*)(void*, int))CrazyBanner.set_SizeOffset;

CrazyBanner.get_PositionOffset = getRealOffset(0x81F380);
CrazyBanner.get_Position = (Vector2 (*)(void*))CrazyBanner.get_PositionOffset;

CrazyBanner.set_PositionOffset = getRealOffset(0x821E48);
CrazyBanner.set_Position = (void(*)(void*, Vector2))CrazyBanner.set_PositionOffset;

CrazyBanner.SimulateRenderOffset = getRealOffset(0x822054);
CrazyBanner.SimulateRender = (void(*)(void*))CrazyBanner.SimulateRenderOffset;

CrazyBanner.MarkForRefreshOffset = getRealOffset(0x822164);
CrazyBanner.MarkForRefresh = (void(*)(void*))CrazyBanner.MarkForRefreshOffset;

CrazyBanner.MarkVisibleOffset = getRealOffset(0x822210);
CrazyBanner.MarkVisible = (void(*)(void*, bool))CrazyBanner.MarkVisibleOffset;

CrazyBanner.isVisibleOffset = getRealOffset(0x822218);
CrazyBanner.isVisible = (bool(*)(void*))CrazyBanner.isVisibleOffset;

CrazyBanner.AwakeOffset = getRealOffset(0x822220);
CrazyBanner.Awake = (void(*)(void*))CrazyBanner.AwakeOffset;

CrazyBanner.OnDestroyOffset = getRealOffset(0x822348);
CrazyBanner.OnDestroy = (void(*)(void*))CrazyBanner.OnDestroyOffset;

ButtonActions.HappytimeOffset = getRealOffset(0x6CBBF8);
ButtonActions.Happytime = (void(*)(void*))ButtonActions.HappytimeOffset;

ButtonActions.GameplayStartOffset = getRealOffset(0x6CBC28);
ButtonActions.GameplayStart = (void(*)(void*))ButtonActions.GameplayStartOffset;

ButtonActions.GameplayStopOffset = getRealOffset(0x6CBC58);
ButtonActions.GameplayStop = (void(*)(void*))ButtonActions.GameplayStopOffset;

ButtonActions.InviteLinkOffset = getRealOffset(0x6CBC88);
ButtonActions.InviteLink = (void(*)(void*))ButtonActions.InviteLinkOffset;

ButtonActions.ParseInviteLinkOffset = getRealOffset(0x6CBDE8);
ButtonActions.ParseInviteLink = (void(*)(void*))ButtonActions.ParseInviteLinkOffset;

CrazyEvents.get_InstanceOffset = getRealOffset(0x822EC8);
CrazyEvents.get_Instance = (void *(*)())CrazyEvents.get_InstanceOffset;

CrazyEvents.InitializeOffset = getRealOffset(0x823084);
CrazyEvents.Initialize = (void(*)(void*))CrazyEvents.InitializeOffset;

CrazyEvents.HappyTimeOffset = getRealOffset(0x823138);
CrazyEvents.HappyTime = (void(*)(void*))CrazyEvents.HappyTimeOffset;

CrazyEvents.GameplayStartOffset = getRealOffset(0x8232B0);
CrazyEvents.GameplayStart = (void(*)(void*))CrazyEvents.GameplayStartOffset;

CrazyEvents.GameplayStopOffset = getRealOffset(0x823428);
CrazyEvents.GameplayStop = (void(*)(void*))CrazyEvents.GameplayStopOffset;

CrazyEvents.IsInviteLinkOffset = getRealOffset(0x823900);
CrazyEvents.IsInviteLink = (bool(*)(void*))CrazyEvents.IsInviteLinkOffset;

CrazyEvents.GetInviteLinkParameterOffset = getRealOffset(0x823A0C);
CrazyEvents.GetInviteLinkParameter = (monoString *(*)(void*, monoString*))CrazyEvents.GetInviteLinkParameterOffset;

CrazyEvents.CopyToClipboardOffset = getRealOffset(0x823B20);
CrazyEvents.CopyToClipboard = (void(*)(void*, monoString*))CrazyEvents.CopyToClipboardOffset;

SiteLock.StartOffset = getRealOffset(0x573A90);
SiteLock.Start = (void(*)(void*))SiteLock.StartOffset;

SiteLock.IsOnValidHostOffset = getRealOffset(0x573D98);
SiteLock.IsOnValidHost = (bool(*)(void*))SiteLock.IsOnValidHostOffset;

SiteLock.IsOnValidLocalHostOffset = getRealOffset(0x573DDC);
SiteLock.IsOnValidLocalHost = (bool(*)(void*))SiteLock.IsOnValidLocalHostOffset;

SiteLock.IsOnValidRemoteHostOffset = getRealOffset(0x573DF4);
SiteLock.IsOnValidRemoteHost = (bool(*)(void*))SiteLock.IsOnValidRemoteHostOffset;

SiteLock.CrashOffset = getRealOffset(0x573D94);
SiteLock.Crash = (void(*)(void*, int))SiteLock.CrashOffset;

CrazySDK.get_InstanceOffset = getRealOffset(0x81D46C);
CrazySDK.get_Instance = (void *(*)())CrazySDK.get_InstanceOffset;

CrazySDK.InitializeOffset = getRealOffset(0x81D6B0);
CrazySDK.Initialize = (void(*)(void*))CrazySDK.InitializeOffset;

CrazySDK.IsInitializedOffset = getRealOffset(0x820960);
CrazySDK.IsInitialized = (bool(*)(void*))CrazySDK.IsInitializedOffset;

CrazySDK.InitCallbackOffset = getRealOffset(0x823F9C);
CrazySDK.InitCallback = (void(*)(void*, monoString*))CrazySDK.InitCallbackOffset;

CrazySDK.RequestAdOffset = getRealOffset(0x81DE40);
CrazySDK.RequestAd = (void(*)(void*, int))CrazySDK.RequestAdOffset;

CrazySDK.HappyTimeOffset = getRealOffset(0x8231C0);
CrazySDK.HappyTime = (void(*)(void*))CrazySDK.HappyTimeOffset;

CrazySDK.GameplayStartOffset = getRealOffset(0x823338);
CrazySDK.GameplayStart = (void(*)(void*))CrazySDK.GameplayStartOffset;

CrazySDK.GameplayStopOffset = getRealOffset(0x8234B0);
CrazySDK.GameplayStop = (void(*)(void*))CrazySDK.GameplayStopOffset;

CrazySDK.CopyToClipboardOffset = getRealOffset(0x823B9C);
CrazySDK.CopyToClipboard = (void(*)(void*, monoString*))CrazySDK.CopyToClipboardOffset;

CrazySDK.IsInviteLinkOffset = getRealOffset(0x823984);
CrazySDK.IsInviteLink = (bool(*)(void*))CrazySDK.IsInviteLinkOffset;

CrazySDK.GetInviteLinkParameterOffset = getRealOffset(0x823A8C);
CrazySDK.GetInviteLinkParameter = (monoString *(*)(void*, monoString*))CrazySDK.GetInviteLinkParameterOffset;

CrazySDK.AddEventListenerOffset = getRealOffset(0x81D7DC);
CrazySDK.AddEventListener = (void(*)(void*, int, void *))CrazySDK.AddEventListenerOffset;

CrazySDK.RemoveEventListenerOffset = getRealOffset(0x824340);
CrazySDK.RemoveEventListener = (void(*)(void*, int, void *))CrazySDK.RemoveEventListenerOffset;

CrazySDK.RemoveEventListenersForEventOffset = getRealOffset(0x8244AC);
CrazySDK.RemoveEventListenersForEvent = (void(*)(void*, int))CrazySDK.RemoveEventListenersForEventOffset;

CrazySDK.RemoveAllEventListenersOffset = getRealOffset(0x8245B0);
CrazySDK.RemoveAllEventListeners = (void(*)(void*))CrazySDK.RemoveAllEventListenersOffset;

CrazySDK.AdEventOffset = getRealOffset(0x824040);
CrazySDK.AdEvent = (void(*)(void*, monoString*))CrazySDK.AdEventOffset;

CrazySDK.HandleEventOffset = getRealOffset(0x824634);
CrazySDK.HandleEvent = (void(*)(void*, void *))CrazySDK.HandleEventOffset;

CrazySDK.CallCallbacksOffset = getRealOffset(0x824668);
CrazySDK.CallCallbacks = (void(*)(void*, void *))CrazySDK.CallCallbacksOffset;

CrazySDK.HasAdblockOffset = getRealOffset(0x824CC4);
CrazySDK.HasAdblock = (bool(*)(void*))CrazySDK.HasAdblockOffset;

CrazySDK.AdblockDetectionExecutedOffset = getRealOffset(0x824D30);
CrazySDK.AdblockDetectionExecuted = (bool(*)(void*))CrazySDK.AdblockDetectionExecutedOffset;

CrazySDK.AdblockDetectedOffset = getRealOffset(0x824D38);
CrazySDK.AdblockDetected = (void(*)(void*))CrazySDK.AdblockDetectedOffset;

CrazySDK.AdblockNotDetectedOffset = getRealOffset(0x824E20);
CrazySDK.AdblockNotDetected = (void(*)(void*))CrazySDK.AdblockNotDetectedOffset;

CrazySDK.AdblockOffset = getRealOffset(0x824D40);
CrazySDK.Adblock = (void(*)(void*, bool))CrazySDK.AdblockOffset;

CrazySDK.DebugLogOffset = getRealOffset(0x81DD64);
CrazySDK.DebugLog = (void(*)(void*, monoString*))CrazySDK.DebugLogOffset;

JsonHelper.FixJsonOffset = getRealOffset(0x64F700);
JsonHelper.FixJson = (monoString *(*)(monoString*))JsonHelper.FixJsonOffset;

DownloadObbExample.OnGUIOffset = getRealOffset(0x67CA00);
DownloadObbExample.OnGUI = (void(*)(void*))DownloadObbExample.OnGUIOffset;

Viewer.StartOffset = getRealOffset(0x897ADC);
Viewer.Start = (void(*)(void*))Viewer.StartOffset;

Viewer.UpdateOffset = getRealOffset(0x897F88);
Viewer.Update = (void(*)(void*))Viewer.UpdateOffset;

Viewer.OnGUIOffset = getRealOffset(0x89834C);
Viewer.OnGUI = (void(*)(void*))Viewer.OnGUIOffset;

Viewer.SetActiveObjectOffset = getRealOffset(0x897C50);
Viewer.SetActiveObject = (void(*)(void*, void *))Viewer.SetActiveObjectOffset;

Viewer.UpdateMeshInfoOffset = getRealOffset(0x898AB8);
Viewer.UpdateMeshInfo = (void(*)(void*))Viewer.UpdateMeshInfoOffset;

TonemappingLog.CheckResourcesOffset = getRealOffset(0x5D0AE0);
TonemappingLog.CheckResources = (bool(*)(void*))TonemappingLog.CheckResourcesOffset;

TonemappingLog.UpdateCurveOffset = getRealOffset(0x5D0C60);
TonemappingLog.UpdateCurve = (void(*)(void*))TonemappingLog.UpdateCurveOffset;

TonemappingLog.ValidDimensionsOffset = getRealOffset(0x5D10B8);
TonemappingLog.ValidDimensions = (bool(*)(void*, void *))TonemappingLog.ValidDimensionsOffset;

TonemappingLog.SetIdentityLutOffset = getRealOffset(0x5D11F4);
TonemappingLog.SetIdentityLut = (void(*)(void*))TonemappingLog.SetIdentityLutOffset;

TonemappingLog.ConvertOffset = getRealOffset(0x5D1460);
TonemappingLog.Convert = (void(*)(void*, void *))TonemappingLog.ConvertOffset;

TonemappingLog.OnDisableOffset = getRealOffset(0x5D18E4);
TonemappingLog.OnDisable = (void(*)(void*))TonemappingLog.OnDisableOffset;

TonemappingLog.CreateInternalRenderTextureOffset = getRealOffset(0x5D1AF4);
TonemappingLog.CreateInternalRenderTexture = (bool(*)(void*))TonemappingLog.CreateInternalRenderTextureOffset;

TonemappingLog.OnRenderImageOffset = getRealOffset(0x5D1C00);
TonemappingLog.OnRenderImage = (void(*)(void*, void *, void *))TonemappingLog.OnRenderImageOffset;

TonemappingLut.HasCacheChangedOffset = getRealOffset(0x5D28A0);
TonemappingLut.HasCacheChanged = (bool(*)(void*))TonemappingLut.HasCacheChangedOffset;

TonemappingLut.UpdateCacheOffset = getRealOffset(0x5D2E80);
TonemappingLut.UpdateCache = (void(*)(void*))TonemappingLut.UpdateCacheOffset;

TonemappingLut.CheckResourcesOffset = getRealOffset(0x5D30F8);
TonemappingLut.CheckResources = (bool(*)(void*))TonemappingLut.CheckResourcesOffset;

TonemappingLut.GetHighlightRecoveryOffset = getRealOffset(0x5D315C);
TonemappingLut.GetHighlightRecovery = (float(*)(void*))TonemappingLut.GetHighlightRecoveryOffset;

TonemappingLut.GetWhitePointOffset = getRealOffset(0x5D31F0);
TonemappingLut.GetWhitePoint = (float(*)(void*))TonemappingLut.GetWhitePointOffset;

TonemappingLut.LutToLinOffset = getRealOffset(0x5D3280);
TonemappingLut.LutToLin = (float(*)(void*, float, float))TonemappingLut.LutToLinOffset;

TonemappingLut.LinToLutOffset = getRealOffset(0x5D32A4);
TonemappingLut.LinToLut = (float(*)(void*, float, float))TonemappingLut.LinToLutOffset;

TonemappingLut.LiftGammaGainOffset = getRealOffset(0x5D3354);
TonemappingLut.LiftGammaGain = (float(*)(void*, float, float, float, float))TonemappingLut.LiftGammaGainOffset;

TonemappingLut.LogContrastOffset = getRealOffset(0x5D3424);
TonemappingLut.LogContrast = (float(*)(void*, float, float, float))TonemappingLut.LogContrastOffset;

TonemappingLut.NormalizeColorOffset = getRealOffset(0x5D34EC);
TonemappingLut.NormalizeColor = (Color (*)(void*, Color))TonemappingLut.NormalizeColorOffset;

TonemappingLut.GetLutAOffset = getRealOffset(0x5D3578);
TonemappingLut.GetLutA = (float(*)(void*))TonemappingLut.GetLutAOffset;

TonemappingLut.UpdateCurveOffset = getRealOffset(0x5D3584);
TonemappingLut.UpdateCurve = (void(*)(void*))TonemappingLut.UpdateCurveOffset;

TonemappingLut.EvaluateCurveOffset = getRealOffset(0x5D3930);
TonemappingLut.EvaluateCurve = (float(*)(void*, float))TonemappingLut.EvaluateCurveOffset;

TonemappingLut.SetIdentityLutOffset = getRealOffset(0x5D3AD0);
TonemappingLut.SetIdentityLut = (void(*)(void*))TonemappingLut.SetIdentityLutOffset;

TonemappingLut.ClampDimOffset = getRealOffset(0x5D3C70);
TonemappingLut.ClampDim = (int(*)(void*, int))TonemappingLut.ClampDimOffset;

TonemappingLut.SampleLutNearestOffset = getRealOffset(0x5D3C84);
TonemappingLut.SampleLutNearest = (Color (*)(void*, int, int, int))TonemappingLut.SampleLutNearestOffset;

TonemappingLut.SampleLutNearestUnsafeOffset = getRealOffset(0x5D3D04);
TonemappingLut.SampleLutNearestUnsafe = (Color (*)(void*, int, int, int))TonemappingLut.SampleLutNearestUnsafeOffset;

TonemappingLut.SampleLutLinearOffset = getRealOffset(0x5D3D64);
TonemappingLut.SampleLutLinear = (Color (*)(void*, float, float, float))TonemappingLut.SampleLutLinearOffset;

TonemappingLut.UpdateUserLutOffset = getRealOffset(0x5D4288);
TonemappingLut.UpdateUserLut = (void(*)(void*))TonemappingLut.UpdateUserLutOffset;

TonemappingLut.EvalFilmicHelperOffset = getRealOffset(0x5D46FC);
TonemappingLut.EvalFilmicHelper = (float(*)(void*, float, float, int, int, int, float, float, float))TonemappingLut.EvalFilmicHelperOffset;

TonemappingLut.EvalCurveGradingHelperOffset = getRealOffset(0x5D4974);
TonemappingLut.EvalCurveGradingHelper = (float(*)(void*, float, float, float, float))TonemappingLut.EvalCurveGradingHelperOffset;

TonemappingLut.CreateFilmicCurveHelperOffset = getRealOffset(0x5D4A68);
TonemappingLut.CreateFilmicCurveHelper = (void(*)(void*, float, int, int, int, float, float, float, float, float, float, float, float, float, float, float, float))TonemappingLut.CreateFilmicCurveHelperOffset;

TonemappingLut.UpdateLutOffset = getRealOffset(0x5D5110);
TonemappingLut.UpdateLut = (void(*)(void*))TonemappingLut.UpdateLutOffset;

TonemappingLut.ValidDimensionsOffset = getRealOffset(0x5D45C0);
TonemappingLut.ValidDimensions = (bool(*)(void*, void *))TonemappingLut.ValidDimensionsOffset;

TonemappingLut.ConvertOffset = getRealOffset(0x5D5C64);
TonemappingLut.Convert = (void(*)(void*, void *))TonemappingLut.ConvertOffset;

TonemappingLut.OnDisableOffset = getRealOffset(0x5D5C68);
TonemappingLut.OnDisable = (void(*)(void*))TonemappingLut.OnDisableOffset;

TonemappingLut.CreateInternalRenderTextureOffset = getRealOffset(0x5D5E78);
TonemappingLut.CreateInternalRenderTexture = (bool(*)(void*))TonemappingLut.CreateInternalRenderTextureOffset;

TonemappingLut.OnRenderImageOffset = getRealOffset(0x5D5F84);
TonemappingLut.OnRenderImage = (void(*)(void*, void *, void *))TonemappingLut.OnRenderImageOffset;

FPSDemoGUI.StartOffset = getRealOffset(0x691E3C);
FPSDemoGUI.Start = (void(*)(void*))FPSDemoGUI.StartOffset;

FPSDemoGUI.OnGUIOffset = getRealOffset(0x6920DC);
FPSDemoGUI.OnGUI = (void(*)(void*))FPSDemoGUI.OnGUIOffset;

FPSDemoGUI.ChangeCurrentOffset = getRealOffset(0x692494);
FPSDemoGUI.ChangeCurrent = (void(*)(void*, int))FPSDemoGUI.ChangeCurrentOffset;

FPSDemoReactivator.StartOffset = getRealOffset(0x692854);
FPSDemoReactivator.Start = (void(*)(void*))FPSDemoReactivator.StartOffset;

FPSDemoReactivator.ReactivateOffset = getRealOffset(0x6928C8);
FPSDemoReactivator.Reactivate = (void(*)(void*))FPSDemoReactivator.ReactivateOffset;

FPSFireManager.UpdateOffset = getRealOffset(0x692940);
FPSFireManager.Update = (void(*)(void*))FPSFireManager.UpdateOffset;

FPSFireManager.GetImpactEffectOffset = getRealOffset(0x692C70);
FPSFireManager.GetImpactEffect = (void *(*)(void*, void *))FPSFireManager.GetImpactEffectOffset;

MouseLock.StartOffset = getRealOffset(0x528B54);
MouseLock.Start = (void(*)(void*))MouseLock.StartOffset;

MouseLock.UpdateOffset = getRealOffset(0x528B58);
MouseLock.Update = (void(*)(void*))MouseLock.UpdateOffset;

FPSLightCurves.AwakeOffset = getRealOffset(0x692E20);
FPSLightCurves.Awake = (void(*)(void*))FPSLightCurves.AwakeOffset;

FPSLightCurves.OnEnableOffset = getRealOffset(0x692EC4);
FPSLightCurves.OnEnable = (void(*)(void*))FPSLightCurves.OnEnableOffset;

FPSLightCurves.UpdateOffset = getRealOffset(0x692EE8);
FPSLightCurves.Update = (void(*)(void*))FPSLightCurves.UpdateOffset;

FPSParticleSystemScaler.StartOffset = getRealOffset(0x692FE4);
FPSParticleSystemScaler.Start = (void(*)(void*))FPSParticleSystemScaler.StartOffset;

FPSParticleSystemScaler.UpdateOffset = getRealOffset(0x692FF0);
FPSParticleSystemScaler.Update = (void(*)(void*))FPSParticleSystemScaler.UpdateOffset;

FPSRandomRotateAngle.AwakeOffset = getRealOffset(0x693004);
FPSRandomRotateAngle.Awake = (void(*)(void*))FPSRandomRotateAngle.AwakeOffset;

FPSRandomRotateAngle.OnEnableOffset = getRealOffset(0x693020);
FPSRandomRotateAngle.OnEnable = (void(*)(void*))FPSRandomRotateAngle.OnEnableOffset;

FPSShaderColorGradient.StartOffset = getRealOffset(0x693168);
FPSShaderColorGradient.Start = (void(*)(void*))FPSShaderColorGradient.StartOffset;

FPSShaderColorGradient.OnEnableOffset = getRealOffset(0x6934C8);
FPSShaderColorGradient.OnEnable = (void(*)(void*))FPSShaderColorGradient.OnEnableOffset;

FPSShaderColorGradient.UpdateOffset = getRealOffset(0x6934EC);
FPSShaderColorGradient.Update = (void(*)(void*))FPSShaderColorGradient.UpdateOffset;

FPSShaderFloatCurves.StartOffset = getRealOffset(0x693680);
FPSShaderFloatCurves.Start = (void(*)(void*))FPSShaderFloatCurves.StartOffset;

FPSShaderFloatCurves.OnEnableOffset = getRealOffset(0x69399C);
FPSShaderFloatCurves.OnEnable = (void(*)(void*))FPSShaderFloatCurves.OnEnableOffset;

FPSShaderFloatCurves.UpdateOffset = getRealOffset(0x6939C0);
FPSShaderFloatCurves.Update = (void(*)(void*))FPSShaderFloatCurves.UpdateOffset;

Ball.AwakeOffset = getRealOffset(0x6C1CD8);
Ball.Awake = (void(*)(void*))Ball.AwakeOffset;

Ball.UpdateOffset = getRealOffset(0x6C1D54);
Ball.Update = (void(*)(void*))Ball.UpdateOffset;

Ball.OnCollisionEnterOffset = getRealOffset(0x6C1FEC);
Ball.OnCollisionEnter = (void(*)(void*, void *))Ball.OnCollisionEnterOffset;

MyDecalRenderers.get_SharedInstanceOffset = getRealOffset(0x529D60);
MyDecalRenderers.get_SharedInstance = (void *(*)())MyDecalRenderers.get_SharedInstanceOffset;

MyDecalRenderers.OnApplicationQuitOffset = getRealOffset(0x529F38);
MyDecalRenderers.OnApplicationQuit = (void(*)(void*))MyDecalRenderers.OnApplicationQuitOffset;

RotateCamera.AwakeOffset = getRealOffset(0x6124E8);
RotateCamera.Awake = (void(*)(void*))RotateCamera.AwakeOffset;

RotateCamera.FixedUpdateOffset = getRealOffset(0x612548);
RotateCamera.FixedUpdate = (void(*)(void*))RotateCamera.FixedUpdateOffset;

Snail.AwakeOffset = getRealOffset(0x578234);
Snail.Awake = (void(*)(void*))Snail.AwakeOffset;

Snail.OnCollisionEnterOffset = getRealOffset(0x578394);
Snail.OnCollisionEnter = (void(*)(void*, void *))Snail.OnCollisionEnterOffset;

DecalSpawner.AwakeOffset = getRealOffset(0x5A715C);
DecalSpawner.Awake = (void(*)(void*))DecalSpawner.AwakeOffset;

DecalSpawner.UpdateOffset = getRealOffset(0x5A71F4);
DecalSpawner.Update = (void(*)(void*))DecalSpawner.UpdateOffset;

DecalSpawner.SpawnDecalOffset = getRealOffset(0x5A72AC);
DecalSpawner.SpawnDecal = (void(*)(void*, Vector2))DecalSpawner.SpawnDecalOffset;

FighterJetShadow.AwakeOffset = getRealOffset(0x71CA20);
FighterJetShadow.Awake = (void(*)(void*))FighterJetShadow.AwakeOffset;

FighterJetShadow.UpdateOffset = getRealOffset(0x71CCB0);
FighterJetShadow.Update = (void(*)(void*))FighterJetShadow.UpdateOffset;

FighterJetShadowDemo.AwakeOffset = getRealOffset(0x71D220);
FighterJetShadowDemo.Awake = (void(*)(void*))FighterJetShadowDemo.AwakeOffset;

FighterJetShadowDemo.UpdateOffset = getRealOffset(0x71D4D4);
FighterJetShadowDemo.Update = (void(*)(void*))FighterJetShadowDemo.UpdateOffset;

FighterJetShadowDemo.OnGUIOffset = getRealOffset(0x71D718);
FighterJetShadowDemo.OnGUI = (void(*)(void*))FighterJetShadowDemo.OnGUIOffset;

FastDecalsAtlas.GetIndexByNameOffset = getRealOffset(0x71760C);
FastDecalsAtlas.GetIndexByName = (int(*)(void*, monoString*))FastDecalsAtlas.GetIndexByNameOffset;

FastDecalsAtlas.GetNameByIndexOffset = getRealOffset(0x71785C);
FastDecalsAtlas.GetNameByIndex = (monoString *(*)(void*, int))FastDecalsAtlas.GetNameByIndexOffset;

FastDecalsAtlasRenderer.AwakeOffset = getRealOffset(0x7178C4);
FastDecalsAtlasRenderer.Awake = (void(*)(void*))FastDecalsAtlasRenderer.AwakeOffset;

FastDecalsAtlasRenderer.DrawDecalOffset = getRealOffset(0x717F00);
FastDecalsAtlasRenderer.DrawDecal = (void(*)(void*, Vector3, float, int))FastDecalsAtlasRenderer.DrawDecalOffset;

FastDecalsAtlasRenderer.DrawDecal1Offset = getRealOffset(0x717F68);
FastDecalsAtlasRenderer.DrawDecal1 = (void(*)(void*, Vector3, Vector2, int))FastDecalsAtlasRenderer.DrawDecal1Offset;

FastDecalsAtlasRenderer.DrawDecal2Offset = getRealOffset(0x718120);
FastDecalsAtlasRenderer.DrawDecal2 = (void(*)(void*, Vector3, float, int, int))FastDecalsAtlasRenderer.DrawDecal2Offset;

FastDecalsAtlasRenderer.DrawDecal3Offset = getRealOffset(0x71819C);
FastDecalsAtlasRenderer.DrawDecal3 = (void(*)(void*, Vector3, Vector2, int, int))FastDecalsAtlasRenderer.DrawDecal3Offset;

FastDecalsAtlasRenderer.DrawDecal4Offset = getRealOffset(0x718280);
FastDecalsAtlasRenderer.DrawDecal4 = (void(*)(void*, Vector3, float, int, Vector3))FastDecalsAtlasRenderer.DrawDecal4Offset;

FastDecalsAtlasRenderer.DrawDecal5Offset = getRealOffset(0x718300);
FastDecalsAtlasRenderer.DrawDecal5 = (void(*)(void*, Vector3, Vector2, int, Vector3))FastDecalsAtlasRenderer.DrawDecal5Offset;

FastDecalsAtlasRenderer.DrawDecal6Offset = getRealOffset(0x718458);
FastDecalsAtlasRenderer.DrawDecal6 = (void(*)(void*, Vector3, float, int, int))FastDecalsAtlasRenderer.DrawDecal6Offset;

FastDecalsAtlasRenderer.DrawDecal7Offset = getRealOffset(0x7184CC);
FastDecalsAtlasRenderer.DrawDecal7 = (void(*)(void*, Vector3, Vector2, int, int))FastDecalsAtlasRenderer.DrawDecal7Offset;

FastDecalsAtlasRenderer.DrawDecal8Offset = getRealOffset(0x718698);
FastDecalsAtlasRenderer.DrawDecal8 = (void(*)(void*, Vector3, float, int, int, int))FastDecalsAtlasRenderer.DrawDecal8Offset;

FastDecalsAtlasRenderer.DrawDecal9Offset = getRealOffset(0x718718);
FastDecalsAtlasRenderer.DrawDecal9 = (void(*)(void*, Vector3, Vector2, int, int, int))FastDecalsAtlasRenderer.DrawDecal9Offset;

FastDecalsAtlasRenderer.DrawDecal10Offset = getRealOffset(0x718814);
FastDecalsAtlasRenderer.DrawDecal10 = (void(*)(void*, Vector3, float, int, int, Vector3))FastDecalsAtlasRenderer.DrawDecal10Offset;

FastDecalsAtlasRenderer.DrawDecal11Offset = getRealOffset(0x718890);
FastDecalsAtlasRenderer.DrawDecal11 = (void(*)(void*, Vector3, Vector2, int, int, Vector3))FastDecalsAtlasRenderer.DrawDecal11Offset;

FastDecalsAtlasRenderer.DrawDecal12Offset = getRealOffset(0x7189F4);
FastDecalsAtlasRenderer.DrawDecal12 = (void(*)(void*, Vector3, float, Vector2, Vector2))FastDecalsAtlasRenderer.DrawDecal12Offset;

FastDecalsAtlasRenderer.DrawDecal13Offset = getRealOffset(0x718A74);
FastDecalsAtlasRenderer.DrawDecal13 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2))FastDecalsAtlasRenderer.DrawDecal13Offset;

FastDecalsAtlasRenderer.DrawDecal14Offset = getRealOffset(0x718C00);
FastDecalsAtlasRenderer.DrawDecal14 = (void(*)(void*, Vector3, float, Vector2, Vector2, int))FastDecalsAtlasRenderer.DrawDecal14Offset;

FastDecalsAtlasRenderer.DrawDecal15Offset = getRealOffset(0x718CD0);
FastDecalsAtlasRenderer.DrawDecal15 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2, int))FastDecalsAtlasRenderer.DrawDecal15Offset;

FastDecalsAtlasRenderer.DrawDecal16Offset = getRealOffset(0x718D8C);
FastDecalsAtlasRenderer.DrawDecal16 = (void(*)(void*, Vector3, float, Vector2, Vector2, Vector3))FastDecalsAtlasRenderer.DrawDecal16Offset;

FastDecalsAtlasRenderer.DrawDecal17Offset = getRealOffset(0x718E20);
FastDecalsAtlasRenderer.DrawDecal17 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2, Vector3))FastDecalsAtlasRenderer.DrawDecal17Offset;

FastDecalsAtlasRenderer.DrawDecal18Offset = getRealOffset(0x718F40);
FastDecalsAtlasRenderer.DrawDecal18 = (void(*)(void*, Vector3, float, Vector2, Vector2, int))FastDecalsAtlasRenderer.DrawDecal18Offset;

FastDecalsAtlasRenderer.DrawDecal19Offset = getRealOffset(0x718FBC);
FastDecalsAtlasRenderer.DrawDecal19 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2, int))FastDecalsAtlasRenderer.DrawDecal19Offset;

FastDecalsAtlasRenderer.DrawDecal20Offset = getRealOffset(0x719154);
FastDecalsAtlasRenderer.DrawDecal20 = (void(*)(void*, Vector3, float, Vector2, Vector2, int, int))FastDecalsAtlasRenderer.DrawDecal20Offset;

FastDecalsAtlasRenderer.DrawDecal21Offset = getRealOffset(0x719230);
FastDecalsAtlasRenderer.DrawDecal21 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2, int, int))FastDecalsAtlasRenderer.DrawDecal21Offset;

FastDecalsAtlasRenderer.DrawDecal22Offset = getRealOffset(0x7192F0);
FastDecalsAtlasRenderer.DrawDecal22 = (void(*)(void*, Vector3, float, Vector2, Vector2, int, Vector3))FastDecalsAtlasRenderer.DrawDecal22Offset;

FastDecalsAtlasRenderer.DrawDecal23Offset = getRealOffset(0x71938C);
FastDecalsAtlasRenderer.DrawDecal23 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2, int, Vector3))FastDecalsAtlasRenderer.DrawDecal23Offset;

FastDecalsAtlasRenderer.ClearDecalsOffset = getRealOffset(0x7194B0);
FastDecalsAtlasRenderer.ClearDecals = (void(*)(void*))FastDecalsAtlasRenderer.ClearDecalsOffset;

FastDecalsAtlasRenderer.LateUpdateOffset = getRealOffset(0x7194D8);
FastDecalsAtlasRenderer.LateUpdate = (void(*)(void*))FastDecalsAtlasRenderer.LateUpdateOffset;

FastDecalsAtlasRenderer.OnDrawGizmosSelectedOffset = getRealOffset(0x719570);
FastDecalsAtlasRenderer.OnDrawGizmosSelected = (void(*)(void*))FastDecalsAtlasRenderer.OnDrawGizmosSelectedOffset;

FastDecalsAtlasRenderer.CalculateBoundsOffset = getRealOffset(0x717E7C);
FastDecalsAtlasRenderer.CalculateBounds = (int (*)(void*, Vector3))FastDecalsAtlasRenderer.CalculateBoundsOffset;

FastDecalsAtlasRenderer.MeshInstanceCreatedOffset = getRealOffset(0x719664);
FastDecalsAtlasRenderer.MeshInstanceCreated = (void(*)(void*, void *))FastDecalsAtlasRenderer.MeshInstanceCreatedOffset;

FastDecalsRenderer.AwakeOffset = getRealOffset(0x7197A0);
FastDecalsRenderer.Awake = (void(*)(void*))FastDecalsRenderer.AwakeOffset;

FastDecalsRenderer.DrawDecalOffset = getRealOffset(0x719F78);
FastDecalsRenderer.DrawDecal = (void(*)(void*, Vector3, float, int))FastDecalsRenderer.DrawDecalOffset;

FastDecalsRenderer.DrawDecal1Offset = getRealOffset(0x719FE0);
FastDecalsRenderer.DrawDecal1 = (void(*)(void*, Vector3, Vector2, int))FastDecalsRenderer.DrawDecal1Offset;

FastDecalsRenderer.DrawDecal2Offset = getRealOffset(0x71A1E0);
FastDecalsRenderer.DrawDecal2 = (void(*)(void*, Vector3, float, int, int))FastDecalsRenderer.DrawDecal2Offset;

FastDecalsRenderer.DrawDecal3Offset = getRealOffset(0x71A25C);
FastDecalsRenderer.DrawDecal3 = (void(*)(void*, Vector3, Vector2, int, int))FastDecalsRenderer.DrawDecal3Offset;

FastDecalsRenderer.DrawDecal4Offset = getRealOffset(0x71A36C);
FastDecalsRenderer.DrawDecal4 = (void(*)(void*, Vector3, float, int, Vector3))FastDecalsRenderer.DrawDecal4Offset;

FastDecalsRenderer.DrawDecal5Offset = getRealOffset(0x71A3EC);
FastDecalsRenderer.DrawDecal5 = (void(*)(void*, Vector3, Vector2, int, Vector3))FastDecalsRenderer.DrawDecal5Offset;

FastDecalsRenderer.DrawDecal6Offset = getRealOffset(0x71A56C);
FastDecalsRenderer.DrawDecal6 = (void(*)(void*, Vector3, float, int, int))FastDecalsRenderer.DrawDecal6Offset;

FastDecalsRenderer.DrawDecal7Offset = getRealOffset(0x71A5E0);
FastDecalsRenderer.DrawDecal7 = (void(*)(void*, Vector3, Vector2, int, int))FastDecalsRenderer.DrawDecal7Offset;

FastDecalsRenderer.DrawDecal8Offset = getRealOffset(0x71A7E4);
FastDecalsRenderer.DrawDecal8 = (void(*)(void*, Vector3, float, int, int, int))FastDecalsRenderer.DrawDecal8Offset;

FastDecalsRenderer.DrawDecal9Offset = getRealOffset(0x71A864);
FastDecalsRenderer.DrawDecal9 = (void(*)(void*, Vector3, Vector2, int, int, int))FastDecalsRenderer.DrawDecal9Offset;

FastDecalsRenderer.DrawDecal10Offset = getRealOffset(0x71A978);
FastDecalsRenderer.DrawDecal10 = (void(*)(void*, Vector3, float, int, int, Vector3))FastDecalsRenderer.DrawDecal10Offset;

FastDecalsRenderer.DrawDecal11Offset = getRealOffset(0x71A9F4);
FastDecalsRenderer.DrawDecal11 = (void(*)(void*, Vector3, Vector2, int, int, Vector3))FastDecalsRenderer.DrawDecal11Offset;

FastDecalsRenderer.DrawDecal12Offset = getRealOffset(0x71AB80);
FastDecalsRenderer.DrawDecal12 = (void(*)(void*, Vector3, float, Vector2, Vector2))FastDecalsRenderer.DrawDecal12Offset;

FastDecalsRenderer.DrawDecal13Offset = getRealOffset(0x71AC00);
FastDecalsRenderer.DrawDecal13 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2))FastDecalsRenderer.DrawDecal13Offset;

FastDecalsRenderer.DrawDecal14Offset = getRealOffset(0x71AD8C);
FastDecalsRenderer.DrawDecal14 = (void(*)(void*, Vector3, float, Vector2, Vector2, int))FastDecalsRenderer.DrawDecal14Offset;

FastDecalsRenderer.DrawDecal15Offset = getRealOffset(0x71AE5C);
FastDecalsRenderer.DrawDecal15 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2, int))FastDecalsRenderer.DrawDecal15Offset;

FastDecalsRenderer.DrawDecal16Offset = getRealOffset(0x71AF18);
FastDecalsRenderer.DrawDecal16 = (void(*)(void*, Vector3, float, Vector2, Vector2, Vector3))FastDecalsRenderer.DrawDecal16Offset;

FastDecalsRenderer.DrawDecal17Offset = getRealOffset(0x71AFAC);
FastDecalsRenderer.DrawDecal17 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2, Vector3))FastDecalsRenderer.DrawDecal17Offset;

FastDecalsRenderer.DrawDecal18Offset = getRealOffset(0x71B0CC);
FastDecalsRenderer.DrawDecal18 = (void(*)(void*, Vector3, float, Vector2, Vector2, int))FastDecalsRenderer.DrawDecal18Offset;

FastDecalsRenderer.DrawDecal19Offset = getRealOffset(0x71B148);
FastDecalsRenderer.DrawDecal19 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2, int))FastDecalsRenderer.DrawDecal19Offset;

FastDecalsRenderer.DrawDecal20Offset = getRealOffset(0x71B2E0);
FastDecalsRenderer.DrawDecal20 = (void(*)(void*, Vector3, float, Vector2, Vector2, int, int))FastDecalsRenderer.DrawDecal20Offset;

FastDecalsRenderer.DrawDecal21Offset = getRealOffset(0x71B3BC);
FastDecalsRenderer.DrawDecal21 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2, int, int))FastDecalsRenderer.DrawDecal21Offset;

FastDecalsRenderer.DrawDecal22Offset = getRealOffset(0x71B47C);
FastDecalsRenderer.DrawDecal22 = (void(*)(void*, Vector3, float, Vector2, Vector2, int, Vector3))FastDecalsRenderer.DrawDecal22Offset;

FastDecalsRenderer.DrawDecal23Offset = getRealOffset(0x71B518);
FastDecalsRenderer.DrawDecal23 = (void(*)(void*, Vector3, Vector2, Vector2, Vector2, int, Vector3))FastDecalsRenderer.DrawDecal23Offset;

FastDecalsRenderer.ClearDecalsOffset = getRealOffset(0x71B63C);
FastDecalsRenderer.ClearDecals = (void(*)(void*))FastDecalsRenderer.ClearDecalsOffset;

FastDecalsRenderer.LateUpdateOffset = getRealOffset(0x71B664);
FastDecalsRenderer.LateUpdate = (void(*)(void*))FastDecalsRenderer.LateUpdateOffset;

FastDecalsRenderer.OnDrawGizmosSelectedOffset = getRealOffset(0x71B6FC);
FastDecalsRenderer.OnDrawGizmosSelected = (void(*)(void*))FastDecalsRenderer.OnDrawGizmosSelectedOffset;

FastDecalsRenderer.CalculateBoundsOffset = getRealOffset(0x719EF4);
FastDecalsRenderer.CalculateBounds = (int (*)(void*, Vector3))FastDecalsRenderer.CalculateBoundsOffset;

FastDecalsRenderer.CalculateTextureOffsetOffset = getRealOffset(0x719E74);
FastDecalsRenderer.CalculateTextureOffset = (Vector2 (*)(int, int, int))FastDecalsRenderer.CalculateTextureOffsetOffset;

FastDecalsRenderer.MeshInstanceCreatedOffset = getRealOffset(0x71B7F0);
FastDecalsRenderer.MeshInstanceCreated = (void(*)(void*, void *))FastDecalsRenderer.MeshInstanceCreatedOffset;

HBAOControl.ToggleShowAOOffset = getRealOffset(0x7EFD1C);
HBAOControl.ToggleShowAO = (void(*)(void*))HBAOControl.ToggleShowAOOffset;

HBAOControl.UpdateAoRadiusOffset = getRealOffset(0x7EFD88);
HBAOControl.UpdateAoRadius = (void(*)(void*))HBAOControl.UpdateAoRadiusOffset;

RotateObject.StartOffset = getRealOffset(0x612800);
RotateObject.Start = (void(*)(void*))RotateObject.StartOffset;

RotateObject.UpdateOffset = getRealOffset(0x612804);
RotateObject.Update = (void(*)(void*))RotateObject.UpdateOffset;

HBAO.get_presetsOffset = getRealOffset(0x7EDFCC);
HBAO.get_presets = (int (*)(void*))HBAO.get_presetsOffset;

HBAO.set_presetsOffset = getRealOffset(0x7EDFD4);
HBAO.set_presets = (void(*)(void*, int))HBAO.set_presetsOffset;

HBAO.get_generalSettingsOffset = getRealOffset(0x7EDFDC);
HBAO.get_generalSettings = (int (*)(void*))HBAO.get_generalSettingsOffset;

HBAO.set_generalSettingsOffset = getRealOffset(0x7EDFEC);
HBAO.set_generalSettings = (void(*)(void*, int))HBAO.set_generalSettingsOffset;

HBAO.get_aoSettingsOffset = getRealOffset(0x7EDFFC);
HBAO.get_aoSettings = (int (*)(void*))HBAO.get_aoSettingsOffset;

HBAO.set_aoSettingsOffset = getRealOffset(0x7EE01C);
HBAO.set_aoSettings = (void(*)(void*, int))HBAO.set_aoSettingsOffset;

HBAO.get_colorBleedingSettingsOffset = getRealOffset(0x7EE06C);
HBAO.get_colorBleedingSettings = (int (*)(void*))HBAO.get_colorBleedingSettingsOffset;

HBAO.set_colorBleedingSettingsOffset = getRealOffset(0x7EE080);
HBAO.set_colorBleedingSettings = (void(*)(void*, int))HBAO.set_colorBleedingSettingsOffset;

HBAO.get_blurSettingsOffset = getRealOffset(0x7EE08C);
HBAO.get_blurSettings = (int (*)(void*))HBAO.get_blurSettingsOffset;

HBAO.set_blurSettingsOffset = getRealOffset(0x7EE0A0);
HBAO.set_blurSettings = (void(*)(void*, int))HBAO.set_blurSettingsOffset;

HBAO.OnEnableOffset = getRealOffset(0x7EE0AC);
HBAO.OnEnable = (void(*)(void*))HBAO.OnEnableOffset;

HBAO.OnDisableOffset = getRealOffset(0x7EE414);
HBAO.OnDisable = (void(*)(void*))HBAO.OnDisableOffset;

HBAO.OnRenderImageOffset = getRealOffset(0x7EE540);
HBAO.OnRenderImage = (void(*)(void*, void *, void *))HBAO.OnRenderImageOffset;

HBAO.RenderHBAOOffset = getRealOffset(0x7EF36C);
HBAO.RenderHBAO = (void(*)(void*, void *, void *))HBAO.RenderHBAOOffset;

HBAO.CreateMaterialOffset = getRealOffset(0x7EE318);
HBAO.CreateMaterial = (void(*)(void*))HBAO.CreateMaterialOffset;

HBAO.UpdateMaterialPropertiesOffset = getRealOffset(0x7EEB48);
HBAO.UpdateMaterialProperties = (void(*)(void*))HBAO.UpdateMaterialPropertiesOffset;

HBAO.GetDownsamplingOffset = getRealOffset(0x7EF680);
HBAO.GetDownsampling = (int(*)(void*))HBAO.GetDownsamplingOffset;

HBAO.GetAoPassOffset = getRealOffset(0x7EF69C);
HBAO.GetAoPass = (int(*)(void*))HBAO.GetAoPassOffset;

HBAO.GetBlurXPassOffset = getRealOffset(0x7EF6AC);
HBAO.GetBlurXPass = (int(*)(void*))HBAO.GetBlurXPassOffset;

HBAO.GetBlurYPassOffset = getRealOffset(0x7EF6C8);
HBAO.GetBlurYPass = (int(*)(void*))HBAO.GetBlurYPassOffset;

HBAO.GetFinalPassOffset = getRealOffset(0x7EF6E4);
HBAO.GetFinalPass = (int(*)(void*))HBAO.GetFinalPassOffset;

HBAO.CreateRandomTextureOffset = getRealOffset(0x7EF6FC);
HBAO.CreateRandomTexture = (void(*)(void*, int))HBAO.CreateRandomTextureOffset;

HBAO.ApplyPresetOffset = getRealOffset(0x7EF958);
HBAO.ApplyPreset = (void(*)(void*, int))HBAO.ApplyPresetOffset;

AmbientControllerExample.StartOffset = getRealOffset(0x6B7334);
AmbientControllerExample.Start = (void(*)(void*))AmbientControllerExample.StartOffset;

AmbientControllerExample.OnDisableOffset = getRealOffset(0x6B7854);
AmbientControllerExample.OnDisable = (void(*)(void*))AmbientControllerExample.OnDisableOffset;

AmbientControllerExample.DelayedRefreshOffset = getRealOffset(0x6B789C);
AmbientControllerExample.DelayedRefresh = (void(*)(void*))AmbientControllerExample.DelayedRefreshOffset;

AmbientControllerExample.UpdateOffset = getRealOffset(0x6B78BC);
AmbientControllerExample.Update = (void(*)(void*))AmbientControllerExample.UpdateOffset;

AmbientControllerExample.LateUpdateOffset = getRealOffset(0x6B8234);
AmbientControllerExample.LateUpdate = (void(*)(void*))AmbientControllerExample.LateUpdateOffset;

AmbientControllerExample.EvaluateCurvesOffset = getRealOffset(0x6B758C);
AmbientControllerExample.EvaluateCurves = (void(*)(void*))AmbientControllerExample.EvaluateCurvesOffset;

AmbientControllerExample.ZoomInOffset = getRealOffset(0x6B7EC4);
AmbientControllerExample.ZoomIn = (void *(*)(void*))AmbientControllerExample.ZoomInOffset;

AmbientControllerExample.ZoomOutOffset = getRealOffset(0x6B7F44);
AmbientControllerExample.ZoomOut = (void *(*)(void*))AmbientControllerExample.ZoomOutOffset;

AmbientControllerExample.TimePlusOffset = getRealOffset(0x6B7FC0);
AmbientControllerExample.TimePlus = (void(*)(void*))AmbientControllerExample.TimePlusOffset;

AmbientControllerExample.TimeMinusOffset = getRealOffset(0x6B8008);
AmbientControllerExample.TimeMinus = (void(*)(void*))AmbientControllerExample.TimeMinusOffset;

AmbientControllerExample.SwitchCityLightsOffset = getRealOffset(0x6B8058);
AmbientControllerExample.SwitchCityLights = (void(*)(void*, bool))AmbientControllerExample.SwitchCityLightsOffset;

AmbientControllerExample.QuitOffset = getRealOffset(0x6B86E0);
AmbientControllerExample.Quit = (void(*)(void*))AmbientControllerExample.QuitOffset;

ButtonHandler.UpdateOffset = getRealOffset(0x6CBF94);
ButtonHandler.Update = (void(*)(void*))ButtonHandler.UpdateOffset;

ButtonHandler.OnPointerDownOffset = getRealOffset(0x6CBFD4);
ButtonHandler.OnPointerDown = (void(*)(void*, void *))ButtonHandler.OnPointerDownOffset;

ButtonHandler.OnPointerUpOffset = getRealOffset(0x6CBFE0);
ButtonHandler.OnPointerUp = (void(*)(void*, void *))ButtonHandler.OnPointerUpOffset;

ButtonHandler.OnPointerExitOffset = getRealOffset(0x6CBFEC);
ButtonHandler.OnPointerExit = (void(*)(void*, void *))ButtonHandler.OnPointerExitOffset;

ButtonSetColorOnClick.SetColor1Offset = getRealOffset(0x6CC81C);
ButtonSetColorOnClick.SetColor1 = (void(*)(void*))ButtonSetColorOnClick.SetColor1Offset;

ButtonSetColorOnClick.SetColor2Offset = getRealOffset(0x6CC8C8);
ButtonSetColorOnClick.SetColor2 = (void(*)(void*))ButtonSetColorOnClick.SetColor2Offset;

HorizonControllerExample.StartOffset = getRealOffset(0x7F719C);
HorizonControllerExample.Start = (void(*)(void*))HorizonControllerExample.StartOffset;

HorizonControllerExample.OnDisableOffset = getRealOffset(0x7F7B70);
HorizonControllerExample.OnDisable = (void(*)(void*))HorizonControllerExample.OnDisableOffset;

HorizonControllerExample.EnableHorizonOffset = getRealOffset(0x7F7B8C);
HorizonControllerExample.EnableHorizon = (void(*)(void*))HorizonControllerExample.EnableHorizonOffset;

HorizonControllerExample.DisableHorizonOffset = getRealOffset(0x7F84F4);
HorizonControllerExample.DisableHorizon = (void(*)(void*))HorizonControllerExample.DisableHorizonOffset;

HorizonControllerExample.UpdateOffset = getRealOffset(0x7F8600);
HorizonControllerExample.Update = (void(*)(void*))HorizonControllerExample.UpdateOffset;

HorizonControllerExample.ScrollMaskLeftRightOffset = getRealOffset(0x7F8AE0);
HorizonControllerExample.ScrollMaskLeftRight = (void(*)(void*, float))HorizonControllerExample.ScrollMaskLeftRightOffset;

HorizonControllerExample.ScrollMaskUpDownOffset = getRealOffset(0x7F8B7C);
HorizonControllerExample.ScrollMaskUpDown = (void(*)(void*, float))HorizonControllerExample.ScrollMaskUpDownOffset;

HorizonControllerExample.ScaleMaskOffset = getRealOffset(0x7F8C10);
HorizonControllerExample.ScaleMask = (void(*)(void*, float))HorizonControllerExample.ScaleMaskOffset;

HorizonControllerExample.MaskScaleOffsetOffset = getRealOffset(0x7F9C9C);
HorizonControllerExample.MaskScaleOffset = (void(*)(void*, int))HorizonControllerExample.MaskScaleOffsetOffset;

HorizonControllerExample.ScrollMapsLeftRightOffset = getRealOffset(0x7F8F20);
HorizonControllerExample.ScrollMapsLeftRight = (void(*)(void*, float))HorizonControllerExample.ScrollMapsLeftRightOffset;

HorizonControllerExample.ScrollMapsUpDownOffset = getRealOffset(0x7F9174);
HorizonControllerExample.ScrollMapsUpDown = (void(*)(void*, float))HorizonControllerExample.ScrollMapsUpDownOffset;

HorizonControllerExample.ScaleMapsOffset = getRealOffset(0x7F93B8);
HorizonControllerExample.ScaleMaps = (void(*)(void*, float))HorizonControllerExample.ScaleMapsOffset;

HorizonControllerExample.MapsScaleOffsetOffset = getRealOffset(0x7F9DA0);
HorizonControllerExample.MapsScaleOffset = (void(*)(void*, int, int, int, int))HorizonControllerExample.MapsScaleOffsetOffset;

HorizonControllerExample.ResetMaskPosOffset = getRealOffset(0x7F9FD4);
HorizonControllerExample.ResetMaskPos = (void(*)(void*))HorizonControllerExample.ResetMaskPosOffset;

HorizonControllerExample.DisplaceOffset = getRealOffset(0x7F8D28);
HorizonControllerExample.Displace = (void(*)(void*, float))HorizonControllerExample.DisplaceOffset;

HorizonControllerExample.BumpOffset = getRealOffset(0x7F9704);
HorizonControllerExample.Bump = (void(*)(void*, float))HorizonControllerExample.BumpOffset;

HorizonControllerExample.FogOffset = getRealOffset(0x7F98E4);
HorizonControllerExample.Fog = (void(*)(void*, float))HorizonControllerExample.FogOffset;

HorizonControllerExample.SnowOffset = getRealOffset(0x7F9A88);
HorizonControllerExample.Snow = (void(*)(void*, float))HorizonControllerExample.SnowOffset;

HorizonControllerExample.ResetOffset = getRealOffset(0x7F7D98);
HorizonControllerExample.Reset = (void(*)(void*))HorizonControllerExample.ResetOffset;

HorizonControllerExample.ScrollMaskLeftOffset = getRealOffset(0x7FA12C);
HorizonControllerExample.ScrollMaskLeft = (void(*)(void*))HorizonControllerExample.ScrollMaskLeftOffset;

HorizonControllerExample.ScrollMaskRightOffset = getRealOffset(0x7FA134);
HorizonControllerExample.ScrollMaskRight = (void(*)(void*))HorizonControllerExample.ScrollMaskRightOffset;

HorizonControllerExample.ScrollMaskUpOffset = getRealOffset(0x7FA140);
HorizonControllerExample.ScrollMaskUp = (void(*)(void*))HorizonControllerExample.ScrollMaskUpOffset;

HorizonControllerExample.ScrollMaskDownOffset = getRealOffset(0x7FA148);
HorizonControllerExample.ScrollMaskDown = (void(*)(void*))HorizonControllerExample.ScrollMaskDownOffset;

HorizonControllerExample.ScaleMaskUpOffset = getRealOffset(0x7FA154);
HorizonControllerExample.ScaleMaskUp = (void(*)(void*))HorizonControllerExample.ScaleMaskUpOffset;

HorizonControllerExample.ScaleMaskDownOffset = getRealOffset(0x7FA15C);
HorizonControllerExample.ScaleMaskDown = (void(*)(void*))HorizonControllerExample.ScaleMaskDownOffset;

HorizonControllerExample.ScrollMapsLeftOffset = getRealOffset(0x7FA168);
HorizonControllerExample.ScrollMapsLeft = (void(*)(void*))HorizonControllerExample.ScrollMapsLeftOffset;

HorizonControllerExample.ScrollMapsRightOffset = getRealOffset(0x7FA170);
HorizonControllerExample.ScrollMapsRight = (void(*)(void*))HorizonControllerExample.ScrollMapsRightOffset;

HorizonControllerExample.ScrollMapsUpOffset = getRealOffset(0x7FA17C);
HorizonControllerExample.ScrollMapsUp = (void(*)(void*))HorizonControllerExample.ScrollMapsUpOffset;

HorizonControllerExample.ScrollMapsDownOffset = getRealOffset(0x7FA184);
HorizonControllerExample.ScrollMapsDown = (void(*)(void*))HorizonControllerExample.ScrollMapsDownOffset;

HorizonControllerExample.ScaleMapsUpOffset = getRealOffset(0x7FA190);
HorizonControllerExample.ScaleMapsUp = (void(*)(void*))HorizonControllerExample.ScaleMapsUpOffset;

HorizonControllerExample.ScaleMapsDownOffset = getRealOffset(0x7FA198);
HorizonControllerExample.ScaleMapsDown = (void(*)(void*))HorizonControllerExample.ScaleMapsDownOffset;

HorizonControllerExample.DisplacePlusOffset = getRealOffset(0x7FA1A4);
HorizonControllerExample.DisplacePlus = (void(*)(void*))HorizonControllerExample.DisplacePlusOffset;

HorizonControllerExample.DisplaceMinusOffset = getRealOffset(0x7FA1AC);
HorizonControllerExample.DisplaceMinus = (void(*)(void*))HorizonControllerExample.DisplaceMinusOffset;

HorizonControllerExample.BumpPlusOffset = getRealOffset(0x7FA1B8);
HorizonControllerExample.BumpPlus = (void(*)(void*))HorizonControllerExample.BumpPlusOffset;

HorizonControllerExample.BumpMinusOffset = getRealOffset(0x7FA1C0);
HorizonControllerExample.BumpMinus = (void(*)(void*))HorizonControllerExample.BumpMinusOffset;

HorizonControllerExample.FogPlusOffset = getRealOffset(0x7FA1CC);
HorizonControllerExample.FogPlus = (void(*)(void*))HorizonControllerExample.FogPlusOffset;

HorizonControllerExample.FogMinusOffset = getRealOffset(0x7FA1D4);
HorizonControllerExample.FogMinus = (void(*)(void*))HorizonControllerExample.FogMinusOffset;

HorizonControllerExample.SnowPlusOffset = getRealOffset(0x7FA1E0);
HorizonControllerExample.SnowPlus = (void(*)(void*))HorizonControllerExample.SnowPlusOffset;

HorizonControllerExample.SnowMinusOffset = getRealOffset(0x7FA1E8);
HorizonControllerExample.SnowMinus = (void(*)(void*))HorizonControllerExample.SnowMinusOffset;

IVPickerExample.OnEnableOffset = getRealOffset(0x809004);
IVPickerExample.OnEnable = (void(*)(void*))IVPickerExample.OnEnableOffset;

IVPickerExample.OnDisableOffset = getRealOffset(0x80919C);
IVPickerExample.OnDisable = (void(*)(void*))IVPickerExample.OnDisableOffset;

IVPickerExample.OnImageSelectOffset = getRealOffset(0x809334);
IVPickerExample.OnImageSelect = (void(*)(void*, monoString*, int))IVPickerExample.OnImageSelectOffset;

IVPickerExample.OnImageLoadOffset = getRealOffset(0x809448);
IVPickerExample.OnImageLoad = (void(*)(void*, monoString*, void *, int))IVPickerExample.OnImageLoadOffset;

IVPickerExample.OnVideoSelectOffset = getRealOffset(0x8094F0);
IVPickerExample.OnVideoSelect = (void(*)(void*, monoString*))IVPickerExample.OnVideoSelectOffset;

IVPickerExample.OnErrorOffset = getRealOffset(0x809610);
IVPickerExample.OnError = (void(*)(void*, monoString*))IVPickerExample.OnErrorOffset;

IVPickerExample.OnCancelOffset = getRealOffset(0x8096D4);
IVPickerExample.OnCancel = (void(*)(void*))IVPickerExample.OnCancelOffset;

IVPickerExample.OnGUIOffset = getRealOffset(0x80977C);
IVPickerExample.OnGUI = (void(*)(void*))IVPickerExample.OnGUIOffset;

InitDemo_1.AwakeOffset = getRealOffset(0x80B288);
InitDemo_1.Awake = (void(*)(void*))InitDemo_1.AwakeOffset;

InitDemo_1.GenerateLevelOffset = getRealOffset(0x80B28C);
InitDemo_1.GenerateLevel = (void(*)(void*))InitDemo_1.GenerateLevelOffset;

IOCcam.AwakeOffset = getRealOffset(0x80243C);
IOCcam.Awake = (void(*)(void*))IOCcam.AwakeOffset;

IOCcam.OnApplicationQuitOffset = getRealOffset(0x802688);
IOCcam.OnApplicationQuit = (void(*)(void*))IOCcam.OnApplicationQuitOffset;

IOCcam.AddBoundingSphereOffset = getRealOffset(0x8026BC);
IOCcam.AddBoundingSphere = (void(*)(void*, int))IOCcam.AddBoundingSphereOffset;

IOCcam.StartOffset = getRealOffset(0x802750);
IOCcam.Start = (void(*)(void*))IOCcam.StartOffset;

IOCcam.UpdateOffset = getRealOffset(0x802FE4);
IOCcam.Update = (void(*)(void*))IOCcam.UpdateOffset;

IOCcam.UnhideOffset = getRealOffset(0x80351C);
IOCcam.Unhide = (void(*)(void*, void *, int))IOCcam.UnhideOffset;

IOCcam.HaltonSequenceOffset = getRealOffset(0x802EFC);
IOCcam.HaltonSequence = (float(*)(void*, int, int))IOCcam.HaltonSequenceOffset;

IOClight.AwakeOffset = getRealOffset(0x804BC0);
IOClight.Awake = (void(*)(void*))IOClight.AwakeOffset;

IOClight.InitOffset = getRealOffset(0x804BD0);
IOClight.Init = (void(*)(void*))IOClight.InitOffset;

IOClight.StartOffset = getRealOffset(0x804DB4);
IOClight.Start = (void(*)(void*))IOClight.StartOffset;

IOClight.InitializeOffset = getRealOffset(0x804B08);
IOClight.Initialize = (void(*)(void*))IOClight.InitializeOffset;

IOClight.UpdateValuesOffset = getRealOffset(0x8056CC);
IOClight.UpdateValues = (void(*)(void*))IOClight.UpdateValuesOffset;

IOClight.UnHideOffset = getRealOffset(0x80572C);
IOClight.UnHide = (void(*)(void*, int))IOClight.UnHideOffset;

IOClight.HideOffset = getRealOffset(0x8058D0);
IOClight.Hide = (void(*)(void*))IOClight.HideOffset;

IOClight.UpdateOffset = getRealOffset(0x805954);
IOClight.Update = (void(*)(void*))IOClight.UpdateOffset;

IOClod.AwakeOffset = getRealOffset(0x805CC4);
IOClod.Awake = (void(*)(void*))IOClod.AwakeOffset;

IOClod.InitOffset = getRealOffset(0x805CD4);
IOClod.Init = (void(*)(void*))IOClod.InitOffset;

IOClod.StartOffset = getRealOffset(0x805F1C);
IOClod.Start = (void(*)(void*))IOClod.StartOffset;

IOClod.InitializeOffset = getRealOffset(0x804A7C);
IOClod.Initialize = (void(*)(void*))IOClod.InitializeOffset;

IOClod.UpdateOffset = getRealOffset(0x807788);
IOClod.Update = (void(*)(void*))IOClod.UpdateOffset;

IOClod.UpdateValuesOffset = getRealOffset(0x8049EC);
IOClod.UpdateValues = (void(*)(void*))IOClod.UpdateValuesOffset;

IOClod.UnHideOffset = getRealOffset(0x8086EC);
IOClod.UnHide = (void(*)(void*, int))IOClod.UnHideOffset;

IOClod.ShowLodOffset = getRealOffset(0x806F18);
IOClod.ShowLod = (void(*)(void*, float))IOClod.ShowLodOffset;

IOClod.HideOffset = getRealOffset(0x80836C);
IOClod.Hide = (void(*)(void*))IOClod.HideOffset;

IOClod.HideAllOffset = getRealOffset(0x806BD8);
IOClod.HideAll = (void(*)(void*))IOClod.HideAllOffset;

IOCterrain.AwakeOffset = getRealOffset(0x808D3C);
IOCterrain.Awake = (void(*)(void*))IOCterrain.AwakeOffset;

IOCterrain.InitOffset = getRealOffset(0x808D4C);
IOCterrain.Init = (void(*)(void*))IOCterrain.InitOffset;

IOCterrain.StartOffset = getRealOffset(0x808EE0);
IOCterrain.Start = (void(*)(void*))IOCterrain.StartOffset;

IOCterrain.UpdateOffset = getRealOffset(0x808F0C);
IOCterrain.Update = (void(*)(void*))IOCterrain.UpdateOffset;

IOCterrain.HideOffset = getRealOffset(0x808F80);
IOCterrain.Hide = (void(*)(void*))IOCterrain.HideOffset;

IOCterrain.UnHideOffset = getRealOffset(0x808FB8);
IOCterrain.UnHide = (void(*)(void*, int))IOCterrain.UnHideOffset;

IOChud.AwakeOffset = getRealOffset(0x803740);
IOChud.Awake = (void(*)(void*))IOChud.AwakeOffset;

IOChud.StartOffset = getRealOffset(0x80386C);
IOChud.Start = (void(*)(void*))IOChud.StartOffset;

IOChud.UpdateOffset = getRealOffset(0x803928);
IOChud.Update = (void(*)(void*))IOChud.UpdateOffset;

IOChud.OnGUIOffset = getRealOffset(0x803E84);
IOChud.OnGUI = (void(*)(void*))IOChud.OnGUIOffset;

IOChud.ToggleHUDOffset = getRealOffset(0x803E3C);
IOChud.ToggleHUD = (void(*)(void*))IOChud.ToggleHUDOffset;

IOChud.ToggleIOCOffset = getRealOffset(0x8039A8);
IOChud.ToggleIOC = (void(*)(void*))IOChud.ToggleIOCOffset;

IronSourceDemoScript.StartOffset = getRealOffset(0xCA4E08);
IronSourceDemoScript.Start = (void(*)(void*))IronSourceDemoScript.StartOffset;

IronSourceDemoScript.OnEnableOffset = getRealOffset(0xCA4F1C);
IronSourceDemoScript.OnEnable = (void(*)(void*))IronSourceDemoScript.OnEnableOffset;

IronSourceDemoScript.OnApplicationPauseOffset = getRealOffset(0xCA6880);
IronSourceDemoScript.OnApplicationPause = (void(*)(void*, bool))IronSourceDemoScript.OnApplicationPauseOffset;

IronSourceDemoScript.OnGUIOffset = getRealOffset(0xCA695C);
IronSourceDemoScript.OnGUI = (void(*)(void*))IronSourceDemoScript.OnGUIOffset;

IronSourceDemoScript.RewardedVideoAvailabilityChangedEventOffset = getRealOffset(0xCA72A0);
IronSourceDemoScript.RewardedVideoAvailabilityChangedEvent = (void(*)(void*, bool))IronSourceDemoScript.RewardedVideoAvailabilityChangedEventOffset;

IronSourceDemoScript.RewardedVideoAdOpenedEventOffset = getRealOffset(0xCA7350);
IronSourceDemoScript.RewardedVideoAdOpenedEvent = (void(*)(void*))IronSourceDemoScript.RewardedVideoAdOpenedEventOffset;

IronSourceDemoScript.RewardedVideoAdRewardedEventOffset = getRealOffset(0xCA73D4);
IronSourceDemoScript.RewardedVideoAdRewardedEvent = (void(*)(void*, void *))IronSourceDemoScript.RewardedVideoAdRewardedEventOffset;

IronSourceDemoScript.RewardedVideoAdClosedEventOffset = getRealOffset(0xCA7604);
IronSourceDemoScript.RewardedVideoAdClosedEvent = (void(*)(void*))IronSourceDemoScript.RewardedVideoAdClosedEventOffset;

IronSourceDemoScript.RewardedVideoAdStartedEventOffset = getRealOffset(0xCA7688);
IronSourceDemoScript.RewardedVideoAdStartedEvent = (void(*)(void*))IronSourceDemoScript.RewardedVideoAdStartedEventOffset;

IronSourceDemoScript.RewardedVideoAdEndedEventOffset = getRealOffset(0xCA770C);
IronSourceDemoScript.RewardedVideoAdEndedEvent = (void(*)(void*))IronSourceDemoScript.RewardedVideoAdEndedEventOffset;

IronSourceDemoScript.RewardedVideoAdShowFailedEventOffset = getRealOffset(0xCA7790);
IronSourceDemoScript.RewardedVideoAdShowFailedEvent = (void(*)(void*, void *))IronSourceDemoScript.RewardedVideoAdShowFailedEventOffset;

IronSourceDemoScript.RewardedVideoAdClickedEventOffset = getRealOffset(0xCA79C0);
IronSourceDemoScript.RewardedVideoAdClickedEvent = (void(*)(void*, void *))IronSourceDemoScript.RewardedVideoAdClickedEventOffset;

IronSourceDemoScript.RewardedVideoAdLoadedDemandOnlyEventOffset = getRealOffset(0xCA7A68);
IronSourceDemoScript.RewardedVideoAdLoadedDemandOnlyEvent = (void(*)(void*, monoString*))IronSourceDemoScript.RewardedVideoAdLoadedDemandOnlyEventOffset;

IronSourceDemoScript.RewardedVideoAdLoadFailedDemandOnlyEventOffset = getRealOffset(0xCA7B04);
IronSourceDemoScript.RewardedVideoAdLoadFailedDemandOnlyEvent = (void(*)(void*, monoString*, void *))IronSourceDemoScript.RewardedVideoAdLoadFailedDemandOnlyEventOffset;

IronSourceDemoScript.RewardedVideoAdOpenedDemandOnlyEventOffset = getRealOffset(0xCA7DD8);
IronSourceDemoScript.RewardedVideoAdOpenedDemandOnlyEvent = (void(*)(void*, monoString*))IronSourceDemoScript.RewardedVideoAdOpenedDemandOnlyEventOffset;

IronSourceDemoScript.RewardedVideoAdRewardedDemandOnlyEventOffset = getRealOffset(0xCA7E74);
IronSourceDemoScript.RewardedVideoAdRewardedDemandOnlyEvent = (void(*)(void*, monoString*))IronSourceDemoScript.RewardedVideoAdRewardedDemandOnlyEventOffset;

IronSourceDemoScript.RewardedVideoAdClosedDemandOnlyEventOffset = getRealOffset(0xCA7F10);
IronSourceDemoScript.RewardedVideoAdClosedDemandOnlyEvent = (void(*)(void*, monoString*))IronSourceDemoScript.RewardedVideoAdClosedDemandOnlyEventOffset;

IronSourceDemoScript.RewardedVideoAdShowFailedDemandOnlyEventOffset = getRealOffset(0xCA7FAC);
IronSourceDemoScript.RewardedVideoAdShowFailedDemandOnlyEvent = (void(*)(void*, monoString*, void *))IronSourceDemoScript.RewardedVideoAdShowFailedDemandOnlyEventOffset;

IronSourceDemoScript.RewardedVideoAdClickedDemandOnlyEventOffset = getRealOffset(0xCA8280);
IronSourceDemoScript.RewardedVideoAdClickedDemandOnlyEvent = (void(*)(void*, monoString*))IronSourceDemoScript.RewardedVideoAdClickedDemandOnlyEventOffset;

IronSourceDemoScript.InterstitialAdReadyEventOffset = getRealOffset(0xCA831C);
IronSourceDemoScript.InterstitialAdReadyEvent = (void(*)(void*))IronSourceDemoScript.InterstitialAdReadyEventOffset;

IronSourceDemoScript.InterstitialAdLoadFailedEventOffset = getRealOffset(0xCA83A0);
IronSourceDemoScript.InterstitialAdLoadFailedEvent = (void(*)(void*, void *))IronSourceDemoScript.InterstitialAdLoadFailedEventOffset;

IronSourceDemoScript.InterstitialAdShowSucceededEventOffset = getRealOffset(0xCA85D0);
IronSourceDemoScript.InterstitialAdShowSucceededEvent = (void(*)(void*))IronSourceDemoScript.InterstitialAdShowSucceededEventOffset;

IronSourceDemoScript.InterstitialAdShowFailedEventOffset = getRealOffset(0xCA8654);
IronSourceDemoScript.InterstitialAdShowFailedEvent = (void(*)(void*, void *))IronSourceDemoScript.InterstitialAdShowFailedEventOffset;

IronSourceDemoScript.InterstitialAdClickedEventOffset = getRealOffset(0xCA8884);
IronSourceDemoScript.InterstitialAdClickedEvent = (void(*)(void*))IronSourceDemoScript.InterstitialAdClickedEventOffset;

IronSourceDemoScript.InterstitialAdOpenedEventOffset = getRealOffset(0xCA8908);
IronSourceDemoScript.InterstitialAdOpenedEvent = (void(*)(void*))IronSourceDemoScript.InterstitialAdOpenedEventOffset;

IronSourceDemoScript.InterstitialAdClosedEventOffset = getRealOffset(0xCA898C);
IronSourceDemoScript.InterstitialAdClosedEvent = (void(*)(void*))IronSourceDemoScript.InterstitialAdClosedEventOffset;

IronSourceDemoScript.InterstitialAdReadyDemandOnlyEventOffset = getRealOffset(0xCA8A10);
IronSourceDemoScript.InterstitialAdReadyDemandOnlyEvent = (void(*)(void*, monoString*))IronSourceDemoScript.InterstitialAdReadyDemandOnlyEventOffset;

IronSourceDemoScript.InterstitialAdLoadFailedDemandOnlyEventOffset = getRealOffset(0xCA8AAC);
IronSourceDemoScript.InterstitialAdLoadFailedDemandOnlyEvent = (void(*)(void*, monoString*, void *))IronSourceDemoScript.InterstitialAdLoadFailedDemandOnlyEventOffset;

IronSourceDemoScript.InterstitialAdShowFailedDemandOnlyEventOffset = getRealOffset(0xCA8D80);
IronSourceDemoScript.InterstitialAdShowFailedDemandOnlyEvent = (void(*)(void*, monoString*, void *))IronSourceDemoScript.InterstitialAdShowFailedDemandOnlyEventOffset;

IronSourceDemoScript.InterstitialAdClickedDemandOnlyEventOffset = getRealOffset(0xCA9054);
IronSourceDemoScript.InterstitialAdClickedDemandOnlyEvent = (void(*)(void*, monoString*))IronSourceDemoScript.InterstitialAdClickedDemandOnlyEventOffset;

IronSourceDemoScript.InterstitialAdOpenedDemandOnlyEventOffset = getRealOffset(0xCA90F0);
IronSourceDemoScript.InterstitialAdOpenedDemandOnlyEvent = (void(*)(void*, monoString*))IronSourceDemoScript.InterstitialAdOpenedDemandOnlyEventOffset;

IronSourceDemoScript.InterstitialAdClosedDemandOnlyEventOffset = getRealOffset(0xCA918C);
IronSourceDemoScript.InterstitialAdClosedDemandOnlyEvent = (void(*)(void*, monoString*))IronSourceDemoScript.InterstitialAdClosedDemandOnlyEventOffset;

IronSourceDemoScript.BannerAdLoadedEventOffset = getRealOffset(0xCA9228);
IronSourceDemoScript.BannerAdLoadedEvent = (void(*)(void*))IronSourceDemoScript.BannerAdLoadedEventOffset;

IronSourceDemoScript.BannerAdLoadFailedEventOffset = getRealOffset(0xCA92AC);
IronSourceDemoScript.BannerAdLoadFailedEvent = (void(*)(void*, void *))IronSourceDemoScript.BannerAdLoadFailedEventOffset;

IronSourceDemoScript.BannerAdClickedEventOffset = getRealOffset(0xCA94DC);
IronSourceDemoScript.BannerAdClickedEvent = (void(*)(void*))IronSourceDemoScript.BannerAdClickedEventOffset;

IronSourceDemoScript.BannerAdScreenPresentedEventOffset = getRealOffset(0xCA9560);
IronSourceDemoScript.BannerAdScreenPresentedEvent = (void(*)(void*))IronSourceDemoScript.BannerAdScreenPresentedEventOffset;

IronSourceDemoScript.BannerAdScreenDismissedEventOffset = getRealOffset(0xCA95E4);
IronSourceDemoScript.BannerAdScreenDismissedEvent = (void(*)(void*))IronSourceDemoScript.BannerAdScreenDismissedEventOffset;

IronSourceDemoScript.BannerAdLeftApplicationEventOffset = getRealOffset(0xCA9668);
IronSourceDemoScript.BannerAdLeftApplicationEvent = (void(*)(void*))IronSourceDemoScript.BannerAdLeftApplicationEventOffset;

IronSourceDemoScript.OfferwallOpenedEventOffset = getRealOffset(0xCA96EC);
IronSourceDemoScript.OfferwallOpenedEvent = (void(*)(void*))IronSourceDemoScript.OfferwallOpenedEventOffset;

IronSourceDemoScript.OfferwallClosedEventOffset = getRealOffset(0xCA9770);
IronSourceDemoScript.OfferwallClosedEvent = (void(*)(void*))IronSourceDemoScript.OfferwallClosedEventOffset;

IronSourceDemoScript.OfferwallShowFailedEventOffset = getRealOffset(0xCA97F4);
IronSourceDemoScript.OfferwallShowFailedEvent = (void(*)(void*, void *))IronSourceDemoScript.OfferwallShowFailedEventOffset;

IronSourceDemoScript.GetOfferwallCreditsFailedEventOffset = getRealOffset(0xCA9C7C);
IronSourceDemoScript.GetOfferwallCreditsFailedEvent = (void(*)(void*, void *))IronSourceDemoScript.GetOfferwallCreditsFailedEventOffset;

IronSourceDemoScript.OfferwallAvailableEventOffset = getRealOffset(0xCA9EAC);
IronSourceDemoScript.OfferwallAvailableEvent = (void(*)(void*, bool))IronSourceDemoScript.OfferwallAvailableEventOffset;

AndroidAgent.getBridgeOffset = getRealOffset(0x836D28);
AndroidAgent.getBridge = (void *(*)(void*))AndroidAgent.getBridgeOffset;

AndroidAgent.onApplicationPauseOffset = getRealOffset(0x836FE8);
AndroidAgent.onApplicationPause = (void(*)(void*, bool))AndroidAgent.onApplicationPauseOffset;

AndroidAgent.setMediationSegmentOffset = getRealOffset(0x837120);
AndroidAgent.setMediationSegment = (void(*)(void*, monoString*))AndroidAgent.setMediationSegmentOffset;

AndroidAgent.getAdvertiserIdOffset = getRealOffset(0x837208);
AndroidAgent.getAdvertiserId = (monoString *(*)(void*))AndroidAgent.getAdvertiserIdOffset;

AndroidAgent.validateIntegrationOffset = getRealOffset(0x837330);
AndroidAgent.validateIntegration = (void(*)(void*))AndroidAgent.validateIntegrationOffset;

AndroidAgent.shouldTrackNetworkStateOffset = getRealOffset(0x83744C);
AndroidAgent.shouldTrackNetworkState = (void(*)(void*, bool))AndroidAgent.shouldTrackNetworkStateOffset;

AndroidAgent.setDynamicUserIdOffset = getRealOffset(0x83755C);
AndroidAgent.setDynamicUserId = (bool(*)(void*, monoString*))AndroidAgent.setDynamicUserIdOffset;

AndroidAgent.setAdaptersDebugOffset = getRealOffset(0x837650);
AndroidAgent.setAdaptersDebug = (void(*)(void*, bool))AndroidAgent.setAdaptersDebugOffset;

AndroidAgent.setMetaDataOffset = getRealOffset(0x837760);
AndroidAgent.setMetaData = (void(*)(void*, monoString*, monoString*))AndroidAgent.setMetaDataOffset;

AndroidAgent.setUserIdOffset = getRealOffset(0x8379C8);
AndroidAgent.setUserId = (void(*)(void*, monoString*))AndroidAgent.setUserIdOffset;

AndroidAgent.initOffset = getRealOffset(0x837AB0);
AndroidAgent.init = (void(*)(void*, monoString*))AndroidAgent.initOffset;

AndroidAgent.showRewardedVideoOffset = getRealOffset(0x838310);
AndroidAgent.showRewardedVideo = (void(*)(void*))AndroidAgent.showRewardedVideoOffset;

AndroidAgent.showRewardedVideo1Offset = getRealOffset(0x83842C);
AndroidAgent.showRewardedVideo1 = (void(*)(void*, monoString*))AndroidAgent.showRewardedVideo1Offset;

AndroidAgent.isRewardedVideoAvailableOffset = getRealOffset(0x838514);
AndroidAgent.isRewardedVideoAvailable = (bool(*)(void*))AndroidAgent.isRewardedVideoAvailableOffset;

AndroidAgent.isRewardedVideoPlacementCappedOffset = getRealOffset(0x83863C);
AndroidAgent.isRewardedVideoPlacementCapped = (bool(*)(void*, monoString*))AndroidAgent.isRewardedVideoPlacementCappedOffset;

AndroidAgent.getPlacementInfoOffset = getRealOffset(0x838730);
AndroidAgent.getPlacementInfo = (void *(*)(void*, monoString*))AndroidAgent.getPlacementInfoOffset;

AndroidAgent.clearRewardedVideoServerParamsOffset = getRealOffset(0x838AEC);
AndroidAgent.clearRewardedVideoServerParams = (void(*)(void*))AndroidAgent.clearRewardedVideoServerParamsOffset;

AndroidAgent.showISDemandOnlyRewardedVideoOffset = getRealOffset(0x838C08);
AndroidAgent.showISDemandOnlyRewardedVideo = (void(*)(void*, monoString*))AndroidAgent.showISDemandOnlyRewardedVideoOffset;

AndroidAgent.loadISDemandOnlyRewardedVideoOffset = getRealOffset(0x838CF0);
AndroidAgent.loadISDemandOnlyRewardedVideo = (void(*)(void*, monoString*))AndroidAgent.loadISDemandOnlyRewardedVideoOffset;

AndroidAgent.isISDemandOnlyRewardedVideoAvailableOffset = getRealOffset(0x838DD8);
AndroidAgent.isISDemandOnlyRewardedVideoAvailable = (bool(*)(void*, monoString*))AndroidAgent.isISDemandOnlyRewardedVideoAvailableOffset;

AndroidAgent.loadInterstitialOffset = getRealOffset(0x838ECC);
AndroidAgent.loadInterstitial = (void(*)(void*))AndroidAgent.loadInterstitialOffset;

AndroidAgent.showInterstitialOffset = getRealOffset(0x838FE8);
AndroidAgent.showInterstitial = (void(*)(void*))AndroidAgent.showInterstitialOffset;

AndroidAgent.showInterstitial1Offset = getRealOffset(0x839104);
AndroidAgent.showInterstitial1 = (void(*)(void*, monoString*))AndroidAgent.showInterstitial1Offset;

AndroidAgent.isInterstitialReadyOffset = getRealOffset(0x8391EC);
AndroidAgent.isInterstitialReady = (bool(*)(void*))AndroidAgent.isInterstitialReadyOffset;

AndroidAgent.isInterstitialPlacementCappedOffset = getRealOffset(0x839314);
AndroidAgent.isInterstitialPlacementCapped = (bool(*)(void*, monoString*))AndroidAgent.isInterstitialPlacementCappedOffset;

AndroidAgent.loadISDemandOnlyInterstitialOffset = getRealOffset(0x839408);
AndroidAgent.loadISDemandOnlyInterstitial = (void(*)(void*, monoString*))AndroidAgent.loadISDemandOnlyInterstitialOffset;

AndroidAgent.showISDemandOnlyInterstitialOffset = getRealOffset(0x8394F0);
AndroidAgent.showISDemandOnlyInterstitial = (void(*)(void*, monoString*))AndroidAgent.showISDemandOnlyInterstitialOffset;

AndroidAgent.isISDemandOnlyInterstitialReadyOffset = getRealOffset(0x8395D8);
AndroidAgent.isISDemandOnlyInterstitialReady = (bool(*)(void*, monoString*))AndroidAgent.isISDemandOnlyInterstitialReadyOffset;

AndroidAgent.showOfferwallOffset = getRealOffset(0x8396CC);
AndroidAgent.showOfferwall = (void(*)(void*))AndroidAgent.showOfferwallOffset;

AndroidAgent.showOfferwall1Offset = getRealOffset(0x8397E8);
AndroidAgent.showOfferwall1 = (void(*)(void*, monoString*))AndroidAgent.showOfferwall1Offset;

AndroidAgent.getOfferwallCreditsOffset = getRealOffset(0x8398D0);
AndroidAgent.getOfferwallCredits = (void(*)(void*))AndroidAgent.getOfferwallCreditsOffset;

AndroidAgent.isOfferwallAvailableOffset = getRealOffset(0x8399EC);
AndroidAgent.isOfferwallAvailable = (bool(*)(void*))AndroidAgent.isOfferwallAvailableOffset;

AndroidAgent.loadBannerOffset = getRealOffset(0x839B14);
AndroidAgent.loadBanner = (void(*)(void*, void *, int))AndroidAgent.loadBannerOffset;

AndroidAgent.loadBanner1Offset = getRealOffset(0x839B80);
AndroidAgent.loadBanner1 = (void(*)(void*, void *, int, monoString*))AndroidAgent.loadBanner1Offset;

AndroidAgent.destroyBannerOffset = getRealOffset(0x839DF8);
AndroidAgent.destroyBanner = (void(*)(void*))AndroidAgent.destroyBannerOffset;

AndroidAgent.displayBannerOffset = getRealOffset(0x839F14);
AndroidAgent.displayBanner = (void(*)(void*))AndroidAgent.displayBannerOffset;

AndroidAgent.hideBannerOffset = getRealOffset(0x83A030);
AndroidAgent.hideBanner = (void(*)(void*))AndroidAgent.hideBannerOffset;

AndroidAgent.isBannerPlacementCappedOffset = getRealOffset(0x83A14C);
AndroidAgent.isBannerPlacementCapped = (bool(*)(void*, monoString*))AndroidAgent.isBannerPlacementCappedOffset;

AndroidAgent.setSegmentOffset = getRealOffset(0x83A240);
AndroidAgent.setSegment = (void(*)(void*, void *))AndroidAgent.setSegmentOffset;

AndroidAgent.setConsentOffset = getRealOffset(0x83A34C);
AndroidAgent.setConsent = (void(*)(void*, bool))AndroidAgent.setConsentOffset;

AndroidAgent.loadConsentViewWithTypeOffset = getRealOffset(0x83A45C);
AndroidAgent.loadConsentViewWithType = (void(*)(void*, monoString*))AndroidAgent.loadConsentViewWithTypeOffset;

AndroidAgent.showConsentViewWithTypeOffset = getRealOffset(0x83A4E0);
AndroidAgent.showConsentViewWithType = (void(*)(void*, monoString*))AndroidAgent.showConsentViewWithTypeOffset;

IronSource.get_AgentOffset = getRealOffset(0xC9F328);
IronSource.get_Agent = (void *(*)())IronSource.get_AgentOffset;

IronSource.pluginVersionOffset = getRealOffset(0xC9F3B0);
IronSource.pluginVersion = (monoString *(*)())IronSource.pluginVersionOffset;

IronSource.unityVersionOffset = getRealOffset(0xC9F400);
IronSource.unityVersion = (monoString *(*)())IronSource.unityVersionOffset;

IronSource.setUnsupportedPlatformOffset = getRealOffset(0xC9F408);
IronSource.setUnsupportedPlatform = (void(*)())IronSource.setUnsupportedPlatformOffset;

IronSource.onApplicationPauseOffset = getRealOffset(0xC9F464);
IronSource.onApplicationPause = (void(*)(void*, bool))IronSource.onApplicationPauseOffset;

IronSource.setMediationSegmentOffset = getRealOffset(0xC9F538);
IronSource.setMediationSegment = (void(*)(void*, monoString*))IronSource.setMediationSegmentOffset;

IronSource.getAdvertiserIdOffset = getRealOffset(0xC9F60C);
IronSource.getAdvertiserId = (monoString *(*)(void*))IronSource.getAdvertiserIdOffset;

IronSource.validateIntegrationOffset = getRealOffset(0xC9F6D8);
IronSource.validateIntegration = (void(*)(void*))IronSource.validateIntegrationOffset;

IronSource.shouldTrackNetworkStateOffset = getRealOffset(0xC9F7A4);
IronSource.shouldTrackNetworkState = (void(*)(void*, bool))IronSource.shouldTrackNetworkStateOffset;

IronSource.setDynamicUserIdOffset = getRealOffset(0xC9F878);
IronSource.setDynamicUserId = (bool(*)(void*, monoString*))IronSource.setDynamicUserIdOffset;

IronSource.setAdaptersDebugOffset = getRealOffset(0xC9F94C);
IronSource.setAdaptersDebug = (void(*)(void*, bool))IronSource.setAdaptersDebugOffset;

IronSource.setMetaDataOffset = getRealOffset(0xC9FA20);
IronSource.setMetaData = (void(*)(void*, monoString*, monoString*))IronSource.setMetaDataOffset;

IronSource.setUserIdOffset = getRealOffset(0xC9FBD8);
IronSource.setUserId = (void(*)(void*, monoString*))IronSource.setUserIdOffset;

IronSource.initOffset = getRealOffset(0xC9FCAC);
IronSource.init = (void(*)(void*, monoString*))IronSource.initOffset;

IronSource.showRewardedVideoOffset = getRealOffset(0xC9FF38);
IronSource.showRewardedVideo = (void(*)(void*))IronSource.showRewardedVideoOffset;

IronSource.showRewardedVideo1Offset = getRealOffset(0xCA0004);
IronSource.showRewardedVideo1 = (void(*)(void*, monoString*))IronSource.showRewardedVideo1Offset;

IronSource.getPlacementInfoOffset = getRealOffset(0xCA00D8);
IronSource.getPlacementInfo = (void *(*)(void*, monoString*))IronSource.getPlacementInfoOffset;

IronSource.isRewardedVideoAvailableOffset = getRealOffset(0xCA01AC);
IronSource.isRewardedVideoAvailable = (bool(*)(void*))IronSource.isRewardedVideoAvailableOffset;

IronSource.isRewardedVideoPlacementCappedOffset = getRealOffset(0xCA0278);
IronSource.isRewardedVideoPlacementCapped = (bool(*)(void*, monoString*))IronSource.isRewardedVideoPlacementCappedOffset;

IronSource.clearRewardedVideoServerParamsOffset = getRealOffset(0xCA0420);
IronSource.clearRewardedVideoServerParams = (void(*)(void*))IronSource.clearRewardedVideoServerParamsOffset;

IronSource.showISDemandOnlyRewardedVideoOffset = getRealOffset(0xCA04EC);
IronSource.showISDemandOnlyRewardedVideo = (void(*)(void*, monoString*))IronSource.showISDemandOnlyRewardedVideoOffset;

IronSource.loadISDemandOnlyRewardedVideoOffset = getRealOffset(0xCA05C0);
IronSource.loadISDemandOnlyRewardedVideo = (void(*)(void*, monoString*))IronSource.loadISDemandOnlyRewardedVideoOffset;

IronSource.isISDemandOnlyRewardedVideoAvailableOffset = getRealOffset(0xCA0694);
IronSource.isISDemandOnlyRewardedVideoAvailable = (bool(*)(void*, monoString*))IronSource.isISDemandOnlyRewardedVideoAvailableOffset;

IronSource.loadInterstitialOffset = getRealOffset(0xCA0768);
IronSource.loadInterstitial = (void(*)(void*))IronSource.loadInterstitialOffset;

IronSource.showInterstitialOffset = getRealOffset(0xCA0834);
IronSource.showInterstitial = (void(*)(void*))IronSource.showInterstitialOffset;

IronSource.showInterstitial1Offset = getRealOffset(0xCA0900);
IronSource.showInterstitial1 = (void(*)(void*, monoString*))IronSource.showInterstitial1Offset;

IronSource.isInterstitialReadyOffset = getRealOffset(0xCA09D4);
IronSource.isInterstitialReady = (bool(*)(void*))IronSource.isInterstitialReadyOffset;

IronSource.isInterstitialPlacementCappedOffset = getRealOffset(0xCA0AA0);
IronSource.isInterstitialPlacementCapped = (bool(*)(void*, monoString*))IronSource.isInterstitialPlacementCappedOffset;

IronSource.loadISDemandOnlyInterstitialOffset = getRealOffset(0xCA0B74);
IronSource.loadISDemandOnlyInterstitial = (void(*)(void*, monoString*))IronSource.loadISDemandOnlyInterstitialOffset;

IronSource.showISDemandOnlyInterstitialOffset = getRealOffset(0xCA0C48);
IronSource.showISDemandOnlyInterstitial = (void(*)(void*, monoString*))IronSource.showISDemandOnlyInterstitialOffset;

IronSource.isISDemandOnlyInterstitialReadyOffset = getRealOffset(0xCA0D1C);
IronSource.isISDemandOnlyInterstitialReady = (bool(*)(void*, monoString*))IronSource.isISDemandOnlyInterstitialReadyOffset;

IronSource.showOfferwallOffset = getRealOffset(0xCA0DF0);
IronSource.showOfferwall = (void(*)(void*))IronSource.showOfferwallOffset;

IronSource.showOfferwall1Offset = getRealOffset(0xCA0EBC);
IronSource.showOfferwall1 = (void(*)(void*, monoString*))IronSource.showOfferwall1Offset;

IronSource.getOfferwallCreditsOffset = getRealOffset(0xCA0F90);
IronSource.getOfferwallCredits = (void(*)(void*))IronSource.getOfferwallCreditsOffset;

IronSource.isOfferwallAvailableOffset = getRealOffset(0xCA105C);
IronSource.isOfferwallAvailable = (bool(*)(void*))IronSource.isOfferwallAvailableOffset;

IronSource.loadBannerOffset = getRealOffset(0xCA1128);
IronSource.loadBanner = (void(*)(void*, void *, int))IronSource.loadBannerOffset;

IronSource.loadBanner1Offset = getRealOffset(0xCA1204);
IronSource.loadBanner1 = (void(*)(void*, void *, int, monoString*))IronSource.loadBanner1Offset;

IronSource.destroyBannerOffset = getRealOffset(0xCA12F4);
IronSource.destroyBanner = (void(*)(void*))IronSource.destroyBannerOffset;

IronSource.displayBannerOffset = getRealOffset(0xCA13C0);
IronSource.displayBanner = (void(*)(void*))IronSource.displayBannerOffset;

IronSource.hideBannerOffset = getRealOffset(0xCA148C);
IronSource.hideBanner = (void(*)(void*))IronSource.hideBannerOffset;

IronSource.isBannerPlacementCappedOffset = getRealOffset(0xCA1558);
IronSource.isBannerPlacementCapped = (bool(*)(void*, monoString*))IronSource.isBannerPlacementCappedOffset;

IronSource.setSegmentOffset = getRealOffset(0xCA162C);
IronSource.setSegment = (void(*)(void*, void *))IronSource.setSegmentOffset;

IronSource.setConsentOffset = getRealOffset(0xCA1700);
IronSource.setConsent = (void(*)(void*, bool))IronSource.setConsentOffset;

IronSource.loadConsentViewWithTypeOffset = getRealOffset(0xCA17D4);
IronSource.loadConsentViewWithType = (void(*)(void*, monoString*))IronSource.loadConsentViewWithTypeOffset;

IronSource.showConsentViewWithTypeOffset = getRealOffset(0xCA18A8);
IronSource.showConsentViewWithType = (void(*)(void*, monoString*))IronSource.showConsentViewWithTypeOffset;

IronSourceConfig.get_InstanceOffset = getRealOffset(0xCA1CC4);
IronSourceConfig.get_Instance = (void *(*)())IronSourceConfig.get_InstanceOffset;

IronSourceConfig.setLanguageOffset = getRealOffset(0xCA2020);
IronSourceConfig.setLanguage = (void(*)(void*, monoString*))IronSourceConfig.setLanguageOffset;

IronSourceConfig.setClientSideCallbacksOffset = getRealOffset(0xCA2138);
IronSourceConfig.setClientSideCallbacks = (void(*)(void*, bool))IronSourceConfig.setClientSideCallbacksOffset;

IronSourceError.getErrorCodeOffset = getRealOffset(0xCA9F64);
IronSourceError.getErrorCode = (int(*)(void*))IronSourceError.getErrorCodeOffset;

IronSourceError.getDescriptionOffset = getRealOffset(0xCA9F6C);
IronSourceError.getDescription = (monoString *(*)(void*))IronSourceError.getDescriptionOffset;

IronSourceError.getCodeOffset = getRealOffset(0xCA9F74);
IronSourceError.getCode = (int(*)(void*))IronSourceError.getCodeOffset;

IronSourceError.ToStringOffset = getRealOffset(0xCA9FA4);
IronSourceError.ToString = (monoString *(*)(void*))IronSourceError.ToStringOffset;

IronSourceEvents.AwakeOffset = getRealOffset(0xCAA02C);
IronSourceEvents.Awake = (void(*)(void*))IronSourceEvents.AwakeOffset;

IronSourceEvents.onRewardedVideoAdShowFailedOffset = getRealOffset(0xCAA31C);
IronSourceEvents.onRewardedVideoAdShowFailed = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdShowFailedOffset;

IronSourceEvents.add__onRewardedVideoAdOpenedEventOffset = getRealOffset(0xCAA678);
IronSourceEvents.add__onRewardedVideoAdOpenedEvent = (void(*)(void *))IronSourceEvents.add__onRewardedVideoAdOpenedEventOffset;

IronSourceEvents.remove__onRewardedVideoAdOpenedEventOffset = getRealOffset(0xCAA740);
IronSourceEvents.remove__onRewardedVideoAdOpenedEvent = (void(*)(void *))IronSourceEvents.remove__onRewardedVideoAdOpenedEventOffset;

IronSourceEvents.add_onRewardedVideoAdOpenedEventOffset = getRealOffset(0xCA3308);
IronSourceEvents.add_onRewardedVideoAdOpenedEvent = (void(*)(void *))IronSourceEvents.add_onRewardedVideoAdOpenedEventOffset;

IronSourceEvents.remove_onRewardedVideoAdOpenedEventOffset = getRealOffset(0xCAA808);
IronSourceEvents.remove_onRewardedVideoAdOpenedEvent = (void(*)(void *))IronSourceEvents.remove_onRewardedVideoAdOpenedEventOffset;

IronSourceEvents.onRewardedVideoAdOpenedOffset = getRealOffset(0xCAA8AC);
IronSourceEvents.onRewardedVideoAdOpened = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdOpenedOffset;

IronSourceEvents.add__onRewardedVideoAdClosedEventOffset = getRealOffset(0xCAA918);
IronSourceEvents.add__onRewardedVideoAdClosedEvent = (void(*)(void *))IronSourceEvents.add__onRewardedVideoAdClosedEventOffset;

IronSourceEvents.remove__onRewardedVideoAdClosedEventOffset = getRealOffset(0xCAA9E0);
IronSourceEvents.remove__onRewardedVideoAdClosedEvent = (void(*)(void *))IronSourceEvents.remove__onRewardedVideoAdClosedEventOffset;

IronSourceEvents.add_onRewardedVideoAdClosedEventOffset = getRealOffset(0xCA33A4);
IronSourceEvents.add_onRewardedVideoAdClosedEvent = (void(*)(void *))IronSourceEvents.add_onRewardedVideoAdClosedEventOffset;

IronSourceEvents.remove_onRewardedVideoAdClosedEventOffset = getRealOffset(0xCAAAA8);
IronSourceEvents.remove_onRewardedVideoAdClosedEvent = (void(*)(void *))IronSourceEvents.remove_onRewardedVideoAdClosedEventOffset;

IronSourceEvents.onRewardedVideoAdClosedOffset = getRealOffset(0xCAAB4C);
IronSourceEvents.onRewardedVideoAdClosed = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdClosedOffset;

IronSourceEvents.add__onRewardedVideoAdStartedEventOffset = getRealOffset(0xCAABB8);
IronSourceEvents.add__onRewardedVideoAdStartedEvent = (void(*)(void *))IronSourceEvents.add__onRewardedVideoAdStartedEventOffset;

IronSourceEvents.remove__onRewardedVideoAdStartedEventOffset = getRealOffset(0xCAAC80);
IronSourceEvents.remove__onRewardedVideoAdStartedEvent = (void(*)(void *))IronSourceEvents.remove__onRewardedVideoAdStartedEventOffset;

IronSourceEvents.add_onRewardedVideoAdStartedEventOffset = getRealOffset(0xCA34DC);
IronSourceEvents.add_onRewardedVideoAdStartedEvent = (void(*)(void *))IronSourceEvents.add_onRewardedVideoAdStartedEventOffset;

IronSourceEvents.remove_onRewardedVideoAdStartedEventOffset = getRealOffset(0xCAAD48);
IronSourceEvents.remove_onRewardedVideoAdStartedEvent = (void(*)(void *))IronSourceEvents.remove_onRewardedVideoAdStartedEventOffset;

IronSourceEvents.onRewardedVideoAdStartedOffset = getRealOffset(0xCAADEC);
IronSourceEvents.onRewardedVideoAdStarted = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdStartedOffset;

IronSourceEvents.add__onRewardedVideoAdEndedEventOffset = getRealOffset(0xCAAE58);
IronSourceEvents.add__onRewardedVideoAdEndedEvent = (void(*)(void *))IronSourceEvents.add__onRewardedVideoAdEndedEventOffset;

IronSourceEvents.remove__onRewardedVideoAdEndedEventOffset = getRealOffset(0xCAAF20);
IronSourceEvents.remove__onRewardedVideoAdEndedEvent = (void(*)(void *))IronSourceEvents.remove__onRewardedVideoAdEndedEventOffset;

IronSourceEvents.add_onRewardedVideoAdEndedEventOffset = getRealOffset(0xCA3578);
IronSourceEvents.add_onRewardedVideoAdEndedEvent = (void(*)(void *))IronSourceEvents.add_onRewardedVideoAdEndedEventOffset;

IronSourceEvents.remove_onRewardedVideoAdEndedEventOffset = getRealOffset(0xCAAFE8);
IronSourceEvents.remove_onRewardedVideoAdEndedEvent = (void(*)(void *))IronSourceEvents.remove_onRewardedVideoAdEndedEventOffset;

IronSourceEvents.onRewardedVideoAdEndedOffset = getRealOffset(0xCAB08C);
IronSourceEvents.onRewardedVideoAdEnded = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdEndedOffset;

IronSourceEvents.onRewardedVideoAdRewardedOffset = getRealOffset(0xCAB32C);
IronSourceEvents.onRewardedVideoAdRewarded = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdRewardedOffset;

IronSourceEvents.onRewardedVideoAdClickedOffset = getRealOffset(0xCAB884);
IronSourceEvents.onRewardedVideoAdClicked = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdClickedOffset;

IronSourceEvents.onRewardedVideoAvailabilityChangedOffset = getRealOffset(0xCABB60);
IronSourceEvents.onRewardedVideoAvailabilityChanged = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAvailabilityChangedOffset;

IronSourceEvents.onRewardedVideoAdLoadedDemandOnlyOffset = getRealOffset(0xCABE30);
IronSourceEvents.onRewardedVideoAdLoadedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdLoadedDemandOnlyOffset;

IronSourceEvents.onRewardedVideoAdLoadFailedDemandOnlyOffset = getRealOffset(0xCAC0E4);
IronSourceEvents.onRewardedVideoAdLoadFailedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdLoadFailedDemandOnlyOffset;

IronSourceEvents.onRewardedVideoAdOpenedDemandOnlyOffset = getRealOffset(0xCAC49C);
IronSourceEvents.onRewardedVideoAdOpenedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdOpenedDemandOnlyOffset;

IronSourceEvents.onRewardedVideoAdClosedDemandOnlyOffset = getRealOffset(0xCAC750);
IronSourceEvents.onRewardedVideoAdClosedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdClosedDemandOnlyOffset;

IronSourceEvents.onRewardedVideoAdRewardedDemandOnlyOffset = getRealOffset(0xCACA04);
IronSourceEvents.onRewardedVideoAdRewardedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdRewardedDemandOnlyOffset;

IronSourceEvents.onRewardedVideoAdShowFailedDemandOnlyOffset = getRealOffset(0xCACCB8);
IronSourceEvents.onRewardedVideoAdShowFailedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdShowFailedDemandOnlyOffset;

IronSourceEvents.onRewardedVideoAdClickedDemandOnlyOffset = getRealOffset(0xCAD060);
IronSourceEvents.onRewardedVideoAdClickedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onRewardedVideoAdClickedDemandOnlyOffset;

IronSourceEvents.add__onInterstitialAdReadyEventOffset = getRealOffset(0xCAD0E0);
IronSourceEvents.add__onInterstitialAdReadyEvent = (void(*)(void *))IronSourceEvents.add__onInterstitialAdReadyEventOffset;

IronSourceEvents.remove__onInterstitialAdReadyEventOffset = getRealOffset(0xCAD1A8);
IronSourceEvents.remove__onInterstitialAdReadyEvent = (void(*)(void *))IronSourceEvents.remove__onInterstitialAdReadyEventOffset;

IronSourceEvents.add_onInterstitialAdReadyEventOffset = getRealOffset(0xCA5CEC);
IronSourceEvents.add_onInterstitialAdReadyEvent = (void(*)(void *))IronSourceEvents.add_onInterstitialAdReadyEventOffset;

IronSourceEvents.remove_onInterstitialAdReadyEventOffset = getRealOffset(0xCAD270);
IronSourceEvents.remove_onInterstitialAdReadyEvent = (void(*)(void *))IronSourceEvents.remove_onInterstitialAdReadyEventOffset;

IronSourceEvents.onInterstitialAdReadyOffset = getRealOffset(0xCAD314);
IronSourceEvents.onInterstitialAdReady = (void(*)(void*))IronSourceEvents.onInterstitialAdReadyOffset;

IronSourceEvents.onInterstitialAdLoadFailedOffset = getRealOffset(0xCAD5B4);
IronSourceEvents.onInterstitialAdLoadFailed = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdLoadFailedOffset;

IronSourceEvents.add__onInterstitialAdOpenedEventOffset = getRealOffset(0xCAD65C);
IronSourceEvents.add__onInterstitialAdOpenedEvent = (void(*)(void *))IronSourceEvents.add__onInterstitialAdOpenedEventOffset;

IronSourceEvents.remove__onInterstitialAdOpenedEventOffset = getRealOffset(0xCAD724);
IronSourceEvents.remove__onInterstitialAdOpenedEvent = (void(*)(void *))IronSourceEvents.remove__onInterstitialAdOpenedEventOffset;

IronSourceEvents.add_onInterstitialAdOpenedEventOffset = getRealOffset(0xCA5FF8);
IronSourceEvents.add_onInterstitialAdOpenedEvent = (void(*)(void *))IronSourceEvents.add_onInterstitialAdOpenedEventOffset;

IronSourceEvents.remove_onInterstitialAdOpenedEventOffset = getRealOffset(0xCAD7EC);
IronSourceEvents.remove_onInterstitialAdOpenedEvent = (void(*)(void *))IronSourceEvents.remove_onInterstitialAdOpenedEventOffset;

IronSourceEvents.onInterstitialAdOpenedOffset = getRealOffset(0xCAD890);
IronSourceEvents.onInterstitialAdOpened = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdOpenedOffset;

IronSourceEvents.add__onInterstitialAdClosedEventOffset = getRealOffset(0xCAD8FC);
IronSourceEvents.add__onInterstitialAdClosedEvent = (void(*)(void *))IronSourceEvents.add__onInterstitialAdClosedEventOffset;

IronSourceEvents.remove__onInterstitialAdClosedEventOffset = getRealOffset(0xCAD9C4);
IronSourceEvents.remove__onInterstitialAdClosedEvent = (void(*)(void *))IronSourceEvents.remove__onInterstitialAdClosedEventOffset;

IronSourceEvents.add_onInterstitialAdClosedEventOffset = getRealOffset(0xCA6094);
IronSourceEvents.add_onInterstitialAdClosedEvent = (void(*)(void *))IronSourceEvents.add_onInterstitialAdClosedEventOffset;

IronSourceEvents.remove_onInterstitialAdClosedEventOffset = getRealOffset(0xCADA8C);
IronSourceEvents.remove_onInterstitialAdClosedEvent = (void(*)(void *))IronSourceEvents.remove_onInterstitialAdClosedEventOffset;

IronSourceEvents.onInterstitialAdClosedOffset = getRealOffset(0xCADB30);
IronSourceEvents.onInterstitialAdClosed = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdClosedOffset;

IronSourceEvents.add__onInterstitialAdShowSucceededEventOffset = getRealOffset(0xCADB9C);
IronSourceEvents.add__onInterstitialAdShowSucceededEvent = (void(*)(void *))IronSourceEvents.add__onInterstitialAdShowSucceededEventOffset;

IronSourceEvents.remove__onInterstitialAdShowSucceededEventOffset = getRealOffset(0xCADC64);
IronSourceEvents.remove__onInterstitialAdShowSucceededEvent = (void(*)(void *))IronSourceEvents.remove__onInterstitialAdShowSucceededEventOffset;

IronSourceEvents.add_onInterstitialAdShowSucceededEventOffset = getRealOffset(0xCA5E24);
IronSourceEvents.add_onInterstitialAdShowSucceededEvent = (void(*)(void *))IronSourceEvents.add_onInterstitialAdShowSucceededEventOffset;

IronSourceEvents.remove_onInterstitialAdShowSucceededEventOffset = getRealOffset(0xCADD2C);
IronSourceEvents.remove_onInterstitialAdShowSucceededEvent = (void(*)(void *))IronSourceEvents.remove_onInterstitialAdShowSucceededEventOffset;

IronSourceEvents.onInterstitialAdShowSucceededOffset = getRealOffset(0xCADDD0);
IronSourceEvents.onInterstitialAdShowSucceeded = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdShowSucceededOffset;

IronSourceEvents.onInterstitialAdShowFailedOffset = getRealOffset(0xCAE070);
IronSourceEvents.onInterstitialAdShowFailed = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdShowFailedOffset;

IronSourceEvents.add__onInterstitialAdClickedEventOffset = getRealOffset(0xCAE118);
IronSourceEvents.add__onInterstitialAdClickedEvent = (void(*)(void *))IronSourceEvents.add__onInterstitialAdClickedEventOffset;

IronSourceEvents.remove__onInterstitialAdClickedEventOffset = getRealOffset(0xCAE1E0);
IronSourceEvents.remove__onInterstitialAdClickedEvent = (void(*)(void *))IronSourceEvents.remove__onInterstitialAdClickedEventOffset;

IronSourceEvents.add_onInterstitialAdClickedEventOffset = getRealOffset(0xCA5F5C);
IronSourceEvents.add_onInterstitialAdClickedEvent = (void(*)(void *))IronSourceEvents.add_onInterstitialAdClickedEventOffset;

IronSourceEvents.remove_onInterstitialAdClickedEventOffset = getRealOffset(0xCAE2A8);
IronSourceEvents.remove_onInterstitialAdClickedEvent = (void(*)(void *))IronSourceEvents.remove_onInterstitialAdClickedEventOffset;

IronSourceEvents.onInterstitialAdClickedOffset = getRealOffset(0xCAE34C);
IronSourceEvents.onInterstitialAdClicked = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdClickedOffset;

IronSourceEvents.onInterstitialAdReadyDemandOnlyOffset = getRealOffset(0xCAE5EC);
IronSourceEvents.onInterstitialAdReadyDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdReadyDemandOnlyOffset;

IronSourceEvents.onInterstitialAdLoadFailedDemandOnlyOffset = getRealOffset(0xCAE8A0);
IronSourceEvents.onInterstitialAdLoadFailedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdLoadFailedDemandOnlyOffset;

IronSourceEvents.onInterstitialAdOpenedDemandOnlyOffset = getRealOffset(0xCAEC48);
IronSourceEvents.onInterstitialAdOpenedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdOpenedDemandOnlyOffset;

IronSourceEvents.onInterstitialAdClosedDemandOnlyOffset = getRealOffset(0xCAEEFC);
IronSourceEvents.onInterstitialAdClosedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdClosedDemandOnlyOffset;

IronSourceEvents.onInterstitialAdShowFailedDemandOnlyOffset = getRealOffset(0xCAF1B0);
IronSourceEvents.onInterstitialAdShowFailedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdShowFailedDemandOnlyOffset;

IronSourceEvents.onInterstitialAdClickedDemandOnlyOffset = getRealOffset(0xCAF558);
IronSourceEvents.onInterstitialAdClickedDemandOnly = (void(*)(void*, monoString*))IronSourceEvents.onInterstitialAdClickedDemandOnlyOffset;

IronSourceEvents.add__onOfferwallOpenedEventOffset = getRealOffset(0xCAF5D8);
IronSourceEvents.add__onOfferwallOpenedEvent = (void(*)(void *))IronSourceEvents.add__onOfferwallOpenedEventOffset;

IronSourceEvents.remove__onOfferwallOpenedEventOffset = getRealOffset(0xCAF6A0);
IronSourceEvents.remove__onOfferwallOpenedEvent = (void(*)(void *))IronSourceEvents.remove__onOfferwallOpenedEventOffset;

IronSourceEvents.add_onOfferwallOpenedEventOffset = getRealOffset(0xCA2FFC);
IronSourceEvents.add_onOfferwallOpenedEvent = (void(*)(void *))IronSourceEvents.add_onOfferwallOpenedEventOffset;

IronSourceEvents.remove_onOfferwallOpenedEventOffset = getRealOffset(0xCAF768);
IronSourceEvents.remove_onOfferwallOpenedEvent = (void(*)(void *))IronSourceEvents.remove_onOfferwallOpenedEventOffset;

IronSourceEvents.onOfferwallOpenedOffset = getRealOffset(0xCAF80C);
IronSourceEvents.onOfferwallOpened = (void(*)(void*, monoString*))IronSourceEvents.onOfferwallOpenedOffset;

IronSourceEvents.onOfferwallShowFailedOffset = getRealOffset(0xCAFAAC);
IronSourceEvents.onOfferwallShowFailed = (void(*)(void*, monoString*))IronSourceEvents.onOfferwallShowFailedOffset;

IronSourceEvents.add__onOfferwallClosedEventOffset = getRealOffset(0xCAFB54);
IronSourceEvents.add__onOfferwallClosedEvent = (void(*)(void *))IronSourceEvents.add__onOfferwallClosedEventOffset;

IronSourceEvents.remove__onOfferwallClosedEventOffset = getRealOffset(0xCAFC1C);
IronSourceEvents.remove__onOfferwallClosedEvent = (void(*)(void *))IronSourceEvents.remove__onOfferwallClosedEventOffset;

IronSourceEvents.add_onOfferwallClosedEventOffset = getRealOffset(0xCA2F60);
IronSourceEvents.add_onOfferwallClosedEvent = (void(*)(void *))IronSourceEvents.add_onOfferwallClosedEventOffset;

IronSourceEvents.remove_onOfferwallClosedEventOffset = getRealOffset(0xCAFCE4);
IronSourceEvents.remove_onOfferwallClosedEvent = (void(*)(void *))IronSourceEvents.remove_onOfferwallClosedEventOffset;

IronSourceEvents.onOfferwallClosedOffset = getRealOffset(0xCAFD88);
IronSourceEvents.onOfferwallClosed = (void(*)(void*, monoString*))IronSourceEvents.onOfferwallClosedOffset;

IronSourceEvents.onGetOfferwallCreditsFailedOffset = getRealOffset(0xCB0028);
IronSourceEvents.onGetOfferwallCreditsFailed = (void(*)(void*, monoString*))IronSourceEvents.onGetOfferwallCreditsFailedOffset;

IronSourceEvents.onOfferwallAdCreditedOffset = getRealOffset(0xCB0304);
IronSourceEvents.onOfferwallAdCredited = (void(*)(void*, monoString*))IronSourceEvents.onOfferwallAdCreditedOffset;

IronSourceEvents.onOfferwallAvailableOffset = getRealOffset(0xCB0614);
IronSourceEvents.onOfferwallAvailable = (void(*)(void*, monoString*))IronSourceEvents.onOfferwallAvailableOffset;

IronSourceEvents.add__onBannerAdLoadedEventOffset = getRealOffset(0xCB06B0);
IronSourceEvents.add__onBannerAdLoadedEvent = (void(*)(void *))IronSourceEvents.add__onBannerAdLoadedEventOffset;

IronSourceEvents.remove__onBannerAdLoadedEventOffset = getRealOffset(0xCB0778);
IronSourceEvents.remove__onBannerAdLoadedEvent = (void(*)(void *))IronSourceEvents.remove__onBannerAdLoadedEventOffset;

IronSourceEvents.add_onBannerAdLoadedEventOffset = getRealOffset(0xCA64D8);
IronSourceEvents.add_onBannerAdLoadedEvent = (void(*)(void *))IronSourceEvents.add_onBannerAdLoadedEventOffset;

IronSourceEvents.remove_onBannerAdLoadedEventOffset = getRealOffset(0xCB0840);
IronSourceEvents.remove_onBannerAdLoadedEvent = (void(*)(void *))IronSourceEvents.remove_onBannerAdLoadedEventOffset;

IronSourceEvents.onBannerAdLoadedOffset = getRealOffset(0xCB08E4);
IronSourceEvents.onBannerAdLoaded = (void(*)(void*))IronSourceEvents.onBannerAdLoadedOffset;

IronSourceEvents.onBannerAdLoadFailedOffset = getRealOffset(0xCB0B84);
IronSourceEvents.onBannerAdLoadFailed = (void(*)(void*, monoString*))IronSourceEvents.onBannerAdLoadFailedOffset;

IronSourceEvents.add__onBannerAdClickedEventOffset = getRealOffset(0xCB0C2C);
IronSourceEvents.add__onBannerAdClickedEvent = (void(*)(void *))IronSourceEvents.add__onBannerAdClickedEventOffset;

IronSourceEvents.remove__onBannerAdClickedEventOffset = getRealOffset(0xCB0CF4);
IronSourceEvents.remove__onBannerAdClickedEvent = (void(*)(void *))IronSourceEvents.remove__onBannerAdClickedEventOffset;

IronSourceEvents.add_onBannerAdClickedEventOffset = getRealOffset(0xCA6610);
IronSourceEvents.add_onBannerAdClickedEvent = (void(*)(void *))IronSourceEvents.add_onBannerAdClickedEventOffset;

IronSourceEvents.remove_onBannerAdClickedEventOffset = getRealOffset(0xCB0DBC);
IronSourceEvents.remove_onBannerAdClickedEvent = (void(*)(void *))IronSourceEvents.remove_onBannerAdClickedEventOffset;

IronSourceEvents.onBannerAdClickedOffset = getRealOffset(0xCB0E60);
IronSourceEvents.onBannerAdClicked = (void(*)(void*))IronSourceEvents.onBannerAdClickedOffset;

IronSourceEvents.add__onBannerAdScreenPresentedEventOffset = getRealOffset(0xCB0ECC);
IronSourceEvents.add__onBannerAdScreenPresentedEvent = (void(*)(void *))IronSourceEvents.add__onBannerAdScreenPresentedEventOffset;

IronSourceEvents.remove__onBannerAdScreenPresentedEventOffset = getRealOffset(0xCB0F94);
IronSourceEvents.remove__onBannerAdScreenPresentedEvent = (void(*)(void *))IronSourceEvents.remove__onBannerAdScreenPresentedEventOffset;

IronSourceEvents.add_onBannerAdScreenPresentedEventOffset = getRealOffset(0xCA66AC);
IronSourceEvents.add_onBannerAdScreenPresentedEvent = (void(*)(void *))IronSourceEvents.add_onBannerAdScreenPresentedEventOffset;

IronSourceEvents.remove_onBannerAdScreenPresentedEventOffset = getRealOffset(0xCB105C);
IronSourceEvents.remove_onBannerAdScreenPresentedEvent = (void(*)(void *))IronSourceEvents.remove_onBannerAdScreenPresentedEventOffset;

IronSourceEvents.onBannerAdScreenPresentedOffset = getRealOffset(0xCB1100);
IronSourceEvents.onBannerAdScreenPresented = (void(*)(void*))IronSourceEvents.onBannerAdScreenPresentedOffset;

IronSourceEvents.add__onBannerAdScreenDismissedEventOffset = getRealOffset(0xCB116C);
IronSourceEvents.add__onBannerAdScreenDismissedEvent = (void(*)(void *))IronSourceEvents.add__onBannerAdScreenDismissedEventOffset;

IronSourceEvents.remove__onBannerAdScreenDismissedEventOffset = getRealOffset(0xCB1234);
IronSourceEvents.remove__onBannerAdScreenDismissedEvent = (void(*)(void *))IronSourceEvents.remove__onBannerAdScreenDismissedEventOffset;

IronSourceEvents.add_onBannerAdScreenDismissedEventOffset = getRealOffset(0xCA6748);
IronSourceEvents.add_onBannerAdScreenDismissedEvent = (void(*)(void *))IronSourceEvents.add_onBannerAdScreenDismissedEventOffset;

IronSourceEvents.remove_onBannerAdScreenDismissedEventOffset = getRealOffset(0xCB12FC);
IronSourceEvents.remove_onBannerAdScreenDismissedEvent = (void(*)(void *))IronSourceEvents.remove_onBannerAdScreenDismissedEventOffset;

IronSourceEvents.onBannerAdScreenDismissedOffset = getRealOffset(0xCB13A0);
IronSourceEvents.onBannerAdScreenDismissed = (void(*)(void*))IronSourceEvents.onBannerAdScreenDismissedOffset;

IronSourceEvents.add__onBannerAdLeftApplicationEventOffset = getRealOffset(0xCB140C);
IronSourceEvents.add__onBannerAdLeftApplicationEvent = (void(*)(void *))IronSourceEvents.add__onBannerAdLeftApplicationEventOffset;

IronSourceEvents.remove__onBannerAdLeftApplicationEventOffset = getRealOffset(0xCB14D4);
IronSourceEvents.remove__onBannerAdLeftApplicationEvent = (void(*)(void *))IronSourceEvents.remove__onBannerAdLeftApplicationEventOffset;

IronSourceEvents.add_onBannerAdLeftApplicationEventOffset = getRealOffset(0xCA67E4);
IronSourceEvents.add_onBannerAdLeftApplicationEvent = (void(*)(void *))IronSourceEvents.add_onBannerAdLeftApplicationEventOffset;

IronSourceEvents.remove_onBannerAdLeftApplicationEventOffset = getRealOffset(0xCB159C);
IronSourceEvents.remove_onBannerAdLeftApplicationEvent = (void(*)(void *))IronSourceEvents.remove_onBannerAdLeftApplicationEventOffset;

IronSourceEvents.onBannerAdLeftApplicationOffset = getRealOffset(0xCB1640);
IronSourceEvents.onBannerAdLeftApplication = (void(*)(void*))IronSourceEvents.onBannerAdLeftApplicationOffset;

IronSourceEvents.onSegmentReceivedOffset = getRealOffset(0xCB197C);
IronSourceEvents.onSegmentReceived = (void(*)(void*, monoString*))IronSourceEvents.onSegmentReceivedOffset;

IronSourceEvents.onImpressionSuccessOffset = getRealOffset(0xCB1CCC);
IronSourceEvents.onImpressionSuccess = (void(*)(void*, monoString*))IronSourceEvents.onImpressionSuccessOffset;

IronSourceEvents.onConsentViewDidFailToLoadWithErrorOffset = getRealOffset(0xCB288C);
IronSourceEvents.onConsentViewDidFailToLoadWithError = (void(*)(void*, monoString*))IronSourceEvents.onConsentViewDidFailToLoadWithErrorOffset;

IronSourceEvents.onConsentViewDidFailToShowWithErrorOffset = getRealOffset(0xCB2CD0);
IronSourceEvents.onConsentViewDidFailToShowWithError = (void(*)(void*, monoString*))IronSourceEvents.onConsentViewDidFailToShowWithErrorOffset;

IronSourceEvents.onConsentViewDidAcceptOffset = getRealOffset(0xCB3114);
IronSourceEvents.onConsentViewDidAccept = (void(*)(void*, monoString*))IronSourceEvents.onConsentViewDidAcceptOffset;

IronSourceEvents.onConsentViewDidDismissOffset = getRealOffset(0xCB3464);
IronSourceEvents.onConsentViewDidDismiss = (void(*)(void*, monoString*))IronSourceEvents.onConsentViewDidDismissOffset;

IronSourceEvents.onConsentViewDidLoadSuccessOffset = getRealOffset(0xCB37B4);
IronSourceEvents.onConsentViewDidLoadSuccess = (void(*)(void*, monoString*))IronSourceEvents.onConsentViewDidLoadSuccessOffset;

IronSourceEvents.onConsentViewDidShowSuccessOffset = getRealOffset(0xCB3B04);
IronSourceEvents.onConsentViewDidShowSuccess = (void(*)(void*, monoString*))IronSourceEvents.onConsentViewDidShowSuccessOffset;

IronSourceAdUnits.get_REWARDED_VIDEOOffset = getRealOffset(0xCA197C);
IronSourceAdUnits.get_REWARDED_VIDEO = (monoString *(*)())IronSourceAdUnits.get_REWARDED_VIDEOOffset;

IronSourceAdUnits.get_INTERSTITIALOffset = getRealOffset(0xCA19CC);
IronSourceAdUnits.get_INTERSTITIAL = (monoString *(*)())IronSourceAdUnits.get_INTERSTITIALOffset;

IronSourceAdUnits.get_OFFERWALLOffset = getRealOffset(0xCA1A1C);
IronSourceAdUnits.get_OFFERWALL = (monoString *(*)())IronSourceAdUnits.get_OFFERWALLOffset;

IronSourceAdUnits.get_BANNEROffset = getRealOffset(0xCA1A6C);
IronSourceAdUnits.get_BANNER = (monoString *(*)())IronSourceAdUnits.get_BANNEROffset;

IronSourceBannerSize.ctor1Offset = getRealOffset(0xCA1AC4);
IronSourceBannerSize.ctor1 = (void(*)(void*, int, int))IronSourceBannerSize.ctor1Offset;

IronSourceBannerSize.ctor2Offset = getRealOffset(0xCA1B38);
IronSourceBannerSize.ctor2 = (void(*)(void*, monoString*))IronSourceBannerSize.ctor2Offset;

IronSourceBannerSize.get_DescriptionOffset = getRealOffset(0xCA1B64);
IronSourceBannerSize.get_Description = (monoString *(*)(void*))IronSourceBannerSize.get_DescriptionOffset;

IronSourceBannerSize.get_WidthOffset = getRealOffset(0xCA1B6C);
IronSourceBannerSize.get_Width = (int(*)(void*))IronSourceBannerSize.get_WidthOffset;

IronSourceBannerSize.get_HeightOffset = getRealOffset(0xCA1B74);
IronSourceBannerSize.get_Height = (int(*)(void*))IronSourceBannerSize.get_HeightOffset;

IronSourceImpressionData.ToStringOffset = getRealOffset(0xCB3B8C);
IronSourceImpressionData.ToString = (monoString *(*)(void*))IronSourceImpressionData.ToStringOffset;

IronSourcePlacement.getRewardNameOffset = getRealOffset(0x64DB7C);
IronSourcePlacement.getRewardName = (monoString *(*)(void*))IronSourcePlacement.getRewardNameOffset;

IronSourcePlacement.getRewardAmountOffset = getRealOffset(0x64DB84);
IronSourcePlacement.getRewardAmount = (int(*)(void*))IronSourcePlacement.getRewardAmountOffset;

IronSourcePlacement.getPlacementNameOffset = getRealOffset(0x64DB8C);
IronSourcePlacement.getPlacementName = (monoString *(*)(void*))IronSourcePlacement.getPlacementNameOffset;

IronSourcePlacement.ToStringOffset = getRealOffset(0x64DB94);
IronSourcePlacement.ToString = (monoString *(*)(void*))IronSourcePlacement.ToStringOffset;

IronSourceSegment.setCustomOffset = getRealOffset(0x64DE64);
IronSourceSegment.setCustom = (void(*)(void*, monoString*, monoString*))IronSourceSegment.setCustomOffset;

IronSourceSegment.getSegmentAsDictOffset = getRealOffset(0x64DEE0);
UnsupportedPlatformAgent.startOffset = getRealOffset(0x88F13C);
UnsupportedPlatformAgent.start = (void(*)(void*))UnsupportedPlatformAgent.startOffset;

UnsupportedPlatformAgent.onApplicationPauseOffset = getRealOffset(0x88F1C0);
UnsupportedPlatformAgent.onApplicationPause = (void(*)(void*, bool))UnsupportedPlatformAgent.onApplicationPauseOffset;

UnsupportedPlatformAgent.setMediationSegmentOffset = getRealOffset(0x88F244);
UnsupportedPlatformAgent.setMediationSegment = (void(*)(void*, monoString*))UnsupportedPlatformAgent.setMediationSegmentOffset;

UnsupportedPlatformAgent.getAdvertiserIdOffset = getRealOffset(0x88F2C8);
UnsupportedPlatformAgent.getAdvertiserId = (monoString *(*)(void*))UnsupportedPlatformAgent.getAdvertiserIdOffset;

UnsupportedPlatformAgent.validateIntegrationOffset = getRealOffset(0x88F35C);
UnsupportedPlatformAgent.validateIntegration = (void(*)(void*))UnsupportedPlatformAgent.validateIntegrationOffset;

UnsupportedPlatformAgent.shouldTrackNetworkStateOffset = getRealOffset(0x88F3E0);
UnsupportedPlatformAgent.shouldTrackNetworkState = (void(*)(void*, bool))UnsupportedPlatformAgent.shouldTrackNetworkStateOffset;

UnsupportedPlatformAgent.setDynamicUserIdOffset = getRealOffset(0x88F464);
UnsupportedPlatformAgent.setDynamicUserId = (bool(*)(void*, monoString*))UnsupportedPlatformAgent.setDynamicUserIdOffset;

UnsupportedPlatformAgent.setAdaptersDebugOffset = getRealOffset(0x88F4EC);
UnsupportedPlatformAgent.setAdaptersDebug = (void(*)(void*, bool))UnsupportedPlatformAgent.setAdaptersDebugOffset;

UnsupportedPlatformAgent.setMetaDataOffset = getRealOffset(0x88F570);
UnsupportedPlatformAgent.setMetaData = (void(*)(void*, monoString*, monoString*))UnsupportedPlatformAgent.setMetaDataOffset;

UnsupportedPlatformAgent.setUserIdOffset = getRealOffset(0x88F678);
UnsupportedPlatformAgent.setUserId = (void(*)(void*, monoString*))UnsupportedPlatformAgent.setUserIdOffset;

UnsupportedPlatformAgent.initOffset = getRealOffset(0x88F6FC);
UnsupportedPlatformAgent.init = (void(*)(void*, monoString*))UnsupportedPlatformAgent.initOffset;

UnsupportedPlatformAgent.showRewardedVideoOffset = getRealOffset(0x88F888);
UnsupportedPlatformAgent.showRewardedVideo = (void(*)(void*))UnsupportedPlatformAgent.showRewardedVideoOffset;

UnsupportedPlatformAgent.showRewardedVideo1Offset = getRealOffset(0x88F90C);
UnsupportedPlatformAgent.showRewardedVideo1 = (void(*)(void*, monoString*))UnsupportedPlatformAgent.showRewardedVideo1Offset;

UnsupportedPlatformAgent.isRewardedVideoAvailableOffset = getRealOffset(0x88F990);
UnsupportedPlatformAgent.isRewardedVideoAvailable = (bool(*)(void*))UnsupportedPlatformAgent.isRewardedVideoAvailableOffset;

UnsupportedPlatformAgent.isRewardedVideoPlacementCappedOffset = getRealOffset(0x88FA18);
UnsupportedPlatformAgent.isRewardedVideoPlacementCapped = (bool(*)(void*, monoString*))UnsupportedPlatformAgent.isRewardedVideoPlacementCappedOffset;

UnsupportedPlatformAgent.getPlacementInfoOffset = getRealOffset(0x88FAA0);
UnsupportedPlatformAgent.getPlacementInfo = (void *(*)(void*, monoString*))UnsupportedPlatformAgent.getPlacementInfoOffset;

UnsupportedPlatformAgent.clearRewardedVideoServerParamsOffset = getRealOffset(0x88FBAC);
UnsupportedPlatformAgent.clearRewardedVideoServerParams = (void(*)(void*))UnsupportedPlatformAgent.clearRewardedVideoServerParamsOffset;

UnsupportedPlatformAgent.showISDemandOnlyRewardedVideoOffset = getRealOffset(0x88FC30);
UnsupportedPlatformAgent.showISDemandOnlyRewardedVideo = (void(*)(void*, monoString*))UnsupportedPlatformAgent.showISDemandOnlyRewardedVideoOffset;

UnsupportedPlatformAgent.loadISDemandOnlyRewardedVideoOffset = getRealOffset(0x88FCB4);
UnsupportedPlatformAgent.loadISDemandOnlyRewardedVideo = (void(*)(void*, monoString*))UnsupportedPlatformAgent.loadISDemandOnlyRewardedVideoOffset;

UnsupportedPlatformAgent.isISDemandOnlyRewardedVideoAvailableOffset = getRealOffset(0x88FD38);
UnsupportedPlatformAgent.isISDemandOnlyRewardedVideoAvailable = (bool(*)(void*, monoString*))UnsupportedPlatformAgent.isISDemandOnlyRewardedVideoAvailableOffset;

UnsupportedPlatformAgent.loadInterstitialOffset = getRealOffset(0x88FDC0);
UnsupportedPlatformAgent.loadInterstitial = (void(*)(void*))UnsupportedPlatformAgent.loadInterstitialOffset;

UnsupportedPlatformAgent.showInterstitialOffset = getRealOffset(0x88FE44);
UnsupportedPlatformAgent.showInterstitial = (void(*)(void*))UnsupportedPlatformAgent.showInterstitialOffset;

UnsupportedPlatformAgent.showInterstitial1Offset = getRealOffset(0x88FEC8);
UnsupportedPlatformAgent.showInterstitial1 = (void(*)(void*, monoString*))UnsupportedPlatformAgent.showInterstitial1Offset;

UnsupportedPlatformAgent.isInterstitialReadyOffset = getRealOffset(0x88FF4C);
UnsupportedPlatformAgent.isInterstitialReady = (bool(*)(void*))UnsupportedPlatformAgent.isInterstitialReadyOffset;

UnsupportedPlatformAgent.isInterstitialPlacementCappedOffset = getRealOffset(0x88FFD4);
UnsupportedPlatformAgent.isInterstitialPlacementCapped = (bool(*)(void*, monoString*))UnsupportedPlatformAgent.isInterstitialPlacementCappedOffset;

UnsupportedPlatformAgent.loadISDemandOnlyInterstitialOffset = getRealOffset(0x89005C);
UnsupportedPlatformAgent.loadISDemandOnlyInterstitial = (void(*)(void*, monoString*))UnsupportedPlatformAgent.loadISDemandOnlyInterstitialOffset;

UnsupportedPlatformAgent.showISDemandOnlyInterstitialOffset = getRealOffset(0x8900E0);
UnsupportedPlatformAgent.showISDemandOnlyInterstitial = (void(*)(void*, monoString*))UnsupportedPlatformAgent.showISDemandOnlyInterstitialOffset;

UnsupportedPlatformAgent.isISDemandOnlyInterstitialReadyOffset = getRealOffset(0x890164);
UnsupportedPlatformAgent.isISDemandOnlyInterstitialReady = (bool(*)(void*, monoString*))UnsupportedPlatformAgent.isISDemandOnlyInterstitialReadyOffset;

UnsupportedPlatformAgent.showOfferwallOffset = getRealOffset(0x8901EC);
UnsupportedPlatformAgent.showOfferwall = (void(*)(void*))UnsupportedPlatformAgent.showOfferwallOffset;

UnsupportedPlatformAgent.showOfferwall1Offset = getRealOffset(0x890270);
UnsupportedPlatformAgent.showOfferwall1 = (void(*)(void*, monoString*))UnsupportedPlatformAgent.showOfferwall1Offset;

UnsupportedPlatformAgent.getOfferwallCreditsOffset = getRealOffset(0x8902F4);
UnsupportedPlatformAgent.getOfferwallCredits = (void(*)(void*))UnsupportedPlatformAgent.getOfferwallCreditsOffset;

UnsupportedPlatformAgent.isOfferwallAvailableOffset = getRealOffset(0x890378);
UnsupportedPlatformAgent.isOfferwallAvailable = (bool(*)(void*))UnsupportedPlatformAgent.isOfferwallAvailableOffset;

UnsupportedPlatformAgent.loadBannerOffset = getRealOffset(0x890400);
UnsupportedPlatformAgent.loadBanner = (void(*)(void*, void *, int))UnsupportedPlatformAgent.loadBannerOffset;

UnsupportedPlatformAgent.loadBanner1Offset = getRealOffset(0x890484);
UnsupportedPlatformAgent.loadBanner1 = (void(*)(void*, void *, int, monoString*))UnsupportedPlatformAgent.loadBanner1Offset;

UnsupportedPlatformAgent.destroyBannerOffset = getRealOffset(0x890508);
UnsupportedPlatformAgent.destroyBanner = (void(*)(void*))UnsupportedPlatformAgent.destroyBannerOffset;

UnsupportedPlatformAgent.displayBannerOffset = getRealOffset(0x89058C);
UnsupportedPlatformAgent.displayBanner = (void(*)(void*))UnsupportedPlatformAgent.displayBannerOffset;

UnsupportedPlatformAgent.hideBannerOffset = getRealOffset(0x890610);
UnsupportedPlatformAgent.hideBanner = (void(*)(void*))UnsupportedPlatformAgent.hideBannerOffset;

UnsupportedPlatformAgent.isBannerPlacementCappedOffset = getRealOffset(0x890694);
UnsupportedPlatformAgent.isBannerPlacementCapped = (bool(*)(void*, monoString*))UnsupportedPlatformAgent.isBannerPlacementCappedOffset;

UnsupportedPlatformAgent.setSegmentOffset = getRealOffset(0x89071C);
UnsupportedPlatformAgent.setSegment = (void(*)(void*, void *))UnsupportedPlatformAgent.setSegmentOffset;

UnsupportedPlatformAgent.setConsentOffset = getRealOffset(0x8907A0);
UnsupportedPlatformAgent.setConsent = (void(*)(void*, bool))UnsupportedPlatformAgent.setConsentOffset;

UnsupportedPlatformAgent.loadConsentViewWithTypeOffset = getRealOffset(0x890824);
UnsupportedPlatformAgent.loadConsentViewWithType = (void(*)(void*, monoString*))UnsupportedPlatformAgent.loadConsentViewWithTypeOffset;

UnsupportedPlatformAgent.showConsentViewWithTypeOffset = getRealOffset(0x8908A8);
UnsupportedPlatformAgent.showConsentViewWithType = (void(*)(void*, monoString*))UnsupportedPlatformAgent.showConsentViewWithTypeOffset;

CFX_AutoStopLoopedEffect.OnEnableOffset = getRealOffset(0x6CCCA0);
CFX_AutoStopLoopedEffect.OnEnable = (void(*)(void*))CFX_AutoStopLoopedEffect.OnEnableOffset;

CFX_AutoStopLoopedEffect.UpdateOffset = getRealOffset(0x6CCCAC);
CFX_AutoStopLoopedEffect.Update = (void(*)(void*))CFX_AutoStopLoopedEffect.UpdateOffset;

CFX_Demo_RandomDir.AwakeOffset = getRealOffset(0x6CD0B4);
CFX_Demo_RandomDir.Awake = (void(*)(void*))CFX_Demo_RandomDir.AwakeOffset;

CFX_Demo_RotateCamera.UpdateOffset = getRealOffset(0x6CD1EC);
CFX_Demo_RotateCamera.Update = (void(*)(void*))CFX_Demo_RotateCamera.UpdateOffset;

CFX_Demo_Translate.StartOffset = getRealOffset(0x6CD3A0);
CFX_Demo_Translate.Start = (void(*)(void*))CFX_Demo_Translate.StartOffset;

CFX_Demo_Translate.UpdateOffset = getRealOffset(0x6CD490);
CFX_Demo_Translate.Update = (void(*)(void*))CFX_Demo_Translate.UpdateOffset;

WFX_Demo.OnMouseDownOffset = getRealOffset(0x8A02D0);
WFX_Demo.OnMouseDown = (void(*)(void*))WFX_Demo.OnMouseDownOffset;

WFX_Demo.spawnParticleOffset = getRealOffset(0x8A0524);
WFX_Demo.spawnParticle = (void *(*)(void*))WFX_Demo.spawnParticleOffset;

WFX_Demo.SetActiveCrossVersionsOffset = getRealOffset(0x8A08E0);
WFX_Demo.SetActiveCrossVersions = (void(*)(void*, void *, bool))WFX_Demo.SetActiveCrossVersionsOffset;

WFX_Demo.OnGUIOffset = getRealOffset(0x8A09CC);
WFX_Demo.OnGUI = (void(*)(void*))WFX_Demo.OnGUIOffset;

WFX_Demo.RandomSpawnsCoroutineOffset = getRealOffset(0x8A1B80);
WFX_Demo.RandomSpawnsCoroutine = (void *(*)(void*))WFX_Demo.RandomSpawnsCoroutineOffset;

WFX_Demo.UpdateOffset = getRealOffset(0x8A1C20);
WFX_Demo.Update = (void(*)(void*))WFX_Demo.UpdateOffset;

WFX_Demo.prevTextureOffset = getRealOffset(0x8A19C0);
WFX_Demo.prevTexture = (void(*)(void*))WFX_Demo.prevTextureOffset;

WFX_Demo.nextTextureOffset = getRealOffset(0x8A1A94);
WFX_Demo.nextTexture = (void(*)(void*))WFX_Demo.nextTextureOffset;

WFX_Demo.selectMaterialOffset = getRealOffset(0x8A1E40);
WFX_Demo.selectMaterial = (void(*)(void*))WFX_Demo.selectMaterialOffset;

WFX_Demo.prevParticleOffset = getRealOffset(0x8A1934);
WFX_Demo.prevParticle = (void(*)(void*))WFX_Demo.prevParticleOffset;

WFX_Demo.nextParticleOffset = getRealOffset(0x8A197C);
WFX_Demo.nextParticle = (void(*)(void*))WFX_Demo.nextParticleOffset;

WFX_Demo.showHideStuffOffset = getRealOffset(0x8A23A4);
WFX_Demo.showHideStuff = (void(*)(void*))WFX_Demo.showHideStuffOffset;

WFX_Demo_DeleteAfterDelay.UpdateOffset = getRealOffset(0x8A3138);
WFX_Demo_DeleteAfterDelay.Update = (void(*)(void*))WFX_Demo_DeleteAfterDelay.UpdateOffset;

WFX_Demo_New.AwakeOffset = getRealOffset(0x8A3208);
WFX_Demo_New.Awake = (void(*)(void*))WFX_Demo_New.AwakeOffset;

WFX_Demo_New.UpdateOffset = getRealOffset(0x8A35E4);
WFX_Demo_New.Update = (void(*)(void*))WFX_Demo_New.UpdateOffset;

WFX_Demo_New.OnToggleGroundOffset = getRealOffset(0x8A4250);
WFX_Demo_New.OnToggleGround = (void(*)(void*))WFX_Demo_New.OnToggleGroundOffset;

WFX_Demo_New.OnToggleCameraOffset = getRealOffset(0x8A42A4);
WFX_Demo_New.OnToggleCamera = (void(*)(void*))WFX_Demo_New.OnToggleCameraOffset;

WFX_Demo_New.OnToggleSlowMoOffset = getRealOffset(0x8A4324);
WFX_Demo_New.OnToggleSlowMo = (void(*)(void*))WFX_Demo_New.OnToggleSlowMoOffset;

WFX_Demo_New.OnPreviousEffectOffset = getRealOffset(0x8A4348);
WFX_Demo_New.OnPreviousEffect = (void(*)(void*))WFX_Demo_New.OnPreviousEffectOffset;

WFX_Demo_New.OnNextEffectOffset = getRealOffset(0x8A434C);
WFX_Demo_New.OnNextEffect = (void(*)(void*))WFX_Demo_New.OnNextEffectOffset;

WFX_Demo_New.UpdateUIOffset = getRealOffset(0x8A3478);
WFX_Demo_New.UpdateUI = (void(*)(void*))WFX_Demo_New.UpdateUIOffset;

WFX_Demo_New.spawnParticleOffset = getRealOffset(0x8A3CA0);
WFX_Demo_New.spawnParticle = (void *(*)(void*))WFX_Demo_New.spawnParticleOffset;

WFX_Demo_New.CheckForDeletedParticlesOffset = getRealOffset(0x8A4350);
WFX_Demo_New.CheckForDeletedParticles = (void *(*)(void*))WFX_Demo_New.CheckForDeletedParticlesOffset;

WFX_Demo_New.prevParticleOffset = getRealOffset(0x8A3A90);
WFX_Demo_New.prevParticle = (void(*)(void*))WFX_Demo_New.prevParticleOffset;

WFX_Demo_New.nextParticleOffset = getRealOffset(0x8A3AE0);
WFX_Demo_New.nextParticle = (void(*)(void*))WFX_Demo_New.nextParticleOffset;

WFX_Demo_New.destroyParticlesOffset = getRealOffset(0x8A3B2C);
WFX_Demo_New.destroyParticles = (void(*)(void*))WFX_Demo_New.destroyParticlesOffset;

WFX_Demo_New.prevTextureOffset = getRealOffset(0x8A4C24);
WFX_Demo_New.prevTexture = (void(*)(void*))WFX_Demo_New.prevTextureOffset;

WFX_Demo_New.nextTextureOffset = getRealOffset(0x8A52CC);
WFX_Demo_New.nextTexture = (void(*)(void*))WFX_Demo_New.nextTextureOffset;

WFX_Demo_New.selectMaterialOffset = getRealOffset(0x8A4CF8);
WFX_Demo_New.selectMaterial = (void(*)(void*))WFX_Demo_New.selectMaterialOffset;

WFX_Demo_New.showHideStuffOffset = getRealOffset(0x8A43F0);
WFX_Demo_New.showHideStuff = (void(*)(void*))WFX_Demo_New.showHideStuffOffset;

WFX_Demo_RandomDir.AwakeOffset = getRealOffset(0x8A5824);
WFX_Demo_RandomDir.Awake = (void(*)(void*))WFX_Demo_RandomDir.AwakeOffset;

WFX_Demo_Wall.OnMouseDownOffset = getRealOffset(0x8A595C);
WFX_Demo_Wall.OnMouseDown = (void(*)(void*))WFX_Demo_Wall.OnMouseDownOffset;

CFX_Demo_GTButton.AwakeOffset = getRealOffset(0x6CCE14);
CFX_Demo_GTButton.Awake = (void(*)(void*))CFX_Demo_GTButton.AwakeOffset;

CFX_Demo_GTButton.UpdateOffset = getRealOffset(0x6CCE18);
CFX_Demo_GTButton.Update = (void(*)(void*))CFX_Demo_GTButton.UpdateOffset;

CFX_Demo_GTButton.OnClickOffset = getRealOffset(0x6CCE70);
CFX_Demo_GTButton.OnClick = (void(*)(void*))CFX_Demo_GTButton.OnClickOffset;

CFX_Demo_GTToggle.AwakeOffset = getRealOffset(0x6CCF50);
CFX_Demo_GTToggle.Awake = (void(*)(void*))CFX_Demo_GTToggle.AwakeOffset;

CFX_Demo_GTToggle.UpdateOffset = getRealOffset(0x6CCF58);
CFX_Demo_GTToggle.Update = (void(*)(void*))CFX_Demo_GTToggle.UpdateOffset;

CFX_Demo_GTToggle.OnClickOffset = getRealOffset(0x6CCFC4);
CFX_Demo_GTToggle.OnClick = (void(*)(void*))CFX_Demo_GTToggle.OnClickOffset;

CFX_Demo_GTToggle.UpdateTextureOffset = getRealOffset(0x6CCF54);
CFX_Demo_GTToggle.UpdateTexture = (void(*)(void*))CFX_Demo_GTToggle.UpdateTextureOffset;

CFX_AutoDestructShuriken.OnEnableOffset = getRealOffset(0x6CC97C);
CFX_AutoDestructShuriken.OnEnable = (void(*)(void*))CFX_AutoDestructShuriken.OnEnableOffset;

CFX_AutoDestructShuriken.CheckIfAliveOffset = getRealOffset(0x6CC9DC);
CFX_AutoDestructShuriken.CheckIfAlive = (void *(*)(void*))CFX_AutoDestructShuriken.CheckIfAliveOffset;

CFX_LightIntensityFade.StartOffset = getRealOffset(0x6CD65C);
CFX_LightIntensityFade.Start = (void(*)(void*))CFX_LightIntensityFade.StartOffset;

CFX_LightIntensityFade.OnEnableOffset = getRealOffset(0x6CD6D8);
CFX_LightIntensityFade.OnEnable = (void(*)(void*))CFX_LightIntensityFade.OnEnableOffset;

CFX_LightIntensityFade.UpdateOffset = getRealOffset(0x6CD770);
CFX_LightIntensityFade.Update = (void(*)(void*))CFX_LightIntensityFade.UpdateOffset;

WFX_BulletHoleDecal.AwakeOffset = getRealOffset(0x89FA24);
WFX_BulletHoleDecal.Awake = (void(*)(void*))WFX_BulletHoleDecal.AwakeOffset;

WFX_BulletHoleDecal.OnEnableOffset = getRealOffset(0x89FAF0);
WFX_BulletHoleDecal.OnEnable = (void(*)(void*))WFX_BulletHoleDecal.OnEnableOffset;

WFX_BulletHoleDecal.holeUpdateOffset = getRealOffset(0x89FE58);
WFX_BulletHoleDecal.holeUpdate = (void *(*)(void*))WFX_BulletHoleDecal.holeUpdateOffset;

WFX_LightFlicker.StartOffset = getRealOffset(0x8A5BD0);
WFX_LightFlicker.Start = (void(*)(void*))WFX_LightFlicker.StartOffset;

WFX_LightFlicker.FlickerOffset = getRealOffset(0x8A5C38);
WFX_LightFlicker.Flicker = (void *(*)(void*))WFX_LightFlicker.FlickerOffset;

CFX_SpawnSystem.GetNextObjectOffset = getRealOffset(0x6CD960);
CFX_SpawnSystem.GetNextObject = (void *(*)(void *, bool))CFX_SpawnSystem.GetNextObjectOffset;

CFX_SpawnSystem.PreloadObjectOffset = getRealOffset(0x6CDEAC);
CFX_SpawnSystem.PreloadObject = (void(*)(void *, int))CFX_SpawnSystem.PreloadObjectOffset;

CFX_SpawnSystem.UnloadObjectsOffset = getRealOffset(0x6CE294);
CFX_SpawnSystem.UnloadObjects = (void(*)(void *))CFX_SpawnSystem.UnloadObjectsOffset;

CFX_SpawnSystem.get_AllObjectsLoadedOffset = getRealOffset(0x6CE760);
CFX_SpawnSystem.get_AllObjectsLoaded = (bool(*)())CFX_SpawnSystem.get_AllObjectsLoadedOffset;

CFX_SpawnSystem.addObjectToPoolOffset = getRealOffset(0x6CDF28);
CFX_SpawnSystem.addObjectToPool = (void(*)(void*, void *, int))CFX_SpawnSystem.addObjectToPoolOffset;

CFX_SpawnSystem.removeObjectsFromPoolOffset = getRealOffset(0x6CE308);
CFX_SpawnSystem.removeObjectsFromPool = (void(*)(void*, void *))CFX_SpawnSystem.removeObjectsFromPoolOffset;

CFX_SpawnSystem.AwakeOffset = getRealOffset(0x6CE7C8);
CFX_SpawnSystem.Awake = (void(*)(void*))CFX_SpawnSystem.AwakeOffset;

CFX_SpawnSystem.StartOffset = getRealOffset(0x6CE8B8);
CFX_SpawnSystem.Start = (void(*)(void*))CFX_SpawnSystem.StartOffset;

CustomMatchMakerUI.set_ShowingRoomsOffset = getRealOffset(0x591778);
CustomMatchMakerUI.set_ShowingRooms = (void(*)(void*, bool))CustomMatchMakerUI.set_ShowingRoomsOffset;

CustomMatchMakerUI.ProcessSceneLoadOffset = getRealOffset(0x5918E0);
CustomMatchMakerUI.ProcessSceneLoad = (void(*)(void*))CustomMatchMakerUI.ProcessSceneLoadOffset;

CustomMatchMakerUI.AwakeOffset = getRealOffset(0x591A8C);
CustomMatchMakerUI.Awake = (void(*)(void*))CustomMatchMakerUI.AwakeOffset;

CustomMatchMakerUI.SetSelectedMatchNameOffset = getRealOffset(0x5928A0);
CustomMatchMakerUI.SetSelectedMatchName = (void(*)(void*, void *))CustomMatchMakerUI.SetSelectedMatchNameOffset;

CustomMatchMakerUI.ResumeMusicOffset = getRealOffset(0x592980);
CustomMatchMakerUI.ResumeMusic = (void(*)(void*))CustomMatchMakerUI.ResumeMusicOffset;

CustomMatchMakerUI.OnJoinedLobbyOffset = getRealOffset(0x5929F4);
CustomMatchMakerUI.OnJoinedLobby = (void(*)(void*))CustomMatchMakerUI.OnJoinedLobbyOffset;

CustomMatchMakerUI.QuickPlayCurrentLoadingModeOffset = getRealOffset(0x594F8C);
CustomMatchMakerUI.QuickPlayCurrentLoadingMode = (void(*)(void*))CustomMatchMakerUI.QuickPlayCurrentLoadingModeOffset;

CustomMatchMakerUI.OnConnectedToPhotonOffset = getRealOffset(0x5963A0);
CustomMatchMakerUI.OnConnectedToPhoton = (void(*)(void*))CustomMatchMakerUI.OnConnectedToPhotonOffset;

CustomMatchMakerUI.ShowLeaderboardsOffset = getRealOffset(0x596700);
CustomMatchMakerUI.ShowLeaderboards = (void(*)(void*))CustomMatchMakerUI.ShowLeaderboardsOffset;

CustomMatchMakerUI.OnJoinedRoomOffset = getRealOffset(0x596704);
CustomMatchMakerUI.OnJoinedRoom = (void(*)(void*))CustomMatchMakerUI.OnJoinedRoomOffset;

CustomMatchMakerUI.ConnectToPhotonOffset = getRealOffset(0x5968A0);
CustomMatchMakerUI.ConnectToPhoton = (void(*)(void*))CustomMatchMakerUI.ConnectToPhotonOffset;

CustomMatchMakerUI.HandleNoInternetOffset = getRealOffset(0x596B30);
CustomMatchMakerUI.HandleNoInternet = (void(*)(void*))CustomMatchMakerUI.HandleNoInternetOffset;

CustomMatchMakerUI.SelectRegionOffset = getRealOffset(0x596CF0);
CustomMatchMakerUI.SelectRegion = (void(*)(void*, int))CustomMatchMakerUI.SelectRegionOffset;

CustomMatchMakerUI.SetServerVisuallyOffset = getRealOffset(0x596E28);
CustomMatchMakerUI.SetServerVisually = (void(*)(void*, int))CustomMatchMakerUI.SetServerVisuallyOffset;

CustomMatchMakerUI.BanPlayerOffset = getRealOffset(0x596FC8);
CustomMatchMakerUI.BanPlayer = (void(*)(void*))CustomMatchMakerUI.BanPlayerOffset;

CustomMatchMakerUI.LoadEventInfoOffset = getRealOffset(0x5926EC);
CustomMatchMakerUI.LoadEventInfo = (void(*)(void*))CustomMatchMakerUI.LoadEventInfoOffset;

CustomMatchMakerUI.CheckIfOverpoweredOffset = getRealOffset(0x592568);
CustomMatchMakerUI.CheckIfOverpowered = (void(*)(void*))CustomMatchMakerUI.CheckIfOverpoweredOffset;

CustomMatchMakerUI.GetPromotionalMultipliersOffset = getRealOffset(0x59271C);
CustomMatchMakerUI.GetPromotionalMultipliers = (void(*)(void*))CustomMatchMakerUI.GetPromotionalMultipliersOffset;

CustomMatchMakerUI.CheckIfModOffset = getRealOffset(0x5922A8);
CustomMatchMakerUI.CheckIfMod = (void(*)(void*))CustomMatchMakerUI.CheckIfModOffset;

CustomMatchMakerUI.CheckIfBannedOrMutedOffset = getRealOffset(0x591FCC);
CustomMatchMakerUI.CheckIfBannedOrMuted = (void(*)(void*, monoString*))CustomMatchMakerUI.CheckIfBannedOrMutedOffset;

CustomMatchMakerUI.UnbanPlayerOffset = getRealOffset(0x5970D8);
CustomMatchMakerUI.UnbanPlayer = (void(*)(void*))CustomMatchMakerUI.UnbanPlayerOffset;

CustomMatchMakerUI.ToggleMuteOffset = getRealOffset(0x59724C);
CustomMatchMakerUI.ToggleMute = (void(*)(void*, bool))CustomMatchMakerUI.ToggleMuteOffset;

CustomMatchMakerUI.ReturnToMainMenuOffset = getRealOffset(0x5972D8);
CustomMatchMakerUI.ReturnToMainMenu = (void(*)(void*))CustomMatchMakerUI.ReturnToMainMenuOffset;

CustomMatchMakerUI.StartOffset = getRealOffset(0x597398);
CustomMatchMakerUI.Start = (void(*)(void*))CustomMatchMakerUI.StartOffset;

CustomMatchMakerUI.CheckIfAlreadyBannedOffset = getRealOffset(0x598044);
CustomMatchMakerUI.CheckIfAlreadyBanned = (void(*)(void*))CustomMatchMakerUI.CheckIfAlreadyBannedOffset;

CustomMatchMakerUI.setMapOffset = getRealOffset(0x59812C);
CustomMatchMakerUI.setMap = (void(*)(void*, int))CustomMatchMakerUI.setMapOffset;

CustomMatchMakerUI.setMapFilterOffset = getRealOffset(0x598428);
CustomMatchMakerUI.setMapFilter = (void(*)(void*, int))CustomMatchMakerUI.setMapFilterOffset;

CustomMatchMakerUI.SetGunGamePresetOffset = getRealOffset(0x598540);
CustomMatchMakerUI.SetGunGamePreset = (void(*)(void*, int))CustomMatchMakerUI.SetGunGamePresetOffset;

CustomMatchMakerUI.setModeOffset = getRealOffset(0x598548);
CustomMatchMakerUI.setMode = (void(*)(void*))CustomMatchMakerUI.setModeOffset;

CustomMatchMakerUI.setMode1Offset = getRealOffset(0x5981D0);
CustomMatchMakerUI.setMode1 = (void(*)(void*, int))CustomMatchMakerUI.setMode1Offset;

CustomMatchMakerUI.setModeFilterOffset = getRealOffset(0x598570);
CustomMatchMakerUI.setModeFilter = (void(*)(void*, int))CustomMatchMakerUI.setModeFilterOffset;

CustomMatchMakerUI.SetScoreLimitOffset = getRealOffset(0x597CA0);
CustomMatchMakerUI.SetScoreLimit = (void(*)(void*, float))CustomMatchMakerUI.SetScoreLimitOffset;

CustomMatchMakerUI.SetMaxPingOffset = getRealOffset(0x598688);
CustomMatchMakerUI.SetMaxPing = (void(*)(void*, float))CustomMatchMakerUI.SetMaxPingOffset;

CustomMatchMakerUI.SetMaxPlayersOffset = getRealOffset(0x59883C);
CustomMatchMakerUI.SetMaxPlayers = (void(*)(void*, float))CustomMatchMakerUI.SetMaxPlayersOffset;

CustomMatchMakerUI.setMatchNameOffset = getRealOffset(0x598908);
CustomMatchMakerUI.setMatchName = (void(*)(void*, monoString*))CustomMatchMakerUI.setMatchNameOffset;

CustomMatchMakerUI.AppendRandomMatchNumberOffset = getRealOffset(0x597FB4);
CustomMatchMakerUI.AppendRandomMatchNumber = (void(*)(void*))CustomMatchMakerUI.AppendRandomMatchNumberOffset;

CustomMatchMakerUI.SetMatchNameFilterOffset = getRealOffset(0x598910);
CustomMatchMakerUI.SetMatchNameFilter = (void(*)(void*, monoString*))CustomMatchMakerUI.SetMatchNameFilterOffset;

CustomMatchMakerUI.SetMatchPasswordOffset = getRealOffset(0x59891C);
CustomMatchMakerUI.SetMatchPassword = (void(*)(void*, monoString*))CustomMatchMakerUI.SetMatchPasswordOffset;

CustomMatchMakerUI.QuickPlayOffset = getRealOffset(0x594F94);
CustomMatchMakerUI.QuickPlay = (void(*)(void*, monoString*))CustomMatchMakerUI.QuickPlayOffset;

CustomMatchMakerUI.LoadLoadoutOffset = getRealOffset(0x598B80);
CustomMatchMakerUI.LoadLoadout = (void(*)(void*))CustomMatchMakerUI.LoadLoadoutOffset;

CustomMatchMakerUI.disableMatchMakerButtonsOffset = getRealOffset(0x596A8C);
CustomMatchMakerUI.disableMatchMakerButtons = (void(*)(void*))CustomMatchMakerUI.disableMatchMakerButtonsOffset;

CustomMatchMakerUI.JoinMatchOffset = getRealOffset(0x598A68);
CustomMatchMakerUI.JoinMatch = (void(*)(void*))CustomMatchMakerUI.JoinMatchOffset;

CustomMatchMakerUI.JoinMatchWithCoroutineOffset = getRealOffset(0x598C6C);
CustomMatchMakerUI.JoinMatchWithCoroutine = (void *(*)(void*))CustomMatchMakerUI.JoinMatchWithCoroutineOffset;

CustomMatchMakerUI.EnoughRAMOffset = getRealOffset(0x598D0C);
CustomMatchMakerUI.EnoughRAM = (bool(*)())CustomMatchMakerUI.EnoughRAMOffset;

CustomMatchMakerUI.SetTypedPasswordOffset = getRealOffset(0x598D30);
CustomMatchMakerUI.SetTypedPassword = (void(*)(void*, monoString*))CustomMatchMakerUI.SetTypedPasswordOffset;

CustomMatchMakerUI.TryPasswordOffset = getRealOffset(0x598D38);
CustomMatchMakerUI.TryPassword = (void(*)(void*))CustomMatchMakerUI.TryPasswordOffset;

CustomMatchMakerUI.PromptPasswordOffset = getRealOffset(0x598D9C);
CustomMatchMakerUI.PromptPassword = (void(*)(void*))CustomMatchMakerUI.PromptPasswordOffset;

CustomMatchMakerUI.CancelTryingOffset = getRealOffset(0x598E60);
CustomMatchMakerUI.CancelTrying = (void(*)(void*))CustomMatchMakerUI.CancelTryingOffset;

CustomMatchMakerUI.FindMatchOffset = getRealOffset(0x592A88);
CustomMatchMakerUI.FindMatch = (void(*)(void*, bool))CustomMatchMakerUI.FindMatchOffset;

CustomMatchMakerUI.SetTextAlphaOffset = getRealOffset(0x598F80);
CustomMatchMakerUI.SetTextAlpha = (void(*)(void*, void *, float))CustomMatchMakerUI.SetTextAlphaOffset;

CustomMatchMakerUI.numberOfSetBitsOffset = getRealOffset(0x598F38);
CustomMatchMakerUI.numberOfSetBits = (int(*)(void*, int))CustomMatchMakerUI.numberOfSetBitsOffset;

CustomMatchMakerUI.ToggleHardcoreOffset = getRealOffset(0x598924);
CustomMatchMakerUI.ToggleHardcore = (void(*)(void*, bool))CustomMatchMakerUI.ToggleHardcoreOffset;

CustomMatchMakerUI.ToggleSpectateForModsOffset = getRealOffset(0x598FFC);
CustomMatchMakerUI.ToggleSpectateForMods = (void(*)(void*, bool))CustomMatchMakerUI.ToggleSpectateForModsOffset;

CustomMatchMakerUI.WhatIsHardcoreOffset = getRealOffset(0x5990C0);
CustomMatchMakerUI.WhatIsHardcore = (void(*)(void*))CustomMatchMakerUI.WhatIsHardcoreOffset;

CustomMatchMakerUI.WhatIsSpectateForModsOnlyOffset = getRealOffset(0x599108);
CustomMatchMakerUI.WhatIsSpectateForModsOnly = (void(*)(void*))CustomMatchMakerUI.WhatIsSpectateForModsOnlyOffset;

CustomMatchMakerUI.CreateMatchOffset = getRealOffset(0x599398);
CustomMatchMakerUI.CreateMatch = (void(*)(void*))CustomMatchMakerUI.CreateMatchOffset;

CustomMatchMakerUI.CreateMatchWithCoroutineOffset = getRealOffset(0x5989E8);
CustomMatchMakerUI.CreateMatchWithCoroutine = (void *(*)(void*))CustomMatchMakerUI.CreateMatchWithCoroutineOffset;

CustomMatchMakerUI.HideCustomMatchErrorOffset = getRealOffset(0x5997A4);
CustomMatchMakerUI.HideCustomMatchError = (void *(*)(void*, float))CustomMatchMakerUI.HideCustomMatchErrorOffset;

CustomMatchMakerUI.UpdateOffset = getRealOffset(0x599868);
CustomMatchMakerUI.Update = (void(*)(void*))CustomMatchMakerUI.UpdateOffset;

CustomMatchMakerUI.OnDestroyOffset = getRealOffset(0x599D04);
CustomMatchMakerUI.OnDestroy = (void(*)(void*))CustomMatchMakerUI.OnDestroyOffset;

FeatureConfig.InitializeOffset = getRealOffset(0x71B940);
FeatureConfig.Initialize = (void(*)(void *))FeatureConfig.InitializeOffset;

FeatureConfig.GetFeatureConfigOffset = getRealOffset(0x71BA88);
FeatureConfig.OnServerSelectedOffset = getRealOffset(0x71BC14);
FeatureConfig.OnServerSelected = (void(*)(monoString*))FeatureConfig.OnServerSelectedOffset;

FeatureConfig.GetRegionOffset = getRealOffset(0x71BE7C);
FeatureConfig.GetRegion = (monoString *(*)())FeatureConfig.GetRegionOffset;

RoomJoinConfig.InitOffset = getRealOffset(0x60CC50);
RoomJoinConfig.Init = (void(*)(void*))RoomJoinConfig.InitOffset;

RoomJoinConfig.LegacyRoomSelectionEnabledOffset = getRealOffset(0x60D140);
RoomJoinConfig.LegacyRoomSelectionEnabled = (bool(*)(void*))RoomJoinConfig.LegacyRoomSelectionEnabledOffset;

WallhackAntiCheatConfig.InitOffset = getRealOffset(0x8AA17C);
WallhackAntiCheatConfig.Init = (void(*)(void*))WallhackAntiCheatConfig.InitOffset;

WallhackAntiCheatConfig.WallhackAnticheatEnabledOffset = getRealOffset(0x8A9194);
WallhackAntiCheatConfig.WallhackAnticheatEnabled = (bool(*)(void*))WallhackAntiCheatConfig.WallhackAnticheatEnabledOffset;

StoreAntihackConfig.InitOffset = getRealOffset(0x586FFC);
StoreAntihackConfig.Init = (void(*)(void*))StoreAntihackConfig.InitOffset;

FTUEConfig.get_FTUEEnabledOffset = getRealOffset(0x694CBC);
FTUEConfig.get_FTUEEnabled = (bool(*)(void*))FTUEConfig.get_FTUEEnabledOffset;

FTUEConfig.InitOffset = getRealOffset(0x694CC4);
FTUEConfig.Init = (void(*)(void*))FTUEConfig.InitOffset;

IronsourceConfig.InitOffset = getRealOffset(0x64EBA0);
IronsourceConfig.Init = (void(*)(void*))IronsourceConfig.InitOffset;

MessageConfig.InitOffset = getRealOffset(0x525164);
MessageConfig.Init = (void(*)(void*))MessageConfig.InitOffset;

AnticheatSystemConfig.InitOffset = getRealOffset(0x840888);
AnticheatSystemConfig.Init = (void(*)(void*))AnticheatSystemConfig.InitOffset;

CasesConfig.InitOffset = getRealOffset(0x77DF10);
CasesConfig.Init = (void(*)(void*))CasesConfig.InitOffset;

CrazyAdsConfig.InitOffset = getRealOffset(0x81FFE4);
CrazyAdsConfig.Init = (void(*)(void*))CrazyAdsConfig.InitOffset;

FriendsSystemConfig.set_isEnableOffset = getRealOffset(0x728320);
FriendsSystemConfig.set_isEnable = (void(*)(void*, bool))FriendsSystemConfig.set_isEnableOffset;

FriendsSystemConfig.get_isEnableOffset = getRealOffset(0x728328);
FriendsSystemConfig.get_isEnable = (bool(*)(void*))FriendsSystemConfig.get_isEnableOffset;

FriendsSystemConfig.set_alreadyInitOffset = getRealOffset(0x728330);
FriendsSystemConfig.set_alreadyInit = (void(*)(void*, bool))FriendsSystemConfig.set_alreadyInitOffset;

FriendsSystemConfig.get_alreadyInitOffset = getRealOffset(0x728338);
FriendsSystemConfig.get_alreadyInit = (bool(*)(void*))FriendsSystemConfig.get_alreadyInitOffset;

FriendsSystemConfig.InitOffset = getRealOffset(0x71C768);
FriendsSystemConfig.Init = (void(*)(void*))FriendsSystemConfig.InitOffset;

OfferWallConfig.InitOffset = getRealOffset(0x54A5CC);
OfferWallConfig.Init = (void(*)(void*))OfferWallConfig.InitOffset;

DiscountedOffersConfig.set_isEnableOffset = getRealOffset(0x67A228);
DiscountedOffersConfig.set_isEnable = (void(*)(void*, bool))DiscountedOffersConfig.set_isEnableOffset;

DiscountedOffersConfig.get_isEnableOffset = getRealOffset(0x67A230);
DiscountedOffersConfig.get_isEnable = (bool(*)(void*))DiscountedOffersConfig.get_isEnableOffset;

DiscountedOffersConfig.set_DescriptionOffset = getRealOffset(0x67A238);
DiscountedOffersConfig.set_Description = (void(*)(void*, monoString*))DiscountedOffersConfig.set_DescriptionOffset;

DiscountedOffersConfig.get_DescriptionOffset = getRealOffset(0x67A240);
DiscountedOffersConfig.get_Description = (monoString *(*)(void*))DiscountedOffersConfig.get_DescriptionOffset;

DiscountedOffersConfig.set_EndDateOffset = getRealOffset(0x67A248);
DiscountedOffersConfig.set_EndDate = (void(*)(void*, monoString*))DiscountedOffersConfig.set_EndDateOffset;

DiscountedOffersConfig.get_EndDateOffset = getRealOffset(0x67A250);
DiscountedOffersConfig.get_EndDate = (monoString *(*)(void*))DiscountedOffersConfig.get_EndDateOffset;

DiscountedOffersConfig.set_InitializedOffset = getRealOffset(0x67A258);
DiscountedOffersConfig.set_Initialized = (void(*)(void*, bool))DiscountedOffersConfig.set_InitializedOffset;

DiscountedOffersConfig.get_InitializedOffset = getRealOffset(0x67A260);
DiscountedOffersConfig.get_Initialized = (bool(*)(void*))DiscountedOffersConfig.get_InitializedOffset;

DiscountedOffersConfig.InitOffset = getRealOffset(0x67A268);
DiscountedOffersConfig.Init = (void(*)(void*))DiscountedOffersConfig.InitOffset;

JoinMatchButton.OnPointerUpOffset = getRealOffset(0x64EEE8);
JoinMatchButton.OnPointerUp = (void(*)(void*, void *))JoinMatchButton.OnPointerUpOffset;

RoomRankComparer.CompareOffset = getRealOffset(0x612244);
RoomRankComparer.Compare = (int(*)(void*, void *, void *))RoomRankComparer.CompareOffset;

RoomJoinUtil.GetLocalPlayerKDOffset = getRealOffset(0x60D2EC);
RoomJoinUtil.GetLocalPlayerKD = (float(*)())RoomJoinUtil.GetLocalPlayerKDOffset;

RoomJoinUtil.GetLocalPlayerRankOffset = getRealOffset(0x60D3E4);
RoomJoinUtil.GetLocalPlayerRank = (int(*)())RoomJoinUtil.GetLocalPlayerRankOffset;

RoomJoinUtil.IsDefaultRoomOffset = getRealOffset(0x612080);
RoomJoinUtil.IsDefaultRoom = (bool(*)(monoString*))RoomJoinUtil.IsDefaultRoomOffset;

RoomJoinUtil.LogOffset = getRealOffset(0x60EDE8);
RoomJoinUtil.Log = (void(*)(monoString*, monoString*))RoomJoinUtil.LogOffset;

RoomJoinUtil.ScreenLogOffset = getRealOffset(0x61207C);
RoomJoinUtil.ScreenLog = (void(*)(monoString*, monoString*, monoString*))RoomJoinUtil.ScreenLogOffset;

ShowAllowedWeaponsButton.OnPointerUpOffset = getRealOffset(0x61E980);
ShowAllowedWeaponsButton.OnPointerUp = (void(*)(void*, void *))ShowAllowedWeaponsButton.OnPointerUpOffset;

SmoothCameraOrbit.StartOffset = getRealOffset(0x576DA0);
SmoothCameraOrbit.Start = (void(*)(void*))SmoothCameraOrbit.StartOffset;

SmoothCameraOrbit.OnEnableOffset = getRealOffset(0x57729C);
SmoothCameraOrbit.OnEnable = (void(*)(void*))SmoothCameraOrbit.OnEnableOffset;

SmoothCameraOrbit.InitOffset = getRealOffset(0x576DA4);
SmoothCameraOrbit.Init = (void(*)(void*))SmoothCameraOrbit.InitOffset;

SmoothCameraOrbit.LateUpdateOffset = getRealOffset(0x5772A0);
SmoothCameraOrbit.LateUpdate = (void(*)(void*))SmoothCameraOrbit.LateUpdateOffset;

SmoothCameraOrbit.ClampAngleOffset = getRealOffset(0x5779E4);
SmoothCameraOrbit.ClampAngle = (float(*)(float, float, float))SmoothCameraOrbit.ClampAngleOffset;

animateOffset.StartOffset = getRealOffset(0x93513C);
animateOffset.Start = (void(*)(void*))animateOffset.StartOffset;

animateOffset.UpdateOffset = getRealOffset(0x93519C);
animateOffset.Update = (void(*)(void*))animateOffset.UpdateOffset;

animatedtexture.StartOffset = getRealOffset(0x935288);
animatedtexture.Start = (void(*)(void*))animatedtexture.StartOffset;

animatedtexture.UpdateOffset = getRealOffset(0x93528C);
animatedtexture.Update = (void(*)(void*))animatedtexture.UpdateOffset;

BlurEffect.get_materialOffset = getRealOffset(0x6CA6BC);
BlurEffect.get_material = (void *(*)(void*))BlurEffect.get_materialOffset;

BlurEffect.OnDisableOffset = getRealOffset(0x6CA828);
BlurEffect.OnDisable = (void(*)(void*))BlurEffect.OnDisableOffset;

BlurEffect.StartOffset = getRealOffset(0x6CA944);
BlurEffect.Start = (void(*)(void*))BlurEffect.StartOffset;

BlurEffect.FourTapConeOffset = getRealOffset(0x6CAA34);
BlurEffect.FourTapCone = (void(*)(void*, void *, void *, int))BlurEffect.FourTapConeOffset;

BlurEffect.DownSample4xOffset = getRealOffset(0x6CAC50);
BlurEffect.DownSample4x = (void(*)(void*, void *, void *))BlurEffect.DownSample4xOffset;

BlurEffect.OnRenderImageOffset = getRealOffset(0x6CAE38);
BlurEffect.OnRenderImage = (void(*)(void*, void *, void *))BlurEffect.OnRenderImageOffset;

ColorCorrectionEffect.OnRenderImageOffset = getRealOffset(0x81A818);
ColorCorrectionEffect.OnRenderImage = (void(*)(void*, void *, void *))ColorCorrectionEffect.OnRenderImageOffset;

ContrastStretchEffect.get_materialLumOffset = getRealOffset(0x81BB1C);
ContrastStretchEffect.get_materialLum = (void *(*)(void*))ContrastStretchEffect.get_materialLumOffset;

ContrastStretchEffect.get_materialReduceOffset = getRealOffset(0x81BBF4);
ContrastStretchEffect.get_materialReduce = (void *(*)(void*))ContrastStretchEffect.get_materialReduceOffset;

ContrastStretchEffect.get_materialAdaptOffset = getRealOffset(0x81BCCC);
ContrastStretchEffect.get_materialAdapt = (void *(*)(void*))ContrastStretchEffect.get_materialAdaptOffset;

ContrastStretchEffect.get_materialApplyOffset = getRealOffset(0x81BDA4);
ContrastStretchEffect.get_materialApply = (void *(*)(void*))ContrastStretchEffect.get_materialApplyOffset;

ContrastStretchEffect.StartOffset = getRealOffset(0x81BE7C);
ContrastStretchEffect.Start = (void(*)(void*))ContrastStretchEffect.StartOffset;

ContrastStretchEffect.OnEnableOffset = getRealOffset(0x81BF3C);
ContrastStretchEffect.OnEnable = (void(*)(void*))ContrastStretchEffect.OnEnableOffset;

ContrastStretchEffect.OnDisableOffset = getRealOffset(0x81C0DC);
ContrastStretchEffect.OnDisable = (void(*)(void*))ContrastStretchEffect.OnDisableOffset;

ContrastStretchEffect.OnRenderImageOffset = getRealOffset(0x81C36C);
ContrastStretchEffect.OnRenderImage = (void(*)(void*, void *, void *))ContrastStretchEffect.OnRenderImageOffset;

ContrastStretchEffect.CalculateAdaptationOffset = getRealOffset(0x81C614);
ContrastStretchEffect.CalculateAdaptation = (void(*)(void*, void *))ContrastStretchEffect.CalculateAdaptationOffset;

EdgeDetectEffect.OnRenderImageOffset = getRealOffset(0x67DBA8);
EdgeDetectEffect.OnRenderImage = (void(*)(void*, void *, void *))EdgeDetectEffect.OnRenderImageOffset;

GlowEffect.get_compositeMaterialOffset = getRealOffset(0x601738);
GlowEffect.get_compositeMaterial = (void *(*)(void*))GlowEffect.get_compositeMaterialOffset;

GlowEffect.get_blurMaterialOffset = getRealOffset(0x601810);
GlowEffect.get_blurMaterial = (void *(*)(void*))GlowEffect.get_blurMaterialOffset;

GlowEffect.get_downsampleMaterialOffset = getRealOffset(0x6018E8);
GlowEffect.get_downsampleMaterial = (void *(*)(void*))GlowEffect.get_downsampleMaterialOffset;

GlowEffect.OnDisableOffset = getRealOffset(0x6019C0);
GlowEffect.OnDisable = (void(*)(void*))GlowEffect.OnDisableOffset;

GlowEffect.StartOffset = getRealOffset(0x601B4C);
GlowEffect.Start = (void(*)(void*))GlowEffect.StartOffset;

GlowEffect.FourTapConeOffset = getRealOffset(0x601D38);
GlowEffect.FourTapCone = (void(*)(void*, void *, void *, int))GlowEffect.FourTapConeOffset;

GlowEffect.DownSample4xOffset = getRealOffset(0x601F54);
GlowEffect.DownSample4x = (void(*)(void*, void *, void *))GlowEffect.DownSample4xOffset;

GlowEffect.OnRenderImageOffset = getRealOffset(0x602054);
GlowEffect.OnRenderImage = (void(*)(void*, void *, void *))GlowEffect.OnRenderImageOffset;

GlowEffect.BlitGlowOffset = getRealOffset(0x602368);
GlowEffect.BlitGlow = (void(*)(void*, void *, void *))GlowEffect.BlitGlowOffset;

GrayscaleEffect.OnRenderImageOffset = getRealOffset(0x6063A4);
GrayscaleEffect.OnRenderImage = (void(*)(void*, void *, void *))GrayscaleEffect.OnRenderImageOffset;

ImageEffectBase.StartOffset = getRealOffset(0x809BF8);
ImageEffectBase.Start = (void(*)(void*))ImageEffectBase.StartOffset;

ImageEffectBase.get_materialOffset = getRealOffset(0x809CC4);
ImageEffectBase.get_material = (void *(*)(void*))ImageEffectBase.get_materialOffset;

ImageEffectBase.OnDisableOffset = getRealOffset(0x809D9C);
ImageEffectBase.OnDisable = (void(*)(void*))ImageEffectBase.OnDisableOffset;

ImageEffects.RenderDistortionOffset = getRealOffset(0x809E60);
ImageEffects.RenderDistortion = (void(*)(void *, void *, void *, float, Vector2, Vector2))ImageEffects.RenderDistortionOffset;

ImageEffects.BlitOffset = getRealOffset(0x80A1E4);
ImageEffects.Blit = (void(*)(void *, void *))ImageEffects.BlitOffset;

ImageEffects.BlitWithMaterialOffset = getRealOffset(0x80A268);
ImageEffects.BlitWithMaterial = (void(*)(void *, void *, void *))ImageEffects.BlitWithMaterialOffset;

MotionBlur.StartOffset = getRealOffset(0x52863C);
MotionBlur.Start = (void(*)(void*))MotionBlur.StartOffset;

MotionBlur.OnDisableOffset = getRealOffset(0x52867C);
MotionBlur.OnDisable = (void(*)(void*))MotionBlur.OnDisableOffset;

MotionBlur.OnRenderImageOffset = getRealOffset(0x528708);
MotionBlur.OnRenderImage = (void(*)(void*, void *, void *))MotionBlur.OnRenderImageOffset;

NoiseEffect.StartOffset = getRealOffset(0x5473A0);
NoiseEffect.Start = (void(*)(void*))NoiseEffect.StartOffset;

NoiseEffect.get_materialOffset = getRealOffset(0x54751C);
NoiseEffect.get_material = (void *(*)(void*))NoiseEffect.get_materialOffset;

NoiseEffect.OnDisableOffset = getRealOffset(0x5476A4);
NoiseEffect.OnDisable = (void(*)(void*))NoiseEffect.OnDisableOffset;

NoiseEffect.SanitizeParametersOffset = getRealOffset(0x5477C8);
NoiseEffect.SanitizeParameters = (void(*)(void*))NoiseEffect.SanitizeParametersOffset;

NoiseEffect.OnRenderImageOffset = getRealOffset(0x547918);
NoiseEffect.OnRenderImage = (void(*)(void*, void *, void *))NoiseEffect.OnRenderImageOffset;

SSAOEffect.CreateMaterialOffset = getRealOffset(0x613E60);
SSAOEffect.CreateMaterial = (void *(*)(void *))SSAOEffect.CreateMaterialOffset;

SSAOEffect.DestroyMaterialOffset = getRealOffset(0x613F2C);
SSAOEffect.DestroyMaterial = (void(*)(void *))SSAOEffect.DestroyMaterialOffset;

SSAOEffect.OnDisableOffset = getRealOffset(0x613FDC);
SSAOEffect.OnDisable = (void(*)(void*))SSAOEffect.OnDisableOffset;

SSAOEffect.StartOffset = getRealOffset(0x613FE4);
SSAOEffect.Start = (void(*)(void*))SSAOEffect.StartOffset;

SSAOEffect.OnEnableOffset = getRealOffset(0x6141DC);
SSAOEffect.OnEnable = (void(*)(void*))SSAOEffect.OnEnableOffset;

SSAOEffect.CreateMaterialsOffset = getRealOffset(0x6140EC);
SSAOEffect.CreateMaterials = (void(*)(void*))SSAOEffect.CreateMaterialsOffset;

SSAOEffect.OnRenderImageOffset = getRealOffset(0x614280);
SSAOEffect.OnRenderImage = (void(*)(void*, void *, void *))SSAOEffect.OnRenderImageOffset;

SepiaToneEffect.OnRenderImageOffset = getRealOffset(0x61C820);
SepiaToneEffect.OnRenderImage = (void(*)(void*, void *, void *))SepiaToneEffect.OnRenderImageOffset;

TwirlEffect.OnRenderImageOffset = getRealOffset(0x5DF32C);
TwirlEffect.OnRenderImage = (void(*)(void*, void *, void *))TwirlEffect.OnRenderImageOffset;

VortexEffect.OnRenderImageOffset = getRealOffset(0x89C030);
VortexEffect.OnRenderImage = (void(*)(void*, void *, void *))VortexEffect.OnRenderImageOffset;

AtmoXfade.StartOffset = getRealOffset(0x849634);
AtmoXfade.Start = (void(*)(void*))AtmoXfade.StartOffset;

AtmoXfade.OnTriggerEnterOffset = getRealOffset(0x8497C8);
AtmoXfade.OnTriggerEnter = (void(*)(void*, void *))AtmoXfade.OnTriggerEnterOffset;

AtmoXfade.OnTriggerExitOffset = getRealOffset(0x8499E0);
AtmoXfade.OnTriggerExit = (void(*)(void*, void *))AtmoXfade.OnTriggerExitOffset;

AtmoXfade.FadeDarkOffset = getRealOffset(0x849964);
AtmoXfade.FadeDark = (void *(*)(void*))AtmoXfade.FadeDarkOffset;

AtmoXfade.FadeBrightOffset = getRealOffset(0x849B00);
AtmoXfade.FadeBright = (void *(*)(void*))AtmoXfade.FadeBrightOffset;

CullingHelper_Abandoned.StartOffset = getRealOffset(0x590FE8);
CullingHelper_Abandoned.Start = (void(*)(void*))CullingHelper_Abandoned.StartOffset;

CullingHelper_Abandoned.SetupCullingOffset = getRealOffset(0x590FEC);
CullingHelper_Abandoned.SetupCulling = (void(*)(void*))CullingHelper_Abandoned.SetupCullingOffset;

CullingHelper_Abandoned.UpdateOffset = getRealOffset(0x5911A0);
CullingHelper_Abandoned.Update = (void(*)(void*))CullingHelper_Abandoned.UpdateOffset;

CullingHelper_Dam.AwakeOffset = getRealOffset(0x5911B4);
CullingHelper_Dam.Awake = (void(*)(void*))CullingHelper_Dam.AwakeOffset;

CullingHelper_Dam.StartOffset = getRealOffset(0x5912E8);
CullingHelper_Dam.Start = (void(*)(void*))CullingHelper_Dam.StartOffset;

CullingHelper_Dam.SetupCullingOffset = getRealOffset(0x5912EC);
CullingHelper_Dam.SetupCulling = (void(*)(void*))CullingHelper_Dam.SetupCullingOffset;

CullingHelper_Dam.UpdateOffset = getRealOffset(0x591488);
CullingHelper_Dam.Update = (void(*)(void*))CullingHelper_Dam.UpdateOffset;

SpriteSheet.StartOffset = getRealOffset(0x5813E0);
SpriteSheet.Start = (void(*)(void*))SpriteSheet.StartOffset;

SpriteSheet.UpdateOffset = getRealOffset(0x5814E8);
SpriteSheet.Update = (void(*)(void*))SpriteSheet.UpdateOffset;

SimpleDoorTrigger.StartOffset = getRealOffset(0x6245EC);
SimpleDoorTrigger.Start = (void(*)(void*))SimpleDoorTrigger.StartOffset;

SimpleDoorTrigger.UpdateOffset = getRealOffset(0x624828);
SimpleDoorTrigger.Update = (void(*)(void*))SimpleDoorTrigger.UpdateOffset;

SimpleDoorTrigger.OnTriggerEnterOffset = getRealOffset(0x624A80);
SimpleDoorTrigger.OnTriggerEnter = (void(*)(void*, void *))SimpleDoorTrigger.OnTriggerEnterOffset;

SimpleDoorTrigger.OnTriggerExitOffset = getRealOffset(0x624B04);
SimpleDoorTrigger.OnTriggerExit = (void(*)(void*, void *))SimpleDoorTrigger.OnTriggerExitOffset;

SimpleDoorTrigger.OnGUIOffset = getRealOffset(0x624B10);
SimpleDoorTrigger.OnGUI = (void(*)(void*))SimpleDoorTrigger.OnGUIOffset;

SimpleDoorTrigger.HandleDoorRotationOffset = getRealOffset(0x624870);
SimpleDoorTrigger.HandleDoorRotation = (void(*)(void*))SimpleDoorTrigger.HandleDoorRotationOffset;

SimpleDoorTrigger.HandleUserInputOffset = getRealOffset(0x624A4C);
SimpleDoorTrigger.HandleUserInput = (void(*)(void*))SimpleDoorTrigger.HandleUserInputOffset;

QT_DistanceDropout.FixedUpdateOffset = getRealOffset(0x62DFC0);
QT_DistanceDropout.FixedUpdate = (void(*)(void*))QT_DistanceDropout.FixedUpdateOffset;

QT_TrafficLight.AwakeOffset = getRealOffset(0x62FABC);
QT_TrafficLight.Awake = (void(*)(void*))QT_TrafficLight.AwakeOffset;

QT_TrafficLight.UpdateOffset = getRealOffset(0x630160);
QT_TrafficLight.Update = (void(*)(void*))QT_TrafficLight.UpdateOffset;

QT_TrafficLightController.StartOffset = getRealOffset(0x6302C4);
QT_TrafficLightController.Start = (void(*)(void*))QT_TrafficLightController.StartOffset;

QT_TrafficLightController.DoLightLoopOffset = getRealOffset(0x630F10);
QT_TrafficLightController.DoLightLoop = (void *(*)(void*))QT_TrafficLightController.DoLightLoopOffset;

QT_TrafficLightController.DoBlinkLoopOffset = getRealOffset(0x630F90);
QT_TrafficLightController.DoBlinkLoop = (void *(*)(void*))QT_TrafficLightController.DoBlinkLoopOffset;

QT_TrafficLightController.UpdateIndicesOffset = getRealOffset(0x6303A0);
QT_TrafficLightController.UpdateIndices = (void(*)(void*))QT_TrafficLightController.UpdateIndicesOffset;

QT_TrafficLightController.SetupInitialBulbsOffset = getRealOffset(0x63066C);
QT_TrafficLightController.SetupInitialBulbs = (void(*)(void*))QT_TrafficLightController.SetupInitialBulbsOffset;

QT_TrafficLightController.ResetAllOffset = getRealOffset(0x631050);
QT_TrafficLightController.ResetAll = (void(*)(void*))QT_TrafficLightController.ResetAllOffset;

QT_TrafficLightController.ResetGreenOffset = getRealOffset(0x631074);
QT_TrafficLightController.ResetGreen = (void(*)(void*))QT_TrafficLightController.ResetGreenOffset;

QT_TrafficLightController.ResetRedOffset = getRealOffset(0x6311AC);
QT_TrafficLightController.ResetRed = (void(*)(void*))QT_TrafficLightController.ResetRedOffset;

QT_TrafficLightController.ResetBlinkingOffset = getRealOffset(0x631110);
QT_TrafficLightController.ResetBlinking = (void(*)(void*))QT_TrafficLightController.ResetBlinkingOffset;

QT_TrafficLightController.DisplayLinksOffset = getRealOffset(0x631248);
QT_TrafficLightController.DisplayLinks = (void(*)(void*))QT_TrafficLightController.DisplayLinksOffset;

QT_TrafficLightController.HelpClickOffset = getRealOffset(0x6318F8);
QT_TrafficLightController.HelpClick = (void(*)(void*))QT_TrafficLightController.HelpClickOffset;

DirtyLensFlare.StartOffset = getRealOffset(0x6793A4);
DirtyLensFlare.Start = (void(*)(void*))DirtyLensFlare.StartOffset;

DirtyLensFlare.get_materialOffset = getRealOffset(0x6796B0);
DirtyLensFlare.get_material = (void *(*)(void*))DirtyLensFlare.get_materialOffset;

DirtyLensFlare.OnDisableOffset = getRealOffset(0x679788);
DirtyLensFlare.OnDisable = (void(*)(void*))DirtyLensFlare.OnDisableOffset;

DirtyLensFlare.FourTapConeOffset = getRealOffset(0x679844);
DirtyLensFlare.FourTapCone = (void(*)(void*, void *, void *, int, void *))DirtyLensFlare.FourTapConeOffset;

DirtyLensFlare.ApplyBlurPassOffset = getRealOffset(0x679A5C);
DirtyLensFlare.ApplyBlurPass = (void(*)(void*, void *, void *, void *))DirtyLensFlare.ApplyBlurPassOffset;

DirtyLensFlare.CheckResourcesOffset = getRealOffset(0x679478);
DirtyLensFlare.CheckResources = (bool(*)(void*))DirtyLensFlare.CheckResourcesOffset;

DirtyLensFlare.OnRenderImageOffset = getRealOffset(0x679D24);
DirtyLensFlare.OnRenderImage = (void(*)(void*, void *, void *))DirtyLensFlare.OnRenderImageOffset;

BakeTexturesAtRuntime.OnGUIOffset = getRealOffset(0x6C0E0C);
BakeTexturesAtRuntime.OnGUI = (void(*)(void*))BakeTexturesAtRuntime.OnGUIOffset;

BakeTexturesAtRuntime.OnBuiltAtlasesSuccessOffset = getRealOffset(0x6C14E4);
BakeTexturesAtRuntime.OnBuiltAtlasesSuccess = (void(*)(void*))BakeTexturesAtRuntime.OnBuiltAtlasesSuccessOffset;

MB_BatchPrepareObjectsForDynamicBatchingDescription.OnGUIOffset = getRealOffset(0x9F2108);
MB_BatchPrepareObjectsForDynamicBatchingDescription.OnGUI = (void(*)(void*))MB_BatchPrepareObjectsForDynamicBatchingDescription.OnGUIOffset;

MB_SwapShirts.OnGUIOffset = getRealOffset(0x9F4770);
MB_SwapShirts.OnGUI = (void(*)(void*))MB_SwapShirts.OnGUIOffset;

MB_PrepareObjectsForDynamicBatchingDescription.OnGUIOffset = getRealOffset(0x9F3094);
MB_PrepareObjectsForDynamicBatchingDescription.OnGUI = (void(*)(void*))MB_PrepareObjectsForDynamicBatchingDescription.OnGUIOffset;

MB_DynamicAddDeleteExample.StartOffset = getRealOffset(0x9F2210);
MB_DynamicAddDeleteExample.Start = (void(*)(void*))MB_DynamicAddDeleteExample.StartOffset;

MB_DynamicAddDeleteExample.largeNumberOffset = getRealOffset(0x9F259C);
MB_DynamicAddDeleteExample.largeNumber = (void *(*)(void*))MB_DynamicAddDeleteExample.largeNumberOffset;

MB_DynamicAddDeleteExample.OnGUIOffset = getRealOffset(0x9F263C);
MB_DynamicAddDeleteExample.OnGUI = (void(*)(void*))MB_DynamicAddDeleteExample.OnGUIOffset;

MB_Example.StartOffset = getRealOffset(0x9F2A38);
MB_Example.Start = (void(*)(void*))MB_Example.StartOffset;

MB_Example.LateUpdateOffset = getRealOffset(0x9F2AB0);
MB_Example.LateUpdate = (void(*)(void*))MB_Example.LateUpdateOffset;

MB_Example.OnGUIOffset = getRealOffset(0x9F2B78);
MB_Example.OnGUI = (void(*)(void*))MB_Example.OnGUIOffset;

MB_ExampleMover.UpdateOffset = getRealOffset(0x9F2C80);
MB_ExampleMover.Update = (void(*)(void*))MB_ExampleMover.UpdateOffset;

MB_ExampleSkinnedMeshDescription.OnGUIOffset = getRealOffset(0x9F2DC4);
MB_ExampleSkinnedMeshDescription.OnGUI = (void(*)(void*))MB_ExampleSkinnedMeshDescription.OnGUIOffset;

MB_SkinnedMeshSceneController.StartOffset = getRealOffset(0x9F319C);
MB_SkinnedMeshSceneController.Start = (void(*)(void*))MB_SkinnedMeshSceneController.StartOffset;

MB_SkinnedMeshSceneController.OnGUIOffset = getRealOffset(0x9F3450);
MB_SkinnedMeshSceneController.OnGUI = (void(*)(void*))MB_SkinnedMeshSceneController.OnGUIOffset;

MB_SkinnedMeshSceneController.SearchHierarchyForBoneOffset = getRealOffset(0x9F4630);
MB_SkinnedMeshSceneController.SearchHierarchyForBone = (void *(*)(void*, void *, monoString*))MB_SkinnedMeshSceneController.SearchHierarchyForBoneOffset;

MB_MaterialAndUVRect.GetHashCodeOffset = getRealOffset(0x9F2ECC);
MB_MaterialAndUVRect.GetHashCode = (int(*)(void*))MB_MaterialAndUVRect.GetHashCodeOffset;

MB2_TextureBakeResults.CreateForMaterialsOnRendererOffset = getRealOffset(0x9E33A4);
MB2_TextureBakeResults.CreateForMaterialsOnRenderer = (void *(*)(void *))MB2_TextureBakeResults.CreateForMaterialsOnRendererOffset;

MB2_TextureBakeResults.ContainsMaterialOffset = getRealOffset(0x9E3F98);
MB2_TextureBakeResults.ContainsMaterial = (bool(*)(void*, void *))MB2_TextureBakeResults.ContainsMaterialOffset;

MB2_TextureBakeResults.GetDescriptionOffset = getRealOffset(0x9E4340);
MB2_TextureBakeResults.GetDescription = (monoString *(*)(void*))MB2_TextureBakeResults.GetDescriptionOffset;

MB2_UpdateSkinnedMeshBoundsFromBones.StartOffset = getRealOffset(0x9E5D50);
MB2_UpdateSkinnedMeshBoundsFromBones.Start = (void(*)(void*))MB2_UpdateSkinnedMeshBoundsFromBones.StartOffset;

MB2_UpdateSkinnedMeshBoundsFromBones.UpdateOffset = getRealOffset(0x9E5EA0);
MB2_UpdateSkinnedMeshBoundsFromBones.Update = (void(*)(void*))MB2_UpdateSkinnedMeshBoundsFromBones.UpdateOffset;

MB2_UpdateSkinnedMeshBoundsFromBounds.StartOffset = getRealOffset(0x9E5F44);
MB2_UpdateSkinnedMeshBoundsFromBounds.Start = (void(*)(void*))MB2_UpdateSkinnedMeshBoundsFromBounds.StartOffset;

MB2_UpdateSkinnedMeshBoundsFromBounds.UpdateOffset = getRealOffset(0x9E6284);
MB2_UpdateSkinnedMeshBoundsFromBounds.Update = (void(*)(void*))MB2_UpdateSkinnedMeshBoundsFromBounds.UpdateOffset;

MB3_DisableHiddenAnimations.StartOffset = getRealOffset(0x9E7B28);
MB3_DisableHiddenAnimations.Start = (void(*)(void*))MB3_DisableHiddenAnimations.StartOffset;

MB3_DisableHiddenAnimations.OnBecameVisibleOffset = getRealOffset(0x9E7C40);
MB3_DisableHiddenAnimations.OnBecameVisible = (void(*)(void*))MB3_DisableHiddenAnimations.OnBecameVisibleOffset;

MB3_DisableHiddenAnimations.OnBecameInvisibleOffset = getRealOffset(0x9E7D68);
MB3_DisableHiddenAnimations.OnBecameInvisible = (void(*)(void*))MB3_DisableHiddenAnimations.OnBecameInvisibleOffset;

MB3_MeshBaker.get_meshCombinerOffset = getRealOffset(0x9E7F14);
MB3_MeshBaker.get_meshCombiner = (void *(*)(void*))MB3_MeshBaker.get_meshCombinerOffset;

MB3_MeshBaker.BuildSceneMeshObjectOffset = getRealOffset(0x9E7F1C);
MB3_MeshBaker.BuildSceneMeshObject = (void(*)(void*))MB3_MeshBaker.BuildSceneMeshObjectOffset;

MB3_MeshBaker.ApplyShowHideOffset = getRealOffset(0x9E7F84);
MB3_MeshBaker.ApplyShowHide = (void(*)(void*))MB3_MeshBaker.ApplyShowHideOffset;

MB3_MeshBakerCommon.get_textureBakeResultsOffset = getRealOffset(0x9E81D0);
MB3_MeshBakerCommon.get_textureBakeResults = (void *(*)(void*))MB3_MeshBakerCommon.get_textureBakeResultsOffset;

MB3_MeshBakerCommon.set_textureBakeResultsOffset = getRealOffset(0x9E8210);
MB3_MeshBakerCommon.set_textureBakeResults = (void(*)(void*, void *))MB3_MeshBakerCommon.set_textureBakeResultsOffset;

MB3_MeshBakerCommon.GetObjectsToCombineOffset = getRealOffset(0x9E8258);
MB3_MeshBakerCommon.EnableDisableSourceObjectRenderersOffset = getRealOffset(0x9E84AC);
MB3_MeshBakerCommon.EnableDisableSourceObjectRenderers = (void(*)(void*, bool))MB3_MeshBakerCommon.EnableDisableSourceObjectRenderersOffset;

MB3_MeshBakerCommon.ClearMeshOffset = getRealOffset(0x9E861C);
MB3_MeshBakerCommon.ClearMesh = (void(*)(void*))MB3_MeshBakerCommon.ClearMeshOffset;

MB3_MeshBakerCommon.DestroyMeshOffset = getRealOffset(0x9E865C);
MB3_MeshBakerCommon.DestroyMesh = (void(*)(void*))MB3_MeshBakerCommon.DestroyMeshOffset;

MB3_MeshBakerCommon.DestroyMeshEditorOffset = getRealOffset(0x9E869C);
MB3_MeshBakerCommon.DestroyMeshEditor = (void(*)(void*, void *))MB3_MeshBakerCommon.DestroyMeshEditorOffset;

MB3_MeshBakerCommon.GetNumObjectsInCombinedOffset = getRealOffset(0x9E86E4);
MB3_MeshBakerCommon.GetNumObjectsInCombined = (int(*)(void*))MB3_MeshBakerCommon.GetNumObjectsInCombinedOffset;

MB3_MeshBakerCommon.GetNumVerticesForOffset = getRealOffset(0x9E8724);
MB3_MeshBakerCommon.GetNumVerticesFor = (int(*)(void*, void *))MB3_MeshBakerCommon.GetNumVerticesForOffset;

MB3_MeshBakerCommon.GetTextureBakerOffset = getRealOffset(0x9E876C);
MB3_MeshBakerCommon.GetTextureBaker = (void *(*)(void*))MB3_MeshBakerCommon.GetTextureBakerOffset;

MB3_MeshBakerCommon.ApplyOffset = getRealOffset(0x9E88C4);
MB3_MeshBakerCommon.Apply = (void(*)(void*, void *))MB3_MeshBakerCommon.ApplyOffset;

MB3_MeshBakerCommon.Apply1Offset = getRealOffset(0x9E8998);
MB3_MeshBakerCommon.Apply1 = (void(*)(void*, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, void *))MB3_MeshBakerCommon.Apply1Offset;

MB3_MeshBakerCommon.CombinedMeshContainsOffset = getRealOffset(0x9E8ABC);
MB3_MeshBakerCommon.CombinedMeshContains = (bool(*)(void*, void *))MB3_MeshBakerCommon.CombinedMeshContainsOffset;

MB3_MeshBakerCommon.UpdateSkinnedMeshApproximateBoundsOffset = getRealOffset(0x9E8C34);
MB3_MeshBakerCommon.UpdateSkinnedMeshApproximateBounds = (void(*)(void*))MB3_MeshBakerCommon.UpdateSkinnedMeshApproximateBoundsOffset;

MB3_MeshBakerCommon.UpdateSkinnedMeshApproximateBoundsFromBonesOffset = getRealOffset(0x9E8C98);
MB3_MeshBakerCommon.UpdateSkinnedMeshApproximateBoundsFromBones = (void(*)(void*))MB3_MeshBakerCommon.UpdateSkinnedMeshApproximateBoundsFromBonesOffset;

MB3_MeshBakerCommon.UpdateSkinnedMeshApproximateBoundsFromBoundsOffset = getRealOffset(0x9E8CFC);
MB3_MeshBakerCommon.UpdateSkinnedMeshApproximateBoundsFromBounds = (void(*)(void*))MB3_MeshBakerCommon.UpdateSkinnedMeshApproximateBoundsFromBoundsOffset;

MB3_MeshBakerCommon._ValidateForUpdateSkinnedMeshBoundsOffset = getRealOffset(0x9E8D60);
MB3_MeshBakerCommon._ValidateForUpdateSkinnedMeshBounds = (bool(*)(void*))MB3_MeshBakerCommon._ValidateForUpdateSkinnedMeshBoundsOffset;

MB3_MeshBakerGrouper.OnDrawGizmosSelectedOffset = getRealOffset(0x9E8FD0);
MB3_MeshBakerGrouper.OnDrawGizmosSelected = (void(*)(void*))MB3_MeshBakerGrouper.OnDrawGizmosSelectedOffset;

MB3_MeshBakerGrouper.DrawCircleOffset = getRealOffset(0x9E9C9C);
MB3_MeshBakerGrouper.DrawCircle = (void(*)(Vector3, Vector3, float, int))MB3_MeshBakerGrouper.DrawCircleOffset;

MB3_MeshBakerGrouperCore.DoClusteringOffset = getRealOffset(0x9EA068);
MB3_MeshBakerGrouperCore.DoClustering = (void(*)(void*, void *))MB3_MeshBakerGrouperCore.DoClusteringOffset;

MB3_MeshBakerRoot.GetObjectsToCombineOffset = getRealOffset(0x9EBCDC);
MB3_MeshBakerRoot.DoCombinedValidateOffset = getRealOffset(0x9EBCE4);
MB3_MeshBakerRoot.DoCombinedValidate = (bool(*)(void *, int, void *, int))MB3_MeshBakerRoot.DoCombinedValidateOffset;

MB3_MultiMeshBaker.get_meshCombinerOffset = getRealOffset(0x9EC820);
MB3_MultiMeshBaker.get_meshCombiner = (void *(*)(void*))MB3_MultiMeshBaker.get_meshCombinerOffset;

MB3_TextureBaker.get_textureBakeResultsOffset = getRealOffset(0x9EF0D8);
MB3_TextureBaker.get_textureBakeResults = (void *(*)(void*))MB3_TextureBaker.get_textureBakeResultsOffset;

MB3_TextureBaker.set_textureBakeResultsOffset = getRealOffset(0x9EF0E0);
MB3_TextureBaker.set_textureBakeResults = (void(*)(void*, void *))MB3_TextureBaker.set_textureBakeResultsOffset;

MB3_TextureBaker.get_atlasPaddingOffset = getRealOffset(0x9EF0E8);
MB3_TextureBaker.get_atlasPadding = (int(*)(void*))MB3_TextureBaker.get_atlasPaddingOffset;

MB3_TextureBaker.set_atlasPaddingOffset = getRealOffset(0x9EF0F0);
MB3_TextureBaker.set_atlasPadding = (void(*)(void*, int))MB3_TextureBaker.set_atlasPaddingOffset;

MB3_TextureBaker.get_maxAtlasSizeOffset = getRealOffset(0x9EF0F8);
MB3_TextureBaker.get_maxAtlasSize = (int(*)(void*))MB3_TextureBaker.get_maxAtlasSizeOffset;

MB3_TextureBaker.set_maxAtlasSizeOffset = getRealOffset(0x9EF100);
MB3_TextureBaker.set_maxAtlasSize = (void(*)(void*, int))MB3_TextureBaker.set_maxAtlasSizeOffset;

MB3_TextureBaker.get_resizePowerOfTwoTexturesOffset = getRealOffset(0x9EF108);
MB3_TextureBaker.get_resizePowerOfTwoTextures = (bool(*)(void*))MB3_TextureBaker.get_resizePowerOfTwoTexturesOffset;

MB3_TextureBaker.set_resizePowerOfTwoTexturesOffset = getRealOffset(0x9EF110);
MB3_TextureBaker.set_resizePowerOfTwoTextures = (void(*)(void*, bool))MB3_TextureBaker.set_resizePowerOfTwoTexturesOffset;

MB3_TextureBaker.get_fixOutOfBoundsUVsOffset = getRealOffset(0x9EF118);
MB3_TextureBaker.get_fixOutOfBoundsUVs = (bool(*)(void*))MB3_TextureBaker.get_fixOutOfBoundsUVsOffset;

MB3_TextureBaker.set_fixOutOfBoundsUVsOffset = getRealOffset(0x9EF120);
MB3_TextureBaker.set_fixOutOfBoundsUVs = (void(*)(void*, bool))MB3_TextureBaker.set_fixOutOfBoundsUVsOffset;

MB3_TextureBaker.get_maxTilingBakeSizeOffset = getRealOffset(0x9EF128);
MB3_TextureBaker.get_maxTilingBakeSize = (int(*)(void*))MB3_TextureBaker.get_maxTilingBakeSizeOffset;

MB3_TextureBaker.set_maxTilingBakeSizeOffset = getRealOffset(0x9EF130);
MB3_TextureBaker.set_maxTilingBakeSize = (void(*)(void*, int))MB3_TextureBaker.set_maxTilingBakeSizeOffset;

MB3_TextureBaker.get_packingAlgorithmOffset = getRealOffset(0x9EF138);
MB3_TextureBaker.get_packingAlgorithm = (int (*)(void*))MB3_TextureBaker.get_packingAlgorithmOffset;

MB3_TextureBaker.set_packingAlgorithmOffset = getRealOffset(0x9EF140);
MB3_TextureBaker.set_packingAlgorithm = (void(*)(void*, int))MB3_TextureBaker.set_packingAlgorithmOffset;

MB3_TextureBaker.get_meshBakerTexturePackerForcePowerOfTwoOffset = getRealOffset(0x9EF148);
MB3_TextureBaker.get_meshBakerTexturePackerForcePowerOfTwo = (bool(*)(void*))MB3_TextureBaker.get_meshBakerTexturePackerForcePowerOfTwoOffset;

MB3_TextureBaker.set_meshBakerTexturePackerForcePowerOfTwoOffset = getRealOffset(0x9EF150);
MB3_TextureBaker.set_meshBakerTexturePackerForcePowerOfTwo = (void(*)(void*, bool))MB3_TextureBaker.set_meshBakerTexturePackerForcePowerOfTwoOffset;

MB3_TextureBaker.get_customShaderPropertiesOffset = getRealOffset(0x9EF158);
MB3_TextureBaker.get_customShaderPropNamesOffset = getRealOffset(0x9EF168);
MB3_TextureBaker.get_doMultiMaterialOffset = getRealOffset(0x9EF178);
MB3_TextureBaker.get_doMultiMaterial = (bool(*)(void*))MB3_TextureBaker.get_doMultiMaterialOffset;

MB3_TextureBaker.set_doMultiMaterialOffset = getRealOffset(0x9EF180);
MB3_TextureBaker.set_doMultiMaterial = (void(*)(void*, bool))MB3_TextureBaker.set_doMultiMaterialOffset;

MB3_TextureBaker.get_resultMaterialOffset = getRealOffset(0x9EF188);
MB3_TextureBaker.get_resultMaterial = (void *(*)(void*))MB3_TextureBaker.get_resultMaterialOffset;

MB3_TextureBaker.set_resultMaterialOffset = getRealOffset(0x9EF190);
MB3_TextureBaker.set_resultMaterial = (void(*)(void*, void *))MB3_TextureBaker.set_resultMaterialOffset;

MB3_TextureBaker.get_considerNonTexturePropertiesOffset = getRealOffset(0x9EF198);
MB3_TextureBaker.get_considerNonTextureProperties = (bool(*)(void*))MB3_TextureBaker.get_considerNonTexturePropertiesOffset;

MB3_TextureBaker.set_considerNonTexturePropertiesOffset = getRealOffset(0x9EF1A0);
MB3_TextureBaker.set_considerNonTextureProperties = (void(*)(void*, bool))MB3_TextureBaker.set_considerNonTexturePropertiesOffset;

MB3_TextureBaker.get_doSuggestTreatmentOffset = getRealOffset(0x9EF1A8);
MB3_TextureBaker.get_doSuggestTreatment = (bool(*)(void*))MB3_TextureBaker.get_doSuggestTreatmentOffset;

MB3_TextureBaker.set_doSuggestTreatmentOffset = getRealOffset(0x9EF1B0);
MB3_TextureBaker.set_doSuggestTreatment = (void(*)(void*, bool))MB3_TextureBaker.set_doSuggestTreatmentOffset;

MB3_TextureBaker.GetObjectsToCombineOffset = getRealOffset(0x9EF1B8);
MB3_TextureBaker.CreateAtlasesOffset = getRealOffset(0x9EF240);
MB3_TextureBaker.CreateAtlasesCoroutineOffset = getRealOffset(0x9EF674);
MB3_TextureBaker.CreateAtlasesCoroutine = (void *(*)(void*, void *, void *, bool, void *, float))MB3_TextureBaker.CreateAtlasesCoroutineOffset;

MB3_TextureBaker.CreateAtlases1Offset = getRealOffset(0x9EF264);
MB3_TextureBaker.unpackMat2RectMapOffset = getRealOffset(0x9EF79C);
MB3_TextureBaker.unpackMat2RectMap = (void(*)(void*, void *))MB3_TextureBaker.unpackMat2RectMapOffset;

MB3_TextureBaker.ConfigureNewMaterialToMatchOldOffset = getRealOffset(0x9EFAB0);
MB3_TextureBaker.ConfigureNewMaterialToMatchOld = (void(*)(void *, void *))MB3_TextureBaker.ConfigureNewMaterialToMatchOldOffset;

MB3_TextureBaker._ValidateResultMaterialsOffset = getRealOffset(0x9F00DC);
MB3_TextureBaker._ValidateResultMaterials = (bool(*)(void*))MB3_TextureBaker._ValidateResultMaterialsOffset;

MB2_TestShowHide.UpdateOffset = getRealOffset(0x9E2908);
MB2_TestShowHide.Update = (void(*)(void*))MB2_TestShowHide.UpdateOffset;

MB2_TestUpdate.StartOffset = getRealOffset(0x9E2AA8);
MB2_TestUpdate.Start = (void(*)(void*))MB2_TestUpdate.StartOffset;

MB2_TestUpdate.LateUpdateOffset = getRealOffset(0x9E2DBC);
MB2_TestUpdate.LateUpdate = (void(*)(void*))MB2_TestUpdate.LateUpdateOffset;

MB3_TestAddingRemovingSkinnedMeshes.StartOffset = getRealOffset(0x9ECC24);
MB3_TestAddingRemovingSkinnedMeshes.Start = (void(*)(void*))MB3_TestAddingRemovingSkinnedMeshes.StartOffset;

MB3_TestAddingRemovingSkinnedMeshes.TestScriptOffset = getRealOffset(0x9ECC48);
MB3_TestAddingRemovingSkinnedMeshes.TestScript = (void *(*)(void*))MB3_TestAddingRemovingSkinnedMeshes.TestScriptOffset;

MB3_TestBakeAllWithSameMaterial.StartOffset = getRealOffset(0x9EDB8C);
MB3_TestBakeAllWithSameMaterial.Start = (void(*)(void*))MB3_TestBakeAllWithSameMaterial.StartOffset;

MB3_TestBakeAllWithSameMaterial.testCombineOffset = getRealOffset(0x9EDB90);
MB3_TestBakeAllWithSameMaterial.testCombine = (void(*)(void*))MB3_TestBakeAllWithSameMaterial.testCombineOffset;

MB3_TestRenderTextureTestHarness.Create3x3TexOffset = getRealOffset(0x9EE128);
MB3_TestRenderTextureTestHarness.Create3x3Tex = (void *(*)(void*))MB3_TestRenderTextureTestHarness.Create3x3TexOffset;

MB3_TestRenderTextureTestHarness.Create3x3CloneOffset = getRealOffset(0x9EE294);
MB3_TestRenderTextureTestHarness.Create3x3Clone = (void *(*)(void*))MB3_TestRenderTextureTestHarness.Create3x3CloneOffset;

MB3_TestRenderTextureTestHarness.TestRenderOffset = getRealOffset(0x9EE5DC);
MB3_TestRenderTextureTestHarness.TestRender = (void(*)(void *, void *))MB3_TestRenderTextureTestHarness.TestRenderOffset;

MB_TextureCombinerRenderTexture.OnRenderObjectOffset = getRealOffset(0x9E6A54);
MB_TextureCombinerRenderTexture.OnRenderObject = (void(*)(void*))MB_TextureCombinerRenderTexture.OnRenderObjectOffset;

MB_TextureCombinerRenderTexture.ConvertNormalFormatFromUnity_ToStandardOffset = getRealOffset(0x9F6B20);
MB_TextureCombinerRenderTexture.ConvertNormalFormatFromUnity_ToStandard = (int (*)(void*, int))MB_TextureCombinerRenderTexture.ConvertNormalFormatFromUnity_ToStandardOffset;

MB_TextureCombinerRenderTexture.IsOpenGLOffset = getRealOffset(0x9F6AAC);
MB_TextureCombinerRenderTexture.IsOpenGL = (bool(*)(void*))MB_TextureCombinerRenderTexture.IsOpenGLOffset;

MB_TextureCombinerRenderTexture.CopyScaledAndTiledToAtlasOffset = getRealOffset(0x9F533C);
MB_TextureCombinerRenderTexture.CopyScaledAndTiledToAtlas = (void(*)(void*, void *, void *, Vector2, Vector2, int, void *, void *))MB_TextureCombinerRenderTexture.CopyScaledAndTiledToAtlasOffset;

MB_TextureCombinerRenderTexture._printTextureOffset = getRealOffset(0x9F4FEC);
MB_TextureCombinerRenderTexture._printTexture = (void(*)(void*, void *))MB_TextureCombinerRenderTexture._printTextureOffset;

MB3_AtlasPackerRenderTexture.OnRenderAtlasOffset = getRealOffset(0x9E632C);
MB3_AtlasPackerRenderTexture.OnRenderAtlas = (void *(*)(void*, void *))MB3_AtlasPackerRenderTexture.OnRenderAtlasOffset;

MB3_AtlasPackerRenderTexture.OnRenderObjectOffset = getRealOffset(0x9E6A18);
MB3_AtlasPackerRenderTexture.OnRenderObject = (void(*)(void*))MB3_AtlasPackerRenderTexture.OnRenderObjectOffset;

Hull.ImpactOffset = getRealOffset(0x7FAFAC);
Hull.Impact = (void(*)(void*, Vector3, Vector3, int, int))Hull.ImpactOffset;

Hull.AdjustVerticesForImpactOffset = getRealOffset(0x7FDB30);
Hull.AdjustVerticesForImpact = (void(*)(void*, Vector3, Vector3, int, int))Hull.AdjustVerticesForImpactOffset;

Hull.FixUpSubHullsOffset = getRealOffset(0x7FEF6C);
Hull.FixUpSubHulls = (void(*)(void*, Vector3))Hull.FixUpSubHullsOffset;

Hull.GetIntersectedTriangleIndicesOffset = getRealOffset(0x7FB434);
Hull.IsTriangleIndexIntersectedOffset = getRealOffset(0x7FCEF0);
Hull.IsTriangleIndexIntersected = (bool(*)(void*, int, Vector3, float))Hull.IsTriangleIndexIntersectedOffset;

Hull.BreakDownTriangleOffset = getRealOffset(0x7FB97C);
Hull.GetAreaOfTriangleOffset = getRealOffset(0x7FB548);
Hull.GetAreaOfTriangle = (float(*)(void*, int))Hull.GetAreaOfTriangleOffset;

Hull.IsEmptyOffset = getRealOffset(0x7FFAE8);
Hull.IsEmpty = (bool(*)(void*))Hull.IsEmptyOffset;

Hull.GetMeshOffset = getRealOffset(0x7FFB6C);
Hull.GetMesh = (void *(*)(void*))Hull.GetMeshOffset;

Hull.GetSubHullMeshOffset = getRealOffset(0x7FFD44);
Hull.GetSubHullMesh = (void *(*)(void*))Hull.GetSubHullMeshOffset;

SubHull.CalculateEdgesOffset = getRealOffset(0x58845C);
SubHull.CalculateEdges = (void(*)(void*))SubHull.CalculateEdgesOffset;

SubHull.IsEmptyOffset = getRealOffset(0x588AAC);
SubHull.IsEmpty = (bool(*)(void*))SubHull.IsEmptyOffset;

SubHull.GetMeshOffset = getRealOffset(0x588B30);
SubHull.GetMesh = (void *(*)(void*))SubHull.GetMeshOffset;

Meshinator.StartOffset = getRealOffset(0x523B08);
Meshinator.Start = (void(*)(void*))Meshinator.StartOffset;

Meshinator.FixedUpdateOffset = getRealOffset(0x523CD4);
Meshinator.FixedUpdate = (void(*)(void*))Meshinator.FixedUpdateOffset;

Meshinator.OnCollisionEnterOffset = getRealOffset(0x523D10);
Meshinator.OnCollisionEnter = (void(*)(void*, void *))Meshinator.OnCollisionEnterOffset;

Meshinator.OnCollisionExitOffset = getRealOffset(0x5243A8);
Meshinator.OnCollisionExit = (void(*)(void*))Meshinator.OnCollisionExitOffset;

Meshinator.DelayCollisionsOffset = getRealOffset(0x5243B8);
Meshinator.DelayCollisions = (void(*)(void*))Meshinator.DelayCollisionsOffset;

Meshinator.ImpactOffset = getRealOffset(0x523F38);
Meshinator.Impact = (void(*)(void*, Vector3, Vector3, int, int))Meshinator.ImpactOffset;

Meshinator.InitializeHullOffset = getRealOffset(0x524454);
Meshinator.InitializeHull = (void(*)(void*))Meshinator.InitializeHullOffset;

Meshinator.CanDoImpactOffset = getRealOffset(0x5243CC);
Meshinator.CanDoImpact = (bool(*)(void*, Vector3, Vector3))Meshinator.CanDoImpactOffset;

MainCamera.StartOffset = getRealOffset(0x9F6EDC);
MainCamera.Start = (void(*)(void*))MainCamera.StartOffset;

MainCamera.FixedUpdateOffset = getRealOffset(0x9F7064);
MainCamera.FixedUpdate = (void(*)(void*))MainCamera.FixedUpdateOffset;

MainCamera.LateUpdateOffset = getRealOffset(0x9F75E0);
MainCamera.LateUpdate = (void(*)(void*))MainCamera.LateUpdateOffset;

MainCamera.FocusCameraOnTransformOffset = getRealOffset(0x9F7A24);
MainCamera.FocusCameraOnTransform = (void(*)(void*, void *, float))MainCamera.FocusCameraOnTransformOffset;

MainCamera.CameraLerpCoroutineOffset = getRealOffset(0x9F7A98);
MainCamera.CameraLerpCoroutine = (void *(*)(void*, Vector3, float, float))MainCamera.CameraLerpCoroutineOffset;

ThreadManager.get_CurrentOffset = getRealOffset(0x5CCD44);
ThreadManager.get_Current = (void *(*)())ThreadManager.get_CurrentOffset;

ThreadManager.AwakeOffset = getRealOffset(0x5CCEE8);
ThreadManager.Awake = (void(*)(void*))ThreadManager.AwakeOffset;

ThreadManager.InitializeOffset = getRealOffset(0x5CCDC0);
ThreadManager.Initialize = (void(*)())ThreadManager.InitializeOffset;

ThreadManager.QueueOnMainThreadOffset = getRealOffset(0x5CCF70);
ThreadManager.QueueOnMainThread = (void(*)(void *))ThreadManager.QueueOnMainThreadOffset;

ThreadManager.QueueOnMainThread1Offset = getRealOffset(0x5CCFEC);
ThreadManager.QueueOnMainThread1 = (void(*)(void *, float))ThreadManager.QueueOnMainThread1Offset;

ThreadManager.RunAsyncOffset = getRealOffset(0x5CD2D4);
ThreadManager.RunAsync = (void *(*)(void *))ThreadManager.RunAsyncOffset;

ThreadManager.OnDisableOffset = getRealOffset(0x5CD5D8);
ThreadManager.OnDisable = (void(*)(void*))ThreadManager.OnDisableOffset;

ThreadManager.StartOffset = getRealOffset(0x5CD6CC);
ThreadManager.Start = (void(*)(void*))ThreadManager.StartOffset;

ThreadManager.UpdateOffset = getRealOffset(0x5CD6D0);
ThreadManager.Update = (void(*)(void*))ThreadManager.UpdateOffset;

WaterMovement.AwakeOffset = getRealOffset(0x8AAA50);
WaterMovement.Awake = (void(*)(void*))WaterMovement.AwakeOffset;

WaterMovement.StartOffset = getRealOffset(0x8AAAB0);
WaterMovement.Start = (void(*)(void*))WaterMovement.StartOffset;

WaterMovement.UpdateOffset = getRealOffset(0x8AAC5C);
WaterMovement.Update = (void(*)(void*))WaterMovement.UpdateOffset;

CameraDefault.StartOffset = getRealOffset(0x6CEA64);
CameraDefault.Start = (void(*)(void*))CameraDefault.StartOffset;

CameraDefault.LateUpdateOffset = getRealOffset(0x6CEB40);
CameraDefault.LateUpdate = (void(*)(void*))CameraDefault.LateUpdateOffset;

CameraDefault.HandlePlayerInputOffset = getRealOffset(0x6CEBE4);
CameraDefault.HandlePlayerInput = (void(*)(void*))CameraDefault.HandlePlayerInputOffset;

CameraDefault.CalculateDesiredPositionOffset = getRealOffset(0x6CED80);
CameraDefault.CalculateDesiredPosition = (void(*)(void*))CameraDefault.CalculateDesiredPositionOffset;

CameraDefault.CalculatePositionOffset = getRealOffset(0x6CF0D4);
CameraDefault.CalculatePosition = (Vector3 (*)(void*, float, float, float))CameraDefault.CalculatePositionOffset;

CameraDefault.UpdatePositionOffset = getRealOffset(0x6CEE58);
CameraDefault.UpdatePosition = (void(*)(void*))CameraDefault.UpdatePositionOffset;

CameraDefault.ResetOffset = getRealOffset(0x6CEB1C);
CameraDefault.Reset = (void(*)(void*))CameraDefault.ResetOffset;

CameraDefault.ClampAngleOffset = getRealOffset(0x6CEFDC);
CameraDefault.ClampAngle = (float(*)(void*, float, float, float))CameraDefault.ClampAngleOffset;

Turbine.MainOffset = getRealOffset(0x5DAB28);
Turbine.Main = (void(*)(void*, void *))Turbine.MainOffset;

Engine.MainOffset = getRealOffset(0x68D87C);
Engine.Main = (void(*)(void*, void *))Engine.MainOffset;

Transmission.MainOffset = getRealOffset(0x5DA28C);
Transmission.Main = (void(*)(void*, void *))Transmission.MainOffset;

Transmission.ShiftUpOffset = getRealOffset(0x5DA9D0);
Transmission.ShiftUp = (bool(*)(void*))Transmission.ShiftUpOffset;

Transmission.ShiftDownOffset = getRealOffset(0x5DAA30);
Transmission.ShiftDown = (bool(*)(void*))Transmission.ShiftDownOffset;

Sound.MainOffset = getRealOffset(0x5785EC);
Sound.Main = (void(*)(void*, void *))Sound.MainOffset;

Lighting.MainOffset = getRealOffset(0x661258);
Lighting.Main = (void(*)(void*, void *))Lighting.MainOffset;

Smoke.MainOffset = getRealOffset(0x576B9C);
Smoke.Main = (void(*)(void*, void *))Smoke.MainOffset;

Inputs.MainOffset = getRealOffset(0x80BFEC);
Inputs.Main = (void(*)(void*, void *))Inputs.MainOffset;

CarController.StartOffset = getRealOffset(0x77A828);
CarController.Start = (void(*)(void*))CarController.StartOffset;

CarController.FixedUpdateOffset = getRealOffset(0x77AB04);
CarController.FixedUpdate = (void(*)(void*))CarController.FixedUpdateOffset;

CarController.UpdateWheelOffset = getRealOffset(0x77C7D4);
CarController.UpdateWheel = (void(*)(void*, void *))CarController.UpdateWheelOffset;

CarController.DetectWheelSlipOffset = getRealOffset(0x77C594);
CarController.DetectWheelSlip = (bool(*)(void*, void *, float))CarController.DetectWheelSlipOffset;

CarController.countPoweredAxlesOffset = getRealOffset(0x77A948);
CarController.countPoweredAxles = (int(*)(void*))CarController.countPoweredAxlesOffset;

CarController.ActiveOffset = getRealOffset(0x77C8C8);
CarController.Active = (void(*)(void*, bool))CarController.ActiveOffset;

GUIController.StartOffset = getRealOffset(0x73376C);
GUIController.Start = (void(*)(void*))GUIController.StartOffset;

GUIController.UpdateOffset = getRealOffset(0x733E18);
GUIController.Update = (void(*)(void*))GUIController.UpdateOffset;

GUIController.InitButtonsOffset = getRealOffset(0x733800);
GUIController.InitButtons = (void(*)(void*))GUIController.InitButtonsOffset;

GUIController.ToggleAxleOffset = getRealOffset(0x7342F0);
GUIController.ToggleAxle = (void(*)(void*, int))GUIController.ToggleAxleOffset;

GUIController.ToggleAbsOffset = getRealOffset(0x7346CC);
GUIController.ToggleAbs = (void(*)(void*, bool))GUIController.ToggleAbsOffset;

GUIController.ToggleAwdOffset = getRealOffset(0x734780);
GUIController.ToggleAwd = (void(*)(void*, bool))GUIController.ToggleAwdOffset;

GUIController.SetMeterOffset = getRealOffset(0x733F9C);
GUIController.SetMeter = (void(*)(void*))GUIController.SetMeterOffset;

GUIController.SetSpeedOffset = getRealOffset(0x734200);
GUIController.SetSpeed = (void(*)(void*, float))GUIController.SetSpeedOffset;

GUIController.SetGearOffset = getRealOffset(0x7342A4);
GUIController.SetGear = (void(*)(void*, int))GUIController.SetGearOffset;

GUIController.levelResetOffset = getRealOffset(0x734834);
GUIController.levelReset = (void(*)(void*))GUIController.levelResetOffset;

GUIController.motorToggleOffset = getRealOffset(0x734850);
GUIController.motorToggle = (void(*)(void*))GUIController.motorToggleOffset;

TrailerController.StartOffset = getRealOffset(0x5D9D20);
TrailerController.Start = (void(*)(void*))TrailerController.StartOffset;

TrailerController.FixedUpdateOffset = getRealOffset(0x5D9DE0);
TrailerController.FixedUpdate = (void(*)(void*))TrailerController.FixedUpdateOffset;

TrailerController.UpdateWheelOffset = getRealOffset(0x5D9F28);
TrailerController.UpdateWheel = (void(*)(void*, void *))TrailerController.UpdateWheelOffset;

VehicleChanger.UpdateOffset = getRealOffset(0x895C28);
VehicleChanger.Update = (void(*)(void*))VehicleChanger.UpdateOffset;

BF_WeaponInfo.ctor1Offset = getRealOffset(0x6BEA44);
BF_WeaponInfo.ctor1 = (void(*)(void*, int, int, monoString*, monoString*, monoString*, monoString*, monoString*, monoString*, monoString*, monoString*))BF_WeaponInfo.ctor1Offset;

BF_ThrowableInfo.ctor1Offset = getRealOffset(0x6BEA14);
BF_ThrowableInfo.ctor1 = (void(*)(void*, int, int))BF_ThrowableInfo.ctor1Offset;

AS_CustomInfoMethods.CustomInfoOnGUIOffset = getRealOffset(0x6A998C);
AS_CustomInfoMethods.CustomInfoOnGUI = (void *(*)(void *))AS_CustomInfoMethods.CustomInfoOnGUIOffset;

AS_MySQLFieldMethods.ToReadableStringOffset = getRealOffset(0x6AF0FC);
AS_MySQLFieldMethods.ToReadableString = (monoString *(*)(void *))AS_MySQLFieldMethods.ToReadableStringOffset;

AS_MySQLFieldMethods.DeSerializeCustomInfoOffset = getRealOffset(0x697D24);
AS_MySQLFieldMethods.DeSerializeCustomInfo = (bool(*)(void *))AS_MySQLFieldMethods.DeSerializeCustomInfoOffset;

AS_MySQLFieldMethods.SerializeCustomInfoOffset = getRealOffset(0x696F10);
AS_MySQLFieldMethods.SerializeCustomInfo = (bool(*)(void *))AS_MySQLFieldMethods.SerializeCustomInfoOffset;

AS_MySQLFieldMethods.SetFieldValueOffset = getRealOffset(0x6A5734);
AS_MySQLFieldMethods.SetFieldValue = (bool(*)(void *, monoString*, monoString*))AS_MySQLFieldMethods.SetFieldValueOffset;

AS_MySQLFieldMethods.GetFieldValueOffset = getRealOffset(0x69A020);
AS_MySQLFieldMethods.GetFieldValue = (monoString *(*)(void *, monoString*))AS_MySQLFieldMethods.GetFieldValueOffset;

AS_MySQLFieldMethods.LogOffset = getRealOffset(0x6AF390);
AS_MySQLFieldMethods.Log = (void(*)(int, monoString*))AS_MySQLFieldMethods.LogOffset;

AS_SerializableDictionary.GetValueOffset = getRealOffset(0x6AFFAC);
AS_SerializableDictionary.GetValue = (monoString *(*)(void*, monoString*))AS_SerializableDictionary.GetValueOffset;

AS_SerializableDictionary.SetValueOffset = getRealOffset(0x6B010C);
AS_SerializableDictionary.SetValue = (bool(*)(void*, monoString*, monoString*))AS_SerializableDictionary.SetValueOffset;

AS_SerializableDictionary.get_CountOffset = getRealOffset(0x6B01B8);
AS_SerializableDictionary.get_Count = (int(*)(void*))AS_SerializableDictionary.get_CountOffset;

AS_SerializableDictionary.GetIndexOffset = getRealOffset(0x6B005C);
AS_SerializableDictionary.GetIndex = (int(*)(void*, monoString*))AS_SerializableDictionary.GetIndexOffset;

ObjectDictionaryMethods.AddOffset = getRealOffset(0x549EE4);
ObjectDictionaryMethods.Add = (bool(*)(void *, monoString*, monoString*))ObjectDictionaryMethods.AddOffset;

AS_AccountManagement.LogOffset = getRealOffset(0x696E60);
AS_AccountManagement.Log = (void(*)(int, monoString*))AS_AccountManagement.LogOffset;

AS_Login.LogOffset = getRealOffset(0x6AAC2C);
AS_Login.Log = (void(*)(int, monoString*))AS_Login.LogOffset;

AS_ErrorHandling.IsAnErrorOffset = getRealOffset(0x6A63B8);
AS_ErrorHandling.IsAnError = (bool(*)(monoString*))AS_ErrorHandling.IsAnErrorOffset;

AS_ErrorHandling.HandleErrorOffset = getRealOffset(0x6A9990);
AS_ErrorHandling.HandleError = (monoString *(*)(monoString*))AS_ErrorHandling.HandleErrorOffset;

AS_ErrorHandling.HandlePHPErrorOffset = getRealOffset(0x6A9F30);
AS_ErrorHandling.HandlePHPError = (monoString *(*)(monoString*))AS_ErrorHandling.HandlePHPErrorOffset;

AS_ErrorHandling.HandleMySQLErrorOffset = getRealOffset(0x6A9AB0);
AS_ErrorHandling.HandleMySQLError = (monoString *(*)(monoString*))AS_ErrorHandling.HandleMySQLErrorOffset;

AS_CoroutineCaller.CreateOffset = getRealOffset(0x6A8B60);
AS_CoroutineCaller.Create = (void *(*)())AS_CoroutineCaller.CreateOffset;

AS_Methods.DestroyOffset = getRealOffset(0x6AD678);
AS_Methods.Destroy = (void(*)(void *))AS_Methods.DestroyOffset;

AS_Methods.XmlDeserializeFromString1Offset = getRealOffset(0x6AD8CC);
AS_Methods.ToAccountInfoOffset = getRealOffset(0x697964);
AS_Methods.ToAccountInfo = (void *(*)(monoString*))AS_Methods.ToAccountInfoOffset;

AS_Methods.AccInfoToStringOffset = getRealOffset(0x696FB8);
AS_Methods.AccInfoToString = (monoString *(*)(void *, bool))AS_Methods.AccInfoToStringOffset;

AS_Methods.HashOffset = getRealOffset(0x69D8B4);
AS_Methods.Hash = (monoString *(*)(monoString*))AS_Methods.HashOffset;

AS_Methods.RemoveHTMLTagsOffset = getRealOffset(0x6ADDBC);
AS_Methods.RemoveHTMLTags = (monoString *(*)(monoString*))AS_Methods.RemoveHTMLTagsOffset;

AS_Methods.AddCredentialsOffset = getRealOffset(0x6ADEC8);
AS_Methods.AddCredentials = (void *(*)(void *))AS_Methods.AddCredentialsOffset;

AS_Methods.AddPreferencesOffset = getRealOffset(0x6AE0E0);
AS_Methods.AddPreferences = (void *(*)(void *))AS_Methods.AddPreferencesOffset;

AS_Methods.UppercaseFirstOffset = getRealOffset(0x6A9FDC);
AS_Methods.UppercaseFirst = (monoString *(*)(monoString*))AS_Methods.UppercaseFirstOffset;

AS_Methods.LogOffset = getRealOffset(0x6ADD0C);
AS_Methods.Log = (void(*)(int, monoString*))AS_Methods.LogOffset;

AS_Methods.Log1Offset = getRealOffset(0x6A4A98);
AS_Methods.Log1 = (void(*)(void *, int, monoString*))AS_Methods.Log1Offset;

AS_Methods.Log2Offset = getRealOffset(0x697690);
AS_Methods.Log2 = (void(*)(monoString*, int, monoString*))AS_Methods.Log2Offset;

AS_Credentials.SaveOffset = getRealOffset(0x6A8C00);
AS_Credentials.Save = (void(*)())AS_Credentials.SaveOffset;

AS_Credentials.get_databaseHostnameOffset = getRealOffset(0x6A8C08);
AS_Credentials.get_databaseHostname = (monoString *(*)())AS_Credentials.get_databaseHostnameOffset;

AS_Credentials.set_databaseHostnameOffset = getRealOffset(0x6A8C90);
AS_Credentials.set_databaseHostname = (void(*)(monoString*))AS_Credentials.set_databaseHostnameOffset;

AS_Credentials.get_databasePortOffset = getRealOffset(0x6A8CF0);
AS_Credentials.get_databasePort = (monoString *(*)())AS_Credentials.get_databasePortOffset;

AS_Credentials.set_databasePortOffset = getRealOffset(0x6A8D78);
AS_Credentials.set_databasePort = (void(*)(monoString*))AS_Credentials.set_databasePortOffset;

AS_Credentials.get_databaseUsernameOffset = getRealOffset(0x6A8DD8);
AS_Credentials.get_databaseUsername = (monoString *(*)())AS_Credentials.get_databaseUsernameOffset;

AS_Credentials.set_databaseUsernameOffset = getRealOffset(0x6A8E60);
AS_Credentials.set_databaseUsername = (void(*)(monoString*))AS_Credentials.set_databaseUsernameOffset;

AS_Credentials.get_databasePasswordOffset = getRealOffset(0x6A8EC0);
AS_Credentials.get_databasePassword = (monoString *(*)())AS_Credentials.get_databasePasswordOffset;

AS_Credentials.set_databasePasswordOffset = getRealOffset(0x6A8F48);
AS_Credentials.set_databasePassword = (void(*)(monoString*))AS_Credentials.set_databasePasswordOffset;

AS_Credentials.get_databaseDbNameOffset = getRealOffset(0x6A8FA8);
AS_Credentials.get_databaseDbName = (monoString *(*)())AS_Credentials.get_databaseDbNameOffset;

AS_Credentials.set_databaseDbNameOffset = getRealOffset(0x6A9030);
AS_Credentials.set_databaseDbName = (void(*)(monoString*))AS_Credentials.set_databaseDbNameOffset;

AS_Credentials.get_emailAccountOffset = getRealOffset(0x6A9090);
AS_Credentials.get_emailAccount = (monoString *(*)())AS_Credentials.get_emailAccountOffset;

AS_Credentials.set_emailAccountOffset = getRealOffset(0x6A9118);
AS_Credentials.set_emailAccount = (void(*)(monoString*))AS_Credentials.set_emailAccountOffset;

AS_Credentials.get_phpScriptsLocationOffset = getRealOffset(0x696DCC);
AS_Credentials.get_phpScriptsLocation = (monoString *(*)())AS_Credentials.get_phpScriptsLocationOffset;

AS_Credentials.get_phpFilesLocationOffset = getRealOffset(0x6A9270);
AS_Credentials.get_phpFilesLocation = (monoString *(*)())AS_Credentials.get_phpFilesLocationOffset;

AS_Credentials.get_phpAssetBundleLocationOffset = getRealOffset(0x6A9304);
AS_Credentials.get_phpAssetBundleLocation = (monoString *(*)())AS_Credentials.get_phpAssetBundleLocationOffset;

AS_Credentials.get_RemoteValidatorURLOffset = getRealOffset(0x6A9398);
AS_Credentials.get_RemoteValidatorURL = (monoString *(*)())AS_Credentials.get_RemoteValidatorURLOffset;

AS_Credentials.get_WillConnectToProdOffset = getRealOffset(0x6A9178);
AS_Credentials.get_WillConnectToProd = (bool(*)())AS_Credentials.get_WillConnectToProdOffset;

AS_Credentials.EditPhpScriptsLocationOffset = getRealOffset(0x6A942C);
AS_Credentials.EditPhpScriptsLocation = (void(*)(monoString*))AS_Credentials.EditPhpScriptsLocationOffset;

AS_Credentials.LogOffset = getRealOffset(0x6A9868);
AS_Credentials.Log = (void(*)(int, monoString*))AS_Credentials.LogOffset;

AS_Preferences.get_overrideExistingTablesOffset = getRealOffset(0x6AE2D0);
AS_Preferences.get_overrideExistingTables = (bool(*)())AS_Preferences.get_overrideExistingTablesOffset;

AS_Preferences.set_overrideExistingTablesOffset = getRealOffset(0x6AF8CC);
AS_Preferences.set_overrideExistingTables = (void(*)(bool))AS_Preferences.set_overrideExistingTablesOffset;

AS_Preferences.get_askUserForEmailOffset = getRealOffset(0x6AE354);
AS_Preferences.get_askUserForEmail = (bool(*)())AS_Preferences.get_askUserForEmailOffset;

AS_Preferences.set_askUserForEmailOffset = getRealOffset(0x6AF92C);
AS_Preferences.set_askUserForEmail = (void(*)(bool))AS_Preferences.set_askUserForEmailOffset;

AS_Preferences.get_requireEmailActivationOffset = getRealOffset(0x6AE3D8);
AS_Preferences.get_requireEmailActivation = (bool(*)())AS_Preferences.get_requireEmailActivationOffset;

AS_Preferences.set_requireEmailActivationOffset = getRealOffset(0x6AF9A0);
AS_Preferences.set_requireEmailActivation = (void(*)(bool))AS_Preferences.set_requireEmailActivationOffset;

AS_Preferences.get_enablePasswordRecoveryOffset = getRealOffset(0x6A4AE4);
AS_Preferences.get_enablePasswordRecovery = (bool(*)())AS_Preferences.get_enablePasswordRecoveryOffset;

AS_Preferences.set_enablePasswordRecoveryOffset = getRealOffset(0x6AF99C);
AS_Preferences.set_enablePasswordRecovery = (void(*)(bool))AS_Preferences.set_enablePasswordRecoveryOffset;

AS_Preferences.EditEnablePasswordRecoveryOffset = getRealOffset(0x6AFA10);
AS_Preferences.EditEnablePasswordRecovery = (void(*)(bool))AS_Preferences.EditEnablePasswordRecoveryOffset;

AS_Preferences.SaveOffset = getRealOffset(0x6AFEC0);
AS_Preferences.Save = (void(*)())AS_Preferences.SaveOffset;

AS_Preferences.LogOffset = getRealOffset(0x6AFE10);
AS_Preferences.Log = (void(*)(int, monoString*))AS_Preferences.LogOffset;

AS_MySQLField.ctor1Offset = getRealOffset(0x6AE4D0);
AS_MySQLField.ctor1 = (void(*)(void*, monoString*, int, bool, bool, monoString*))AS_MySQLField.ctor1Offset;

AS_MySQLField.ctor2Offset = getRealOffset(0x6ADC60);
AS_MySQLField.ctor2 = (void(*)(void*, monoString*, monoString*, int, bool, bool, monoString*))AS_MySQLField.ctor2Offset;

AS_MySQLField.ctor3Offset = getRealOffset(0x6AE574);
AS_MySQLField.ctor3 = (void(*)(void*, void *))AS_MySQLField.ctor3Offset;

AS_MySQLFieldHelper.FormatAsMySQLString1Offset = getRealOffset(0x6AEA0C);
AS_MySQLFieldHelper.FormatAsMySQLString1 = (monoString *(*)(void *))AS_MySQLFieldHelper.FormatAsMySQLString1Offset;

AS_MySQLFieldHelper.GetMySQLTypeOffset = getRealOffset(0x6AEE30);
AS_MySQLFieldHelper.GetMySQLType = (monoString *(*)(int))AS_MySQLFieldHelper.GetMySQLTypeOffset;

AS_MySQLFieldHelper.GetEnumTypeOffset = getRealOffset(0x6ADA3C);
AS_MySQLFieldHelper.GetEnumType = (int (*)(monoString*))AS_MySQLFieldHelper.GetEnumTypeOffset;

AS_MySQLFieldHelper.LogOffset = getRealOffset(0x6AE95C);
AS_MySQLFieldHelper.Log = (void(*)(int, monoString*))AS_MySQLFieldHelper.LogOffset;

AS_CanvasUI.get_LoadoutsOffset = getRealOffset(0x698204);
AS_CanvasUI.get_Loadouts = (int(*)(void*))AS_CanvasUI.get_LoadoutsOffset;

AS_CanvasUI.RequestLoadoutOffset = getRealOffset(0x6982B8);
AS_CanvasUI.RequestLoadout = (void(*)(void*))AS_CanvasUI.RequestLoadoutOffset;

AS_CanvasUI.OnLoadoutSuccessOffset = getRealOffset(0x698448);
AS_CanvasUI.OnLoadoutSuccess = (void(*)(void*, monoString*))AS_CanvasUI.OnLoadoutSuccessOffset;

AS_CanvasUI.RefreshLoadoutOffset = getRealOffset(0x698550);
AS_CanvasUI.RefreshLoadout = (void(*)(void*, bool))AS_CanvasUI.RefreshLoadoutOffset;

AS_CanvasUI.IsErrorOffset = getRealOffset(0x699538);
AS_CanvasUI.IsError = (bool(*)(void*, void *))AS_CanvasUI.IsErrorOffset;

AS_CanvasUI.OnCustomizationDataCallbackOffset = getRealOffset(0x699728);
AS_CanvasUI.OnCustomizationDataCallback = (void(*)(void*, bool, void *))AS_CanvasUI.OnCustomizationDataCallbackOffset;

AS_CanvasUI.OnSuccessfulLoginOffset = getRealOffset(0x699974);
AS_CanvasUI.OnSuccessfulLogin = (bool(*)(void*, int, bool))AS_CanvasUI.OnSuccessfulLoginOffset;

AS_CanvasUI.RefreshGoldFromBackendOffset = getRealOffset(0x69AA80);
AS_CanvasUI.RefreshGoldFromBackend = (void(*)(void*))AS_CanvasUI.RefreshGoldFromBackendOffset;

AS_CanvasUI.UploadUnlockedCharacterCamosOffset = getRealOffset(0x69ABBC);
AS_CanvasUI.UploadUnlockedCharacterCamos = (void(*)(void*))AS_CanvasUI.UploadUnlockedCharacterCamosOffset;

AS_CanvasUI.UploadUnlockedCamosOffset = getRealOffset(0x69B058);
AS_CanvasUI.UploadUnlockedCamos = (void(*)(void*, void *, int))AS_CanvasUI.UploadUnlockedCamosOffset;

AS_CanvasUI.UploadUnlockedSightsOffset = getRealOffset(0x69BA78);
AS_CanvasUI.UploadUnlockedSights = (void(*)(void*, void *, int))AS_CanvasUI.UploadUnlockedSightsOffset;

AS_CanvasUI.UploadUnlockedBarrelsOffset = getRealOffset(0x69BF14);
AS_CanvasUI.UploadUnlockedBarrels = (void(*)(void*, void *, int))AS_CanvasUI.UploadUnlockedBarrelsOffset;

AS_CanvasUI.UploadUnlockedAccessoriesOffset = getRealOffset(0x69C3B0);
AS_CanvasUI.UploadUnlockedAccessories = (void(*)(void*, void *, int))AS_CanvasUI.UploadUnlockedAccessoriesOffset;

AS_CanvasUI.UploadCamosOnLoadoutsOffset = getRealOffset(0x69C84C);
AS_CanvasUI.UploadCamosOnLoadouts = (void(*)(void*, void *, int, bool, int))AS_CanvasUI.UploadCamosOnLoadoutsOffset;

AS_CanvasUI.UploadSightsOnLoadoutsOffset = getRealOffset(0x69CA10);
AS_CanvasUI.UploadSightsOnLoadouts = (void(*)(void*, void *, int, bool, int))AS_CanvasUI.UploadSightsOnLoadoutsOffset;

AS_CanvasUI.UploadBarrelsOnLoadoutsOffset = getRealOffset(0x69CBD4);
AS_CanvasUI.UploadBarrelsOnLoadouts = (void(*)(void*, void *, int, bool, int))AS_CanvasUI.UploadBarrelsOnLoadoutsOffset;

AS_CanvasUI.UploadAccessoriesOnLoadoutsOffset = getRealOffset(0x69CD98);
AS_CanvasUI.UploadAccessoriesOnLoadouts = (void(*)(void*, void *, int, bool, int))AS_CanvasUI.UploadAccessoriesOnLoadoutsOffset;

AS_CanvasUI.SendErrorReportOffset = getRealOffset(0x69CF5C);
AS_CanvasUI.SendErrorReport = (void(*)(void*, monoString*, monoString*))AS_CanvasUI.SendErrorReportOffset;

AS_CanvasUI.SendErrorReportCROffset = getRealOffset(0x69CF80);
AS_CanvasUI.SendErrorReportCR = (void *(*)(void*, monoString*, monoString*))AS_CanvasUI.SendErrorReportCROffset;

AS_CanvasUI.GetStoredWeaponsArrayOffset = getRealOffset(0x69D038);
AS_CanvasUI.UploadBlankInfoOffset = getRealOffset(0x69A068);
AS_CanvasUI.UploadBlankInfo = (void(*)(void*, bool))AS_CanvasUI.UploadBlankInfoOffset;

AS_CanvasUI.ThrowablesOffset = getRealOffset(0x69D7E8);
AS_CanvasUI.UploadCurrentInfoOffset = getRealOffset(0x69DB70);
AS_CanvasUI.UploadCurrentInfo = (void(*)(void*))AS_CanvasUI.UploadCurrentInfoOffset;

AS_CanvasUI.SetCorrectWeaponInfoOffset = getRealOffset(0x69E508);
AS_CanvasUI.SetCorrectWeaponInfo = (void *(*)(void*, int))AS_CanvasUI.SetCorrectWeaponInfoOffset;

AS_CanvasUI.DownloadUnlockedCharacterCamosOffset = getRealOffset(0x69EADC);
AS_CanvasUI.DownloadUnlockedCharacterCamos = (void(*)(void*, bool))AS_CanvasUI.DownloadUnlockedCharacterCamosOffset;

AS_CanvasUI.GetUnlockedCamosOffset = getRealOffset(0x69B640);
AS_CanvasUI.DownloadUnlockedCamosOffset = getRealOffset(0x69F370);
AS_CanvasUI.DownloadUnlockedCamos = (void(*)(void*, int, int, bool))AS_CanvasUI.DownloadUnlockedCamosOffset;

AS_CanvasUI.DownloadUnlockedBulletTracerColorsOffset = getRealOffset(0x69F6B8);
AS_CanvasUI.DownloadUnlockedBulletTracerColors = (void(*)(void*, bool))AS_CanvasUI.DownloadUnlockedBulletTracerColorsOffset;

AS_CanvasUI.DownloadUnlockedSightsOffset = getRealOffset(0x69FF4C);
AS_CanvasUI.DownloadUnlockedSights = (void(*)(void*, int, int))AS_CanvasUI.DownloadUnlockedSightsOffset;

AS_CanvasUI.DownloadUnlockedBarrelsOffset = getRealOffset(0x6A0640);
AS_CanvasUI.DownloadUnlockedBarrels = (void(*)(void*, int, int))AS_CanvasUI.DownloadUnlockedBarrelsOffset;

AS_CanvasUI.DownloadUnlockedAccessoriesOffset = getRealOffset(0x6A0D34);
AS_CanvasUI.DownloadUnlockedAccessories = (void(*)(void*, int, int))AS_CanvasUI.DownloadUnlockedAccessoriesOffset;

AS_CanvasUI.DownloadCamosOnLoadoutsOffset = getRealOffset(0x6A1428);
AS_CanvasUI.DownloadCamosOnLoadouts = (void(*)(void*, int, int))AS_CanvasUI.DownloadCamosOnLoadoutsOffset;

AS_CanvasUI.DownloadSightsOnLoadoutsOffset = getRealOffset(0x6A17BC);
AS_CanvasUI.DownloadSightsOnLoadouts = (void(*)(void*, int, int))AS_CanvasUI.DownloadSightsOnLoadoutsOffset;

AS_CanvasUI.DownloadBarrelsOnLoadoutsOffset = getRealOffset(0x6A1A18);
AS_CanvasUI.DownloadBarrelsOnLoadouts = (void(*)(void*, int, int))AS_CanvasUI.DownloadBarrelsOnLoadoutsOffset;

AS_CanvasUI.DownloadAccessoriesOnLoadoutsOffset = getRealOffset(0x6A1C74);
AS_CanvasUI.DownloadAccessoriesOnLoadouts = (void(*)(void*, int, int))AS_CanvasUI.DownloadAccessoriesOnLoadoutsOffset;

AS_CanvasUI.DownloadInfoFromServerOffset = getRealOffset(0x6988E8);
AS_CanvasUI.DownloadInfoFromServer = (void(*)(void*, bool, bool))AS_CanvasUI.DownloadInfoFromServerOffset;

AS_CanvasUI.ResetEquippedOnLoadoutsOffset = getRealOffset(0x6A1ED0);
AS_CanvasUI.ResetEquippedOnLoadouts = (void(*)(void*))AS_CanvasUI.ResetEquippedOnLoadoutsOffset;

AS_CanvasUI.FinishedUpdatingOffset = getRealOffset(0x6A203C);
AS_CanvasUI.FinishedUpdating = (void(*)(void*, monoString*))AS_CanvasUI.FinishedUpdatingOffset;

AS_CanvasUI.LoadSceneOffset = getRealOffset(0x6A2954);
AS_CanvasUI.LoadScene = (void *(*)(void*, monoString*))AS_CanvasUI.LoadSceneOffset;

AS_CanvasUI.UpdateAccountInfoOffset = getRealOffset(0x6A29F4);
AS_CanvasUI.UpdateAccountInfo = (void(*)(void*))AS_CanvasUI.UpdateAccountInfoOffset;

AS_CanvasUI.UpdateGoldValueOffset = getRealOffset(0x6A2AC0);
AS_CanvasUI.UpdateGoldValue = (void(*)(void*, monoString*))AS_CanvasUI.UpdateGoldValueOffset;

AS_CanvasUI.UpdateCreditValueOffset = getRealOffset(0x6A2E7C);
AS_CanvasUI.UpdateCreditValue = (void(*)(void*, monoString*))AS_CanvasUI.UpdateCreditValueOffset;

AS_CanvasUI.AccountInfoDownloadedOffset = getRealOffset(0x6A2FD0);
AS_CanvasUI.AccountInfoDownloaded = (void(*)(void*, monoString*))AS_CanvasUI.AccountInfoDownloadedOffset;

AS_CanvasUI.AwakeOffset = getRealOffset(0x6A4718);
AS_CanvasUI.Awake = (void(*)(void*))AS_CanvasUI.AwakeOffset;

AS_CanvasUI.StartOffset = getRealOffset(0x6A47A0);
AS_CanvasUI.Start = (void(*)(void*))AS_CanvasUI.StartOffset;

AS_CanvasUI.SetPositiveGUIColorOffset = getRealOffset(0x6A4D7C);
AS_CanvasUI.SetPositiveGUIColor = (void(*)(void*))AS_CanvasUI.SetPositiveGUIColorOffset;

AS_CanvasUI.ToggleErrorExclamationsOffset = getRealOffset(0x6A4E88);
AS_CanvasUI.ToggleErrorExclamations = (void(*)(void*, bool))AS_CanvasUI.ToggleErrorExclamationsOffset;

AS_CanvasUI.set_guiMessageOffset = getRealOffset(0x6A457C);
AS_CanvasUI.set_guiMessage = (void(*)(void*, monoString*))AS_CanvasUI.set_guiMessageOffset;

AS_CanvasUI.get_loginStateOffset = getRealOffset(0x6A4F10);
AS_CanvasUI.get_loginState = (int (*)(void*))AS_CanvasUI.get_loginStateOffset;

AS_CanvasUI.set_loginStateOffset = getRealOffset(0x699F50);
AS_CanvasUI.set_loginState = (void(*)(void*, int))AS_CanvasUI.set_loginStateOffset;

AS_CanvasUI.RequestLoginOffset = getRealOffset(0x6A50C0);
AS_CanvasUI.RequestLogin = (void(*)(void*))AS_CanvasUI.RequestLoginOffset;

AS_CanvasUI.OnLoginRequestedOffset = getRealOffset(0x6A4AEC);
AS_CanvasUI.OnLoginRequested = (void(*)(void*, monoString*, monoString*, monoString*, void *))AS_CanvasUI.OnLoginRequestedOffset;

AS_CanvasUI.OnLogoutRequestedOffset = getRealOffset(0x6A52F8);
AS_CanvasUI.OnLogoutRequested = (void(*)(void*))AS_CanvasUI.OnLogoutRequestedOffset;

AS_CanvasUI.OnRegistrationRequestedOffset = getRealOffset(0x6A4CE0);
AS_CanvasUI.OnRegistrationRequested = (void(*)(void*))AS_CanvasUI.OnRegistrationRequestedOffset;

AS_CanvasUI.OnRegistrationCancelledOffset = getRealOffset(0x6A5424);
AS_CanvasUI.OnRegistrationCancelled = (void(*)(void*))AS_CanvasUI.OnRegistrationCancelledOffset;

AS_CanvasUI.RequestRegistrationOffset = getRealOffset(0x6A542C);
AS_CanvasUI.RequestRegistration = (void(*)(void*, monoString*, monoString*, monoString*))AS_CanvasUI.RequestRegistrationOffset;

AS_CanvasUI.OnRegistrationSubmittedOffset = getRealOffset(0x6A59FC);
AS_CanvasUI.OnRegistrationSubmitted = (void(*)(void*))AS_CanvasUI.OnRegistrationSubmittedOffset;

AS_CanvasUI.OnRecoveryRequestedOffset = getRealOffset(0x6A5D48);
AS_CanvasUI.OnRecoveryRequested = (void(*)(void*))AS_CanvasUI.OnRecoveryRequestedOffset;

AS_CanvasUI.OnRecoveryCancelledOffset = getRealOffset(0x6A5D50);
AS_CanvasUI.OnRecoveryCancelled = (void(*)(void*))AS_CanvasUI.OnRecoveryCancelledOffset;

AS_CanvasUI.OnRecoverySubmittedOffset = getRealOffset(0x6A5D58);
AS_CanvasUI.OnRecoverySubmitted = (void(*)(void*))AS_CanvasUI.OnRecoverySubmittedOffset;

AS_CanvasUI.LoginAttemptedOffset = getRealOffset(0x6A600C);
AS_CanvasUI.LoginAttempted = (void(*)(void*, monoString*))AS_CanvasUI.LoginAttemptedOffset;

AS_CanvasUI.SetWebGLPlatformOffset = getRealOffset(0x6A6440);
AS_CanvasUI.SetWebGLPlatform = (void(*)(void*, int))AS_CanvasUI.SetWebGLPlatformOffset;

AS_CanvasUI.onSuccefullSetWebGLPlatformOffset = getRealOffset(0x6A6830);
AS_CanvasUI.onSuccefullSetWebGLPlatform = (void(*)(void*, monoString*))AS_CanvasUI.onSuccefullSetWebGLPlatformOffset;

AS_CanvasUI.onErrorSetWebGLPlatformOffset = getRealOffset(0x6A6A7C);
AS_CanvasUI.onErrorSetWebGLPlatform = (void(*)(void*, monoString*))AS_CanvasUI.onErrorSetWebGLPlatformOffset;

AS_CanvasUI.RegistrationFormDownloadedOffset = getRealOffset(0x6A6CC8);
AS_CanvasUI.RegistrationFormDownloaded = (void(*)(void*, monoString*))AS_CanvasUI.RegistrationFormDownloadedOffset;

AS_CanvasUI.RegistrationAttemptedOffset = getRealOffset(0x6A6D10);
AS_CanvasUI.RegistrationAttempted = (void(*)(void*, monoString*))AS_CanvasUI.RegistrationAttemptedOffset;

AS_CanvasUI.PasswordRecoveryAttemptedOffset = getRealOffset(0x6A6E4C);
AS_CanvasUI.PasswordRecoveryAttempted = (void(*)(void*, monoString*))AS_CanvasUI.PasswordRecoveryAttemptedOffset;

AS_CanvasUI.ToggleCanvasGroupOffset = getRealOffset(0x6A4F18);
AS_CanvasUI.ToggleCanvasGroup = (void(*)(void*, void *))AS_CanvasUI.ToggleCanvasGroupOffset;

AS_CanvasUI.RefreshScreenAndShowPositiveTextOffset = getRealOffset(0x6A6E98);
AS_CanvasUI.RefreshScreenAndShowPositiveText = (void(*)(void*, monoString*))AS_CanvasUI.RefreshScreenAndShowPositiveTextOffset;

AS_CanvasUI.RefreshScreenOffset = getRealOffset(0x6A4C70);
AS_CanvasUI.RefreshScreen = (void(*)(void*))AS_CanvasUI.RefreshScreenOffset;

AS_CanvasUI.FindGUIMessageAtEndOfFrameOffset = getRealOffset(0x6A6EC0);
AS_CanvasUI.FindGUIMessageAtEndOfFrame = (void *(*)(void*, monoString*, bool))AS_CanvasUI.FindGUIMessageAtEndOfFrameOffset;

AS_CanvasUI.FindGUIMessageOffset = getRealOffset(0x6A6F8C);
AS_CanvasUI.FindGUIMessage = (void *(*)(void*))AS_CanvasUI.FindGUIMessageOffset;

AS_CanvasUI.ClearGUITextOffset = getRealOffset(0x6A70DC);
AS_CanvasUI.ClearGUIText = (void *(*)(void*, void *))AS_CanvasUI.ClearGUITextOffset;

AS_CanvasUI.FinishLoginOffset = getRealOffset(0x699F30);
AS_CanvasUI.FinishLogin = (void(*)(void*))AS_CanvasUI.FinishLoginOffset;

AS_CanvasUI.OnFormatReferralIDOffset = getRealOffset(0x6A7194);
AS_CanvasUI.OnFormatReferralID = (void(*)(void*))AS_CanvasUI.OnFormatReferralIDOffset;

AS_CanvasUI.GetOfferwallGoldOffset = getRealOffset(0x6A728C);
AS_CanvasUI.GetOfferwallGold = (int(*)(void*))AS_CanvasUI.GetOfferwallGoldOffset;

AS_CanvasUI.GetOfferwallCasesOffset = getRealOffset(0x6A7354);
AS_CanvasUI.GetOfferwallCases = (int(*)(void*))AS_CanvasUI.GetOfferwallCasesOffset;

AS_CanvasUI.TriggerMissingRewardsPopupsOffset = getRealOffset(0x6A7394);
AS_CanvasUI.TriggerMissingRewardsPopups = (void(*)(void*))AS_CanvasUI.TriggerMissingRewardsPopupsOffset;

AS_CanvasUI.CheckIfMissingCaseOffset = getRealOffset(0x6A7650);
AS_CanvasUI.CheckIfMissingCase = (bool(*)(void*, monoString*))AS_CanvasUI.CheckIfMissingCaseOffset;

AS_CanvasUI.CanOpenCaseHereOffset = getRealOffset(0x6A76E0);
AS_CanvasUI.CanOpenCaseHere = (bool(*)(void*))AS_CanvasUI.CanOpenCaseHereOffset;

AS_CanvasUI.GetActualUserEmailAdressOffset = getRealOffset(0x6A7804);
AS_CanvasUI.GetActualUserEmailAdress = (monoString *(*)(void*))AS_CanvasUI.GetActualUserEmailAdressOffset;

AS_InputField.InitializeOffset = getRealOffset(0x6AA0F8);
AS_InputField.Initialize = (void(*)(void*, void *))AS_InputField.InitializeOffset;

AS_InputField.OnValueChangedOffset = getRealOffset(0x6AA430);
AS_InputField.OnValueChanged = (void(*)(void*, monoString*))AS_InputField.OnValueChangedOffset;

CustomTypes.RegisterOffset = getRealOffset(0x59D9B0);
CustomTypes.Register = (void(*)())CustomTypes.RegisterOffset;

CustomTypes.DeserializeVector3Offset = getRealOffset(0x59DEC8);
CustomTypes.DeserializeVector2Offset = getRealOffset(0x59E2E4);
CustomTypes.DeserializeQuaternionOffset = getRealOffset(0x59E71C);
CustomTypes.DeserializePhotonPlayerOffset = getRealOffset(0x59EB74);
Extensions.GetCachedParemetersOffset = getRealOffset(0x6902C8);
Extensions.GetPhotonViewsInChildrenOffset = getRealOffset(0x690410);
Extensions.GetPhotonViewOffset = getRealOffset(0x69047C);
Extensions.GetPhotonView = (void *(*)(void *))Extensions.GetPhotonViewOffset;

Extensions.AlmostEqualsOffset = getRealOffset(0x6904E4);
Extensions.AlmostEquals = (bool(*)(Vector3, Vector3, float))Extensions.AlmostEqualsOffset;

Extensions.AlmostEquals1Offset = getRealOffset(0x6905E4);
Extensions.AlmostEquals1 = (bool(*)(Vector2, Vector2, float))Extensions.AlmostEquals1Offset;

Extensions.AlmostEquals2Offset = getRealOffset(0x6906C0);
Extensions.AlmostEquals2 = (bool(*)(int, int, float))Extensions.AlmostEquals2Offset;

Extensions.AlmostEquals3Offset = getRealOffset(0x6907B4);
Extensions.AlmostEquals3 = (bool(*)(float, float, float))Extensions.AlmostEquals3Offset;

Extensions.MergeOffset = getRealOffset(0x690858);
Extensions.Merge = (void(*)(void *, void *))Extensions.MergeOffset;

Extensions.MergeStringKeysOffset = getRealOffset(0x690CEC);
Extensions.MergeStringKeys = (void(*)(void *, void *))Extensions.MergeStringKeysOffset;

Extensions.ToStringFullOffset = getRealOffset(0x691198);
Extensions.ToStringFull = (monoString *(*)(void *))Extensions.ToStringFullOffset;

Extensions.StripToStringKeysOffset = getRealOffset(0x691380);
Extensions.StripToStringKeys = (void *(*)(void *))Extensions.StripToStringKeysOffset;

Extensions.StripKeysWithNullValuesOffset = getRealOffset(0x6917A0);
Extensions.StripKeysWithNullValues = (void(*)(void *))Extensions.StripKeysWithNullValuesOffset;

GameObjectExtensions.GetActiveOffset = getRealOffset(0x5FA964);
GameObjectExtensions.GetActive = (bool(*)(void *))GameObjectExtensions.GetActiveOffset;

FriendInfo.get_NameOffset = getRealOffset(0x727FD4);
FriendInfo.get_Name = (monoString *(*)(void*))FriendInfo.get_NameOffset;

FriendInfo.get_UserIdOffset = getRealOffset(0x727FDC);
FriendInfo.get_UserId = (monoString *(*)(void*))FriendInfo.get_UserIdOffset;

FriendInfo.set_UserIdOffset = getRealOffset(0x727FE4);
FriendInfo.set_UserId = (void(*)(void*, monoString*))FriendInfo.set_UserIdOffset;

FriendInfo.get_IsOnlineOffset = getRealOffset(0x727FEC);
FriendInfo.get_IsOnline = (bool(*)(void*))FriendInfo.get_IsOnlineOffset;

FriendInfo.set_IsOnlineOffset = getRealOffset(0x727FF4);
FriendInfo.set_IsOnline = (void(*)(void*, bool))FriendInfo.set_IsOnlineOffset;

FriendInfo.get_RoomOffset = getRealOffset(0x727FFC);
FriendInfo.get_Room = (monoString *(*)(void*))FriendInfo.get_RoomOffset;

FriendInfo.set_RoomOffset = getRealOffset(0x728004);
FriendInfo.set_Room = (void(*)(void*, monoString*))FriendInfo.set_RoomOffset;

FriendInfo.get_IsInRoomOffset = getRealOffset(0x72800C);
FriendInfo.get_IsInRoom = (bool(*)(void*))FriendInfo.get_IsInRoomOffset;

FriendInfo.ToStringOffset = getRealOffset(0x728038);
FriendInfo.ToString = (monoString *(*)(void*))FriendInfo.ToStringOffset;

LoadBalancingPeer.get_IsProtocolSecureOffset = getRealOffset(0x6DE464);
LoadBalancingPeer.get_IsProtocolSecure = (bool(*)(void*))LoadBalancingPeer.get_IsProtocolSecureOffset;

LoadBalancingPeer.ctor1Offset = getRealOffset(0x6DE53C);
LoadBalancingPeer.ctor1 = (void(*)(void*, void *, int))LoadBalancingPeer.ctor1Offset;

LoadBalancingPeer.OpGetRegionsOffset = getRealOffset(0x6DE5C4);
LoadBalancingPeer.OpGetRegions = (bool(*)(void*, monoString*))LoadBalancingPeer.OpGetRegionsOffset;

LoadBalancingPeer.OpJoinLobbyOffset = getRealOffset(0x6DE6C8);
LoadBalancingPeer.OpJoinLobby = (bool(*)(void*, void *))LoadBalancingPeer.OpJoinLobbyOffset;

LoadBalancingPeer.OpLeaveLobbyOffset = getRealOffset(0x6DE8E4);
LoadBalancingPeer.OpLeaveLobby = (bool(*)(void*))LoadBalancingPeer.OpLeaveLobbyOffset;

LoadBalancingPeer.OpCreateRoomOffset = getRealOffset(0x6DEF54);
LoadBalancingPeer.OpCreateRoom = (bool(*)(void*, void *))LoadBalancingPeer.OpCreateRoomOffset;

LoadBalancingPeer.OpJoinRoomOffset = getRealOffset(0x6DF2D4);
LoadBalancingPeer.OpJoinRoom = (bool(*)(void*, void *))LoadBalancingPeer.OpJoinRoomOffset;

LoadBalancingPeer.OpJoinRandomRoomOffset = getRealOffset(0x6DF6D8);
LoadBalancingPeer.OpJoinRandomRoom = (bool(*)(void*, void *))LoadBalancingPeer.OpJoinRandomRoomOffset;

LoadBalancingPeer.OpLeaveRoomOffset = getRealOffset(0x6DFB1C);
LoadBalancingPeer.OpLeaveRoom = (bool(*)(void*, bool))LoadBalancingPeer.OpLeaveRoomOffset;

LoadBalancingPeer.OpGetGameListOffset = getRealOffset(0x6DFC50);
LoadBalancingPeer.OpGetGameList = (bool(*)(void*, void *, monoString*))LoadBalancingPeer.OpGetGameListOffset;

LoadBalancingPeer.OpSetCustomPropertiesOfActorOffset = getRealOffset(0x6E0154);
LoadBalancingPeer.OpSetCustomPropertiesOfActor = (bool(*)(void*, int, void *))LoadBalancingPeer.OpSetCustomPropertiesOfActorOffset;

LoadBalancingPeer.OpSetPropertiesOfActorOffset = getRealOffset(0x6E01FC);
LoadBalancingPeer.OpSetPropertiesOfActor = (bool(*)(void*, int, void *, void *, bool))LoadBalancingPeer.OpSetPropertiesOfActorOffset;

LoadBalancingPeer.OpSetCustomPropertiesOfRoom1Offset = getRealOffset(0x6E09A8);
LoadBalancingPeer.OpSetCustomPropertiesOfRoom1 = (bool(*)(void*, void *, void *, bool))LoadBalancingPeer.OpSetCustomPropertiesOfRoom1Offset;

LoadBalancingPeer.OpSetPropertiesOfRoomOffset = getRealOffset(0x6E0670);
LoadBalancingPeer.OpSetPropertiesOfRoom = (bool(*)(void*, void *, void *, bool))LoadBalancingPeer.OpSetPropertiesOfRoomOffset;

LoadBalancingPeer.OpAuthenticateOffset = getRealOffset(0x6E0A5C);
LoadBalancingPeer.OpAuthenticate = (bool(*)(void*, monoString*, monoString*, void *, monoString*, bool))LoadBalancingPeer.OpAuthenticateOffset;

LoadBalancingPeer.OpAuthenticateOnceOffset = getRealOffset(0x6E1014);
LoadBalancingPeer.OpAuthenticateOnce = (bool(*)(void*, monoString*, monoString*, void *, monoString*, int, int))LoadBalancingPeer.OpAuthenticateOnceOffset;

LoadBalancingPeer.OpSettingsOffset = getRealOffset(0x6E1A78);
LoadBalancingPeer.OpSettings = (bool(*)(void*, bool))LoadBalancingPeer.OpSettingsOffset;

RoomOptions.get_IsVisibleOffset = getRealOffset(0x612164);
RoomOptions.get_IsVisible = (bool(*)(void*))RoomOptions.get_IsVisibleOffset;

RoomOptions.set_IsVisibleOffset = getRealOffset(0x61216C);
RoomOptions.set_IsVisible = (void(*)(void*, bool))RoomOptions.set_IsVisibleOffset;

RoomOptions.get_IsOpenOffset = getRealOffset(0x612174);
RoomOptions.get_IsOpen = (bool(*)(void*))RoomOptions.get_IsOpenOffset;

RoomOptions.set_IsOpenOffset = getRealOffset(0x61217C);
RoomOptions.set_IsOpen = (void(*)(void*, bool))RoomOptions.set_IsOpenOffset;

RoomOptions.get_CleanupCacheOnLeaveOffset = getRealOffset(0x612184);
RoomOptions.get_CleanupCacheOnLeave = (bool(*)(void*))RoomOptions.get_CleanupCacheOnLeaveOffset;

RoomOptions.set_CleanupCacheOnLeaveOffset = getRealOffset(0x61218C);
RoomOptions.set_CleanupCacheOnLeave = (void(*)(void*, bool))RoomOptions.set_CleanupCacheOnLeaveOffset;

RoomOptions.get_SuppressRoomEventsOffset = getRealOffset(0x612194);
RoomOptions.get_SuppressRoomEvents = (bool(*)(void*))RoomOptions.get_SuppressRoomEventsOffset;

RoomOptions.get_PublishUserIdOffset = getRealOffset(0x61219C);
RoomOptions.get_PublishUserId = (bool(*)(void*))RoomOptions.get_PublishUserIdOffset;

RoomOptions.set_PublishUserIdOffset = getRealOffset(0x6121A4);
RoomOptions.set_PublishUserId = (void(*)(void*, bool))RoomOptions.set_PublishUserIdOffset;

RoomOptions.get_DeleteNullPropertiesOffset = getRealOffset(0x6121AC);
RoomOptions.get_DeleteNullProperties = (bool(*)(void*))RoomOptions.get_DeleteNullPropertiesOffset;

RoomOptions.set_DeleteNullPropertiesOffset = getRealOffset(0x6121B4);
RoomOptions.set_DeleteNullProperties = (void(*)(void*, bool))RoomOptions.set_DeleteNullPropertiesOffset;

RoomOptions.get_isVisibleOffset = getRealOffset(0x6121BC);
RoomOptions.get_isVisible = (bool(*)(void*))RoomOptions.get_isVisibleOffset;

RoomOptions.set_isVisibleOffset = getRealOffset(0x6121C4);
RoomOptions.set_isVisible = (void(*)(void*, bool))RoomOptions.set_isVisibleOffset;

RoomOptions.get_isOpenOffset = getRealOffset(0x6121CC);
RoomOptions.get_isOpen = (bool(*)(void*))RoomOptions.get_isOpenOffset;

RoomOptions.set_isOpenOffset = getRealOffset(0x6121D4);
RoomOptions.set_isOpen = (void(*)(void*, bool))RoomOptions.set_isOpenOffset;

RoomOptions.get_maxPlayersOffset = getRealOffset(0x6121DC);
RoomOptions.get_cleanupCacheOnLeaveOffset = getRealOffset(0x6121EC);
RoomOptions.get_cleanupCacheOnLeave = (bool(*)(void*))RoomOptions.get_cleanupCacheOnLeaveOffset;

RoomOptions.set_cleanupCacheOnLeaveOffset = getRealOffset(0x6121F4);
RoomOptions.set_cleanupCacheOnLeave = (void(*)(void*, bool))RoomOptions.set_cleanupCacheOnLeaveOffset;

RoomOptions.get_customRoomPropertiesOffset = getRealOffset(0x6121FC);
RoomOptions.get_customRoomProperties = (void *(*)(void*))RoomOptions.get_customRoomPropertiesOffset;

RoomOptions.set_customRoomPropertiesOffset = getRealOffset(0x612204);
RoomOptions.set_customRoomProperties = (void(*)(void*, void *))RoomOptions.set_customRoomPropertiesOffset;

RoomOptions.get_customRoomPropertiesForLobbyOffset = getRealOffset(0x61220C);
RoomOptions.get_pluginsOffset = getRealOffset(0x61221C);
RoomOptions.get_suppressRoomEventsOffset = getRealOffset(0x61222C);
RoomOptions.get_suppressRoomEvents = (bool(*)(void*))RoomOptions.get_suppressRoomEventsOffset;

RoomOptions.get_publishUserIdOffset = getRealOffset(0x612234);
RoomOptions.get_publishUserId = (bool(*)(void*))RoomOptions.get_publishUserIdOffset;

RoomOptions.set_publishUserIdOffset = getRealOffset(0x61223C);
RoomOptions.set_publishUserId = (void(*)(void*, bool))RoomOptions.set_publishUserIdOffset;

RaiseEventOptions.ResetOffset = getRealOffset(0x6334E4);
RaiseEventOptions.Reset = (void(*)(void*))RaiseEventOptions.ResetOffset;

TypedLobby.get_IsDefaultOffset = getRealOffset(0x5DF408);
TypedLobby.get_IsDefault = (bool(*)(void*))TypedLobby.get_IsDefaultOffset;

TypedLobby.ctor1Offset = getRealOffset(0x5DF498);
TypedLobby.ctor1 = (void(*)(void*, monoString*, int))TypedLobby.ctor1Offset;

TypedLobby.ToStringOffset = getRealOffset(0x5DF4C0);
TypedLobby.ToString = (monoString *(*)(void*))TypedLobby.ToStringOffset;

TypedLobbyInfo.ToStringOffset = getRealOffset(0x5DF5B8);
TypedLobbyInfo.ToString = (monoString *(*)(void*))TypedLobbyInfo.ToStringOffset;

AuthenticationValues.get_AuthTypeOffset = getRealOffset(0x6BDA50);
AuthenticationValues.get_AuthType = (int (*)(void*))AuthenticationValues.get_AuthTypeOffset;

AuthenticationValues.set_AuthTypeOffset = getRealOffset(0x6BDA58);
AuthenticationValues.set_AuthType = (void(*)(void*, int))AuthenticationValues.set_AuthTypeOffset;

AuthenticationValues.get_AuthGetParametersOffset = getRealOffset(0x6BDA60);
AuthenticationValues.get_AuthGetParameters = (monoString *(*)(void*))AuthenticationValues.get_AuthGetParametersOffset;

AuthenticationValues.set_AuthGetParametersOffset = getRealOffset(0x6BDA68);
AuthenticationValues.set_AuthGetParameters = (void(*)(void*, monoString*))AuthenticationValues.set_AuthGetParametersOffset;

AuthenticationValues.get_AuthPostDataOffset = getRealOffset(0x6BDA70);
AuthenticationValues.get_TokenOffset = getRealOffset(0x6BDA80);
AuthenticationValues.get_Token = (monoString *(*)(void*))AuthenticationValues.get_TokenOffset;

AuthenticationValues.set_TokenOffset = getRealOffset(0x6BDA88);
AuthenticationValues.set_Token = (void(*)(void*, monoString*))AuthenticationValues.set_TokenOffset;

AuthenticationValues.get_UserIdOffset = getRealOffset(0x6BDA90);
AuthenticationValues.get_UserId = (monoString *(*)(void*))AuthenticationValues.get_UserIdOffset;

AuthenticationValues.set_UserIdOffset = getRealOffset(0x6BDA98);
AuthenticationValues.set_UserId = (void(*)(void*, monoString*))AuthenticationValues.set_UserIdOffset;

AuthenticationValues.ctor1Offset = getRealOffset(0x6BDAB0);
AuthenticationValues.ctor1 = (void(*)(void*, monoString*))AuthenticationValues.ctor1Offset;

AuthenticationValues.SetAuthPostDataOffset = getRealOffset(0x6BDADC);
AuthenticationValues.SetAuthPostData = (void(*)(void*, monoString*))AuthenticationValues.SetAuthPostDataOffset;

AuthenticationValues.AddAuthParameterOffset = getRealOffset(0x6BDB24);
AuthenticationValues.AddAuthParameter = (void(*)(void*, monoString*, monoString*))AuthenticationValues.AddAuthParameterOffset;

AuthenticationValues.ToStringOffset = getRealOffset(0x6BDD5C);
AuthenticationValues.ToString = (monoString *(*)(void*))AuthenticationValues.ToStringOffset;

FindFriendsOptions.ToIntFlagsOffset = getRealOffset(0x71DAB4);
FindFriendsOptions.ToIntFlags = (int(*)(void*))FindFriendsOptions.ToIntFlagsOffset;

NetworkingPeer.get_AppVersionOffset = getRealOffset(0x52CE9C);
NetworkingPeer.get_AppVersion = (monoString *(*)(void*))NetworkingPeer.get_AppVersionOffset;

NetworkingPeer.get_AuthValuesOffset = getRealOffset(0x52CF90);
NetworkingPeer.get_AuthValues = (void *(*)(void*))NetworkingPeer.get_AuthValuesOffset;

NetworkingPeer.set_AuthValuesOffset = getRealOffset(0x52CF98);
NetworkingPeer.set_AuthValues = (void(*)(void*, void *))NetworkingPeer.set_AuthValuesOffset;

NetworkingPeer.get_TokenForInitOffset = getRealOffset(0x52CFA0);
NetworkingPeer.get_TokenForInit = (monoString *(*)(void*))NetworkingPeer.get_TokenForInitOffset;

NetworkingPeer.get_IsUsingNameServerOffset = getRealOffset(0x52CFC0);
NetworkingPeer.get_IsUsingNameServer = (bool(*)(void*))NetworkingPeer.get_IsUsingNameServerOffset;

NetworkingPeer.set_IsUsingNameServerOffset = getRealOffset(0x52CFC8);
NetworkingPeer.set_IsUsingNameServer = (void(*)(void*, bool))NetworkingPeer.set_IsUsingNameServerOffset;

NetworkingPeer.get_NameServerAddressOffset = getRealOffset(0x52CFD0);
NetworkingPeer.get_NameServerAddress = (monoString *(*)(void*))NetworkingPeer.get_NameServerAddressOffset;

NetworkingPeer.get_MasterServerAddressOffset = getRealOffset(0x52D1D0);
NetworkingPeer.get_MasterServerAddress = (monoString *(*)(void*))NetworkingPeer.get_MasterServerAddressOffset;

NetworkingPeer.set_MasterServerAddressOffset = getRealOffset(0x52D1D8);
NetworkingPeer.set_MasterServerAddress = (void(*)(void*, monoString*))NetworkingPeer.set_MasterServerAddressOffset;

NetworkingPeer.get_GameServerAddressOffset = getRealOffset(0x52D1E0);
NetworkingPeer.get_GameServerAddress = (monoString *(*)(void*))NetworkingPeer.get_GameServerAddressOffset;

NetworkingPeer.set_GameServerAddressOffset = getRealOffset(0x52D1E8);
NetworkingPeer.set_GameServerAddress = (void(*)(void*, monoString*))NetworkingPeer.set_GameServerAddressOffset;

NetworkingPeer.get_ServerOffset = getRealOffset(0x52D1F0);
NetworkingPeer.get_Server = (int (*)(void*))NetworkingPeer.get_ServerOffset;

NetworkingPeer.set_ServerOffset = getRealOffset(0x52D1F8);
NetworkingPeer.set_Server = (void(*)(void*, int))NetworkingPeer.set_ServerOffset;

NetworkingPeer.get_StateOffset = getRealOffset(0x52D200);
NetworkingPeer.get_State = (int (*)(void*))NetworkingPeer.get_StateOffset;

NetworkingPeer.set_StateOffset = getRealOffset(0x52D208);
NetworkingPeer.set_State = (void(*)(void*, int))NetworkingPeer.set_StateOffset;

NetworkingPeer.get_lobbyOffset = getRealOffset(0x52D210);
NetworkingPeer.get_lobby = (void *(*)(void*))NetworkingPeer.get_lobbyOffset;

NetworkingPeer.set_lobbyOffset = getRealOffset(0x52D218);
NetworkingPeer.set_lobby = (void(*)(void*, void *))NetworkingPeer.set_lobbyOffset;

NetworkingPeer.get_requestLobbyStatisticsOffset = getRealOffset(0x52D220);
NetworkingPeer.get_requestLobbyStatistics = (bool(*)(void*))NetworkingPeer.get_requestLobbyStatisticsOffset;

NetworkingPeer.get_PlayerNameOffset = getRealOffset(0x52D2B0);
NetworkingPeer.get_PlayerName = (monoString *(*)(void*))NetworkingPeer.get_PlayerNameOffset;

NetworkingPeer.set_PlayerNameOffset = getRealOffset(0x52D2B8);
NetworkingPeer.set_PlayerName = (void(*)(void*, monoString*))NetworkingPeer.set_PlayerNameOffset;

NetworkingPeer.get_CurrentRoomOffset = getRealOffset(0x52D344);
NetworkingPeer.get_CurrentRoom = (void *(*)(void*))NetworkingPeer.get_CurrentRoomOffset;

NetworkingPeer.set_CurrentRoomOffset = getRealOffset(0x52D498);
NetworkingPeer.set_CurrentRoom = (void(*)(void*, void *))NetworkingPeer.set_CurrentRoomOffset;

NetworkingPeer.get_LocalPlayerOffset = getRealOffset(0x52D4A0);
NetworkingPeer.get_LocalPlayer = (void *(*)(void*))NetworkingPeer.get_LocalPlayerOffset;

NetworkingPeer.set_LocalPlayerOffset = getRealOffset(0x52D4A8);
NetworkingPeer.set_LocalPlayer = (void(*)(void*, void *))NetworkingPeer.set_LocalPlayerOffset;

NetworkingPeer.get_PlayersOnMasterCountOffset = getRealOffset(0x52D4B0);
NetworkingPeer.get_PlayersOnMasterCount = (int(*)(void*))NetworkingPeer.get_PlayersOnMasterCountOffset;

NetworkingPeer.set_PlayersOnMasterCountOffset = getRealOffset(0x52D4B8);
NetworkingPeer.set_PlayersOnMasterCount = (void(*)(void*, int))NetworkingPeer.set_PlayersOnMasterCountOffset;

NetworkingPeer.get_PlayersInRoomsCountOffset = getRealOffset(0x52D4C0);
NetworkingPeer.get_PlayersInRoomsCount = (int(*)(void*))NetworkingPeer.get_PlayersInRoomsCountOffset;

NetworkingPeer.set_PlayersInRoomsCountOffset = getRealOffset(0x52D4C8);
NetworkingPeer.set_PlayersInRoomsCount = (void(*)(void*, int))NetworkingPeer.set_PlayersInRoomsCountOffset;

NetworkingPeer.get_RoomsCountOffset = getRealOffset(0x52D4D0);
NetworkingPeer.get_RoomsCount = (int(*)(void*))NetworkingPeer.get_RoomsCountOffset;

NetworkingPeer.set_RoomsCountOffset = getRealOffset(0x52D4D8);
NetworkingPeer.set_RoomsCount = (void(*)(void*, int))NetworkingPeer.set_RoomsCountOffset;

NetworkingPeer.get_FriendListAgeOffset = getRealOffset(0x52D4E0);
NetworkingPeer.get_FriendListAge = (int(*)(void*))NetworkingPeer.get_FriendListAgeOffset;

NetworkingPeer.get_IsAuthorizeSecretAvailableOffset = getRealOffset(0x52D51C);
NetworkingPeer.get_IsAuthorizeSecretAvailable = (bool(*)(void*))NetworkingPeer.get_IsAuthorizeSecretAvailableOffset;

NetworkingPeer.get_AvailableRegionsOffset = getRealOffset(0x52D548);
NetworkingPeer.get_CloudRegionOffset = getRealOffset(0x52D558);
NetworkingPeer.get_CloudRegion = (int (*)(void*))NetworkingPeer.get_CloudRegionOffset;

NetworkingPeer.set_CloudRegionOffset = getRealOffset(0x52D560);
NetworkingPeer.set_CloudRegion = (void(*)(void*, int))NetworkingPeer.set_CloudRegionOffset;

NetworkingPeer.get_mMasterClientIdOffset = getRealOffset(0x52D568);
NetworkingPeer.get_mMasterClientId = (int(*)(void*))NetworkingPeer.get_mMasterClientIdOffset;

NetworkingPeer.set_mMasterClientIdOffset = getRealOffset(0x52D670);
NetworkingPeer.set_mMasterClientId = (void(*)(void*, int))NetworkingPeer.set_mMasterClientIdOffset;

NetworkingPeer.GetNameServerAddressOffset = getRealOffset(0x52CFD4);
NetworkingPeer.GetNameServerAddress = (monoString *(*)(void*))NetworkingPeer.GetNameServerAddressOffset;

NetworkingPeer.ConnectOffset = getRealOffset(0x52DD20);
NetworkingPeer.Connect = (bool(*)(void*, monoString*, monoString*))NetworkingPeer.ConnectOffset;

NetworkingPeer.ReconnectToMasterOffset = getRealOffset(0x52DDA8);
NetworkingPeer.ReconnectToMaster = (bool(*)(void*))NetworkingPeer.ReconnectToMasterOffset;

NetworkingPeer.ReconnectAndRejoinOffset = getRealOffset(0x52E0D8);
NetworkingPeer.ReconnectAndRejoin = (bool(*)(void*))NetworkingPeer.ReconnectAndRejoinOffset;

NetworkingPeer.Connect1Offset = getRealOffset(0x52DE84);
NetworkingPeer.Connect1 = (bool(*)(void*, monoString*, int))NetworkingPeer.Connect1Offset;

NetworkingPeer.ReconnectOffset = getRealOffset(0x52E8F8);
NetworkingPeer.Reconnect = (bool(*)(void*))NetworkingPeer.ReconnectOffset;

NetworkingPeer.ConnectToNameServerOffset = getRealOffset(0x52EA1C);
NetworkingPeer.ConnectToNameServer = (bool(*)(void*))NetworkingPeer.ConnectToNameServerOffset;

NetworkingPeer.ConnectToRegionMasterOffset = getRealOffset(0x52EB98);
NetworkingPeer.ConnectToRegionMaster = (bool(*)(void*, int))NetworkingPeer.ConnectToRegionMasterOffset;

NetworkingPeer.SetupProtocolOffset = getRealOffset(0x52E1E8);
NetworkingPeer.SetupProtocol = (void(*)(void*, int))NetworkingPeer.SetupProtocolOffset;

NetworkingPeer.DisconnectOffset = getRealOffset(0x52EF90);
NetworkingPeer.Disconnect = (void(*)(void*))NetworkingPeer.DisconnectOffset;

NetworkingPeer.CallAuthenticateOffset = getRealOffset(0x52ED24);
NetworkingPeer.CallAuthenticate = (bool(*)(void*))NetworkingPeer.CallAuthenticateOffset;

NetworkingPeer.DisconnectToReconnectOffset = getRealOffset(0x52F0C4);
NetworkingPeer.DisconnectToReconnect = (void(*)(void*))NetworkingPeer.DisconnectToReconnectOffset;

NetworkingPeer.GetRegionsOffset = getRealOffset(0x52F100);
NetworkingPeer.GetRegions = (bool(*)(void*))NetworkingPeer.GetRegionsOffset;

NetworkingPeer.OpCreateGameOffset = getRealOffset(0x52F170);
NetworkingPeer.OpCreateGame = (bool(*)(void*, void *))NetworkingPeer.OpCreateGameOffset;

NetworkingPeer.OpJoinRoomOffset = getRealOffset(0x52F320);
NetworkingPeer.OpJoinRoom = (bool(*)(void*, void *))NetworkingPeer.OpJoinRoomOffset;

NetworkingPeer.OpJoinRandomRoomOffset = getRealOffset(0x52F37C);
NetworkingPeer.OpJoinRandomRoom = (bool(*)(void*, void *))NetworkingPeer.OpJoinRandomRoomOffset;

NetworkingPeer.ReadoutPropertiesOffset = getRealOffset(0x52F550);
NetworkingPeer.ReadoutProperties = (void(*)(void*, void *, void *, int))NetworkingPeer.ReadoutPropertiesOffset;

NetworkingPeer.ReadoutPropertiesForActorNrOffset = getRealOffset(0x52FCA0);
NetworkingPeer.ReadoutPropertiesForActorNr = (void *(*)(void*, void *, int))NetworkingPeer.ReadoutPropertiesForActorNrOffset;

NetworkingPeer.ChangeLocalIDOffset = getRealOffset(0x5304E4);
NetworkingPeer.ChangeLocalID = (void(*)(void*, int))NetworkingPeer.ChangeLocalIDOffset;

NetworkingPeer.LeftLobbyCleanupOffset = getRealOffset(0x5308BC);
NetworkingPeer.LeftLobbyCleanup = (void(*)(void*))NetworkingPeer.LeftLobbyCleanupOffset;

NetworkingPeer.LeftRoomCleanupOffset = getRealOffset(0x530A48);
NetworkingPeer.LeftRoomCleanup = (void(*)(void*))NetworkingPeer.LeftRoomCleanupOffset;

NetworkingPeer.LocalCleanupAnythingInstantiatedOffset = getRealOffset(0x530DC8);
NetworkingPeer.LocalCleanupAnythingInstantiated = (void(*)(void*, bool))NetworkingPeer.LocalCleanupAnythingInstantiatedOffset;

NetworkingPeer.GameEnteredOnGameServerOffset = getRealOffset(0x53163C);
NetworkingPeer.GameEnteredOnGameServer = (void(*)(void*, void *))NetworkingPeer.GameEnteredOnGameServerOffset;

NetworkingPeer.AddNewPlayerOffset = getRealOffset(0x52DBE4);
NetworkingPeer.AddNewPlayer = (void(*)(void*, int, void *))NetworkingPeer.AddNewPlayerOffset;

NetworkingPeer.RemovePlayerOffset = getRealOffset(0x5323B4);
NetworkingPeer.RemovePlayer = (void(*)(void*, int, void *))NetworkingPeer.RemovePlayerOffset;

NetworkingPeer.RebuildPlayerListCopiesOffset = getRealOffset(0x5306E8);
NetworkingPeer.RebuildPlayerListCopies = (void(*)(void*))NetworkingPeer.RebuildPlayerListCopiesOffset;

NetworkingPeer.ResetPhotonViewsOnSerializeOffset = getRealOffset(0x53244C);
NetworkingPeer.ResetPhotonViewsOnSerialize = (void(*)(void*))NetworkingPeer.ResetPhotonViewsOnSerializeOffset;

NetworkingPeer.HandleEventLeaveOffset = getRealOffset(0x53259C);
NetworkingPeer.HandleEventLeave = (void(*)(void*, int, void *))NetworkingPeer.HandleEventLeaveOffset;

NetworkingPeer.CheckMasterClientOffset = getRealOffset(0x53212C);
NetworkingPeer.CheckMasterClient = (void(*)(void*, int))NetworkingPeer.CheckMasterClientOffset;

NetworkingPeer.UpdateMasterClientOffset = getRealOffset(0x532EA4);
NetworkingPeer.UpdateMasterClient = (void(*)(void*))NetworkingPeer.UpdateMasterClientOffset;

NetworkingPeer.SetMasterClientOffset = getRealOffset(0x53351C);
NetworkingPeer.SetMasterClient = (bool(*)(void*, int, bool))NetworkingPeer.SetMasterClientOffset;

NetworkingPeer.SetMasterClient1Offset = getRealOffset(0x533768);
NetworkingPeer.SetMasterClient1 = (bool(*)(void*, int))NetworkingPeer.SetMasterClient1Offset;

NetworkingPeer.GetPlayerWithIdOffset = getRealOffset(0x52FC10);
NetworkingPeer.GetPlayerWithId = (void *(*)(void*, int))NetworkingPeer.GetPlayerWithIdOffset;

NetworkingPeer.SendPlayerNameOffset = getRealOffset(0x52D364);
NetworkingPeer.SendPlayerName = (void(*)(void*))NetworkingPeer.SendPlayerNameOffset;

NetworkingPeer.GetLocalActorPropertiesOffset = getRealOffset(0x52F1E0);
NetworkingPeer.GetLocalActorProperties = (void *(*)(void*))NetworkingPeer.GetLocalActorPropertiesOffset;

NetworkingPeer.DebugReturnOffset = getRealOffset(0x5338E4);
NetworkingPeer.DebugReturn = (void(*)(void*, int, monoString*))NetworkingPeer.DebugReturnOffset;

NetworkingPeer.OnOperationResponseOffset = getRealOffset(0x533A8C);
NetworkingPeer.OnOperationResponse = (void(*)(void*, void *))NetworkingPeer.OnOperationResponseOffset;

NetworkingPeer.OnStatusChangedOffset = getRealOffset(0x537640);
NetworkingPeer.OnStatusChanged = (void(*)(void*, int))NetworkingPeer.OnStatusChangedOffset;

NetworkingPeer.OnEventOffset = getRealOffset(0x538A94);
NetworkingPeer.OnEvent = (void(*)(void*, void *))NetworkingPeer.OnEventOffset;

NetworkingPeer.SendVacantViewIdsOffset = getRealOffset(0x53FF44);
NetworkingPeer.SendVacantViewIds = (void(*)(void*))NetworkingPeer.SendVacantViewIdsOffset;

NetworkingPeer.ExecuteRpcOffset = getRealOffset(0x53BDB4);
NetworkingPeer.ExecuteRpc = (void(*)(void*, void *, int))NetworkingPeer.ExecuteRpcOffset;

NetworkingPeer.DoInstantiateOffset = getRealOffset(0x53ED44);
NetworkingPeer.DoInstantiate = (void *(*)(void*, void *, void *, void *))NetworkingPeer.DoInstantiateOffset;

NetworkingPeer.FetchInstantiationDataOffset = getRealOffset(0x540CB4);
NetworkingPeer.RemoveInstantiationDataOffset = getRealOffset(0x540C40);
NetworkingPeer.RemoveInstantiationData = (void(*)(void*, int))NetworkingPeer.RemoveInstantiationDataOffset;

NetworkingPeer.DestroyPlayerObjectsOffset = getRealOffset(0x532FC4);
NetworkingPeer.DestroyPlayerObjects = (void(*)(void*, int, bool))NetworkingPeer.DestroyPlayerObjectsOffset;

NetworkingPeer.DestroyAllOffset = getRealOffset(0x53FF0C);
NetworkingPeer.DestroyAll = (void(*)(void*, bool))NetworkingPeer.DestroyAllOffset;

NetworkingPeer.RemoveInstantiatedGOOffset = getRealOffset(0x531144);
NetworkingPeer.RemoveInstantiatedGO = (void(*)(void*, void *, bool))NetworkingPeer.RemoveInstantiatedGOOffset;

NetworkingPeer.ServerCleanInstantiateAndDestroyOffset = getRealOffset(0x5411EC);
NetworkingPeer.ServerCleanInstantiateAndDestroy = (void(*)(void*, int, int, bool))NetworkingPeer.ServerCleanInstantiateAndDestroyOffset;

NetworkingPeer.SendDestroyOfPlayerOffset = getRealOffset(0x540F30);
NetworkingPeer.SendDestroyOfPlayer = (void(*)(void*, int))NetworkingPeer.SendDestroyOfPlayerOffset;

NetworkingPeer.SendDestroyOfAllOffset = getRealOffset(0x5410F0);
NetworkingPeer.SendDestroyOfAll = (void(*)(void*))NetworkingPeer.SendDestroyOfAllOffset;

NetworkingPeer.OpRemoveFromServerInstantiationsOfPlayerOffset = getRealOffset(0x540D48);
NetworkingPeer.OpRemoveFromServerInstantiationsOfPlayer = (void(*)(void*, int))NetworkingPeer.OpRemoveFromServerInstantiationsOfPlayerOffset;

NetworkingPeer.RequestOwnershipOffset = getRealOffset(0x541698);
NetworkingPeer.RequestOwnership = (void(*)(void*, int, int))NetworkingPeer.RequestOwnershipOffset;

NetworkingPeer.TransferOwnershipOffset = getRealOffset(0x541A64);
NetworkingPeer.TransferOwnership = (void(*)(void*, int, int))NetworkingPeer.TransferOwnershipOffset;

NetworkingPeer.LocalCleanPhotonViewOffset = getRealOffset(0x5414B4);
NetworkingPeer.LocalCleanPhotonView = (bool(*)(void*, void *))NetworkingPeer.LocalCleanPhotonViewOffset;

NetworkingPeer.GetPhotonViewOffset = getRealOffset(0x540214);
NetworkingPeer.GetPhotonView = (void *(*)(void*, int))NetworkingPeer.GetPhotonViewOffset;

NetworkingPeer.RegisterPhotonViewOffset = getRealOffset(0x541E30);
NetworkingPeer.RegisterPhotonView = (void(*)(void*, void *))NetworkingPeer.RegisterPhotonViewOffset;

NetworkingPeer.OpCleanRpcBufferOffset = getRealOffset(0x540E3C);
NetworkingPeer.OpCleanRpcBuffer = (void(*)(void*, int))NetworkingPeer.OpCleanRpcBufferOffset;

NetworkingPeer.OpRemoveCompleteCacheOfPlayerOffset = getRealOffset(0x542120);
NetworkingPeer.OpRemoveCompleteCacheOfPlayer = (void(*)(void*, int))NetworkingPeer.OpRemoveCompleteCacheOfPlayerOffset;

NetworkingPeer.OpRemoveCompleteCacheOffset = getRealOffset(0x54102C);
NetworkingPeer.OpRemoveCompleteCache = (void(*)(void*))NetworkingPeer.OpRemoveCompleteCacheOffset;

NetworkingPeer.RemoveCacheOfLeftPlayersOffset = getRealOffset(0x542214);
NetworkingPeer.RemoveCacheOfLeftPlayers = (void(*)(void*))NetworkingPeer.RemoveCacheOfLeftPlayersOffset;

NetworkingPeer.CleanRpcBufferIfMineOffset = getRealOffset(0x542374);
NetworkingPeer.CleanRpcBufferIfMine = (void(*)(void*, void *))NetworkingPeer.CleanRpcBufferIfMineOffset;

NetworkingPeer.OpCleanRpcBuffer1Offset = getRealOffset(0x541558);
NetworkingPeer.OpCleanRpcBuffer1 = (void(*)(void*, void *))NetworkingPeer.OpCleanRpcBuffer1Offset;

NetworkingPeer.RemoveRPCsInGroupOffset = getRealOffset(0x54260C);
NetworkingPeer.RemoveRPCsInGroup = (void(*)(void*, int))NetworkingPeer.RemoveRPCsInGroupOffset;

NetworkingPeer.SetLevelPrefixOffset = getRealOffset(0x542774);
NetworkingPeer.SetLevelPrefix = (void(*)(void*, byte))NetworkingPeer.SetLevelPrefixOffset;

NetworkingPeer.NewSceneLoadedOffset = getRealOffset(0x543B94);
NetworkingPeer.NewSceneLoaded = (void(*)(void*))NetworkingPeer.NewSceneLoadedOffset;

NetworkingPeer.RunViewUpdateOffset = getRealOffset(0x543F1C);
NetworkingPeer.RunViewUpdate = (void(*)(void*))NetworkingPeer.RunViewUpdateOffset;

NetworkingPeer.OnSerializeWriteOffset = getRealOffset(0x545160);
NetworkingPeer.LoadLevelIfSyncedOffset = getRealOffset(0x530070);
NetworkingPeer.LoadLevelIfSynced = (void(*)(void*))NetworkingPeer.LoadLevelIfSyncedOffset;

NetworkingPeer.SendLevelReloadEventOffset = getRealOffset(0x5467BC);
NetworkingPeer.SendLevelReloadEvent = (void(*)(void*))NetworkingPeer.SendLevelReloadEventOffset;

NetworkingPeer.SetAppOffset = getRealOffset(0x546898);
NetworkingPeer.SetApp = (void(*)(void*, monoString*, monoString*))NetworkingPeer.SetAppOffset;

PhotonMessageInfo.get_timestampOffset = getRealOffset(0x3D7468);
PhotonMessageInfo.ToStringOffset = getRealOffset(0x3D7488);
PhotonMessageInfo.ToString = (monoString *(*)(void*))PhotonMessageInfo.ToStringOffset;

PhotonStream.ResetWriteStreamOffset = getRealOffset(0x7E0BB4);
PhotonStream.ResetWriteStream = (void(*)(void*))PhotonStream.ResetWriteStreamOffset;

PhotonStream.get_isWritingOffset = getRealOffset(0x7E0C20);
PhotonStream.get_isWriting = (bool(*)(void*))PhotonStream.get_isWritingOffset;

PhotonStream.get_isReadingOffset = getRealOffset(0x7E0C28);
PhotonStream.get_isReading = (bool(*)(void*))PhotonStream.get_isReadingOffset;

PhotonStream.get_CountOffset = getRealOffset(0x7E0C38);
PhotonStream.get_Count = (int(*)(void*))PhotonStream.get_CountOffset;

PhotonStream.ReceiveNextOffset = getRealOffset(0x7CBDA0);
PhotonStream.PeekNextOffset = getRealOffset(0x7CBE80);
PhotonStream.ToArrayOffset = getRealOffset(0x7E0CB8);
PhotonStream.Serialize7Offset = getRealOffset(0x7E16B0);
PhotonStream.Serialize7 = (void(*)(void*, Vector3 *))PhotonStream.Serialize7Offset;

SceneManagerHelper.get_ActiveSceneNameOffset = getRealOffset(0x615534);
SceneManagerHelper.get_ActiveSceneName = (monoString *(*)())SceneManagerHelper.get_ActiveSceneNameOffset;

SceneManagerHelper.get_ActiveSceneBuildIndexOffset = getRealOffset(0x6155C8);
SceneManagerHelper.get_ActiveSceneBuildIndex = (int(*)())SceneManagerHelper.get_ActiveSceneBuildIndexOffset;

WebRpcResponse.get_NameOffset = getRealOffset(0x8B7850);
WebRpcResponse.get_Name = (monoString *(*)(void*))WebRpcResponse.get_NameOffset;

WebRpcResponse.set_NameOffset = getRealOffset(0x8B7858);
WebRpcResponse.set_Name = (void(*)(void*, monoString*))WebRpcResponse.set_NameOffset;

WebRpcResponse.get_ReturnCodeOffset = getRealOffset(0x8B7860);
WebRpcResponse.get_ReturnCode = (int(*)(void*))WebRpcResponse.get_ReturnCodeOffset;

WebRpcResponse.set_ReturnCodeOffset = getRealOffset(0x8B7868);
WebRpcResponse.set_ReturnCode = (void(*)(void*, int))WebRpcResponse.set_ReturnCodeOffset;

WebRpcResponse.get_DebugMessageOffset = getRealOffset(0x8B7870);
WebRpcResponse.get_DebugMessage = (monoString *(*)(void*))WebRpcResponse.get_DebugMessageOffset;

WebRpcResponse.set_DebugMessageOffset = getRealOffset(0x8B7878);
WebRpcResponse.set_DebugMessage = (void(*)(void*, monoString*))WebRpcResponse.set_DebugMessageOffset;

WebRpcResponse.get_ParametersOffset = getRealOffset(0x8B7880);
WebRpcResponse.ToStringFullOffset = getRealOffset(0x8B7A9C);
WebRpcResponse.ToStringFull = (monoString *(*)(void*))WebRpcResponse.ToStringFullOffset;

PhotonHandler.AwakeOffset = getRealOffset(0x7CCA08);
PhotonHandler.Awake = (void(*)(void*))PhotonHandler.AwakeOffset;

PhotonHandler.StartOffset = getRealOffset(0x7CCF28);
PhotonHandler.Start = (void(*)(void*))PhotonHandler.StartOffset;

PhotonHandler.OnApplicationQuitOffset = getRealOffset(0x7CD058);
PhotonHandler.OnApplicationQuit = (void(*)(void*))PhotonHandler.OnApplicationQuitOffset;

PhotonHandler.OnApplicationPauseOffset = getRealOffset(0x7CD360);
PhotonHandler.OnApplicationPause = (void(*)(void*, bool))PhotonHandler.OnApplicationPauseOffset;

PhotonHandler.OnDestroyOffset = getRealOffset(0x7CD550);
PhotonHandler.OnDestroy = (void(*)(void*))PhotonHandler.OnDestroyOffset;

PhotonHandler.UpdateOffset = getRealOffset(0x7CD5C0);
PhotonHandler.Update = (void(*)(void*))PhotonHandler.UpdateOffset;

PhotonHandler.OnJoinedRoomOffset = getRealOffset(0x7CDC58);
PhotonHandler.OnJoinedRoom = (void(*)(void*))PhotonHandler.OnJoinedRoomOffset;

PhotonHandler.OnCreatedRoomOffset = getRealOffset(0x7CDCE8);
PhotonHandler.OnCreatedRoom = (void(*)(void*))PhotonHandler.OnCreatedRoomOffset;

PhotonHandler.StartFallbackSendAckThreadOffset = getRealOffset(0x7CCDE8);
PhotonHandler.StartFallbackSendAckThread = (void(*)())PhotonHandler.StartFallbackSendAckThreadOffset;

PhotonHandler.StopFallbackSendAckThreadOffset = getRealOffset(0x7CD108);
PhotonHandler.StopFallbackSendAckThread = (void(*)())PhotonHandler.StopFallbackSendAckThreadOffset;

PhotonHandler.FallbackSendAckThreadOffset = getRealOffset(0x7CDD9C);
PhotonHandler.FallbackSendAckThread = (bool(*)())PhotonHandler.FallbackSendAckThreadOffset;

PhotonHandler.get_BestRegionCodeInPreferencesOffset = getRealOffset(0x7CE230);
PhotonHandler.get_BestRegionCodeInPreferences = (int (*)())PhotonHandler.get_BestRegionCodeInPreferencesOffset;

PhotonHandler.set_BestRegionCodeInPreferencesOffset = getRealOffset(0x7CE2C0);
PhotonHandler.set_BestRegionCodeInPreferences = (void(*)(int))PhotonHandler.set_BestRegionCodeInPreferencesOffset;

PhotonHandler.PingAvailableRegionsCoroutineOffset = getRealOffset(0x7CE3B0);
PhotonHandler.PingAvailableRegionsCoroutine = (void *(*)(void*, bool))PhotonHandler.PingAvailableRegionsCoroutineOffset;

PhotonLagSimulationGui.get_PeerOffset = getRealOffset(0x7CF190);
PhotonLagSimulationGui.get_Peer = (void *(*)(void*))PhotonLagSimulationGui.get_PeerOffset;

PhotonLagSimulationGui.set_PeerOffset = getRealOffset(0x7CF198);
PhotonLagSimulationGui.set_Peer = (void(*)(void*, void *))PhotonLagSimulationGui.set_PeerOffset;

PhotonLagSimulationGui.StartOffset = getRealOffset(0x7CF1A0);
PhotonLagSimulationGui.Start = (void(*)(void*))PhotonLagSimulationGui.StartOffset;

PhotonLagSimulationGui.OnGUIOffset = getRealOffset(0x7CF220);
PhotonLagSimulationGui.OnGUI = (void(*)(void*))PhotonLagSimulationGui.OnGUIOffset;

PhotonLagSimulationGui.NetSimHasNoPeerWindowOffset = getRealOffset(0x7CF4D8);
PhotonLagSimulationGui.NetSimHasNoPeerWindow = (void(*)(void*, int))PhotonLagSimulationGui.NetSimHasNoPeerWindowOffset;

PhotonLagSimulationGui.NetSimWindowOffset = getRealOffset(0x7CF5D8);
PhotonLagSimulationGui.NetSimWindow = (void(*)(void*, int))PhotonLagSimulationGui.NetSimWindowOffset;

PhotonNetwork.get_gameVersionOffset = getRealOffset(0x7D0160);
PhotonNetwork.get_gameVersion = (monoString *(*)())PhotonNetwork.get_gameVersionOffset;

PhotonNetwork.set_gameVersionOffset = getRealOffset(0x7D01D8);
PhotonNetwork.set_gameVersion = (void(*)(monoString*))PhotonNetwork.set_gameVersionOffset;

PhotonNetwork.get_ServerAddressOffset = getRealOffset(0x7D0254);
PhotonNetwork.get_ServerAddress = (monoString *(*)())PhotonNetwork.get_ServerAddressOffset;

PhotonNetwork.get_CloudRegionOffset = getRealOffset(0x7D032C);
PhotonNetwork.get_CloudRegion = (int (*)())PhotonNetwork.get_CloudRegionOffset;

PhotonNetwork.get_connectedOffset = getRealOffset(0x7C9DCC);
PhotonNetwork.get_connected = (bool(*)())PhotonNetwork.get_connectedOffset;

PhotonNetwork.get_connectingOffset = getRealOffset(0x7D0444);
PhotonNetwork.get_connecting = (bool(*)())PhotonNetwork.get_connectingOffset;

PhotonNetwork.get_connectedAndReadyOffset = getRealOffset(0x7D0564);
PhotonNetwork.get_connectedAndReady = (bool(*)())PhotonNetwork.get_connectedAndReadyOffset;

PhotonNetwork.get_connectionStateOffset = getRealOffset(0x7D06CC);
PhotonNetwork.get_connectionState = (int (*)())PhotonNetwork.get_connectionStateOffset;

PhotonNetwork.get_connectionStateDetailedOffset = getRealOffset(0x7CDAD0);
PhotonNetwork.get_connectionStateDetailed = (int (*)())PhotonNetwork.get_connectionStateDetailedOffset;

PhotonNetwork.get_ServerOffset = getRealOffset(0x7CEE10);
PhotonNetwork.get_Server = (int (*)())PhotonNetwork.get_ServerOffset;

PhotonNetwork.get_AuthValuesOffset = getRealOffset(0x7D0848);
PhotonNetwork.get_AuthValues = (void *(*)())PhotonNetwork.get_AuthValuesOffset;

PhotonNetwork.set_AuthValuesOffset = getRealOffset(0x7D0908);
PhotonNetwork.set_AuthValues = (void(*)(void *))PhotonNetwork.set_AuthValuesOffset;

PhotonNetwork.get_roomOffset = getRealOffset(0x7CA0AC);
PhotonNetwork.get_room = (void *(*)())PhotonNetwork.get_roomOffset;

PhotonNetwork.get_playerOffset = getRealOffset(0x7D09C4);
PhotonNetwork.get_player = (void *(*)())PhotonNetwork.get_playerOffset;

PhotonNetwork.get_masterClientOffset = getRealOffset(0x7D0A84);
PhotonNetwork.get_masterClient = (void *(*)())PhotonNetwork.get_masterClientOffset;

PhotonNetwork.get_playerNameOffset = getRealOffset(0x7D0C30);
PhotonNetwork.get_playerName = (monoString *(*)())PhotonNetwork.get_playerNameOffset;

PhotonNetwork.set_playerNameOffset = getRealOffset(0x7D0CB8);
PhotonNetwork.set_playerName = (void(*)(monoString*))PhotonNetwork.set_playerNameOffset;

PhotonNetwork.get_playerListOffset = getRealOffset(0x7D0D50);
PhotonNetwork.get_otherPlayersOffset = getRealOffset(0x7D0E24);
PhotonNetwork.get_FriendsOffset = getRealOffset(0x7D0EF8);
PhotonNetwork.get_FriendsListAgeOffset = getRealOffset(0x7D0FEC);
PhotonNetwork.get_FriendsListAge = (int(*)())PhotonNetwork.get_FriendsListAgeOffset;

PhotonNetwork.get_PrefabPoolOffset = getRealOffset(0x7D10B8);
PhotonNetwork.get_PrefabPool = (void *(*)())PhotonNetwork.get_PrefabPoolOffset;

PhotonNetwork.set_PrefabPoolOffset = getRealOffset(0x7D1140);
PhotonNetwork.set_PrefabPool = (void(*)(void *))PhotonNetwork.set_PrefabPoolOffset;

PhotonNetwork.get_offlineModeOffset = getRealOffset(0x7D11CC);
PhotonNetwork.get_offlineMode = (bool(*)())PhotonNetwork.get_offlineModeOffset;

PhotonNetwork.set_offlineModeOffset = getRealOffset(0x7D1244);
PhotonNetwork.set_offlineMode = (void(*)(bool))PhotonNetwork.set_offlineModeOffset;

PhotonNetwork.get_automaticallySyncSceneOffset = getRealOffset(0x7D15A0);
PhotonNetwork.get_automaticallySyncScene = (bool(*)())PhotonNetwork.get_automaticallySyncSceneOffset;

PhotonNetwork.set_automaticallySyncSceneOffset = getRealOffset(0x7D1618);
PhotonNetwork.set_automaticallySyncScene = (void(*)(bool))PhotonNetwork.set_automaticallySyncSceneOffset;

PhotonNetwork.get_autoCleanUpPlayerObjectsOffset = getRealOffset(0x7D1714);
PhotonNetwork.get_autoCleanUpPlayerObjects = (bool(*)())PhotonNetwork.get_autoCleanUpPlayerObjectsOffset;

PhotonNetwork.set_autoCleanUpPlayerObjectsOffset = getRealOffset(0x7D178C);
PhotonNetwork.set_autoCleanUpPlayerObjects = (void(*)(bool))PhotonNetwork.set_autoCleanUpPlayerObjectsOffset;

PhotonNetwork.get_autoJoinLobbyOffset = getRealOffset(0x7D187C);
PhotonNetwork.get_autoJoinLobby = (bool(*)())PhotonNetwork.get_autoJoinLobbyOffset;

PhotonNetwork.set_autoJoinLobbyOffset = getRealOffset(0x7D1904);
PhotonNetwork.set_autoJoinLobby = (void(*)(bool))PhotonNetwork.set_autoJoinLobbyOffset;

PhotonNetwork.get_EnableLobbyStatisticsOffset = getRealOffset(0x7D1990);
PhotonNetwork.get_EnableLobbyStatistics = (bool(*)())PhotonNetwork.get_EnableLobbyStatisticsOffset;

PhotonNetwork.set_EnableLobbyStatisticsOffset = getRealOffset(0x7D1A18);
PhotonNetwork.set_EnableLobbyStatistics = (void(*)(bool))PhotonNetwork.set_EnableLobbyStatisticsOffset;

PhotonNetwork.get_LobbyStatisticsOffset = getRealOffset(0x7D1AA4);
PhotonNetwork.get_insideLobbyOffset = getRealOffset(0x7D1BB8);
PhotonNetwork.get_insideLobby = (bool(*)())PhotonNetwork.get_insideLobbyOffset;

PhotonNetwork.get_lobbyOffset = getRealOffset(0x7D1C40);
PhotonNetwork.get_lobby = (void *(*)())PhotonNetwork.get_lobbyOffset;

PhotonNetwork.set_lobbyOffset = getRealOffset(0x7D1CC8);
PhotonNetwork.set_lobby = (void(*)(void *))PhotonNetwork.set_lobbyOffset;

PhotonNetwork.get_sendRateOffset = getRealOffset(0x7CCCE8);
PhotonNetwork.get_sendRate = (int(*)())PhotonNetwork.get_sendRateOffset;

PhotonNetwork.set_sendRateOffset = getRealOffset(0x7D1D54);
PhotonNetwork.set_sendRate = (void(*)(int))PhotonNetwork.set_sendRateOffset;

PhotonNetwork.get_sendRateOnSerializeOffset = getRealOffset(0x7CCD68);
PhotonNetwork.get_sendRateOnSerialize = (int(*)())PhotonNetwork.get_sendRateOnSerializeOffset;

PhotonNetwork.set_sendRateOnSerializeOffset = getRealOffset(0x7D1EC4);
PhotonNetwork.set_sendRateOnSerialize = (void(*)(int))PhotonNetwork.set_sendRateOnSerializeOffset;

PhotonNetwork.get_isMessageQueueRunningOffset = getRealOffset(0x7D2074);
PhotonNetwork.get_isMessageQueueRunning = (bool(*)())PhotonNetwork.get_isMessageQueueRunningOffset;

PhotonNetwork.set_isMessageQueueRunningOffset = getRealOffset(0x7D20EC);
PhotonNetwork.set_isMessageQueueRunning = (void(*)(bool))PhotonNetwork.set_isMessageQueueRunningOffset;

PhotonNetwork.get_timeOffset = getRealOffset(0x7D21C8);
PhotonNetwork.get_ServerTimestampOffset = getRealOffset(0x7D2254);
PhotonNetwork.get_ServerTimestamp = (int(*)())PhotonNetwork.get_ServerTimestampOffset;

PhotonNetwork.get_isMasterClientOffset = getRealOffset(0x7D23B8);
PhotonNetwork.get_isMasterClient = (bool(*)())PhotonNetwork.get_isMasterClientOffset;

PhotonNetwork.get_inRoomOffset = getRealOffset(0x7CA030);
PhotonNetwork.get_inRoom = (bool(*)())PhotonNetwork.get_inRoomOffset;

PhotonNetwork.get_isNonMasterClientInRoomOffset = getRealOffset(0x7D24FC);
PhotonNetwork.get_isNonMasterClientInRoom = (bool(*)())PhotonNetwork.get_isNonMasterClientInRoomOffset;

PhotonNetwork.get_countOfPlayersOnMasterOffset = getRealOffset(0x7D25A8);
PhotonNetwork.get_countOfPlayersOnMaster = (int(*)())PhotonNetwork.get_countOfPlayersOnMasterOffset;

PhotonNetwork.get_countOfPlayersInRoomsOffset = getRealOffset(0x7D2630);
PhotonNetwork.get_countOfPlayersInRooms = (int(*)())PhotonNetwork.get_countOfPlayersInRoomsOffset;

PhotonNetwork.get_countOfPlayersOffset = getRealOffset(0x7D26B8);
PhotonNetwork.get_countOfPlayers = (int(*)())PhotonNetwork.get_countOfPlayersOffset;

PhotonNetwork.get_countOfRoomsOffset = getRealOffset(0x7D2764);
PhotonNetwork.get_countOfRooms = (int(*)())PhotonNetwork.get_countOfRoomsOffset;

PhotonNetwork.get_NetworkStatisticsEnabledOffset = getRealOffset(0x7D27EC);
PhotonNetwork.get_NetworkStatisticsEnabled = (bool(*)())PhotonNetwork.get_NetworkStatisticsEnabledOffset;

PhotonNetwork.set_NetworkStatisticsEnabledOffset = getRealOffset(0x7D287C);
PhotonNetwork.set_NetworkStatisticsEnabled = (void(*)(bool))PhotonNetwork.set_NetworkStatisticsEnabledOffset;

PhotonNetwork.get_ResentReliableCommandsOffset = getRealOffset(0x7D2914);
PhotonNetwork.get_ResentReliableCommands = (int(*)())PhotonNetwork.get_ResentReliableCommandsOffset;

PhotonNetwork.get_CrcCheckEnabledOffset = getRealOffset(0x7D29A4);
PhotonNetwork.get_CrcCheckEnabled = (bool(*)())PhotonNetwork.get_CrcCheckEnabledOffset;

PhotonNetwork.set_CrcCheckEnabledOffset = getRealOffset(0x7D2A34);
PhotonNetwork.set_CrcCheckEnabled = (void(*)(bool))PhotonNetwork.set_CrcCheckEnabledOffset;

PhotonNetwork.get_PacketLossByCrcCheckOffset = getRealOffset(0x7D2BE4);
PhotonNetwork.get_PacketLossByCrcCheck = (int(*)())PhotonNetwork.get_PacketLossByCrcCheckOffset;

PhotonNetwork.get_MaxResendsBeforeDisconnectOffset = getRealOffset(0x7D2C74);
PhotonNetwork.get_MaxResendsBeforeDisconnect = (int(*)())PhotonNetwork.get_MaxResendsBeforeDisconnectOffset;

PhotonNetwork.set_MaxResendsBeforeDisconnectOffset = getRealOffset(0x7D2CFC);
PhotonNetwork.set_MaxResendsBeforeDisconnect = (void(*)(int))PhotonNetwork.set_MaxResendsBeforeDisconnectOffset;

PhotonNetwork.get_QuickResendsOffset = getRealOffset(0x7D2D98);
PhotonNetwork.get_QuickResends = (int(*)())PhotonNetwork.get_QuickResendsOffset;

PhotonNetwork.set_QuickResendsOffset = getRealOffset(0x7D2E28);
PhotonNetwork.set_QuickResends = (void(*)(int))PhotonNetwork.set_QuickResendsOffset;

PhotonNetwork.get_UseAlternativeUdpPortsOffset = getRealOffset(0x7D2ECC);
PhotonNetwork.get_UseAlternativeUdpPorts = (bool(*)())PhotonNetwork.get_UseAlternativeUdpPortsOffset;

PhotonNetwork.set_UseAlternativeUdpPortsOffset = getRealOffset(0x7D2F44);
PhotonNetwork.set_UseAlternativeUdpPorts = (void(*)(bool))PhotonNetwork.set_UseAlternativeUdpPortsOffset;

PhotonNetwork.add_OnEventCallOffset = getRealOffset(0x7D2FC0);
PhotonNetwork.add_OnEventCall = (void(*)(void *))PhotonNetwork.add_OnEventCallOffset;

PhotonNetwork.remove_OnEventCallOffset = getRealOffset(0x7D30C8);
PhotonNetwork.remove_OnEventCall = (void(*)(void *))PhotonNetwork.remove_OnEventCallOffset;

PhotonNetwork.SwitchToProtocolOffset = getRealOffset(0x7D3740);
PhotonNetwork.SwitchToProtocol = (void(*)(int))PhotonNetwork.SwitchToProtocolOffset;

PhotonNetwork.ConnectUsingSettingsOffset = getRealOffset(0x7D37CC);
PhotonNetwork.ConnectUsingSettings = (bool(*)(monoString*))PhotonNetwork.ConnectUsingSettingsOffset;

PhotonNetwork.ConnectToMasterOffset = getRealOffset(0x7D4354);
PhotonNetwork.ConnectToMaster = (bool(*)(monoString*, int, monoString*, monoString*))PhotonNetwork.ConnectToMasterOffset;

PhotonNetwork.ReconnectOffset = getRealOffset(0x7D4808);
PhotonNetwork.Reconnect = (bool(*)())PhotonNetwork.ReconnectOffset;

PhotonNetwork.ReconnectAndRejoinOffset = getRealOffset(0x7D4C9C);
PhotonNetwork.ReconnectAndRejoin = (bool(*)())PhotonNetwork.ReconnectAndRejoinOffset;

PhotonNetwork.ConnectToBestCloudServerOffset = getRealOffset(0x7D4014);
PhotonNetwork.ConnectToBestCloudServer = (bool(*)(monoString*))PhotonNetwork.ConnectToBestCloudServerOffset;

PhotonNetwork.ConnectToRegionOffset = getRealOffset(0x7D5178);
PhotonNetwork.ConnectToRegion = (bool(*)(int, monoString*))PhotonNetwork.ConnectToRegionOffset;

PhotonNetwork.OverrideBestCloudServerOffset = getRealOffset(0x7D5568);
PhotonNetwork.OverrideBestCloudServer = (void(*)(int))PhotonNetwork.OverrideBestCloudServerOffset;

PhotonNetwork.RefreshCloudServerRatingOffset = getRealOffset(0x7D55E0);
PhotonNetwork.RefreshCloudServerRating = (void(*)())PhotonNetwork.RefreshCloudServerRatingOffset;

PhotonNetwork.NetworkStatisticsResetOffset = getRealOffset(0x7D566C);
PhotonNetwork.NetworkStatisticsReset = (void(*)())PhotonNetwork.NetworkStatisticsResetOffset;

PhotonNetwork.NetworkStatisticsToStringOffset = getRealOffset(0x7D56FC);
PhotonNetwork.NetworkStatisticsToString = (monoString *(*)())PhotonNetwork.NetworkStatisticsToStringOffset;

PhotonNetwork.InitializeSecurityOffset = getRealOffset(0x7D5858);
PhotonNetwork.InitializeSecurity = (void(*)())PhotonNetwork.InitializeSecurityOffset;

PhotonNetwork.VerifyCanUseNetworkOffset = getRealOffset(0x7D585C);
PhotonNetwork.VerifyCanUseNetwork = (bool(*)())PhotonNetwork.VerifyCanUseNetworkOffset;

PhotonNetwork.DisconnectOffset = getRealOffset(0x7CD184);
PhotonNetwork.Disconnect = (void(*)())PhotonNetwork.DisconnectOffset;

PhotonNetwork.CreateRoomOffset = getRealOffset(0x7D5A34);
PhotonNetwork.CreateRoom = (bool(*)(monoString*))PhotonNetwork.CreateRoomOffset;

PhotonNetwork.CreateRoom1Offset = getRealOffset(0x7D5E48);
PhotonNetwork.CreateRoom1 = (bool(*)(monoString*, void *, void *))PhotonNetwork.CreateRoom1Offset;

PhotonNetwork.JoinRoomOffset = getRealOffset(0x7D61E8);
PhotonNetwork.JoinRoom = (bool(*)(monoString*))PhotonNetwork.JoinRoomOffset;

PhotonNetwork.JoinOrCreateRoomOffset = getRealOffset(0x7D658C);
PhotonNetwork.JoinOrCreateRoom = (bool(*)(monoString*, void *, void *))PhotonNetwork.JoinOrCreateRoomOffset;

PhotonNetwork.JoinRandomRoomOffset = getRealOffset(0x7D6A30);
PhotonNetwork.JoinRandomRoom = (bool(*)())PhotonNetwork.JoinRandomRoomOffset;

PhotonNetwork.ReJoinRoomOffset = getRealOffset(0x7D6F34);
PhotonNetwork.ReJoinRoom = (bool(*)(monoString*))PhotonNetwork.ReJoinRoomOffset;

PhotonNetwork.EnterOfflineRoomOffset = getRealOffset(0x7D5EDC);
PhotonNetwork.EnterOfflineRoom = (void(*)(monoString*, void *, bool))PhotonNetwork.EnterOfflineRoomOffset;

PhotonNetwork.JoinLobbyOffset = getRealOffset(0x7D7204);
PhotonNetwork.JoinLobby = (bool(*)())PhotonNetwork.JoinLobbyOffset;

PhotonNetwork.JoinLobby1Offset = getRealOffset(0x7D7278);
PhotonNetwork.JoinLobby1 = (bool(*)(void *))PhotonNetwork.JoinLobby1Offset;

PhotonNetwork.LeaveLobbyOffset = getRealOffset(0x7D7400);
PhotonNetwork.LeaveLobby = (bool(*)())PhotonNetwork.LeaveLobbyOffset;

PhotonNetwork.LeaveRoomOffset = getRealOffset(0x7D74F8);
PhotonNetwork.LeaveRoom = (bool(*)(bool))PhotonNetwork.LeaveRoomOffset;

PhotonNetwork.GetCustomRoomListOffset = getRealOffset(0x7D7888);
PhotonNetwork.GetCustomRoomList = (bool(*)(void *, monoString*))PhotonNetwork.GetCustomRoomListOffset;

PhotonNetwork.GetRoomListOffset = getRealOffset(0x7D7930);
PhotonNetwork.SetPlayerCustomPropertiesOffset = getRealOffset(0x7D7A88);
PhotonNetwork.SetPlayerCustomProperties = (void(*)(void *))PhotonNetwork.SetPlayerCustomPropertiesOffset;

PhotonNetwork.AllocateViewIDOffset = getRealOffset(0x7D86F8);
PhotonNetwork.AllocateViewID = (int(*)())PhotonNetwork.AllocateViewIDOffset;

PhotonNetwork.AllocateSceneViewIDOffset = getRealOffset(0x7D8BD8);
PhotonNetwork.AllocateSceneViewID = (int(*)())PhotonNetwork.AllocateSceneViewIDOffset;

PhotonNetwork.AllocateViewID1Offset = getRealOffset(0x7D87BC);
PhotonNetwork.AllocateViewID1 = (int(*)(int))PhotonNetwork.AllocateViewID1Offset;

PhotonNetwork.AllocateSceneViewIDsOffset = getRealOffset(0x7D8D00);
PhotonNetwork.UnAllocateViewIDOffset = getRealOffset(0x7D8DE0);
PhotonNetwork.UnAllocateViewID = (void(*)(int))PhotonNetwork.UnAllocateViewIDOffset;

PhotonNetwork.GetPingOffset = getRealOffset(0x7DA0D8);
PhotonNetwork.GetPing = (int(*)())PhotonNetwork.GetPingOffset;

PhotonNetwork.FetchServerTimestampOffset = getRealOffset(0x7DA168);
PhotonNetwork.FetchServerTimestamp = (void(*)())PhotonNetwork.FetchServerTimestampOffset;

PhotonNetwork.SendOutgoingCommandsOffset = getRealOffset(0x7DA234);
PhotonNetwork.SendOutgoingCommands = (void(*)())PhotonNetwork.SendOutgoingCommandsOffset;

PhotonNetwork.CloseConnectionOffset = getRealOffset(0x7DA2FC);
PhotonNetwork.CloseConnection = (bool(*)(void *))PhotonNetwork.CloseConnectionOffset;

PhotonNetwork.SetMasterClientOffset = getRealOffset(0x7DA5D4);
PhotonNetwork.SetMasterClient = (bool(*)(void *))PhotonNetwork.SetMasterClientOffset;

PhotonNetwork.DestroyOffset = getRealOffset(0x7DA9F0);
PhotonNetwork.Destroy = (void(*)(void *))PhotonNetwork.DestroyOffset;

PhotonNetwork.Destroy1Offset = getRealOffset(0x7DAB3C);
PhotonNetwork.Destroy1 = (void(*)(void *))PhotonNetwork.Destroy1Offset;

PhotonNetwork.DestroyPlayerObjectsOffset = getRealOffset(0x7DABE0);
PhotonNetwork.DestroyPlayerObjects = (void(*)(void *))PhotonNetwork.DestroyPlayerObjectsOffset;

PhotonNetwork.DestroyPlayerObjects1Offset = getRealOffset(0x7DACD8);
PhotonNetwork.DestroyPlayerObjects1 = (void(*)(int))PhotonNetwork.DestroyPlayerObjects1Offset;

PhotonNetwork.DestroyAllOffset = getRealOffset(0x7DAEC4);
PhotonNetwork.DestroyAll = (void(*)())PhotonNetwork.DestroyAllOffset;

PhotonNetwork.RemoveRPCsOffset = getRealOffset(0x7DAFCC);
PhotonNetwork.RemoveRPCs = (void(*)(void *))PhotonNetwork.RemoveRPCsOffset;

PhotonNetwork.RemoveRPCs1Offset = getRealOffset(0x7DB120);
PhotonNetwork.RemoveRPCs1 = (void(*)(void *))PhotonNetwork.RemoveRPCs1Offset;

PhotonNetwork.RemoveRPCsInGroupOffset = getRealOffset(0x7DB1E4);
PhotonNetwork.RemoveRPCsInGroup = (void(*)(int))PhotonNetwork.RemoveRPCsInGroupOffset;

PhotonNetwork.CacheSendMonoMessageTargetsOffset = getRealOffset(0x7DB7E8);
PhotonNetwork.CacheSendMonoMessageTargets = (void(*)(void *))PhotonNetwork.CacheSendMonoMessageTargetsOffset;

PhotonNetwork.FindGameObjectsWithComponentOffset = getRealOffset(0x7DB8DC);
PhotonNetwork.SetReceivingEnabledOffset = getRealOffset(0x7DBAB4);
PhotonNetwork.SetReceivingEnabled = (void(*)(int, bool))PhotonNetwork.SetReceivingEnabledOffset;

PhotonNetwork.SetSendingEnabledOffset = getRealOffset(0x7DBEDC);
PhotonNetwork.SetSendingEnabled = (void(*)(int, bool))PhotonNetwork.SetSendingEnabledOffset;

PhotonNetwork.SetLevelPrefixOffset = getRealOffset(0x7DC1F4);
PhotonNetwork.SetLevelPrefix = (void(*)(byte))PhotonNetwork.SetLevelPrefixOffset;

PhotonNetwork.LoadLevelOffset = getRealOffset(0x7DC2B0);
PhotonNetwork.LoadLevel = (void(*)(int))PhotonNetwork.LoadLevelOffset;

PhotonNetwork.LoadLevelAsyncOffset = getRealOffset(0x7DC4A0);
PhotonNetwork.LoadLevelAsync = (void *(*)(int))PhotonNetwork.LoadLevelAsyncOffset;

PhotonNetwork.LoadLevel1Offset = getRealOffset(0x7DC690);
PhotonNetwork.LoadLevel1 = (void(*)(monoString*))PhotonNetwork.LoadLevel1Offset;

PhotonNetwork.LoadLevelAsync1Offset = getRealOffset(0x7DC860);
PhotonNetwork.LoadLevelAsync1 = (void *(*)(monoString*))PhotonNetwork.LoadLevelAsync1Offset;

PhotonPlayer.get_IDOffset = getRealOffset(0x7DDC30);
PhotonPlayer.get_ID = (int(*)(void*))PhotonPlayer.get_IDOffset;

PhotonPlayer.get_NickNameOffset = getRealOffset(0x7DDC38);
PhotonPlayer.get_NickName = (monoString *(*)(void*))PhotonPlayer.get_NickNameOffset;

PhotonPlayer.set_NickNameOffset = getRealOffset(0x7DDC40);
PhotonPlayer.set_NickName = (void(*)(void*, monoString*))PhotonPlayer.set_NickNameOffset;

PhotonPlayer.get_UserIdOffset = getRealOffset(0x7DDD54);
PhotonPlayer.get_UserId = (monoString *(*)(void*))PhotonPlayer.get_UserIdOffset;

PhotonPlayer.set_UserIdOffset = getRealOffset(0x7DDD5C);
PhotonPlayer.set_UserId = (void(*)(void*, monoString*))PhotonPlayer.set_UserIdOffset;

PhotonPlayer.get_IsMasterClientOffset = getRealOffset(0x7DA530);
PhotonPlayer.get_IsMasterClient = (bool(*)(void*))PhotonPlayer.get_IsMasterClientOffset;

PhotonPlayer.get_IsInactiveOffset = getRealOffset(0x7DDD64);
PhotonPlayer.get_IsInactive = (bool(*)(void*))PhotonPlayer.get_IsInactiveOffset;

PhotonPlayer.set_IsInactiveOffset = getRealOffset(0x7DDD6C);
PhotonPlayer.set_IsInactive = (void(*)(void*, bool))PhotonPlayer.set_IsInactiveOffset;

PhotonPlayer.get_CustomPropertiesOffset = getRealOffset(0x7DDD74);
PhotonPlayer.get_CustomProperties = (void *(*)(void*))PhotonPlayer.get_CustomPropertiesOffset;

PhotonPlayer.set_CustomPropertiesOffset = getRealOffset(0x7DDD7C);
PhotonPlayer.set_CustomProperties = (void(*)(void*, void *))PhotonPlayer.set_CustomPropertiesOffset;

PhotonPlayer.get_AllPropertiesOffset = getRealOffset(0x7DDD84);
PhotonPlayer.get_AllProperties = (void *(*)(void*))PhotonPlayer.get_AllPropertiesOffset;

PhotonPlayer.ctor1Offset = getRealOffset(0x7DDF30);
PhotonPlayer.ctor1 = (void(*)(void*, bool, int, void *))PhotonPlayer.ctor1Offset;

PhotonPlayer.GetHashCodeOffset = getRealOffset(0x7DE0C8);
PhotonPlayer.GetHashCode = (int(*)(void*))PhotonPlayer.GetHashCodeOffset;

PhotonPlayer.InternalChangeLocalIDOffset = getRealOffset(0x7DE0D0);
PhotonPlayer.InternalChangeLocalID = (void(*)(void*, int))PhotonPlayer.InternalChangeLocalIDOffset;

PhotonPlayer.InternalCachePropertiesOffset = getRealOffset(0x7D80EC);
PhotonPlayer.InternalCacheProperties = (void(*)(void*, void *))PhotonPlayer.InternalCachePropertiesOffset;

PhotonPlayer.SetCustomPropertiesOffset = getRealOffset(0x7D7D90);
PhotonPlayer.SetCustomProperties = (void(*)(void*, void *, void *, bool))PhotonPlayer.SetCustomPropertiesOffset;

PhotonPlayer.FindOffset = getRealOffset(0x7DE170);
PhotonPlayer.Find = (void *(*)(int))PhotonPlayer.FindOffset;

PhotonPlayer.GetOffset = getRealOffset(0x7DE244);
PhotonPlayer.Get = (void *(*)(void*, int))PhotonPlayer.GetOffset;

PhotonPlayer.GetNextOffset = getRealOffset(0x7DE24C);
PhotonPlayer.GetNext = (void *(*)(void*))PhotonPlayer.GetNextOffset;

PhotonPlayer.GetNextForOffset = getRealOffset(0x7DE514);
PhotonPlayer.GetNextFor = (void *(*)(void*, void *))PhotonPlayer.GetNextForOffset;

PhotonPlayer.GetNextFor1Offset = getRealOffset(0x7DE254);
PhotonPlayer.GetNextFor1 = (void *(*)(void*, int))PhotonPlayer.GetNextFor1Offset;

PhotonPlayer.CompareToOffset = getRealOffset(0x7DE528);
PhotonPlayer.CompareTo = (int(*)(void*, void *))PhotonPlayer.CompareToOffset;

PhotonPlayer.CompareTo1Offset = getRealOffset(0x7DE590);
PhotonPlayer.CompareTo1 = (int(*)(void*, int))PhotonPlayer.CompareTo1Offset;

PhotonPlayer.Equals1Offset = getRealOffset(0x7DE5D4);
PhotonPlayer.Equals1 = (bool(*)(void*, void *))PhotonPlayer.Equals1Offset;

PhotonPlayer.Equals2Offset = getRealOffset(0x7DE63C);
PhotonPlayer.Equals2 = (bool(*)(void*, int))PhotonPlayer.Equals2Offset;

PhotonPlayer.ToStringOffset = getRealOffset(0x7DE680);
PhotonPlayer.ToString = (monoString *(*)(void*))PhotonPlayer.ToStringOffset;

PhotonPlayer.ToStringFullOffset = getRealOffset(0x7DE7F0);
PhotonPlayer.ToStringFull = (monoString *(*)(void*))PhotonPlayer.ToStringFullOffset;

PhotonPlayer.get_nameOffset = getRealOffset(0x7DEA34);
PhotonPlayer.get_name = (monoString *(*)(void*))PhotonPlayer.get_nameOffset;

PhotonPlayer.set_nameOffset = getRealOffset(0x7DEA3C);
PhotonPlayer.set_name = (void(*)(void*, monoString*))PhotonPlayer.set_nameOffset;

PhotonPlayer.get_userIdOffset = getRealOffset(0x7DEA40);
PhotonPlayer.get_userId = (monoString *(*)(void*))PhotonPlayer.get_userIdOffset;

PhotonPlayer.set_userIdOffset = getRealOffset(0x7DEA48);
PhotonPlayer.set_userId = (void(*)(void*, monoString*))PhotonPlayer.set_userIdOffset;

PhotonPlayer.get_isLocalOffset = getRealOffset(0x7DEA50);
PhotonPlayer.get_isLocal = (bool(*)(void*))PhotonPlayer.get_isLocalOffset;

PhotonPlayer.get_isMasterClientOffset = getRealOffset(0x7DEA58);
PhotonPlayer.get_isMasterClient = (bool(*)(void*))PhotonPlayer.get_isMasterClientOffset;

PhotonPlayer.get_isInactiveOffset = getRealOffset(0x7DEA5C);
PhotonPlayer.get_isInactive = (bool(*)(void*))PhotonPlayer.get_isInactiveOffset;

PhotonPlayer.set_isInactiveOffset = getRealOffset(0x7DEA64);
PhotonPlayer.set_isInactive = (void(*)(void*, bool))PhotonPlayer.set_isInactiveOffset;

PhotonPlayer.get_customPropertiesOffset = getRealOffset(0x7DEA6C);
PhotonPlayer.get_customProperties = (void *(*)(void*))PhotonPlayer.get_customPropertiesOffset;

PhotonPlayer.set_customPropertiesOffset = getRealOffset(0x7DEA74);
PhotonPlayer.set_customProperties = (void(*)(void*, void *))PhotonPlayer.set_customPropertiesOffset;

PhotonPlayer.get_allPropertiesOffset = getRealOffset(0x7DEA7C);
PhotonPlayer.get_allProperties = (void *(*)(void*))PhotonPlayer.get_allPropertiesOffset;

PhotonStatsGui.StartOffset = getRealOffset(0x7DEFA0);
PhotonStatsGui.Start = (void(*)(void*))PhotonStatsGui.StartOffset;

PhotonStatsGui.UpdateOffset = getRealOffset(0x7DF004);
PhotonStatsGui.Update = (void(*)(void*))PhotonStatsGui.UpdateOffset;

PhotonStatsGui.OnGUIOffset = getRealOffset(0x7DF050);
PhotonStatsGui.OnGUI = (void(*)(void*))PhotonStatsGui.OnGUIOffset;

PhotonStatsGui.TrafficStatsWindowOffset = getRealOffset(0x7DF2B4);
PhotonStatsGui.TrafficStatsWindow = (void(*)(void*, int))PhotonStatsGui.TrafficStatsWindowOffset;

PhotonStreamQueue.BeginWritePackageOffset = getRealOffset(0x7E1AE0);
PhotonStreamQueue.BeginWritePackage = (void(*)(void*))PhotonStreamQueue.BeginWritePackageOffset;

PhotonStreamQueue.ResetOffset = getRealOffset(0x7CA1A4);
PhotonStreamQueue.Reset = (void(*)(void*))PhotonStreamQueue.ResetOffset;

PhotonStreamQueue.HasQueuedObjectsOffset = getRealOffset(0x7CB390);
PhotonStreamQueue.HasQueuedObjects = (bool(*)(void*))PhotonStreamQueue.HasQueuedObjectsOffset;

PhotonStreamQueue.ReceiveNextOffset = getRealOffset(0x7CB3A4);
PhotonStreamQueue.SerializeOffset = getRealOffset(0x7CC488);
PhotonStreamQueue.Serialize = (void(*)(void*, void *))PhotonStreamQueue.SerializeOffset;

PhotonStreamQueue.DeserializeOffset = getRealOffset(0x7CC62C);
PhotonStreamQueue.Deserialize = (void(*)(void*, void *))PhotonStreamQueue.DeserializeOffset;

PhotonView.get_prefixOffset = getRealOffset(0x7E4778);
PhotonView.get_prefix = (int(*)(void*))PhotonView.get_prefixOffset;

PhotonView.set_prefixOffset = getRealOffset(0x7E4850);
PhotonView.set_prefix = (void(*)(void*, int))PhotonView.set_prefixOffset;

PhotonView.get_instantiationDataOffset = getRealOffset(0x7E4858);
PhotonView.get_viewIDOffset = getRealOffset(0x7E4914);
PhotonView.get_viewID = (int(*)(void*))PhotonView.get_viewIDOffset;

PhotonView.set_viewIDOffset = getRealOffset(0x7E491C);
PhotonView.set_viewID = (void(*)(void*, int))PhotonView.set_viewIDOffset;

PhotonView.get_isSceneViewOffset = getRealOffset(0x7E4A2C);
PhotonView.get_isSceneView = (bool(*)(void*))PhotonView.get_isSceneViewOffset;

PhotonView.get_ownerOffset = getRealOffset(0x7E4ACC);
PhotonView.get_owner = (void *(*)(void*))PhotonView.get_ownerOffset;

PhotonView.get_OwnerActorNrOffset = getRealOffset(0x7E4AD4);
PhotonView.get_OwnerActorNr = (int(*)(void*))PhotonView.get_OwnerActorNrOffset;

PhotonView.get_isOwnerActiveOffset = getRealOffset(0x7E4ADC);
PhotonView.get_isOwnerActive = (bool(*)(void*))PhotonView.get_isOwnerActiveOffset;

PhotonView.get_CreatorActorNrOffset = getRealOffset(0x7E4A44);
PhotonView.get_CreatorActorNr = (int(*)(void*))PhotonView.get_CreatorActorNrOffset;

PhotonView.get_isMineOffset = getRealOffset(0x7C9CF4);
PhotonView.get_isMine = (bool(*)(void*))PhotonView.get_isMineOffset;

PhotonView.AwakeOffset = getRealOffset(0x7E4BA8);
PhotonView.Awake = (void(*)(void*))PhotonView.AwakeOffset;

PhotonView.RequestOwnershipOffset = getRealOffset(0x7E4C84);
PhotonView.RequestOwnership = (void(*)(void*))PhotonView.RequestOwnershipOffset;

PhotonView.TransferOwnershipOffset = getRealOffset(0x7E4D28);
PhotonView.TransferOwnership = (void(*)(void*, void *))PhotonView.TransferOwnershipOffset;

PhotonView.TransferOwnership1Offset = getRealOffset(0x7E4D54);
PhotonView.TransferOwnership1 = (void(*)(void*, int))PhotonView.TransferOwnership1Offset;

PhotonView.OnMasterClientSwitchedOffset = getRealOffset(0x7E4DFC);
PhotonView.OnMasterClientSwitched = (void(*)(void*, void *))PhotonView.OnMasterClientSwitchedOffset;

PhotonView.OnDestroyOffset = getRealOffset(0x7E4E64);
PhotonView.OnDestroy = (void(*)(void*))PhotonView.OnDestroyOffset;

PhotonView.SerializeViewOffset = getRealOffset(0x7E5024);
PhotonView.SerializeView = (void(*)(void*, void *, int))PhotonView.SerializeViewOffset;

PhotonView.DeserializeViewOffset = getRealOffset(0x7E569C);
PhotonView.DeserializeView = (void(*)(void*, void *, int))PhotonView.DeserializeViewOffset;

PhotonView.DeserializeComponentOffset = getRealOffset(0x7E5780);
PhotonView.DeserializeComponent = (void(*)(void*, void *, void *, int))PhotonView.DeserializeComponentOffset;

PhotonView.SerializeComponentOffset = getRealOffset(0x7E5108);
PhotonView.SerializeComponent = (void(*)(void*, void *, void *, int))PhotonView.SerializeComponentOffset;

PhotonView.ExecuteComponentOnSerializeOffset = getRealOffset(0x7E5EF8);
PhotonView.ExecuteComponentOnSerialize = (void(*)(void*, void *, void *, int))PhotonView.ExecuteComponentOnSerializeOffset;

PhotonView.RefreshRpcMonoBehaviourCacheOffset = getRealOffset(0x7E636C);
PhotonView.RefreshRpcMonoBehaviourCache = (void(*)(void*))PhotonView.RefreshRpcMonoBehaviourCacheOffset;

PhotonView.GetOffset = getRealOffset(0x7C9164);
PhotonView.Get = (void *(*)(void *))PhotonView.GetOffset;

PhotonView.Get1Offset = getRealOffset(0x7E6644);
PhotonView.Get1 = (void *(*)(void *))PhotonView.Get1Offset;

PhotonView.FindOffset = getRealOffset(0x7E66AC);
PhotonView.Find = (void *(*)(int))PhotonView.FindOffset;

PhotonView.ToStringOffset = getRealOffset(0x7E6744);
PhotonView.ToString = (monoString *(*)(void*))PhotonView.ToStringOffset;

PhotonPingManager.get_BestRegionOffset = getRealOffset(0x7CEF80);
PhotonPingManager.get_BestRegion = (void *(*)(void*))PhotonPingManager.get_BestRegionOffset;

PhotonPingManager.get_DoneOffset = getRealOffset(0x7CEF70);
PhotonPingManager.get_Done = (bool(*)(void*))PhotonPingManager.get_DoneOffset;

PhotonPingManager.PingSocketOffset = getRealOffset(0x7CEED8);
PhotonPingManager.PingSocket = (void *(*)(void*, void *))PhotonPingManager.PingSocketOffset;

PhotonPingManager.ResolveHostOffset = getRealOffset(0x7DD09C);
PhotonPingManager.ResolveHost = (monoString *(*)(monoString*))PhotonPingManager.ResolveHostOffset;

Room.get_NameOffset = getRealOffset(0x60A008);
Room.get_Name = (monoString *(*)(void*))Room.get_NameOffset;

Room.set_NameOffset = getRealOffset(0x60A010);
Room.set_Name = (void(*)(void*, monoString*))Room.set_NameOffset;

Room.get_IsOpenOffset = getRealOffset(0x60A018);
Room.get_IsOpen = (bool(*)(void*))Room.get_IsOpenOffset;

Room.set_IsOpenOffset = getRealOffset(0x60A020);
Room.set_IsOpen = (void(*)(void*, bool))Room.set_IsOpenOffset;

Room.get_IsVisibleOffset = getRealOffset(0x60A28C);
Room.get_IsVisible = (bool(*)(void*))Room.get_IsVisibleOffset;

Room.set_IsVisibleOffset = getRealOffset(0x60A294);
Room.set_IsVisible = (void(*)(void*, bool))Room.set_IsVisibleOffset;

Room.get_PropertiesListedInLobbyOffset = getRealOffset(0x60A500);
Room.get_AutoCleanUpOffset = getRealOffset(0x60A510);
Room.get_AutoCleanUp = (bool(*)(void*))Room.get_AutoCleanUpOffset;

Room.get_MaxPlayersOffset = getRealOffset(0x60A518);
Room.get_MaxPlayers = (int(*)(void*))Room.get_MaxPlayersOffset;

Room.set_MaxPlayersOffset = getRealOffset(0x60A520);
Room.set_MaxPlayers = (void(*)(void*, int))Room.set_MaxPlayersOffset;

Room.get_PlayerCountOffset = getRealOffset(0x60A804);
Room.get_PlayerCount = (int(*)(void*))Room.get_PlayerCountOffset;

Room.get_ExpectedUsersOffset = getRealOffset(0x60A8C4);
Room.get_PlayerTtlOffset = getRealOffset(0x60A8CC);
Room.get_PlayerTtl = (int(*)(void*))Room.get_PlayerTtlOffset;

Room.set_PlayerTtlOffset = getRealOffset(0x60A8D4);
Room.set_PlayerTtl = (void(*)(void*, int))Room.set_PlayerTtlOffset;

Room.get_EmptyRoomTtlOffset = getRealOffset(0x60AABC);
Room.get_EmptyRoomTtl = (int(*)(void*))Room.get_EmptyRoomTtlOffset;

Room.set_EmptyRoomTtlOffset = getRealOffset(0x60AAC4);
Room.set_EmptyRoomTtl = (void(*)(void*, int))Room.set_EmptyRoomTtlOffset;

Room.get_MasterClientIdOffset = getRealOffset(0x60ACAC);
Room.get_MasterClientId = (int(*)(void*))Room.get_MasterClientIdOffset;

Room.set_MasterClientIdOffset = getRealOffset(0x60ACB4);
Room.set_MasterClientId = (void(*)(void*, int))Room.set_MasterClientIdOffset;

Room.SetCustomPropertiesOffset = getRealOffset(0x60B70C);
Room.SetCustomProperties = (void(*)(void*, void *, void *, bool))Room.SetCustomPropertiesOffset;

Room.ClearExpectedUsersOffset = getRealOffset(0x60BBD4);
Room.ClearExpectedUsers = (void(*)(void*))Room.ClearExpectedUsersOffset;

Room.ToStringOffset = getRealOffset(0x60BEAC);
Room.ToString = (monoString *(*)(void*))Room.ToStringOffset;

Room.ToStringFullOffset = getRealOffset(0x60C150);
Room.ToStringFull = (monoString *(*)(void*))Room.ToStringFullOffset;

Room.get_nameOffset = getRealOffset(0x60C47C);
Room.get_name = (monoString *(*)(void*))Room.get_nameOffset;

Room.set_nameOffset = getRealOffset(0x60C484);
Room.set_name = (void(*)(void*, monoString*))Room.set_nameOffset;

Room.get_openOffset = getRealOffset(0x60C48C);
Room.get_open = (bool(*)(void*))Room.get_openOffset;

Room.set_openOffset = getRealOffset(0x60C494);
Room.set_open = (void(*)(void*, bool))Room.set_openOffset;

Room.get_visibleOffset = getRealOffset(0x60C498);
Room.get_visible = (bool(*)(void*))Room.get_visibleOffset;

Room.set_visibleOffset = getRealOffset(0x60C4A0);
Room.set_visible = (void(*)(void*, bool))Room.set_visibleOffset;

Room.get_propertiesListedInLobbyOffset = getRealOffset(0x60C4A4);
Room.get_autoCleanUpOffset = getRealOffset(0x60C4B4);
Room.get_autoCleanUp = (bool(*)(void*))Room.get_autoCleanUpOffset;

Room.get_maxPlayersOffset = getRealOffset(0x60C4BC);
Room.get_maxPlayers = (int(*)(void*))Room.get_maxPlayersOffset;

Room.set_maxPlayersOffset = getRealOffset(0x60C4C4);
Room.set_maxPlayers = (void(*)(void*, int))Room.set_maxPlayersOffset;

Room.get_playerCountOffset = getRealOffset(0x60C4C8);
Room.get_playerCount = (int(*)(void*))Room.get_playerCountOffset;

Room.get_expectedUsersOffset = getRealOffset(0x60C4CC);
Room.get_masterClientIdOffset = getRealOffset(0x60C4D4);
Room.get_masterClientId = (int(*)(void*))Room.get_masterClientIdOffset;

Room.set_masterClientIdOffset = getRealOffset(0x60C4DC);
Room.set_masterClientId = (void(*)(void*, int))Room.set_masterClientIdOffset;

RoomInfo.get_removedFromListOffset = getRealOffset(0x60C4E4);
RoomInfo.get_removedFromList = (bool(*)(void*))RoomInfo.get_removedFromListOffset;

RoomInfo.set_removedFromListOffset = getRealOffset(0x60C4EC);
RoomInfo.set_removedFromList = (void(*)(void*, bool))RoomInfo.set_removedFromListOffset;

RoomInfo.get_serverSideMasterClientOffset = getRealOffset(0x60C4F4);
RoomInfo.get_serverSideMasterClient = (bool(*)(void*))RoomInfo.get_serverSideMasterClientOffset;

RoomInfo.set_serverSideMasterClientOffset = getRealOffset(0x60C4FC);
RoomInfo.set_serverSideMasterClient = (void(*)(void*, bool))RoomInfo.set_serverSideMasterClientOffset;

RoomInfo.get_CustomPropertiesOffset = getRealOffset(0x60C504);
RoomInfo.get_CustomProperties = (void *(*)(void*))RoomInfo.get_CustomPropertiesOffset;

RoomInfo.get_NameOffset = getRealOffset(0x60C50C);
RoomInfo.get_Name = (monoString *(*)(void*))RoomInfo.get_NameOffset;

RoomInfo.get_PlayerCountOffset = getRealOffset(0x60C514);
RoomInfo.get_PlayerCount = (int(*)(void*))RoomInfo.get_PlayerCountOffset;

RoomInfo.set_PlayerCountOffset = getRealOffset(0x60C51C);
RoomInfo.set_PlayerCount = (void(*)(void*, int))RoomInfo.set_PlayerCountOffset;

RoomInfo.get_IsLocalClientInsideOffset = getRealOffset(0x60C524);
RoomInfo.get_IsLocalClientInside = (bool(*)(void*))RoomInfo.get_IsLocalClientInsideOffset;

RoomInfo.set_IsLocalClientInsideOffset = getRealOffset(0x60C52C);
RoomInfo.set_IsLocalClientInside = (void(*)(void*, bool))RoomInfo.set_IsLocalClientInsideOffset;

RoomInfo.get_MaxPlayersOffset = getRealOffset(0x60C534);
RoomInfo.get_IsOpenOffset = getRealOffset(0x60C53C);
RoomInfo.get_IsOpen = (bool(*)(void*))RoomInfo.get_IsOpenOffset;

RoomInfo.get_IsVisibleOffset = getRealOffset(0x60C544);
RoomInfo.get_IsVisible = (bool(*)(void*))RoomInfo.get_IsVisibleOffset;

RoomInfo.GetHashCodeOffset = getRealOffset(0x60C610);
RoomInfo.GetHashCode = (int(*)(void*))RoomInfo.GetHashCodeOffset;

RoomInfo.ToStringOffset = getRealOffset(0x60C640);
RoomInfo.ToString = (monoString *(*)(void*))RoomInfo.ToStringOffset;

RoomInfo.ToStringFullOffset = getRealOffset(0x60C8E0);
RoomInfo.ToStringFull = (monoString *(*)(void*))RoomInfo.ToStringFullOffset;

RoomInfo.InternalCachePropertiesOffset = getRealOffset(0x60AFF8);
RoomInfo.InternalCacheProperties = (void(*)(void*, void *))RoomInfo.InternalCachePropertiesOffset;

RoomInfo.get_customPropertiesOffset = getRealOffset(0x60CC08);
RoomInfo.get_customProperties = (void *(*)(void*))RoomInfo.get_customPropertiesOffset;

RoomInfo.get_nameOffset = getRealOffset(0x60CC10);
RoomInfo.get_name = (monoString *(*)(void*))RoomInfo.get_nameOffset;

RoomInfo.get_playerCountOffset = getRealOffset(0x60CC18);
RoomInfo.get_playerCount = (int(*)(void*))RoomInfo.get_playerCountOffset;

RoomInfo.set_playerCountOffset = getRealOffset(0x60CC20);
RoomInfo.set_playerCount = (void(*)(void*, int))RoomInfo.set_playerCountOffset;

RoomInfo.get_isLocalClientInsideOffset = getRealOffset(0x60CC28);
RoomInfo.get_isLocalClientInside = (bool(*)(void*))RoomInfo.get_isLocalClientInsideOffset;

RoomInfo.set_isLocalClientInsideOffset = getRealOffset(0x60CC30);
RoomInfo.set_isLocalClientInside = (void(*)(void*, bool))RoomInfo.set_isLocalClientInsideOffset;

RoomInfo.get_maxPlayersOffset = getRealOffset(0x60CC38);
RoomInfo.get_openOffset = getRealOffset(0x60CC40);
RoomInfo.get_open = (bool(*)(void*))RoomInfo.get_openOffset;

RoomInfo.get_visibleOffset = getRealOffset(0x60CC48);
RoomInfo.get_visible = (bool(*)(void*))RoomInfo.get_visibleOffset;

Region.ctor1Offset = getRealOffset(0x63AC0C);
Region.ctor1 = (void(*)(void*, int, monoString*, monoString*))Region.ctor1Offset;

Region.ParseOffset = getRealOffset(0x63AC3C);
Region.Parse = (int (*)(monoString*))Region.ParseOffset;

Region.ParseFlagOffset = getRealOffset(0x63AE20);
Region.ParseFlag = (int (*)(int))Region.ParseFlagOffset;

Region.ParseFlag1Offset = getRealOffset(0x63B068);
Region.ParseFlag1 = (int (*)(monoString*))Region.ParseFlag1Offset;

Region.ToStringOffset = getRealOffset(0x63B210);
Region.ToString = (monoString *(*)(void*))Region.ToStringOffset;

ServerSettings.UseCloudBestRegionOffset = getRealOffset(0x61C8C4);
ServerSettings.UseCloudBestRegion = (void(*)(void*, monoString*))ServerSettings.UseCloudBestRegionOffset;

ServerSettings.UseCloudOffset = getRealOffset(0x61C8D4);
ServerSettings.UseCloud = (void(*)(void*, monoString*))ServerSettings.UseCloudOffset;

ServerSettings.UseCloud1Offset = getRealOffset(0x61C8E4);
ServerSettings.UseCloud1 = (void(*)(void*, monoString*, int))ServerSettings.UseCloud1Offset;

ServerSettings.UseMyServerOffset = getRealOffset(0x61C8F8);
ServerSettings.UseMyServer = (void(*)(void*, monoString*, int, monoString*))ServerSettings.UseMyServerOffset;

ServerSettings.IsAppIdOffset = getRealOffset(0x61C980);
ServerSettings.IsAppId = (bool(*)(monoString*))ServerSettings.IsAppIdOffset;

ServerSettings.get_BestRegionCodeInPreferencesOffset = getRealOffset(0x61CA68);
ServerSettings.get_BestRegionCodeInPreferences = (int (*)())ServerSettings.get_BestRegionCodeInPreferencesOffset;

ServerSettings.ResetBestRegionCodeInPreferencesOffset = getRealOffset(0x61CADC);
ServerSettings.ResetBestRegionCodeInPreferences = (void(*)())ServerSettings.ResetBestRegionCodeInPreferencesOffset;

ServerSettings.ToStringOffset = getRealOffset(0x61CB54);
ServerSettings.ToString = (monoString *(*)(void*))ServerSettings.ToStringOffset;

PhotonAnimatorView.AwakeOffset = getRealOffset(0x7C99F4);
PhotonAnimatorView.Awake = (void(*)(void*))PhotonAnimatorView.AwakeOffset;

PhotonAnimatorView.UpdateOffset = getRealOffset(0x7C9B3C);
PhotonAnimatorView.Update = (void(*)(void*))PhotonAnimatorView.UpdateOffset;

PhotonAnimatorView.CacheDiscreteTriggersOffset = getRealOffset(0x7CA5BC);
PhotonAnimatorView.CacheDiscreteTriggers = (void(*)(void*))PhotonAnimatorView.CacheDiscreteTriggersOffset;

PhotonAnimatorView.DoesLayerSynchronizeTypeExistOffset = getRealOffset(0x7CAA9C);
PhotonAnimatorView.DoesLayerSynchronizeTypeExist = (bool(*)(void*, int))PhotonAnimatorView.DoesLayerSynchronizeTypeExistOffset;

PhotonAnimatorView.DoesParameterSynchronizeTypeExistOffset = getRealOffset(0x7CAB9C);
PhotonAnimatorView.DoesParameterSynchronizeTypeExist = (bool(*)(void*, monoString*))PhotonAnimatorView.DoesParameterSynchronizeTypeExistOffset;

PhotonAnimatorView.GetSynchronizedLayersOffset = getRealOffset(0x7CAC9C);
PhotonAnimatorView.GetSynchronizedParametersOffset = getRealOffset(0x7CACA4);
PhotonAnimatorView.GetLayerSynchronizeTypeOffset = getRealOffset(0x7CACAC);
PhotonAnimatorView.GetLayerSynchronizeType = (int (*)(void*, int))PhotonAnimatorView.GetLayerSynchronizeTypeOffset;

PhotonAnimatorView.GetParameterSynchronizeTypeOffset = getRealOffset(0x7CADF0);
PhotonAnimatorView.GetParameterSynchronizeType = (int (*)(void*, monoString*))PhotonAnimatorView.GetParameterSynchronizeTypeOffset;

PhotonAnimatorView.SetLayerSynchronizedOffset = getRealOffset(0x7CAF34);
PhotonAnimatorView.SetLayerSynchronized = (void(*)(void*, int, int))PhotonAnimatorView.SetLayerSynchronizedOffset;

PhotonAnimatorView.SetParameterSynchronizedOffset = getRealOffset(0x7CB104);
PhotonAnimatorView.SetParameterSynchronized = (void(*)(void*, monoString*, int, int))PhotonAnimatorView.SetParameterSynchronizedOffset;

PhotonAnimatorView.SerializeDataContinuouslyOffset = getRealOffset(0x7CA230);
PhotonAnimatorView.SerializeDataContinuously = (void(*)(void*))PhotonAnimatorView.SerializeDataContinuouslyOffset;

PhotonAnimatorView.DeserializeDataContinuouslyOffset = getRealOffset(0x7CA6E4);
PhotonAnimatorView.DeserializeDataContinuously = (void(*)(void*))PhotonAnimatorView.DeserializeDataContinuouslyOffset;

PhotonAnimatorView.SerializeDataDiscretlyOffset = getRealOffset(0x7CB45C);
PhotonAnimatorView.SerializeDataDiscretly = (void(*)(void*, void *))PhotonAnimatorView.SerializeDataDiscretlyOffset;

PhotonAnimatorView.DeserializeDataDiscretlyOffset = getRealOffset(0x7CB894);
PhotonAnimatorView.DeserializeDataDiscretly = (void(*)(void*, void *))PhotonAnimatorView.DeserializeDataDiscretlyOffset;

PhotonAnimatorView.SerializeSynchronizationTypeStateOffset = getRealOffset(0x7CBF54);
PhotonAnimatorView.SerializeSynchronizationTypeState = (void(*)(void*, void *))PhotonAnimatorView.SerializeSynchronizationTypeStateOffset;

PhotonAnimatorView.DeserializeSynchronizationTypeStateOffset = getRealOffset(0x7CC140);
PhotonAnimatorView.DeserializeSynchronizationTypeState = (void(*)(void*, void *))PhotonAnimatorView.DeserializeSynchronizationTypeStateOffset;

PhotonAnimatorView.OnPhotonSerializeViewOffset = getRealOffset(0x7CC324);
PhotonAnimatorView.OnPhotonSerializeView = (void(*)(void*, void *, int))PhotonAnimatorView.OnPhotonSerializeViewOffset;

PhotonRigidbody2DView.AwakeOffset = getRealOffset(0x7DEA80);
PhotonRigidbody2DView.Awake = (void(*)(void*))PhotonRigidbody2DView.AwakeOffset;

PhotonRigidbody2DView.OnPhotonSerializeViewOffset = getRealOffset(0x7DEAE0);
PhotonRigidbody2DView.OnPhotonSerializeView = (void(*)(void*, void *, int))PhotonRigidbody2DView.OnPhotonSerializeViewOffset;

PhotonRigidbodyView.AwakeOffset = getRealOffset(0x7DED08);
PhotonRigidbodyView.Awake = (void(*)(void*))PhotonRigidbodyView.AwakeOffset;

PhotonRigidbodyView.OnPhotonSerializeViewOffset = getRealOffset(0x7DED68);
PhotonRigidbodyView.OnPhotonSerializeView = (void(*)(void*, void *, int))PhotonRigidbodyView.OnPhotonSerializeViewOffset;

PhotonTransformView.get_currentVelocityOffset = getRealOffset(0x7E1F78);
PhotonTransformView.get_currentVelocity = (Vector3 (*)(void*))PhotonTransformView.get_currentVelocityOffset;

PhotonTransformView.AwakeOffset = getRealOffset(0x7E1FA8);
PhotonTransformView.Awake = (void(*)(void*))PhotonTransformView.AwakeOffset;

PhotonTransformView.OnEnableOffset = getRealOffset(0x7E2228);
PhotonTransformView.OnEnable = (void(*)(void*))PhotonTransformView.OnEnableOffset;

PhotonTransformView.get_desiredPositionOffset = getRealOffset(0x7E2234);
PhotonTransformView.get_desiredPosition = (Vector3 (*)(void*))PhotonTransformView.get_desiredPositionOffset;

PhotonTransformView.GotPositionOffset = getRealOffset(0x7E2270);
PhotonTransformView.GotPosition = (void(*)(void*, Vector3))PhotonTransformView.GotPositionOffset;

PhotonTransformView.UpdateOffset = getRealOffset(0x7E241C);
PhotonTransformView.Update = (void(*)(void*))PhotonTransformView.UpdateOffset;

PhotonTransformView.UpdatePositionOffset = getRealOffset(0x7E251C);
PhotonTransformView.UpdatePosition = (void(*)(void*))PhotonTransformView.UpdatePositionOffset;

PhotonTransformView.UpdateRotationOffset = getRealOffset(0x7E25E4);
PhotonTransformView.UpdateRotation = (void(*)(void*))PhotonTransformView.UpdateRotationOffset;

PhotonTransformView.UpdateScaleOffset = getRealOffset(0x7E26B4);
PhotonTransformView.UpdateScale = (void(*)(void*))PhotonTransformView.UpdateScaleOffset;

PhotonTransformView.SetSynchronizedValuesOffset = getRealOffset(0x7E3018);
PhotonTransformView.SetSynchronizedValues = (void(*)(void*, Vector3, float))PhotonTransformView.SetSynchronizedValuesOffset;

PhotonTransformView.OnPhotonSerializeViewOffset = getRealOffset(0x7E3070);
PhotonTransformView.OnPhotonSerializeView = (void(*)(void*, void *, int))PhotonTransformView.OnPhotonSerializeViewOffset;

PhotonTransformView.DoDrawEstimatedPositionErrorOffset = getRealOffset(0x7E36B0);
PhotonTransformView.DoDrawEstimatedPositionError = (void(*)(void*))PhotonTransformView.DoDrawEstimatedPositionErrorOffset;

PhotonTransformViewPositionControl.get_currentVelocityOffset = getRealOffset(0x7E3E80);
PhotonTransformViewPositionControl.get_currentVelocity = (Vector3 (*)(void*))PhotonTransformViewPositionControl.get_currentVelocityOffset;

PhotonTransformViewPositionControl.GotPositionOffset = getRealOffset(0x7E22C0);
PhotonTransformViewPositionControl.GotPosition = (void(*)(void*, Vector3))PhotonTransformViewPositionControl.GotPositionOffset;

PhotonTransformViewPositionControl.GetOldestStoredNetworkPositionOffset = getRealOffset(0x7E3E94);
PhotonTransformViewPositionControl.GetOldestStoredNetworkPosition = (Vector3 (*)(void*))PhotonTransformViewPositionControl.GetOldestStoredNetworkPositionOffset;

PhotonTransformViewPositionControl.SetSynchronizedValuesOffset = getRealOffset(0x7E305C);
PhotonTransformViewPositionControl.SetSynchronizedValues = (void(*)(void*, Vector3, float))PhotonTransformViewPositionControl.SetSynchronizedValuesOffset;

PhotonTransformViewPositionControl.UpdatePositionOffset = getRealOffset(0x7E277C);
PhotonTransformViewPositionControl.UpdatePosition = (Vector3 (*)(void*, Vector3))PhotonTransformViewPositionControl.UpdatePositionOffset;

PhotonTransformViewPositionControl.GetNetworkPositionOffset = getRealOffset(0x7E4354);
PhotonTransformViewPositionControl.GetNetworkPosition = (Vector3 (*)(void*))PhotonTransformViewPositionControl.GetNetworkPositionOffset;

PhotonTransformViewPositionControl.GetExtrapolatedPositionOffsetOffset = getRealOffset(0x7E3F58);
PhotonTransformViewPositionControl.GetExtrapolatedPositionOffset = (Vector3 (*)(void*))PhotonTransformViewPositionControl.GetExtrapolatedPositionOffsetOffset;

PhotonTransformViewPositionControl.OnPhotonSerializeViewOffset = getRealOffset(0x7E3358);
PhotonTransformViewPositionControl.OnPhotonSerializeView = (void(*)(void*, Vector3, void *, int))PhotonTransformViewPositionControl.OnPhotonSerializeViewOffset;

PhotonTransformViewPositionControl.SerializeDataOffset = getRealOffset(0x7E4368);
PhotonTransformViewPositionControl.SerializeData = (void(*)(void*, Vector3, void *, int))PhotonTransformViewPositionControl.SerializeDataOffset;

PhotonTransformViewPositionControl.DeserializeDataOffset = getRealOffset(0x7E44B8);
PhotonTransformViewPositionControl.DeserializeData = (void(*)(void*, void *, int))PhotonTransformViewPositionControl.DeserializeDataOffset;

PhotonTransformViewRotationControl.GetNetworkRotationOffset = getRealOffset(0x7E4754);
PhotonTransformViewRotationControl.GetNetworkRotation = (int (*)(void*))PhotonTransformViewRotationControl.GetNetworkRotationOffset;

PhotonTransformViewRotationControl.GetRotationOffset = getRealOffset(0x7E2C90);
PhotonTransformViewRotationControl.GetRotation = (int (*)(void*, int))PhotonTransformViewRotationControl.GetRotationOffset;

PhotonTransformViewRotationControl.OnPhotonSerializeViewOffset = getRealOffset(0x7E344C);
PhotonTransformViewRotationControl.OnPhotonSerializeView = (void(*)(void*, int, void *, int))PhotonTransformViewRotationControl.OnPhotonSerializeViewOffset;

PhotonTransformViewScaleControl.GetNetworkScaleOffset = getRealOffset(0x7E4764);
PhotonTransformViewScaleControl.GetNetworkScale = (Vector3 (*)(void*))PhotonTransformViewScaleControl.GetNetworkScaleOffset;

PhotonTransformViewScaleControl.GetScaleOffset = getRealOffset(0x7E2E6C);
PhotonTransformViewScaleControl.GetScale = (Vector3 (*)(void*, Vector3))PhotonTransformViewScaleControl.GetScaleOffset;

PhotonTransformViewScaleControl.OnPhotonSerializeViewOffset = getRealOffset(0x7E357C);
PhotonTransformViewScaleControl.OnPhotonSerializeView = (void(*)(void*, Vector3, void *, int))PhotonTransformViewScaleControl.OnPhotonSerializeViewOffset;

ConnectAndJoinRandom.StartOffset = getRealOffset(0x81AD88);
ConnectAndJoinRandom.Start = (void(*)(void*))ConnectAndJoinRandom.StartOffset;

ConnectAndJoinRandom.UpdateOffset = getRealOffset(0x81AE00);
ConnectAndJoinRandom.Update = (void(*)(void*))ConnectAndJoinRandom.UpdateOffset;

ConnectAndJoinRandom.OnConnectedToMasterOffset = getRealOffset(0x81AF88);
ConnectAndJoinRandom.OnConnectedToMaster = (void(*)(void*))ConnectAndJoinRandom.OnConnectedToMasterOffset;

ConnectAndJoinRandom.OnJoinedLobbyOffset = getRealOffset(0x81B040);
ConnectAndJoinRandom.OnJoinedLobby = (void(*)(void*))ConnectAndJoinRandom.OnJoinedLobbyOffset;

ConnectAndJoinRandom.OnPhotonRandomJoinFailedOffset = getRealOffset(0x81B0F8);
ConnectAndJoinRandom.OnPhotonRandomJoinFailed = (void(*)(void*))ConnectAndJoinRandom.OnPhotonRandomJoinFailedOffset;

ConnectAndJoinRandom.OnFailedToConnectToPhotonOffset = getRealOffset(0x81B1F0);
ConnectAndJoinRandom.OnFailedToConnectToPhoton = (void(*)(void*, int))ConnectAndJoinRandom.OnFailedToConnectToPhotonOffset;

ConnectAndJoinRandom.OnJoinedRoomOffset = getRealOffset(0x81B2B0);
ConnectAndJoinRandom.OnJoinedRoom = (void(*)(void*))ConnectAndJoinRandom.OnJoinedRoomOffset;

CullArea.get_CellCountOffset = getRealOffset(0x8279BC);
CullArea.get_CellCount = (int(*)(void*))CullArea.get_CellCountOffset;

CullArea.set_CellCountOffset = getRealOffset(0x8279C4);
CullArea.set_CellCount = (void(*)(void*, int))CullArea.set_CellCountOffset;

CullArea.get_CellTreeOffset = getRealOffset(0x8279CC);
CullArea.get_CellTree = (void *(*)(void*))CullArea.get_CellTreeOffset;

CullArea.set_CellTreeOffset = getRealOffset(0x8279D4);
CullArea.set_CellTree = (void(*)(void*, void *))CullArea.set_CellTreeOffset;

CullArea.get_MapOffset = getRealOffset(0x8279DC);
CullArea.AwakeOffset = getRealOffset(0x8279EC);
CullArea.Awake = (void(*)(void*))CullArea.AwakeOffset;

CullArea.OnDrawGizmosOffset = getRealOffset(0x8281E0);
CullArea.OnDrawGizmos = (void(*)(void*))CullArea.OnDrawGizmosOffset;

CullArea.CreateCellHierarchyOffset = getRealOffset(0x8279F8);
CullArea.CreateCellHierarchy = (void(*)(void*))CullArea.CreateCellHierarchyOffset;

CullArea.CreateChildCellsOffset = getRealOffset(0x8282F4);
CullArea.CreateChildCells = (void(*)(void*, void *, int))CullArea.CreateChildCellsOffset;

CullArea.DrawCellsOffset = getRealOffset(0x828230);
CullArea.DrawCells = (void(*)(void*))CullArea.DrawCellsOffset;

CullArea.IsCellCountAllowedOffset = getRealOffset(0x82825C);
CullArea.IsCellCountAllowed = (bool(*)(void*))CullArea.IsCellCountAllowedOffset;

CullArea.GetActiveCellsOffset = getRealOffset(0x8287CC);
CellTree.get_RootNodeOffset = getRealOffset(0x77E648);
CellTree.get_RootNode = (void *(*)(void*))CellTree.get_RootNodeOffset;

CellTree.set_RootNodeOffset = getRealOffset(0x77E650);
CellTree.set_RootNode = (void(*)(void*, void *))CellTree.set_RootNodeOffset;

CellTree.ctor1Offset = getRealOffset(0x77E660);
CellTree.ctor1 = (void(*)(void*, void *))CellTree.ctor1Offset;

CellTreeNode.AddChildOffset = getRealOffset(0x77E6B8);
CellTreeNode.AddChild = (void(*)(void*, void *))CellTreeNode.AddChildOffset;

CellTreeNode.DrawOffset = getRealOffset(0x77E770);
CellTreeNode.Draw = (void(*)(void*))CellTreeNode.DrawOffset;

CellTreeNode.IsPointInsideCellOffset = getRealOffset(0x77EAD0);
CellTreeNode.IsPointInsideCell = (bool(*)(void*, bool, Vector3))CellTreeNode.IsPointInsideCellOffset;

CellTreeNode.IsPointNearCellOffset = getRealOffset(0x77E9A8);
CellTreeNode.IsPointNearCell = (bool(*)(void*, bool, Vector3))CellTreeNode.IsPointNearCellOffset;

InRoomChat.StartOffset = getRealOffset(0x80A578);
InRoomChat.Start = (void(*)(void*))InRoomChat.StartOffset;

InRoomChat.OnGUIOffset = getRealOffset(0x80A5D4);
InRoomChat.OnGUI = (void(*)(void*))InRoomChat.OnGUIOffset;

InRoomChat.ChatOffset = getRealOffset(0x80ADEC);
InRoomChat.Chat = (void(*)(void*, monoString*, int))InRoomChat.ChatOffset;

InRoomChat.AddLineOffset = getRealOffset(0x80AF00);
InRoomChat.AddLine = (void(*)(void*, monoString*))InRoomChat.AddLineOffset;

InputToEvent.get_goPointedAtOffset = getRealOffset(0x80B524);
InputToEvent.get_goPointedAt = (void *(*)())InputToEvent.get_goPointedAtOffset;

InputToEvent.set_goPointedAtOffset = getRealOffset(0x80B57C);
InputToEvent.set_goPointedAt = (void(*)(void *))InputToEvent.set_goPointedAtOffset;

InputToEvent.get_DragVectorOffset = getRealOffset(0x80B5D8);
InputToEvent.get_DragVector = (Vector2 (*)(void*))InputToEvent.get_DragVectorOffset;

InputToEvent.StartOffset = getRealOffset(0x80B6D0);
InputToEvent.Start = (void(*)(void*))InputToEvent.StartOffset;

InputToEvent.UpdateOffset = getRealOffset(0x80B730);
InputToEvent.Update = (void(*)(void*))InputToEvent.UpdateOffset;

InputToEvent.PressOffset = getRealOffset(0x80BCA8);
InputToEvent.Press = (void(*)(void*, Vector2))InputToEvent.PressOffset;

InputToEvent.ReleaseOffset = getRealOffset(0x80BD94);
InputToEvent.Release = (void(*)(void*, Vector2))InputToEvent.ReleaseOffset;

InputToEvent.RaycastObjectOffset = getRealOffset(0x80BB30);
InputToEvent.RaycastObject = (void *(*)(void*, Vector2))InputToEvent.RaycastObjectOffset;

ManualPhotonViewAllocator.AllocateManualPhotonViewOffset = getRealOffset(0x9F8644);
ManualPhotonViewAllocator.AllocateManualPhotonView = (void(*)(void*))ManualPhotonViewAllocator.AllocateManualPhotonViewOffset;

ManualPhotonViewAllocator.InstantiateRpcOffset = getRealOffset(0x9F8868);
ManualPhotonViewAllocator.InstantiateRpc = (void(*)(void*, int))ManualPhotonViewAllocator.InstantiateRpcOffset;

MoveByKeys.StartOffset = getRealOffset(0x528C4C);
MoveByKeys.Start = (void(*)(void*))MoveByKeys.StartOffset;

MoveByKeys.FixedUpdateOffset = getRealOffset(0x528D24);
MoveByKeys.FixedUpdate = (void(*)(void*))MoveByKeys.FixedUpdateOffset;

NetworkCullingHandler.OnEnableOffset = getRealOffset(0x52BE50);
NetworkCullingHandler.OnEnable = (void(*)(void*))NetworkCullingHandler.OnEnableOffset;

NetworkCullingHandler.StartOffset = getRealOffset(0x52C028);
NetworkCullingHandler.Start = (void(*)(void*))NetworkCullingHandler.StartOffset;

NetworkCullingHandler.UpdateOffset = getRealOffset(0x52C194);
NetworkCullingHandler.Update = (void(*)(void*))NetworkCullingHandler.UpdateOffset;

NetworkCullingHandler.OnGUIOffset = getRealOffset(0x52C740);
NetworkCullingHandler.OnGUI = (void(*)(void*))NetworkCullingHandler.OnGUIOffset;

NetworkCullingHandler.HaveActiveCellsChangedOffset = getRealOffset(0x52C2D0);
NetworkCullingHandler.HaveActiveCellsChanged = (bool(*)(void*))NetworkCullingHandler.HaveActiveCellsChangedOffset;

NetworkCullingHandler.UpdateInterestGroupsOffset = getRealOffset(0x52C508);
NetworkCullingHandler.UpdateInterestGroups = (void(*)(void*))NetworkCullingHandler.UpdateInterestGroupsOffset;

NetworkCullingHandler.OnPhotonSerializeViewOffset = getRealOffset(0x52CBF0);
NetworkCullingHandler.OnPhotonSerializeView = (void(*)(void*, void *, int))NetworkCullingHandler.OnPhotonSerializeViewOffset;

OnClickDestroy.OnClickOffset = getRealOffset(0x550E70);
OnClickDestroy.OnClick = (void(*)(void*))OnClickDestroy.OnClickOffset;

OnClickDestroy.DestroyRpcOffset = getRealOffset(0x551004);
OnClickDestroy.DestroyRpc = (void *(*)(void*))OnClickDestroy.DestroyRpcOffset;

OnClickInstantiate.OnClickOffset = getRealOffset(0x5512A0);
OnClickInstantiate.OnClick = (void(*)(void*))OnClickInstantiate.OnClickOffset;

OnClickInstantiate.OnGUIOffset = getRealOffset(0x5515C4);
OnClickInstantiate.OnGUI = (void(*)(void*))OnClickInstantiate.OnGUIOffset;

OnJoinedInstantiate.OnJoinedRoomOffset = getRealOffset(0x551874);
OnJoinedInstantiate.OnJoinedRoom = (void(*)(void*))OnJoinedInstantiate.OnJoinedRoomOffset;

OnStartDelete.StartOffset = getRealOffset(0x551C04);
OnStartDelete.Start = (void(*)(void*))OnStartDelete.StartOffset;

PickupItem.get_ViewIDOffset = getRealOffset(0x7E80AC);
PickupItem.get_ViewID = (int(*)(void*))PickupItem.get_ViewIDOffset;

PickupItem.OnTriggerEnterOffset = getRealOffset(0x7E80D0);
PickupItem.OnTriggerEnter = (void(*)(void*, void *))PickupItem.OnTriggerEnterOffset;

PickupItem.OnPhotonSerializeViewOffset = getRealOffset(0x7E82F8);
PickupItem.OnPhotonSerializeView = (void(*)(void*, void *, int))PickupItem.OnPhotonSerializeViewOffset;

PickupItem.PickupOffset = getRealOffset(0x7E81B8);
PickupItem.Pickup = (void(*)(void*))PickupItem.PickupOffset;

PickupItem.DropOffset = getRealOffset(0x7E849C);
PickupItem.Drop = (void(*)(void*))PickupItem.DropOffset;

PickupItem.Drop1Offset = getRealOffset(0x7E85D4);
PickupItem.Drop1 = (void(*)(void*, Vector3))PickupItem.Drop1Offset;

PickupItem.PunPickupOffset = getRealOffset(0x7E8708);
PickupItem.PunPickup = (void(*)(void*, int))PickupItem.PunPickupOffset;

PickupItem.PickedUpOffset = getRealOffset(0x7E8C60);
PickupItem.PickedUp = (void(*)(void*, float))PickupItem.PickedUpOffset;

PickupItem.PunRespawnOffset = getRealOffset(0x7E8DC0);
PickupItem.PunRespawn = (void(*)(void*, Vector3))PickupItem.PunRespawnOffset;

PickupItem.PunRespawn1Offset = getRealOffset(0x7E8EB8);
PickupItem.PunRespawn1 = (void(*)(void*))PickupItem.PunRespawn1Offset;

PickupItemSimple.OnTriggerEnterOffset = getRealOffset(0x7E9084);
PickupItemSimple.OnTriggerEnter = (void(*)(void*, void *))PickupItemSimple.OnTriggerEnterOffset;

PickupItemSimple.PickupOffset = getRealOffset(0x7E916C);
PickupItemSimple.Pickup = (void(*)(void*))PickupItemSimple.PickupOffset;

PickupItemSimple.PunPickupSimpleOffset = getRealOffset(0x7E92B0);
PickupItemSimple.PunPickupSimple = (void(*)(void*, int))PickupItemSimple.PunPickupSimpleOffset;

PickupItemSimple.RespawnAfterOffset = getRealOffset(0x7E9488);
PickupItemSimple.RespawnAfter = (void(*)(void*))PickupItemSimple.RespawnAfterOffset;

PickupItemSyncer.OnPhotonPlayerConnectedOffset = getRealOffset(0x7E955C);
PickupItemSyncer.OnPhotonPlayerConnected = (void(*)(void*, void *))PickupItemSyncer.OnPhotonPlayerConnectedOffset;

PickupItemSyncer.OnJoinedRoomOffset = getRealOffset(0x7EA0F4);
PickupItemSyncer.OnJoinedRoom = (void(*)(void*))PickupItemSyncer.OnJoinedRoomOffset;

PickupItemSyncer.AskForPickupItemSpawnTimesOffset = getRealOffset(0x7EA3C0);
PickupItemSyncer.AskForPickupItemSpawnTimes = (void(*)(void*))PickupItemSyncer.AskForPickupItemSpawnTimesOffset;

PickupItemSyncer.RequestForPickupTimesOffset = getRealOffset(0x7EA6D0);
PickupItemSyncer.RequestForPickupTimes = (void(*)(void*, int))PickupItemSyncer.RequestForPickupTimesOffset;

PickupItemSyncer.RequestForPickupItemsOffset = getRealOffset(0x7EA6E8);
PickupItemSyncer.RequestForPickupItems = (void(*)(void*, int))PickupItemSyncer.RequestForPickupItemsOffset;

PickupItemSyncer.SendPickedUpItemsOffset = getRealOffset(0x7E95F0);
PickupItemSyncer.SendPickedUpItems = (void(*)(void*, void *))PickupItemSyncer.SendPickedUpItemsOffset;

PointedAtGameObjectInfo.OnGUIOffset = getRealOffset(0x706D88);
PointedAtGameObjectInfo.OnGUI = (void(*)(void*))PointedAtGameObjectInfo.OnGUIOffset;

ScoreExtensions.SetScoreOffset = getRealOffset(0x615E4C);
ScoreExtensions.SetScore = (void(*)(void *, int))ScoreExtensions.SetScoreOffset;

ScoreExtensions.AddScoreOffset = getRealOffset(0x615F30);
ScoreExtensions.AddScore = (void(*)(void *, int))ScoreExtensions.AddScoreOffset;

ScoreExtensions.GetScoreOffset = getRealOffset(0x616024);
ScoreExtensions.GetScore = (int(*)(void *))ScoreExtensions.GetScoreOffset;

PunTeams.StartOffset = getRealOffset(0x7115D0);
PunTeams.Start = (void(*)(void*))PunTeams.StartOffset;

PunTeams.OnDisableOffset = getRealOffset(0x7119B0);
PunTeams.OnDisable = (void(*)(void*))PunTeams.OnDisableOffset;

PunTeams.OnJoinedRoomOffset = getRealOffset(0x711A38);
PunTeams.OnJoinedRoom = (void(*)(void*))PunTeams.OnJoinedRoomOffset;

PunTeams.OnLeftRoomOffset = getRealOffset(0x711EF4);
PunTeams.OnLeftRoom = (void(*)(void*))PunTeams.OnLeftRoomOffset;

PunTeams.OnPhotonPlayerDisconnectedOffset = getRealOffset(0x711EFC);
PunTeams.OnPhotonPlayerDisconnected = (void(*)(void*, void *))PunTeams.OnPhotonPlayerDisconnectedOffset;

PunTeams.OnPhotonPlayerConnectedOffset = getRealOffset(0x711F00);
PunTeams.OnPhotonPlayerConnected = (void(*)(void*, void *))PunTeams.OnPhotonPlayerConnectedOffset;

PunTeams.UpdateTeamsOffset = getRealOffset(0x711A3C);
PunTeams.UpdateTeams = (void(*)(void*))PunTeams.UpdateTeamsOffset;

TeamExtensions.GetTeamOffset = getRealOffset(0x5C99C0);
TeamExtensions.GetTeam = (int (*)(void *))TeamExtensions.GetTeamOffset;

TeamExtensions.SetTeamOffset = getRealOffset(0x5C9AB8);
TeamExtensions.SetTeam = (void(*)(void *, int))TeamExtensions.SetTeamOffset;

PunTurnManager.get_TurnOffset = getRealOffset(0x711F0C);
PunTurnManager.get_Turn = (int(*)(void*))PunTurnManager.get_TurnOffset;

PunTurnManager.set_TurnOffset = getRealOffset(0x711FBC);
PunTurnManager.set_Turn = (void(*)(void*, int))PunTurnManager.set_TurnOffset;

PunTurnManager.get_ElapsedTimeInTurnOffset = getRealOffset(0x712084);
PunTurnManager.get_ElapsedTimeInTurn = (float(*)(void*))PunTurnManager.get_ElapsedTimeInTurnOffset;

PunTurnManager.get_RemainingSecondsInTurnOffset = getRealOffset(0x71215C);
PunTurnManager.get_RemainingSecondsInTurn = (float(*)(void*))PunTurnManager.get_RemainingSecondsInTurnOffset;

PunTurnManager.get_IsCompletedByAllOffset = getRealOffset(0x7121F8);
PunTurnManager.get_IsCompletedByAll = (bool(*)(void*))PunTurnManager.get_IsCompletedByAllOffset;

PunTurnManager.get_IsFinishedByMeOffset = getRealOffset(0x7122F0);
PunTurnManager.get_IsFinishedByMe = (bool(*)(void*))PunTurnManager.get_IsFinishedByMeOffset;

PunTurnManager.get_IsOverOffset = getRealOffset(0x712398);
PunTurnManager.get_IsOver = (bool(*)(void*))PunTurnManager.get_IsOverOffset;

PunTurnManager.StartOffset = getRealOffset(0x7123BC);
PunTurnManager.Start = (void(*)(void*))PunTurnManager.StartOffset;

PunTurnManager.UpdateOffset = getRealOffset(0x712470);
PunTurnManager.Update = (void(*)(void*))PunTurnManager.UpdateOffset;

PunTurnManager.BeginTurnOffset = getRealOffset(0x712584);
PunTurnManager.BeginTurn = (void(*)(void*))PunTurnManager.BeginTurnOffset;

PunTurnManager.GetPlayerFinishedTurnOffset = getRealOffset(0x712CE4);
PunTurnManager.GetPlayerFinishedTurn = (bool(*)(void*, void *))PunTurnManager.GetPlayerFinishedTurnOffset;

PunTurnManager.OnPhotonCustomRoomPropertiesChangedOffset = getRealOffset(0x712D6C);
PunTurnManager.OnPhotonCustomRoomPropertiesChanged = (void(*)(void*, void *))PunTurnManager.OnPhotonCustomRoomPropertiesChangedOffset;

TurnExtensions.SetTurnOffset = getRealOffset(0x5DAC54);
TurnExtensions.SetTurn = (void(*)(void *, int, bool))TurnExtensions.SetTurnOffset;

TurnExtensions.GetTurnOffset = getRealOffset(0x5DAE20);
TurnExtensions.GetTurn = (int(*)(void *))TurnExtensions.GetTurnOffset;

TurnExtensions.GetTurnStartOffset = getRealOffset(0x5DAF70);
TurnExtensions.GetTurnStart = (int(*)(void *))TurnExtensions.GetTurnStartOffset;

TurnExtensions.GetFinishedTurnOffset = getRealOffset(0x5DB0C0);
TurnExtensions.GetFinishedTurn = (int(*)(void *))TurnExtensions.GetFinishedTurnOffset;

TurnExtensions.SetFinishedTurnOffset = getRealOffset(0x5DB284);
TurnExtensions.SetFinishedTurn = (void(*)(void *, int))TurnExtensions.SetFinishedTurnOffset;

QuitOnEscapeOrBack.UpdateOffset = getRealOffset(0x633338);
QuitOnEscapeOrBack.Update = (void(*)(void*))QuitOnEscapeOrBack.UpdateOffset;

ShowStatusWhenConnecting.OnGUIOffset = getRealOffset(0x61F238);
ShowStatusWhenConnecting.OnGUI = (void(*)(void*))ShowStatusWhenConnecting.OnGUIOffset;

ShowStatusWhenConnecting.GetConnectingDotsOffset = getRealOffset(0x61F65C);
ShowStatusWhenConnecting.GetConnectingDots = (monoString *(*)(void*))ShowStatusWhenConnecting.GetConnectingDotsOffset;

SmoothSyncMovement.AwakeOffset = getRealOffset(0x577B18);
SmoothSyncMovement.Awake = (void(*)(void*))SmoothSyncMovement.AwakeOffset;

SmoothSyncMovement.OnPhotonSerializeViewOffset = getRealOffset(0x577D00);
SmoothSyncMovement.OnPhotonSerializeView = (void(*)(void*, void *, int))SmoothSyncMovement.OnPhotonSerializeViewOffset;

SmoothSyncMovement.UpdateOffset = getRealOffset(0x577EF8);
SmoothSyncMovement.Update = (void(*)(void*))SmoothSyncMovement.UpdateOffset;

SupportLogger.StartOffset = getRealOffset(0x588D08);
SupportLogger.Start = (void(*)(void*))SupportLogger.StartOffset;

SupportLogging.StartOffset = getRealOffset(0x588E48);
SupportLogging.Start = (void(*)(void*))SupportLogging.StartOffset;

SupportLogging.OnApplicationPauseOffset = getRealOffset(0x588ECC);
SupportLogging.OnApplicationPause = (void(*)(void*, bool))SupportLogging.OnApplicationPauseOffset;

SupportLogging.OnApplicationQuitOffset = getRealOffset(0x588FE0);
SupportLogging.OnApplicationQuit = (void(*)(void*))SupportLogging.OnApplicationQuitOffset;

SupportLogging.LogStatsOffset = getRealOffset(0x588FE8);
SupportLogging.LogStats = (void(*)(void*))SupportLogging.LogStatsOffset;

SupportLogging.LogBasicsOffset = getRealOffset(0x5890C8);
SupportLogging.LogBasics = (void(*)(void*))SupportLogging.LogBasicsOffset;

SupportLogging.OnConnectedToPhotonOffset = getRealOffset(0x5893B4);
SupportLogging.OnConnectedToPhoton = (void(*)(void*))SupportLogging.OnConnectedToPhotonOffset;

SupportLogging.OnFailedToConnectToPhotonOffset = getRealOffset(0x589488);
SupportLogging.OnFailedToConnectToPhoton = (void(*)(void*, int))SupportLogging.OnFailedToConnectToPhotonOffset;

SupportLogging.OnJoinedLobbyOffset = getRealOffset(0x58955C);
SupportLogging.OnJoinedLobby = (void(*)(void*))SupportLogging.OnJoinedLobbyOffset;

SupportLogging.OnJoinedRoomOffset = getRealOffset(0x589638);
SupportLogging.OnJoinedRoom = (void(*)(void*))SupportLogging.OnJoinedRoomOffset;

SupportLogging.OnCreatedRoomOffset = getRealOffset(0x589918);
SupportLogging.OnCreatedRoom = (void(*)(void*))SupportLogging.OnCreatedRoomOffset;

SupportLogging.OnLeftRoomOffset = getRealOffset(0x589BF8);
SupportLogging.OnLeftRoom = (void(*)(void*))SupportLogging.OnLeftRoomOffset;

SupportLogging.OnDisconnectedFromPhotonOffset = getRealOffset(0x589C7C);
SupportLogging.OnDisconnectedFromPhoton = (void(*)(void*))SupportLogging.OnDisconnectedFromPhotonOffset;

CrossScript.StartOffset = getRealOffset(0x8260C8);
CrossScript.Start = (void(*)(void*))CrossScript.StartOffset;

qb_Group.AddObjectOffset = getRealOffset(0x1570BD0);
qb_Group.AddObject = (void(*)(void*, void *))qb_Group.AddObjectOffset;

qb_Group.HideOffset = getRealOffset(0x1570C2C);
qb_Group.Hide = (void(*)(void*))qb_Group.HideOffset;

qb_Group.ShowOffset = getRealOffset(0x1570C38);
qb_Group.Show = (void(*)(void*))qb_Group.ShowOffset;

qb_Group.FreezeOffset = getRealOffset(0x1570C44);
qb_Group.Freeze = (void(*)(void*))qb_Group.FreezeOffset;

qb_Group.UnFreezeOffset = getRealOffset(0x1570C50);
qb_Group.UnFreeze = (void(*)(void*))qb_Group.UnFreezeOffset;

qb_Group.CleanUpOffset = getRealOffset(0x1570C5C);
qb_Group.CleanUp = (void(*)(void*))qb_Group.CleanUpOffset;

ADSScript.AwakeOffset = getRealOffset(0x696070);
ADSScript.Awake = (void(*)(void*))ADSScript.AwakeOffset;

ADSScript.StartOffset = getRealOffset(0x6960D0);
ADSScript.Start = (void(*)(void*))ADSScript.StartOffset;

ADSScript.OnPointerDownOffset = getRealOffset(0x6961C0);
ADSScript.OnPointerDown = (void(*)(void*, void *))ADSScript.OnPointerDownOffset;

ADSScript.UpdateFastOffset = getRealOffset(0x696294);
ADSScript.UpdateFast = (void(*)(void*))ADSScript.UpdateFastOffset;

ADSScript.ToggleImagesOffset = getRealOffset(0x6963BC);
ADSScript.ToggleImages = (void(*)(void*, bool))ADSScript.ToggleImagesOffset;

ADSScript.OnDestroyOffset = getRealOffset(0x696444);
ADSScript.OnDestroy = (void(*)(void*))ADSScript.OnDestroyOffset;

CrazyAdsController.SetupOffset = getRealOffset(0x8205F4);
CrazyAdsController.Setup = (void(*)(void*, void *, void *, void *))CrazyAdsController.SetupOffset;

CrazyAdsController.AwakeOffset = getRealOffset(0x820600);
CrazyAdsController.Awake = (void(*)(void*))CrazyAdsController.AwakeOffset;

CrazyAdsController.OfferwallClosedEventOffset = getRealOffset(0x820718);
CrazyAdsController.OfferwallClosedEvent = (void(*)(void*))CrazyAdsController.OfferwallClosedEventOffset;

CrazyAdsController.ShowOfferwallButtonClickedOffset = getRealOffset(0x820720);
CrazyAdsController.ShowOfferwallButtonClicked = (void(*)(void*))CrazyAdsController.ShowOfferwallButtonClickedOffset;

CrazyAdsController.IsReadyToUseOffset = getRealOffset(0x820804);
CrazyAdsController.IsReadyToUse = (bool(*)(void*))CrazyAdsController.IsReadyToUseOffset;

CrazyAdsController.ShowAdOffset = getRealOffset(0x820980);
CrazyAdsController.ShowAd = (void(*)(void*))CrazyAdsController.ShowAdOffset;

CrazyAdsController.ShowCommonAdOffset = getRealOffset(0x820984);
CrazyAdsController.ShowCommonAd = (void(*)(void*))CrazyAdsController.ShowCommonAdOffset;

CrazyAdsController.ShowRewardedVideoButtonClickedOffset = getRealOffset(0x820A30);
CrazyAdsController.ShowRewardedVideoButtonClicked = (void(*)(void*))CrazyAdsController.ShowRewardedVideoButtonClickedOffset;

CrazyAdsController.OnCrazyAdsCompletedEventOffset = getRealOffset(0x820C64);
CrazyAdsController.OnCrazyAdsCompletedEvent = (void(*)(void*))CrazyAdsController.OnCrazyAdsCompletedEventOffset;

CrazyAdsController.OnCatchRewardCompletedOffset = getRealOffset(0x820ED8);
CrazyAdsController.OnCatchRewardCompleted = (void(*)(void*, monoString*))CrazyAdsController.OnCatchRewardCompletedOffset;

CrazyAdsController.UseDebugDataOffset = getRealOffset(0x821208);
CrazyAdsController.UseDebugData = (monoString *(*)(void*, int))CrazyAdsController.UseDebugDataOffset;

CrazyAdsController.OpenCaseFromMatchOffset = getRealOffset(0x821278);
CrazyAdsController.OpenCaseFromMatch = (void(*)(void*))CrazyAdsController.OpenCaseFromMatchOffset;

CrazyAdsController.OnCatchRewardFailedOffset = getRealOffset(0x8212D4);
CrazyAdsController.OnCatchRewardFailed = (void(*)(void*, monoString*))CrazyAdsController.OnCatchRewardFailedOffset;

CrazyAdsController.RewardedVideoAdClosedEventOffset = getRealOffset(0x8213A4);
CrazyAdsController.RewardedVideoAdClosedEvent = (void(*)(void*))CrazyAdsController.RewardedVideoAdClosedEventOffset;

CrazyAdsController.OnCrazyAdsFailedEventOffset = getRealOffset(0x8210F4);
CrazyAdsController.OnCrazyAdsFailedEvent = (void(*)(void*))CrazyAdsController.OnCrazyAdsFailedEventOffset;

CrazyAdsController.OnCrazyAdsSkippedEventOffset = getRealOffset(0x8213B4);
CrazyAdsController.OnCrazyAdsSkippedEvent = (void(*)(void*))CrazyAdsController.OnCrazyAdsSkippedEventOffset;

CrazyAdsController.InitSDKOffset = getRealOffset(0x8214C8);
CrazyAdsController.InitSDK = (void(*)(void*))CrazyAdsController.InitSDKOffset;

CrazyAdsController.OfferwallOpenedEventOffset = getRealOffset(0x8214CC);
CrazyAdsController.OfferwallOpenedEvent = (void(*)(void*))CrazyAdsController.OfferwallOpenedEventOffset;

CrazyAdsController.RewardedVideoAdOpenedEventOffset = getRealOffset(0x8214D0);
CrazyAdsController.RewardedVideoAdOpenedEvent = (void(*)(void*))CrazyAdsController.RewardedVideoAdOpenedEventOffset;

CrazyAdsController.ShowAdb__7_0Offset = getRealOffset(0x8214E4);
CrazyAdsController.ShowAdb__7_0 = (void(*)(void*, monoString*))CrazyAdsController.ShowAdb__7_0Offset;

WebGLAdsEncryptor.GetWebFormOffset = getRealOffset(0x8B66C0);
WebGLAdsEncryptor.GetWebForm = (void *(*)(void*))WebGLAdsEncryptor.GetWebFormOffset;

WebGLAdsEncryptor.GetEpocTimeStringOffset = getRealOffset(0x8B69E0);
WebGLAdsEncryptor.GetEpocTimeString = (monoString *(*)(void*))WebGLAdsEncryptor.GetEpocTimeStringOffset;

WebGLAdsEncryptor.GenerateEventIDOffset = getRealOffset(0x8B6AF4);
WebGLAdsEncryptor.GenerateEventID = (monoString *(*)(void*))WebGLAdsEncryptor.GenerateEventIDOffset;

WebGLAdsEncryptor.GenerateSignatureOffset = getRealOffset(0x8B6B98);
WebGLAdsEncryptor.GenerateSignature = (monoString *(*)(void*, monoString*, monoString*))WebGLAdsEncryptor.GenerateSignatureOffset;

CrazyBannersController.AwakeOffset = getRealOffset(0x822A7C);
CrazyBannersController.Awake = (void(*)(void*))CrazyBannersController.AwakeOffset;

CrazyBannersController.SetLoadedScreenOffset = getRealOffset(0x822B24);
CrazyBannersController.SetLoadedScreen = (void(*)(void*, int))CrazyBannersController.SetLoadedScreenOffset;

CrazyBannersController.ShowBannerOffset = getRealOffset(0x822B88);
CrazyBannersController.ShowBanner = (void(*)(void*, int))CrazyBannersController.ShowBannerOffset;

CrazyBannersController.BannerRendererOffset = getRealOffset(0x822BFC);
CrazyBannersController.BannerRenderer = (void(*)(void*, monoString*))CrazyBannersController.BannerRendererOffset;

CrazyBannersController.BannerErrorOffset = getRealOffset(0x822C98);
CrazyBannersController.BannerError = (void(*)(void*, monoString*, monoString*))CrazyBannersController.BannerErrorOffset;

CrazyBannersController.RemoveCurrentBannerOffset = getRealOffset(0x822D70);
CrazyBannersController.RemoveCurrentBanner = (void(*)(void*))CrazyBannersController.RemoveCurrentBannerOffset;

CrazyBannersController.OnChangedSceneOffset = getRealOffset(0x822DCC);
CrazyBannersController.OnChangedScene = (void(*)(void*, int, int))CrazyBannersController.OnChangedSceneOffset;

GenericAdsController.ShowGoldNotificationOffset = getRealOffset(0x5FBFD8);
GenericAdsController.ShowGoldNotification = (void(*)(void*))GenericAdsController.ShowGoldNotificationOffset;

GenericAdsController.WaitToRefreshGoldOffset = getRealOffset(0x5FC004);
GenericAdsController.WaitToRefreshGold = (void *(*)(void*))GenericAdsController.WaitToRefreshGoldOffset;

GenericAdsController.StopLoadingOffset = getRealOffset(0x5FC090);
GenericAdsController.StopLoading = (void(*)(void*, bool, bool))GenericAdsController.StopLoadingOffset;

GenericAdsController.OnWatchAdClickedOffset = getRealOffset(0x5FC3D8);
GenericAdsController.OnWatchAdClicked = (void(*)(void*))GenericAdsController.OnWatchAdClickedOffset;

GenericAdsController.ShouldShowTargetedAdPopupOffset = getRealOffset(0x5FC500);
GenericAdsController.ShouldShowTargetedAdPopup = (bool(*)(void*))GenericAdsController.ShouldShowTargetedAdPopupOffset;

GenericAdsController.ShowTargetedAdPopupOffset = getRealOffset(0x5FC588);
GenericAdsController.ShowTargetedAdPopup = (void(*)(void*))GenericAdsController.ShowTargetedAdPopupOffset;

GenericAdsController.OnAgreeSourceTargetingOffset = getRealOffset(0x5FCD70);
GenericAdsController.OnAgreeSourceTargeting = (void(*)(void*))GenericAdsController.OnAgreeSourceTargetingOffset;

GenericAdsController.OnDisgreeSourceTargetingOffset = getRealOffset(0x5FCE24);
GenericAdsController.OnDisgreeSourceTargeting = (void(*)(void*))GenericAdsController.OnDisgreeSourceTargetingOffset;

GenericAdsController.SetShowAdOffset = getRealOffset(0x5FCDF8);
GenericAdsController.SetShowAd = (void(*)(void*))GenericAdsController.SetShowAdOffset;

GenericAdsController.ShowPopupOffset = getRealOffset(0x5FC190);
GenericAdsController.ShowPopup = (void(*)(void*))GenericAdsController.ShowPopupOffset;

GenericAdsController.HidePopupOffset = getRealOffset(0x5FC2B4);
GenericAdsController.HidePopup = (void(*)(void*))GenericAdsController.HidePopupOffset;

GenericAdsController.OnCatchRewardCompletedOffset = getRealOffset(0x5FCEAC);
GenericAdsController.OnCatchRewardCompleted = (void(*)(void*, monoString*))GenericAdsController.OnCatchRewardCompletedOffset;

GenericAdsController.UseDebugDataOffset = getRealOffset(0x5FD2D0);
GenericAdsController.UseDebugData = (monoString *(*)(void*))GenericAdsController.UseDebugDataOffset;

GenericAdsController.OnCatchRewardFailedOffset = getRealOffset(0x5FD320);
GenericAdsController.OnCatchRewardFailed = (void(*)(void*, monoString*))GenericAdsController.OnCatchRewardFailedOffset;

GenericAdsController.LoadOpenCasePostMatchAdOffset = getRealOffset(0x5FD0C8);
GenericAdsController.LoadOpenCasePostMatchAd = (void(*)(void*))GenericAdsController.LoadOpenCasePostMatchAdOffset;

CatchRewardResponse.get_StatusOffset = getRealOffset(0x77E36C);
CatchRewardResponse.get_Status = (int(*)(void*))CatchRewardResponse.get_StatusOffset;

CatchRewardResponse.get_MsgOffset = getRealOffset(0x77E374);
CatchRewardResponse.get_Msg = (monoString *(*)(void*))CatchRewardResponse.get_MsgOffset;

IronSourceController.AwakeOffset = getRealOffset(0xCA2538);
IronSourceController.Awake = (void(*)(void*))IronSourceController.AwakeOffset;

IronSourceController.InitSDKOffset = getRealOffset(0xCA2754);
IronSourceController.InitSDK = (void(*)(void*))IronSourceController.InitSDKOffset;

IronSourceController.OnApplicationPauseOffset = getRealOffset(0xCA37E8);
IronSourceController.OnApplicationPause = (void(*)(void*, bool))IronSourceController.OnApplicationPauseOffset;

IronSourceController.IsReadyToUseOffset = getRealOffset(0xCA3818);
IronSourceController.IsReadyToUse = (bool(*)(void*))IronSourceController.IsReadyToUseOffset;

IronSourceController.ShowOfferwallButtonClickedOffset = getRealOffset(0xCA38BC);
IronSourceController.ShowOfferwallButtonClicked = (void(*)(void*))IronSourceController.ShowOfferwallButtonClickedOffset;

IronSourceController.OfferwallOpenedEventOffset = getRealOffset(0xCA3A5C);
IronSourceController.OfferwallOpenedEvent = (void(*)(void*))IronSourceController.OfferwallOpenedEventOffset;

IronSourceController.OfferwallClosedEventOffset = getRealOffset(0xCA3A60);
IronSourceController.OfferwallClosedEvent = (void(*)(void*))IronSourceController.OfferwallClosedEventOffset;

IronSourceController.OfferwallShowFailedEventOffset = getRealOffset(0xCA3C1C);
IronSourceController.OfferwallShowFailedEvent = (void(*)(void*, void *))IronSourceController.OfferwallShowFailedEventOffset;

IronSourceController.GetOfferwallCreditsFailedEventOffset = getRealOffset(0xCA4038);
IronSourceController.GetOfferwallCreditsFailedEvent = (void(*)(void*, void *))IronSourceController.GetOfferwallCreditsFailedEventOffset;

IronSourceController.OfferwallAvailableEventOffset = getRealOffset(0xCA403C);
IronSourceController.OfferwallAvailableEvent = (void(*)(void*, bool))IronSourceController.OfferwallAvailableEventOffset;

IronSourceController.ShowAdOffset = getRealOffset(0xCA4040);
IronSourceController.ShowAd = (void(*)(void*))IronSourceController.ShowAdOffset;

IronSourceController.ShowRewardedVideoButtonClickedOffset = getRealOffset(0xCA414C);
IronSourceController.ShowRewardedVideoButtonClicked = (void(*)(void*))IronSourceController.ShowRewardedVideoButtonClickedOffset;

IronSourceController.ShowDemandOnlyRewardedVideoOffset = getRealOffset(0xCA43B8);
IronSourceController.ShowDemandOnlyRewardedVideo = (void(*)(void*))IronSourceController.ShowDemandOnlyRewardedVideoOffset;

IronSourceController.RewardedVideoAvailabilityChangedEventOffset = getRealOffset(0xCA43BC);
IronSourceController.RewardedVideoAvailabilityChangedEvent = (void(*)(void*, bool))IronSourceController.RewardedVideoAvailabilityChangedEventOffset;

IronSourceController.RewardedVideoAdOpenedEventOffset = getRealOffset(0xCA43C0);
IronSourceController.RewardedVideoAdOpenedEvent = (void(*)(void*))IronSourceController.RewardedVideoAdOpenedEventOffset;

IronSourceController.RewardedVideoAdRewardedEventOffset = getRealOffset(0xCA43C4);
IronSourceController.RewardedVideoAdRewardedEvent = (void(*)(void*, void *))IronSourceController.RewardedVideoAdRewardedEventOffset;

IronSourceController.RewardedVideoAdClosedEventOffset = getRealOffset(0xCA43D4);
IronSourceController.RewardedVideoAdClosedEvent = (void(*)(void*))IronSourceController.RewardedVideoAdClosedEventOffset;

IronSourceController.RewardedVideoAdStartedEventOffset = getRealOffset(0xCA4510);
IronSourceController.RewardedVideoAdStartedEvent = (void(*)(void*))IronSourceController.RewardedVideoAdStartedEventOffset;

IronSourceController.RewardedVideoAdEndedEventOffset = getRealOffset(0xCA4514);
IronSourceController.RewardedVideoAdEndedEvent = (void(*)(void*))IronSourceController.RewardedVideoAdEndedEventOffset;

IronSourceController.RewardedVideoAdShowFailedEventOffset = getRealOffset(0xCA4540);
IronSourceController.RewardedVideoAdShowFailedEvent = (void(*)(void*, void *))IronSourceController.RewardedVideoAdShowFailedEventOffset;

IronSourceController.RewardedVideoAdClickedEventOffset = getRealOffset(0xCA4550);
IronSourceController.RewardedVideoAdClickedEvent = (void(*)(void*, void *))IronSourceController.RewardedVideoAdClickedEventOffset;

IronSourceController.ForceOpenAdCaseOffset = getRealOffset(0xCA4554);
IronSourceController.ForceOpenAdCase = (void(*)(void*))IronSourceController.ForceOpenAdCaseOffset;

IronSourceController.Unlock_Ad_RewardOffset = getRealOffset(0xCA4478);
IronSourceController.Unlock_Ad_Reward = (void *(*)(void*, bool))IronSourceController.Unlock_Ad_RewardOffset;

IronSourceController.OnCatchRewardFailedOffset = getRealOffset(0xCA459C);
IronSourceController.OnCatchRewardFailed = (void(*)(void*, monoString*))IronSourceController.OnCatchRewardFailedOffset;

IronSourceController.OnUnlockAdRewardFailedOffset = getRealOffset(0xCA46EC);
IronSourceController.OnUnlockAdRewardFailed = (void(*)(void*, monoString*))IronSourceController.OnUnlockAdRewardFailedOffset;

IronSourceController.ShowAdb__23_0Offset = getRealOffset(0xCA47E8);
IronSourceController.ShowAdb__23_0 = (void(*)(void*, monoString*))IronSourceController.ShowAdb__23_0Offset;

PokiAdsController.SetupOffset = getRealOffset(0x708CB8);
PokiAdsController.Setup = (void(*)(void*, void *, void *, void *))PokiAdsController.SetupOffset;

PokiAdsController.AwakeOffset = getRealOffset(0x708CC4);
PokiAdsController.Awake = (void(*)(void*))PokiAdsController.AwakeOffset;

PokiAdsController.IsReadyToUseOffset = getRealOffset(0x708E8C);
PokiAdsController.IsReadyToUse = (bool(*)(void*))PokiAdsController.IsReadyToUseOffset;

PokiAdsController.RewardedVideoAdClosedEventOffset = getRealOffset(0x709564);
PokiAdsController.RewardedVideoAdClosedEvent = (void(*)(void*))PokiAdsController.RewardedVideoAdClosedEventOffset;

PokiAdsController.ShowAdOffset = getRealOffset(0x709574);
PokiAdsController.ShowAd = (void(*)(void*))PokiAdsController.ShowAdOffset;

PokiAdsController.ShowRewardedVideoButtonClickedOffset = getRealOffset(0x709818);
PokiAdsController.ShowRewardedVideoButtonClicked = (void(*)(void*))PokiAdsController.ShowRewardedVideoButtonClickedOffset;

PokiAdsController.RewardedBreakCompleteOffset = getRealOffset(0x7099B8);
PokiAdsController.RewardedBreakComplete = (void(*)(void*, bool))PokiAdsController.RewardedBreakCompleteOffset;

PokiAdsController.ShowingAdsErrorMessageOffset = getRealOffset(0x709C34);
PokiAdsController.ShowingAdsErrorMessage = (void(*)(void*))PokiAdsController.ShowingAdsErrorMessageOffset;

PokiAdsController.OnCatchRewardFailedOffset = getRealOffset(0x709D48);
PokiAdsController.OnCatchRewardFailed = (void(*)(void*, monoString*))PokiAdsController.OnCatchRewardFailedOffset;

PokiAdsController.OnCatchRewardCompletedOffset = getRealOffset(0x709E18);
PokiAdsController.OnCatchRewardCompleted = (void(*)(void*, monoString*))PokiAdsController.OnCatchRewardCompletedOffset;

PokiAdsController.ShowCommercialBreakOffset = getRealOffset(0x70A048);
PokiAdsController.ShowCommercialBreak = (void(*)(void*, void *))PokiAdsController.ShowCommercialBreakOffset;

PokiAdsController.CommercialBreakCompleteOffset = getRealOffset(0x70A250);
PokiAdsController.CommercialBreakComplete = (void(*)(void*))PokiAdsController.CommercialBreakCompleteOffset;

PokiAdsController.InitSDKOffset = getRealOffset(0x70A260);
PokiAdsController.InitSDK = (void(*)(void*))PokiAdsController.InitSDKOffset;

PokiAdsController.RewardedVideoAdOpenedEventOffset = getRealOffset(0x70A264);
PokiAdsController.RewardedVideoAdOpenedEvent = (void(*)(void*))PokiAdsController.RewardedVideoAdOpenedEventOffset;

PokiAdsController.ShowOfferwallButtonClickedOffset = getRealOffset(0x70A268);
PokiAdsController.ShowOfferwallButtonClicked = (void(*)(void*))PokiAdsController.ShowOfferwallButtonClickedOffset;

PokiAdsController.OfferwallClosedEventOffset = getRealOffset(0x70A26C);
PokiAdsController.OfferwallClosedEvent = (void(*)(void*))PokiAdsController.OfferwallClosedEventOffset;

PokiAdsController.OfferwallOpenedEventOffset = getRealOffset(0x70A270);
PokiAdsController.OfferwallOpenedEvent = (void(*)(void*))PokiAdsController.OfferwallOpenedEventOffset;

PokiAdsController.ShowAdb__5_0Offset = getRealOffset(0x70A280);
PokiAdsController.ShowAdb__5_0 = (void(*)(void*, monoString*))PokiAdsController.ShowAdb__5_0Offset;

PokiBanner.get_BannerIDOffset = getRealOffset(0x70A670);
PokiBanner.get_BannerID = (int (*)(void*))PokiBanner.get_BannerIDOffset;

PokiBanner.get_BannerResolutionOffset = getRealOffset(0x70A678);
PokiBanner.get_BannerResolution = (int (*)(void*))PokiBanner.get_BannerResolutionOffset;

PokiBanner.get_SecondaryBannerResolutionOffset = getRealOffset(0x70A680);
PokiBanner.get_SecondaryBannerResolution = (int (*)(void*))PokiBanner.get_SecondaryBannerResolutionOffset;

PokiBanner.get_MinimumResolutionOffset = getRealOffset(0x70A688);
PokiBanner.get_MinimumResolution = (Vector2 (*)(void*))PokiBanner.get_MinimumResolutionOffset;

PokiBanner.get_MinimumResolutionToShowBannerOffset = getRealOffset(0x70A69C);
PokiBanner.get_MinimumResolutionToShowBanner = (Vector2 (*)(void*))PokiBanner.get_MinimumResolutionToShowBannerOffset;

PokiBanner.get_DebugBannerImgOffset = getRealOffset(0x70A6B0);
PokiBanner.get_DebugBannerImg = (void *(*)(void*))PokiBanner.get_DebugBannerImgOffset;

PokiBanner.AwakeOffset = getRealOffset(0x70A6B8);
PokiBanner.Awake = (void(*)(void*))PokiBanner.AwakeOffset;

PokiBanner.ShowOffset = getRealOffset(0x70A744);
PokiBanner.Show = (void(*)(void*))PokiBanner.ShowOffset;

PokiBanner.HideOffset = getRealOffset(0x70A83C);
PokiBanner.Hide = (void(*)(void*))PokiBanner.HideOffset;

PokiBanner.CR_ShowAdOffset = getRealOffset(0x70A7BC);
PokiBanner.CR_ShowAd = (void *(*)(void*))PokiBanner.CR_ShowAdOffset;

PokiBanner.ModifyBannerSizeOffset = getRealOffset(0x70A9A0);
PokiBanner.ModifyBannerSize = (void(*)(void*))PokiBanner.ModifyBannerSizeOffset;

PokiBanner.CheckBannerSizeOffset = getRealOffset(0x70AB10);
PokiBanner.CheckBannerSize = (int (*)(void*))PokiBanner.CheckBannerSizeOffset;

PokiBanner.DestroyAdOffset = getRealOffset(0x70A840);
PokiBanner.DestroyAd = (void(*)(void*))PokiBanner.DestroyAdOffset;

PokiBannersController.get_IsDisplayingBannerOffset = getRealOffset(0x70B220);
PokiBannersController.get_IsDisplayingBanner = (bool(*)(void*))PokiBannersController.get_IsDisplayingBannerOffset;

PokiBannersController.get_screenWidthOffset = getRealOffset(0x70B66C);
PokiBannersController.get_screenWidth = (float(*)(void*))PokiBannersController.get_screenWidthOffset;

PokiBannersController.set_screenWidthOffset = getRealOffset(0x70B674);
PokiBannersController.set_screenWidth = (void(*)(void*, float))PokiBannersController.set_screenWidthOffset;

PokiBannersController.get_screenHeightOffset = getRealOffset(0x70B67C);
PokiBannersController.get_screenHeight = (float(*)(void*))PokiBannersController.get_screenHeightOffset;

PokiBannersController.set_screenHeightOffset = getRealOffset(0x70B684);
PokiBannersController.set_screenHeight = (void(*)(void*, float))PokiBannersController.set_screenHeightOffset;

PokiBannersController.AwakeOffset = getRealOffset(0x70B68C);
PokiBannersController.Awake = (void(*)(void*))PokiBannersController.AwakeOffset;

PokiBannersController.UpdateOffset = getRealOffset(0x70B708);
PokiBannersController.Update = (void(*)(void*))PokiBannersController.UpdateOffset;

PokiBannersController.SetLoadedScreenOffset = getRealOffset(0x70B710);
PokiBannersController.SetLoadedScreen = (void(*)(void*, int))PokiBannersController.SetLoadedScreenOffset;

PokiBannersController.SetBannerOffset = getRealOffset(0x70B83C);
PokiBannersController.SetBanner = (void(*)(void*, void *))PokiBannersController.SetBannerOffset;

PokiBannersController.ShowBannerOffset = getRealOffset(0x70B880);
PokiBannersController.ShowBanner = (void(*)(void*, int))PokiBannersController.ShowBannerOffset;

PokiBannersController.RemoveCurrentBannerOffset = getRealOffset(0x70B988);
PokiBannersController.RemoveCurrentBanner = (void(*)(void*))PokiBannersController.RemoveCurrentBannerOffset;

PokiBannersController.OnChangedSceneOffset = getRealOffset(0x70BA18);
PokiBannersController.OnChangedScene = (void(*)(void*, int, int))PokiBannersController.OnChangedSceneOffset;

PokiBannersController.CheckIfTheResolutionChangeOffset = getRealOffset(0x70B70C);
PokiBannersController.CheckIfTheResolutionChange = (void(*)(void*))PokiBannersController.CheckIfTheResolutionChangeOffset;

WebGLAdsManager.AwakeOffset = getRealOffset(0x8B7338);
WebGLAdsManager.Awake = (void(*)(void*))WebGLAdsManager.AwakeOffset;

WebGLBanners.get_InstanceOffset = getRealOffset(0x8B73BC);
WebGLBanners.get_Instance = (void *(*)())WebGLBanners.get_InstanceOffset;

WebGLBanners.get_IsDisplayingBannerOffset = getRealOffset(0x8B7434);
WebGLBanners.get_IsDisplayingBanner = (bool(*)(void*))WebGLBanners.get_IsDisplayingBannerOffset;

WebGLBanners.InitOffset = getRealOffset(0x8B7444);
WebGLBanners.Init = (void(*)(void*))WebGLBanners.InitOffset;

WebGLBanners.SetLoadedScreenOffset = getRealOffset(0x8B76E4);
WebGLBanners.SetLoadedScreen = (void(*)(void*, int))WebGLBanners.SetLoadedScreenOffset;

WebGLBanners.OnChangedSceneOffset = getRealOffset(0x8B76F4);
WebGLBanners.OnChangedScene = (void(*)(void*, int, int))WebGLBanners.OnChangedSceneOffset;

WebGLBanners.ShowBannerOffset = getRealOffset(0x8B76F8);
WebGLBanners.ShowBanner = (void(*)(void*, int))WebGLBanners.ShowBannerOffset;

WebGLBanners.RemoveCurrentBannerOffset = getRealOffset(0x8B76FC);
WebGLBanners.RemoveCurrentBanner = (void(*)(void*))WebGLBanners.RemoveCurrentBannerOffset;

WebGLBanners.AwakeOffset = getRealOffset(0x8B7700);
WebGLBanners.Awake = (void(*)(void*))WebGLBanners.AwakeOffset;

WebGLBanners.OnDestroyOffset = getRealOffset(0x8B7790);
WebGLBanners.OnDestroy = (void(*)(void*))WebGLBanners.OnDestroyOffset;

AimingJoystickToggle.AwakeOffset = getRealOffset(0x6B2878);
AimingJoystickToggle.Awake = (void(*)(void*))AimingJoystickToggle.AwakeOffset;

AimingJoystickToggle.StartOffset = getRealOffset(0x6B28F0);
AimingJoystickToggle.Start = (void(*)(void*))AimingJoystickToggle.StartOffset;

AimingJoystickToggle.SetEnabledOffset = getRealOffset(0x6B29B0);
AimingJoystickToggle.SetEnabled = (void(*)(void*, bool))AimingJoystickToggle.SetEnabledOffset;

AimingJoystickToggle.ToggleChangedOffset = getRealOffset(0x6B2AC4);
AimingJoystickToggle.ToggleChanged = (void(*)(void*, bool))AimingJoystickToggle.ToggleChangedOffset;

AimingJoystickToggle.OnDestroyOffset = getRealOffset(0x6B2AC8);
AimingJoystickToggle.OnDestroy = (void(*)(void*))AimingJoystickToggle.OnDestroyOffset;

AllowedWeaponsController.AwakeOffset = getRealOffset(0x6B2B7C);
AllowedWeaponsController.Awake = (void(*)(void*))AllowedWeaponsController.AwakeOffset;

AllowedWeaponsController.OnEnableOffset = getRealOffset(0x6B3AC8);
AllowedWeaponsController.OnEnable = (void(*)(void*))AllowedWeaponsController.OnEnableOffset;

AllowedWeaponsController.StoreWeaponsBySlotOffset = getRealOffset(0x6B30AC);
AllowedWeaponsController.StoreWeaponsBySlot = (void(*)(void*))AllowedWeaponsController.StoreWeaponsBySlotOffset;

AllowedWeaponsController.FillToggleDataOffset = getRealOffset(0x6B3DD4);
AllowedWeaponsController.FillToggleData = (void(*)(void*, void *, monoString*, int))AllowedWeaponsController.FillToggleDataOffset;

AllowedWeaponsController.FillSectionsOffset = getRealOffset(0x6B32B4);
AllowedWeaponsController.FillSections = (void(*)(void*))AllowedWeaponsController.FillSectionsOffset;

AllowedWeaponsController.SelectWeaponTypeMenuOffset = getRealOffset(0x6B2D04);
AllowedWeaponsController.SelectWeaponTypeMenu = (void(*)(void*, bool))AllowedWeaponsController.SelectWeaponTypeMenuOffset;

AllowedWeaponsController.OnWeaponAllowedValueChangedOffset = getRealOffset(0x6B4298);
AllowedWeaponsController.OnWeaponAllowedValueChanged = (void(*)(void*, bool))AllowedWeaponsController.OnWeaponAllowedValueChangedOffset;

AllowedWeaponsController.OnAllWeaponsValueChangedOffset = getRealOffset(0x6B47E4);
AllowedWeaponsController.OnAllWeaponsValueChanged = (void(*)(void*, bool))AllowedWeaponsController.OnAllWeaponsValueChangedOffset;

AllowedWeaponsController.OnOkButtonPressedOffset = getRealOffset(0x6B4B2C);
AllowedWeaponsController.OnOkButtonPressed = (void(*)(void*))AllowedWeaponsController.OnOkButtonPressedOffset;

AllowedWeaponsController.HardcodeModeWarningOffset = getRealOffset(0x6B4A30);
AllowedWeaponsController.HardcodeModeWarning = (void(*)(void*))AllowedWeaponsController.HardcodeModeWarningOffset;

AmmoPickup.StartOffset = getRealOffset(0x828DA4);
AmmoPickup.Start = (void(*)(void*))AmmoPickup.StartOffset;

AmmoPickup.UpdateOffset = getRealOffset(0x828DD4);
AmmoPickup.Update = (void(*)(void*))AmmoPickup.UpdateOffset;

AnimatorCallbacks.AwakeOffset = getRealOffset(0x83A8BC);
AnimatorCallbacks.Awake = (void(*)(void*))AnimatorCallbacks.AwakeOffset;

AnimatorCallbacks.StartOffset = getRealOffset(0x83A91C);
AnimatorCallbacks.Start = (void(*)(void*))AnimatorCallbacks.StartOffset;

AnimatorCallbacks.playFootStepSoundOffset = getRealOffset(0x83A9FC);
AnimatorCallbacks.playFootStepSound = (void(*)(void*))AnimatorCallbacks.playFootStepSoundOffset;

AnimatorCallbacks.FinishedTurningOffset = getRealOffset(0x83AF5C);
AnimatorCallbacks.FinishedTurning = (void(*)(void*))AnimatorCallbacks.FinishedTurningOffset;

AnimatorCallbacks.OnAnimatorMoveOffset = getRealOffset(0x83B000);
AnimatorCallbacks.OnAnimatorMove = (void(*)(void*))AnimatorCallbacks.OnAnimatorMoveOffset;

AntiCheatModule.InitOffset = getRealOffset(0x83B0A8);
AntiCheatModule.Init = (void(*)(void*, void *))AntiCheatModule.InitOffset;

AntiCheatModule.GetCheatCheckMessageOffset = getRealOffset(0x83B1CC);
AntiCheatModule.GetCheatCheckMessage = (void *(*)(void*, void *))AntiCheatModule.GetCheatCheckMessageOffset;

AntiCheatModule.CheckForCheatOffset = getRealOffset(0x83B31C);
AntiCheatModule.CheckForCheat = (void(*)(void*, void *))AntiCheatModule.CheckForCheatOffset;

AntiCheatModule.ConsumeMessageOffset = getRealOffset(0x83B3C8);
AntiCheatModule.ConsumeMessage = (bool(*)(void*))AntiCheatModule.ConsumeMessageOffset;

AntiCheatModule.OnSceneLoadedOffset = getRealOffset(0x83BAEC);
AntiCheatModule.OnSceneLoaded = (void(*)(void*, int))AntiCheatModule.OnSceneLoadedOffset;

AntiCheatModule.OnSceneUnloadedOffset = getRealOffset(0x83BAF0);
AntiCheatModule.OnSceneUnloaded = (void(*)(void*, int))AntiCheatModule.OnSceneUnloadedOffset;

AntiCheatPunishment.AdministerPunishmentOffset = getRealOffset(0x83BE4C);
AntiCheatPunishment.AdministerPunishment = (void(*)(monoString*, void *, monoString*, monoString*))AntiCheatPunishment.AdministerPunishmentOffset;

AntiCheatPunishmentTest.OnGUIOffset = getRealOffset(0x83C1F0);
AntiCheatPunishmentTest.OnGUI = (void(*)(void*))AntiCheatPunishmentTest.OnGUIOffset;

AntiCheatModuleConsumer.InvokeOffset = getRealOffset(0x83BBAC);
AntiCheatModuleConsumer.Invoke = (bool(*)(void*))AntiCheatModuleConsumer.InvokeOffset;

AntiCheatModuleConsumer.EndInvokeOffset = getRealOffset(0x83BE18);
AntiCheatModuleConsumer.EndInvoke = (bool(*)(void*, void *))AntiCheatModuleConsumer.EndInvokeOffset;

AntiCheatSystem.InitOffset = getRealOffset(0x83C76C);
AntiCheatSystem.Init = (void(*)(void*))AntiCheatSystem.InitOffset;

AntiCheatSystem.RegisterConsumerOffset = getRealOffset(0x83B158);
AntiCheatSystem.RegisterConsumer = (void(*)(void*, void *))AntiCheatSystem.RegisterConsumerOffset;

AntiCheatSystem.OnSceneLoadedOffset = getRealOffset(0x83C98C);
AntiCheatSystem.OnSceneLoaded = (void(*)(void*, int, int))AntiCheatSystem.OnSceneLoadedOffset;

AntiCheatSystem.OnSceneUnloadedOffset = getRealOffset(0x83CAF0);
AntiCheatSystem.OnSceneUnloaded = (void(*)(void*, int))AntiCheatSystem.OnSceneUnloadedOffset;

AntiCheatSystem.GetModuleOffset = getRealOffset(0x83CC54);
AntiCheatSystem.GetModule = (void *(*)(void*, monoString*))AntiCheatSystem.GetModuleOffset;

AntiCheatSystem.UpdateOffset = getRealOffset(0x83CCC8);
AntiCheatSystem.Update = (void(*)(void*))AntiCheatSystem.UpdateOffset;

AntiCheatSystem.OnCheatOffset = getRealOffset(0x83B52C);
AntiCheatSystem.OnCheat = (void(*)(void*, monoString*, void *, monoString*))AntiCheatSystem.OnCheatOffset;

AntiCheatSystem.SendCheatMessagesOffset = getRealOffset(0x83D2F4);
AntiCheatSystem.SendCheatMessages = (void *(*)(void*, int))AntiCheatSystem.SendCheatMessagesOffset;

AntiCheatSystem.FetchCheatersOffset = getRealOffset(0x83D3DC);
AntiCheatSystem.FetchCheaters = (void(*)(void*))AntiCheatSystem.FetchCheatersOffset;

AntiCheatSystem.FetchCheatersToKickOffset = getRealOffset(0x83D44C);
AntiCheatSystem.FetchCheatersToKick = (void *(*)(void*))AntiCheatSystem.FetchCheatersToKickOffset;

AntiCheatSystem.LogOffset = getRealOffset(0x83D278);
AntiCheatSystem.Log = (void(*)(void*, monoString*))AntiCheatSystem.LogOffset;

AntiCheatSystem.GetAntiCheatSystemOffset = getRealOffset(0x83D4EC);
AntiCheatSystem.GetAntiCheatSystem = (void *(*)())AntiCheatSystem.GetAntiCheatSystemOffset;

CheatCheckMessage.SetSuspectOffset = getRealOffset(0x783CA4);
CheatCheckMessage.SetSuspect = (void(*)(void*, void *))CheatCheckMessage.SetSuspectOffset;

CheatCheckMessage.GetSuspectOffset = getRealOffset(0x783D20);
CheatCheckMessage.GetSuspect = (void *(*)(void*))CheatCheckMessage.GetSuspectOffset;

CheatSuspect.get_BackendIdOffset = getRealOffset(0x783DA4);
CheatSuspect.get_BackendId = (monoString *(*)(void*))CheatSuspect.get_BackendIdOffset;

CheatSuspect.get_MultiplayerIdOffset = getRealOffset(0x783DAC);
CheatSuspect.get_MultiplayerId = (int(*)(void*))CheatSuspect.get_MultiplayerIdOffset;

CheatSuspect.ResetOffset = getRealOffset(0x783D14);
CheatSuspect.Reset = (void(*)(void*, monoString*, int))CheatSuspect.ResetOffset;

TestPointInValidSpace.OnDrawGizmosOffset = getRealOffset(0x5CAF18);
TestPointInValidSpace.OnDrawGizmos = (void(*)(void*))TestPointInValidSpace.OnDrawGizmosOffset;

TestSegmentRayIntersection.OnDrawGizmosOffset = getRealOffset(0x5CB0E4);
TestSegmentRayIntersection.OnDrawGizmos = (void(*)(void*))TestSegmentRayIntersection.OnDrawGizmosOffset;

WallHackAntiCheatMap.ResetOffset = getRealOffset(0x8A860C);
WallHackAntiCheatMap.Reset = (void(*)(void*))WallHackAntiCheatMap.ResetOffset;

WallHackAntiCheatMap.AddSectorOffset = getRealOffset(0x8A867C);
WallHackAntiCheatMap.AddSector = (void(*)(void*, void *, bool))WallHackAntiCheatMap.AddSectorOffset;

WallHackAntiCheatMap.IsPositionValidOffset = getRealOffset(0x8A8768);
WallHackAntiCheatMap.IsPositionValid = (bool(*)(void*, Vector3))WallHackAntiCheatMap.IsPositionValidOffset;

WallHackAntiCheatMap.OnDrawGizmosOffset = getRealOffset(0x8A8A34);
WallHackAntiCheatMap.OnDrawGizmos = (void(*)(void*))WallHackAntiCheatMap.OnDrawGizmosOffset;

WallHackAntiCheatMap.DrawSectorGizmoOffset = getRealOffset(0x8A8B5C);
WallHackAntiCheatMap.DrawSectorGizmo = (void(*)(void*, void *, Color))WallHackAntiCheatMap.DrawSectorGizmoOffset;

WallHackAntiCheatModule.OnSceneLoadedOffset = getRealOffset(0x8A8F64);
WallHackAntiCheatModule.OnSceneLoaded = (void(*)(void*, int))WallHackAntiCheatModule.OnSceneLoadedOffset;

WallHackAntiCheatModule.GetWarningMessageOffset = getRealOffset(0x8A9214);
WallHackAntiCheatModule.GetWarningMessage = (monoString *(*)(void*))WallHackAntiCheatModule.GetWarningMessageOffset;

WallHackAntiCheatModule.CheckForCheatImplOffset = getRealOffset(0x8A9264);
WallHackAntiCheatModule.CheckForCheatImpl = (bool(*)(void*, void *))WallHackAntiCheatModule.CheckForCheatImplOffset;

WallHackAntiCheatModule.CreateCheatCheckMessageImplOffset = getRealOffset(0x8A97A0);
WallHackAntiCheatModule.CreateCheatCheckMessageImpl = (void *(*)(void*))WallHackAntiCheatModule.CreateCheatCheckMessageImplOffset;

WallHackCheatCheckMessage.GetCheatNameOffset = getRealOffset(0x8A9890);
WallHackCheatCheckMessage.GetCheatName = (monoString *(*)(void*))WallHackCheatCheckMessage.GetCheatNameOffset;

WallHackCheatCheckMessage.GetExtraDataOffset = getRealOffset(0x8A98E0);
WallHackCheatCheckMessage.GetExtraData = (monoString *(*)(void*))WallHackCheatCheckMessage.GetExtraDataOffset;

WallHackCheatCheckMessage.TruncateOffset = getRealOffset(0x8A9BFC);
WallHackCheatCheckMessage.Truncate = (monoString *(*)(void*, float))WallHackCheatCheckMessage.TruncateOffset;

WallHackSector.AddOffset = getRealOffset(0x8A9C3C);
WallHackSector.Add = (void(*)(void*, Vector3, Vector3))WallHackSector.AddOffset;

WallHackSector.UpdateBoundsOffset = getRealOffset(0x8A9DEC);
WallHackSector.UpdateBounds = (void(*)(void*, Vector3))WallHackSector.UpdateBoundsOffset;

WallHackSector.InsideOffset = getRealOffset(0x8A887C);
WallHackSector.Inside = (bool(*)(void*, Vector3))WallHackSector.InsideOffset;

WallHackSector.IntersectsWithRayOffset = getRealOffset(0x8A9E38);
WallHackSector.IntersectsWithRay = (bool(*)(int, Vector2, Vector2))WallHackSector.IntersectsWithRayOffset;

ApplyGraphicsOptions.StartOffset = getRealOffset(0x840A14);
ApplyGraphicsOptions.Start = (void(*)(void*))ApplyGraphicsOptions.StartOffset;

ApplyGraphicsOptions.SetGraphicsOffset = getRealOffset(0x840D48);
ApplyGraphicsOptions.SetGraphics = (void(*)(void*))ApplyGraphicsOptions.SetGraphicsOffset;

ApplySplatmap.StartOffset = getRealOffset(0x841170);
ApplySplatmap.Start = (void(*)(void*))ApplySplatmap.StartOffset;

ApplySplatmap.UpdateOffset = getRealOffset(0x841174);
ApplySplatmap.Update = (void(*)(void*))ApplySplatmap.UpdateOffset;

AssetBundlesHelper.AwakeOffset = getRealOffset(0x8445FC);
AssetBundlesHelper.Awake = (void(*)(void*))AssetBundlesHelper.AwakeOffset;

AssetBundlesHelper.OnEnableOffset = getRealOffset(0x844980);
AssetBundlesHelper.OnEnable = (void(*)(void*))AssetBundlesHelper.OnEnableOffset;

AssetBundlesHelper.OnDisableOffset = getRealOffset(0x844A40);
AssetBundlesHelper.OnDisable = (void(*)(void*))AssetBundlesHelper.OnDisableOffset;

AssetBundlesHelper.OnLevelFinishedLoadingOffset = getRealOffset(0x844B00);
AssetBundlesHelper.OnLevelFinishedLoading = (void(*)(void*, int, int))AssetBundlesHelper.OnLevelFinishedLoadingOffset;

AssetBundlesHelper.CheckIfThereAreSOsPostLoginOffset = getRealOffset(0x844F5C);
AssetBundlesHelper.CheckIfThereAreSOsPostLogin = (void(*)(void*))AssetBundlesHelper.CheckIfThereAreSOsPostLoginOffset;

AssetBundlesHelper.CheckIfThereAreSOsOffset = getRealOffset(0x844C78);
AssetBundlesHelper.CheckIfThereAreSOs = (void(*)(void*))AssetBundlesHelper.CheckIfThereAreSOsOffset;

AssetBundlesHelper.GetRandomOfferOffset = getRealOffset(0x844F60);
AssetBundlesHelper.GetRandomOffer = (void *(*)(void*))AssetBundlesHelper.GetRandomOfferOffset;

AssetBundlesHelper.InstantiableOfferOffset = getRealOffset(0x8451D8);
AssetBundlesHelper.InstantiableOffer = (bool(*)(void*, void *))AssetBundlesHelper.InstantiableOfferOffset;

AssetBundlesHelper.InstantiateSpecialOffersOffset = getRealOffset(0x845C18);
AssetBundlesHelper.InstantiateSpecialOffers = (void *(*)(void*, bool))AssetBundlesHelper.InstantiateSpecialOffersOffset;

AssetBundlesHelper.GetRootOffset = getRealOffset(0x845CD0);
AssetBundlesHelper.GetRoot = (void *(*)(void*, monoString*))AssetBundlesHelper.GetRootOffset;

AssetBundlesHelper.DumpGameObjectOffset = getRealOffset(0x845EE0);
AssetBundlesHelper.DumpGameObject = (void(*)(void *, void *, monoString*, monoString*))AssetBundlesHelper.DumpGameObjectOffset;

AssetBundlesHelper.ShouldShowSpecialOfferOffset = getRealOffset(0x845290);
AssetBundlesHelper.ShouldShowSpecialOffer = (bool(*)(void*, void *))AssetBundlesHelper.ShouldShowSpecialOfferOffset;

AssetBundlesHelper.RefreshSpecialOffersShownAfterFrameOffset = getRealOffset(0x844BF8);
AssetBundlesHelper.RefreshSpecialOffersShownAfterFrame = (void *(*)(void*))AssetBundlesHelper.RefreshSpecialOffersShownAfterFrameOffset;

AssetBundlesHelper.RefreshSpecialOffersShownOffset = getRealOffset(0x84641C);
AssetBundlesHelper.RefreshSpecialOffersShown = (void(*)(void*))AssetBundlesHelper.RefreshSpecialOffersShownOffset;

AssetBundlesHelper.GetPurchasedOffersOffset = getRealOffset(0x844740);
AssetBundlesHelper.GetPurchasedOffers = (void(*)(void*))AssetBundlesHelper.GetPurchasedOffersOffset;

AssetBundlesHelper.OnSuccessGetPurchasedOffset = getRealOffset(0x846490);
AssetBundlesHelper.OnSuccessGetPurchased = (void(*)(void*, monoString*))AssetBundlesHelper.OnSuccessGetPurchasedOffset;

AssetBundlesHelper.GetSpecialOffersOffset = getRealOffset(0x844900);
AssetBundlesHelper.GetSpecialOffers = (void *(*)(void*))AssetBundlesHelper.GetSpecialOffersOffset;

AssetBundlesHelper.UnloadAssetBundlesOffset = getRealOffset(0x8467D8);
AssetBundlesHelper.UnloadAssetBundles = (void(*)(void*))AssetBundlesHelper.UnloadAssetBundlesOffset;

AssetBundlesHelper.GetAssetBundleURLOffset = getRealOffset(0x84698C);
AssetBundlesHelper.GetAssetBundleURL = (monoString *(*)(void*, monoString*))AssetBundlesHelper.GetAssetBundleURLOffset;

AssetBundlesHelper.ClearAssetBundleFromDiskOffset = getRealOffset(0x846B24);
AssetBundlesHelper.ClearAssetBundleFromDisk = (void(*)(void*, monoString*))AssetBundlesHelper.ClearAssetBundleFromDiskOffset;

AssetBundlesHelper.SaveTextFileOffset = getRealOffset(0x846FDC);
AssetBundlesHelper.SaveTextFile = (void(*)(void*, monoString*, monoString*, monoString*))AssetBundlesHelper.SaveTextFileOffset;

AssetBundlesHelper.SaveDownloadedAssetBundleOffset = getRealOffset(0x84729C);
AssetBundlesHelper.SaveDownloadedAssetBundle = (void(*)(void*, monoString*, void *))AssetBundlesHelper.SaveDownloadedAssetBundleOffset;

AssetBundlesHelper.CheckIfThereAreSOsb__15_0Offset = getRealOffset(0x8473CC);
AssetBundlesHelper.CheckIfThereAreSOsb__15_0 = (bool(*)(void*, void *))AssetBundlesHelper.CheckIfThereAreSOsb__15_0Offset;

AssetBundlesHelper.GetRandomOfferb__16_0Offset = getRealOffset(0x84740C);
AssetBundlesHelper.GetRandomOfferb__16_0 = (bool(*)(void*, void *))AssetBundlesHelper.GetRandomOfferb__16_0Offset;

AttachmentManager.AwakeOffset = getRealOffset(0x6B92C0);
AttachmentManager.Awake = (void(*)(void*))AttachmentManager.AwakeOffset;

AttachmentManager.GetSightStatsOffset = getRealOffset(0x6B931C);
AttachmentManager.GetSightStats = (int (*)(void*, int))AttachmentManager.GetSightStatsOffset;

AttachmentManager.GetBarrelPriceOffset = getRealOffset(0x6B93F0);
AttachmentManager.GetBarrelPrice = (int(*)(void*, int))AttachmentManager.GetBarrelPriceOffset;

AttachmentManager.GetBarrelPrefabOffset = getRealOffset(0x6B940C);
AttachmentManager.GetBarrelPrefab = (void *(*)(void*, int, bool))AttachmentManager.GetBarrelPrefabOffset;

AttachmentManager.BuyBarrelOffset = getRealOffset(0x6B9448);
AttachmentManager.BuyBarrel = (void(*)(void*, int, int))AttachmentManager.BuyBarrelOffset;

AttachmentManager.GetBarrelTypeFromNameOffset = getRealOffset(0x6B9528);
AttachmentManager.GetBarrelTypeFromName = (int (*)(void*, monoString*))AttachmentManager.GetBarrelTypeFromNameOffset;

AttachmentManager.GetBarrelNameFromTypeOffset = getRealOffset(0x6B95BC);
AttachmentManager.GetBarrelNameFromType = (monoString *(*)(void*, int))AttachmentManager.GetBarrelNameFromTypeOffset;

AttachmentManager.GetAccessoryPriceOffset = getRealOffset(0x6B9638);
AttachmentManager.GetAccessoryPrice = (int(*)(void*, int))AttachmentManager.GetAccessoryPriceOffset;

AttachmentManager.GetAccessoryPrefabOffset = getRealOffset(0x6B9654);
AttachmentManager.GetAccessoryPrefab = (void *(*)(void*, int, bool))AttachmentManager.GetAccessoryPrefabOffset;

AttachmentManager.BuyAccessoryOffset = getRealOffset(0x6B96A0);
AttachmentManager.BuyAccessory = (void(*)(void*, int, int))AttachmentManager.BuyAccessoryOffset;

AttachmentManager.GetAccessoryTypeFromNameOffset = getRealOffset(0x6B9780);
AttachmentManager.GetAccessoryTypeFromName = (int (*)(void*, monoString*))AttachmentManager.GetAccessoryTypeFromNameOffset;

AttachmentManager.GetAccessoryNameFromTypeOffset = getRealOffset(0x6B9814);
AttachmentManager.GetAccessoryNameFromType = (monoString *(*)(void*, int))AttachmentManager.GetAccessoryNameFromTypeOffset;

AttachmentManager.GetSightPriceOffset = getRealOffset(0x6B9890);
AttachmentManager.GetSightPrice = (int(*)(void*, int))AttachmentManager.GetSightPriceOffset;

AttachmentManager.GetSightPrefabOffset = getRealOffset(0x6B98B8);
AttachmentManager.GetSightPrefab = (void *(*)(void*, int))AttachmentManager.GetSightPrefabOffset;

AttachmentManager.BuySightOffset = getRealOffset(0x6B99D4);
AttachmentManager.BuySight = (void(*)(void*, int, int))AttachmentManager.BuySightOffset;

AttachmentManager.GetSightTypeFromNameOffset = getRealOffset(0x6B9AB4);
AttachmentManager.GetSightTypeFromName = (int (*)(void*, monoString*))AttachmentManager.GetSightTypeFromNameOffset;

AttachmentManager.GetSightNameFromTypeOffset = getRealOffset(0x6B9CA8);
AttachmentManager.GetSightNameFromType = (monoString *(*)(void*, int))AttachmentManager.GetSightNameFromTypeOffset;

AttachmentManager.OnDestroyOffset = getRealOffset(0x6BA97C);
AttachmentManager.OnDestroy = (void(*)(void*))AttachmentManager.OnDestroyOffset;

AudioManager.getRandomStepClipOffset = getRealOffset(0x6BAAA4);
AudioManager.getRandomStepClip = (void *(*)(void*))AudioManager.getRandomStepClipOffset;

AudioManager.getRandomExplosionClipOffset = getRealOffset(0x6BAAE0);
AudioManager.getRandomExplosionClip = (void *(*)(void*))AudioManager.getRandomExplosionClipOffset;

AudioManager.getRandomDeathSoundOffset = getRealOffset(0x6BAAE8);
AudioManager.getRandomDeathSound = (void *(*)(void*))AudioManager.getRandomDeathSoundOffset;

AudioManager.getRandomBulletHitClipOffset = getRealOffset(0x6BAAF0);
AudioManager.getRandomBulletHitClip = (void *(*)(void*))AudioManager.getRandomBulletHitClipOffset;

AudioManager.AwakeOffset = getRealOffset(0x6BAB2C);
AudioManager.Awake = (void(*)(void*))AudioManager.AwakeOffset;

AudioManager.StartOffset = getRealOffset(0x6BACAC);
AudioManager.Start = (void(*)(void*))AudioManager.StartOffset;

AudioManager.SetAmbientSoundVolumeOffset = getRealOffset(0x6BADAC);
AudioManager.SetAmbientSoundVolume = (void(*)(void*, float))AudioManager.SetAmbientSoundVolumeOffset;

AudioManager.playHealthLowSoundOffset = getRealOffset(0x6BADDC);
AudioManager.playHealthLowSound = (void(*)(void*))AudioManager.playHealthLowSoundOffset;

AudioManager.PlayNukeSirenOffset = getRealOffset(0x6BAF2C);
AudioManager.PlayNukeSiren = (void(*)(void*))AudioManager.PlayNukeSirenOffset;

AudioManager.PlayNukeExplosionOffset = getRealOffset(0x6BB05C);
AudioManager.PlayNukeExplosion = (void(*)(void*))AudioManager.PlayNukeExplosionOffset;

AudioManager.StopKillstreakSoundOffset = getRealOffset(0x6BB18C);
AudioManager.StopKillstreakSound = (void(*)(void*))AudioManager.StopKillstreakSoundOffset;

AudioManager.FadeOutHealthLowSoundOffset = getRealOffset(0x6BB228);
AudioManager.FadeOutHealthLowSound = (void(*)(void*))AudioManager.FadeOutHealthLowSoundOffset;

AudioManager.StopHealthLowSoundOffset = getRealOffset(0x6BB234);
AudioManager.StopHealthLowSound = (void(*)(void*))AudioManager.StopHealthLowSoundOffset;

AudioManager.UpdateFastOffset = getRealOffset(0x6BB284);
AudioManager.UpdateFast = (void(*)(void*))AudioManager.UpdateFastOffset;

AudioManager.PlayDeathSoundOffset = getRealOffset(0x6BB428);
AudioManager.PlayDeathSound = (void(*)(void*, bool))AudioManager.PlayDeathSoundOffset;

AudioManager.playGetHitSoundOffset = getRealOffset(0x6BB54C);
AudioManager.playGetHitSound = (void(*)(void*))AudioManager.playGetHitSoundOffset;

AudioManager.PlayTimerTickOffset = getRealOffset(0x6BB664);
AudioManager.PlayTimerTick = (void(*)(void*))AudioManager.PlayTimerTickOffset;

AudioManager.PlayHeadshotSoundOffset = getRealOffset(0x6BB774);
AudioManager.PlayHeadshotSound = (void(*)(void*))AudioManager.PlayHeadshotSoundOffset;

AudioManager.playHitMarkerSoundOffset = getRealOffset(0x6BB898);
AudioManager.playHitMarkerSound = (void(*)(void*, float))AudioManager.playHitMarkerSoundOffset;

AudioManager.PlaySoundOnceOffset = getRealOffset(0x6BBA08);
AudioManager.PlaySoundOnce = (void(*)(void*, void *, float))AudioManager.PlaySoundOnceOffset;

AudioManager.OnDestroyOffset = getRealOffset(0x6BBB6C);
AudioManager.OnDestroy = (void(*)(void*))AudioManager.OnDestroyOffset;

BRDFLookupTexture.AwakeOffset = getRealOffset(0x6BEA9C);
BRDFLookupTexture.Awake = (void(*)(void*))BRDFLookupTexture.AwakeOffset;

BRDFLookupTexture.ColorRGBOffset = getRealOffset(0x6BEB40);
BRDFLookupTexture.ColorRGB = (Color (*)(int, int, int))BRDFLookupTexture.ColorRGBOffset;

BRDFLookupTexture.CheckConsistencyOffset = getRealOffset(0x6BEBA4);
BRDFLookupTexture.CheckConsistency = (void(*)(void*))BRDFLookupTexture.CheckConsistencyOffset;

BRDFLookupTexture.PixelFuncOffset = getRealOffset(0x6BECD0);
BRDFLookupTexture.PixelFunc = (Color (*)(void*, float, float))BRDFLookupTexture.PixelFuncOffset;

BRDFLookupTexture.TextureFuncOffset = getRealOffset(0x6BF11C);
BRDFLookupTexture.TextureFunc = (void(*)(void*, void *))BRDFLookupTexture.TextureFuncOffset;

BRDFLookupTexture.GenerateLookupTextureOffset = getRealOffset(0x6BF240);
BRDFLookupTexture.GenerateLookupTexture = (void(*)(void*, int, int))BRDFLookupTexture.GenerateLookupTextureOffset;

BRDFLookupTexture.PreviewOffset = getRealOffset(0x6BF42C);
BRDFLookupTexture.Preview = (void(*)(void*))BRDFLookupTexture.PreviewOffset;

BRDFLookupTexture.BakeOffset = getRealOffset(0x6BEB34);
BRDFLookupTexture.Bake = (void(*)(void*))BRDFLookupTexture.BakeOffset;

BlackFadeScript.AwakeOffset = getRealOffset(0x6C940C);
BlackFadeScript.Awake = (void(*)(void*))BlackFadeScript.AwakeOffset;

BlackFadeScript.StartOffset = getRealOffset(0x6C94CC);
BlackFadeScript.Start = (void(*)(void*))BlackFadeScript.StartOffset;

BlackFadeScript.FadeOffset = getRealOffset(0x6C957C);
BlackFadeScript.Fade = (void(*)(void*))BlackFadeScript.FadeOffset;

BlackFadeScript.SetColorOffset = getRealOffset(0x6C9600);
BlackFadeScript.SetColor = (void(*)(void*, Color))BlackFadeScript.SetColorOffset;

BlackFadeScript.ClearOffset = getRealOffset(0x6C9694);
BlackFadeScript.Clear = (void(*)(void*))BlackFadeScript.ClearOffset;

BlackFadeScript.OnDestroyOffset = getRealOffset(0x6C972C);
BlackFadeScript.OnDestroy = (void(*)(void*))BlackFadeScript.OnDestroyOffset;

BlackFadeScript.UpdateFastOffset = getRealOffset(0x6C98F0);
BlackFadeScript.UpdateFast = (void(*)(void*))BlackFadeScript.UpdateFastOffset;

BleedBodyPart.StartOffset = getRealOffset(0x6CA254);
BleedBodyPart.Start = (void(*)(void*))BleedBodyPart.StartOffset;

BleedBodyPart.OnDestroyOffset = getRealOffset(0x6CA304);
BleedBodyPart.OnDestroy = (void(*)(void*))BleedBodyPart.OnDestroyOffset;

BleedBodyPart.UpdateFastOffset = getRealOffset(0x6CA468);
BleedBodyPart.UpdateFast = (void(*)(void*))BleedBodyPart.UpdateFastOffset;

BottomText.AwakeOffset = getRealOffset(0x6CB14C);
BottomText.Awake = (void(*)(void*))BottomText.AwakeOffset;

BottomText.SetVisibleOffset = getRealOffset(0x6CB200);
BottomText.SetVisible = (void(*)(void*, bool))BottomText.SetVisibleOffset;

BottomText.SetTextOffset = getRealOffset(0x6CB238);
BottomText.SetText = (void(*)(void*, monoString*))BottomText.SetTextOffset;

BottomText.OnEnableOffset = getRealOffset(0x6CB270);
BottomText.OnEnable = (void(*)(void*))BottomText.OnEnableOffset;

BottomText.StartOffset = getRealOffset(0x6CB324);
BottomText.Start = (void(*)(void*))BottomText.StartOffset;

BottomText.OnDestroyOffset = getRealOffset(0x6CB358);
BottomText.OnDestroy = (void(*)(void*))BottomText.OnDestroyOffset;

BouncingTurningScript.StartOffset = getRealOffset(0x6CB40C);
BouncingTurningScript.Start = (void(*)(void*))BouncingTurningScript.StartOffset;

BouncingTurningScript.SetOriginalPositionOffset = getRealOffset(0x6CB468);
BouncingTurningScript.SetOriginalPosition = (void(*)(void*, Vector3))BouncingTurningScript.SetOriginalPositionOffset;

BouncingTurningScript.UpdateOffset = getRealOffset(0x6CB474);
BouncingTurningScript.Update = (void(*)(void*))BouncingTurningScript.UpdateOffset;

ButtonPlaySound.AwakeOffset = getRealOffset(0x6CC000);
ButtonPlaySound.Awake = (void(*)(void*))ButtonPlaySound.AwakeOffset;

ButtonPlaySound.OnPointerDownOffset = getRealOffset(0x6CC24C);
ButtonPlaySound.OnPointerDown = (void(*)(void*, void *))ButtonPlaySound.OnPointerDownOffset;

ButtonPlaySound.OnPointerUpOffset = getRealOffset(0x6CC374);
ButtonPlaySound.OnPointerUp = (void(*)(void*, void *))ButtonPlaySound.OnPointerUpOffset;

ButtonPressScaleUp.AwakeOffset = getRealOffset(0x6CC4A4);
ButtonPressScaleUp.Awake = (void(*)(void*))ButtonPressScaleUp.AwakeOffset;

ButtonPressScaleUp.OnPointerUpOffset = getRealOffset(0x6CC504);
ButtonPressScaleUp.OnPointerUp = (void(*)(void*, void *))ButtonPressScaleUp.OnPointerUpOffset;

ButtonPressScaleUp.OnPointerDownOffset = getRealOffset(0x6CC5B0);
ButtonPressScaleUp.OnPointerDown = (void(*)(void*, void *))ButtonPressScaleUp.OnPointerDownOffset;

ButtonPressScaleUp.UpdateOffset = getRealOffset(0x6CC664);
ButtonPressScaleUp.Update = (void(*)(void*))ButtonPressScaleUp.UpdateOffset;

PopupCafeBazaar.PurchaseSuccessOffset = getRealOffset(0x70DEBC);
PopupCafeBazaar.PurchaseSuccess = (void(*)(void*))PopupCafeBazaar.PurchaseSuccessOffset;

PopupCafeBazaar.BazaarNotInitializedOffset = getRealOffset(0x70E060);
PopupCafeBazaar.BazaarNotInitialized = (void(*)(void*))PopupCafeBazaar.BazaarNotInitializedOffset;

PopupCafeBazaar.PopupEnableOffset = getRealOffset(0x70DFF0);
PopupCafeBazaar.PopupEnable = (void(*)(void*))PopupCafeBazaar.PopupEnableOffset;

CameraFacingBillboard.AwakeOffset = getRealOffset(0x6CF36C);
CameraFacingBillboard.Awake = (void(*)(void*))CameraFacingBillboard.AwakeOffset;

CameraFacingBillboard.StartOffset = getRealOffset(0x6CF388);
CameraFacingBillboard.Start = (void(*)(void*))CameraFacingBillboard.StartOffset;

CameraFacingBillboard.OnDestroyOffset = getRealOffset(0x6CF478);
CameraFacingBillboard.OnDestroy = (void(*)(void*))CameraFacingBillboard.OnDestroyOffset;

CameraFacingBillboard.UpdateFastOffset = getRealOffset(0x6CF5DC);
CameraFacingBillboard.UpdateFast = (void(*)(void*))CameraFacingBillboard.UpdateFastOffset;

CameraTimeLogger.UpdateOffset = getRealOffset(0x6D00A0);
CameraTimeLogger.Update = (void(*)(void*))CameraTimeLogger.UpdateOffset;

CamoCaseManager.AwakeOffset = getRealOffset(0x6D01E8);
CamoCaseManager.Awake = (void(*)(void*))CamoCaseManager.AwakeOffset;

CamoCaseManager.TryOpenCreditCaseOffset = getRealOffset(0x6D026C);
CamoCaseManager.TryOpenCreditCase = (void(*)(void*))CamoCaseManager.TryOpenCreditCaseOffset;

CamoCaseManager.TryOpenCaseOffset = getRealOffset(0x6D04C0);
CamoCaseManager.TryOpenCase = (void(*)(void*))CamoCaseManager.TryOpenCaseOffset;

CamoCaseManager.TryOpenCase1Offset = getRealOffset(0x6D0274);
CamoCaseManager.TryOpenCase1 = (void(*)(void*, int))CamoCaseManager.TryOpenCase1Offset;

CamoCaseManager.OnCaseOpenSuccessOffset = getRealOffset(0x6D04C8);
CamoCaseManager.OnCaseOpenSuccess = (void(*)(void*, void *))CamoCaseManager.OnCaseOpenSuccessOffset;

CamoCaseManager.OnCaseOpenErrorOffset = getRealOffset(0x6D050C);
CamoCaseManager.OnCaseOpenError = (void(*)(void*, monoString*))CamoCaseManager.OnCaseOpenErrorOffset;

CamoCaseManager.OpenCaseOffset = getRealOffset(0x6D0510);
CamoCaseManager.OpenCase = (void(*)(void*, void *))CamoCaseManager.OpenCaseOffset;

CamoCaseManager.OpenAdCaseOffset = getRealOffset(0x6D1588);
CamoCaseManager.OpenAdCase = (void(*)(void*))CamoCaseManager.OpenAdCaseOffset;

CamoCaseManager.OpenCaseAnimationOffset = getRealOffset(0x6D16D4);
CamoCaseManager.OpenCaseAnimation = (void(*)(void*))CamoCaseManager.OpenCaseAnimationOffset;

CamoCaseManager.FadeInNamesOffset = getRealOffset(0x6D1758);
CamoCaseManager.FadeInNames = (void(*)(void*))CamoCaseManager.FadeInNamesOffset;

CamoCaseManager.UpdateOffset = getRealOffset(0x6D177C);
CamoCaseManager.Update = (void(*)(void*))CamoCaseManager.UpdateOffset;

CamoCaseManager.FinishOpeningCaseOffset = getRealOffset(0x6D1B04);
CamoCaseManager.FinishOpeningCase = (void(*)(void*))CamoCaseManager.FinishOpeningCaseOffset;

CamoCaseManager.OpenCaseJsonOffset = getRealOffset(0x6D21E8);
CamoCaseManager.OpenCaseJson = (void(*)(void*, monoString*))CamoCaseManager.OpenCaseJsonOffset;

CamoCaseManager.PrepareCaseAssetsOffset = getRealOffset(0x6D0A04);
CamoCaseManager.PrepareCaseAssets = (void(*)(void*, void *))CamoCaseManager.PrepareCaseAssetsOffset;

CamoCaseManager.ShowRightAwardCurrencyOffset = getRealOffset(0x6D23E4);
CamoCaseManager.ShowRightAwardCurrency = (void(*)(void*, monoString*))CamoCaseManager.ShowRightAwardCurrencyOffset;

CamoCaseManager.ClearPreviousRewardOffset = getRealOffset(0x6D22A0);
CamoCaseManager.ClearPreviousReward = (void(*)(void*))CamoCaseManager.ClearPreviousRewardOffset;

CamoCaseManager.BuyCreditCasesOffset = getRealOffset(0x6D2CF0);
CamoCaseManager.BuyCreditCases = (void(*)(void*, int))CamoCaseManager.BuyCreditCasesOffset;

CamoCaseManager.BuyCasesOffset = getRealOffset(0x6D2FAC);
CamoCaseManager.BuyCases = (void(*)(void*, int))CamoCaseManager.BuyCasesOffset;

CamoCaseManager.BuyCases1Offset = getRealOffset(0x6D2CF8);
CamoCaseManager.BuyCases1 = (void(*)(void*, int, int))CamoCaseManager.BuyCases1Offset;

CamoCaseManager.ConfirmBuyCasesOffset = getRealOffset(0x6D2FB4);
CamoCaseManager.ConfirmBuyCases = (void(*)(void*))CamoCaseManager.ConfirmBuyCasesOffset;

CamoCaseManager.CreditCasePurchaseSuccessOffset = getRealOffset(0x6D30E8);
CamoCaseManager.CreditCasePurchaseSuccess = (void(*)(void*))CamoCaseManager.CreditCasePurchaseSuccessOffset;

CamoCaseManager.CreditCasePurchaseErrorOffset = getRealOffset(0x6D31CC);
CamoCaseManager.CreditCasePurchaseError = (void(*)(void*, monoString*))CamoCaseManager.CreditCasePurchaseErrorOffset;

CamoCaseManager.CancelConfirmationOffset = getRealOffset(0x6D3394);
CamoCaseManager.CancelConfirmation = (void(*)(void*))CamoCaseManager.CancelConfirmationOffset;

CamoCaseManager.GetCaseAmountTextOffset = getRealOffset(0x6D33A0);
CamoCaseManager.GetCaseAmountText = (monoString *(*)(void*, int))CamoCaseManager.GetCaseAmountTextOffset;

CamoCaseManager.StopLoadingOffset = getRealOffset(0x6D04CC);
CamoCaseManager.StopLoading = (void(*)(void*))CamoCaseManager.StopLoadingOffset;

CamoCaseManager.SetCasesOffset = getRealOffset(0x6D33F8);
CamoCaseManager.SetCases = (void(*)(void*))CamoCaseManager.SetCasesOffset;

CamoCaseManager.OnDestroyOffset = getRealOffset(0x6D3550);
CamoCaseManager.OnDestroy = (void(*)(void*))CamoCaseManager.OnDestroyOffset;

CamoManager.get_InstanceOffset = getRealOffset(0x6D2534);
CamoManager.get_Instance = (void *(*)())CamoManager.get_InstanceOffset;

CamoManager.set_InstanceOffset = getRealOffset(0x6D51E8);
CamoManager.set_Instance = (void(*)(void *))CamoManager.set_InstanceOffset;

CamoManager.get_IsInitializedOffset = getRealOffset(0x6D5244);
CamoManager.get_IsInitialized = (bool(*)())CamoManager.get_IsInitializedOffset;

CamoManager.set_IsInitializedOffset = getRealOffset(0x6D529C);
CamoManager.set_IsInitialized = (void(*)(bool))CamoManager.set_IsInitializedOffset;

CamoManager.OnSceneLoadedOffset = getRealOffset(0x6D5364);
CamoManager.OnSceneLoaded = (void(*)(void*, int, int))CamoManager.OnSceneLoadedOffset;

CamoManager.GetCamoTextureFromFilenameOffset = getRealOffset(0x6D536C);
CamoManager.GetCamoTextureFromFilename = (void *(*)(void*, monoString*))CamoManager.GetCamoTextureFromFilenameOffset;

CamoManager.STBRGBOffset = getRealOffset(0x6D54CC);
CamoManager.STBRGB = (Color (*)(void*, int, int, int))CamoManager.STBRGBOffset;

CamoManager.GetCamoColorsOffset = getRealOffset(0x6D2CCC);
CamoManager.PriorizeCamoOffset = getRealOffset(0x6D5608);
CamoManager.PriorizeCamo = (bool(*)(void*, int))CamoManager.PriorizeCamoOffset;

CamoManager.Hex2RgbOffset = getRealOffset(0x6D56EC);
CamoManager.Hex2Rgb = (Color (*)(monoString*))CamoManager.Hex2RgbOffset;

CamoManager.GetCamoTextureOffset = getRealOffset(0x6D584C);
CamoManager.GetCamoTexture = (void *(*)(void*, int))CamoManager.GetCamoTextureOffset;

CamoManager.GetCamoStatsFromTypeOffset = getRealOffset(0x6D5874);
CamoManager.GetCamoStatsFromType = (void *(*)(void*, int))CamoManager.GetCamoStatsFromTypeOffset;

CamoManager.GetCamoStatsFromType1Offset = getRealOffset(0x6D552C);
CamoManager.GetCamoStatsFromType1 = (void *(*)(void*, int))CamoManager.GetCamoStatsFromType1Offset;

CamoManager.GetCamoNameFromTypeOffset = getRealOffset(0x6D2CA8);
CamoManager.GetCamoNameFromType = (monoString *(*)(void*, int))CamoManager.GetCamoNameFromTypeOffset;

CamoManager.GetCamoTypeFromNameOffset = getRealOffset(0x6D5880);
CamoManager.GetCamoTypeFromName = (int (*)(void*, monoString*))CamoManager.GetCamoTypeFromNameOffset;

CamoManager.GetCharacterCamoTextureFromNameOffset = getRealOffset(0x6D5974);
CamoManager.GetCharacterCamoTextureFromName = (void *(*)(void*, int))CamoManager.GetCharacterCamoTextureFromNameOffset;

CamoManager.GetCharacterCamoStatsFromTypeOffset = getRealOffset(0x6D25E0);
CamoManager.GetCharacterCamoStatsFromType = (void *(*)(void*, int))CamoManager.GetCharacterCamoStatsFromTypeOffset;

CamoManager.GetCharacterCamoTypeFromCamoNameOffset = getRealOffset(0x6D59A4);
CamoManager.GetCharacterCamoTypeFromCamoName = (int (*)(void*, monoString*))CamoManager.GetCharacterCamoTypeFromCamoNameOffset;

CamoManager.GetBulletTracerColorStatsFromTypeOffset = getRealOffset(0x6D5A98);
CamoManager.GetBulletTracerColorStatsFromType = (void *(*)(void*, int))CamoManager.GetBulletTracerColorStatsFromTypeOffset;

CamoManager.GetBulletTracerTypeFromColorNameOffset = getRealOffset(0x6D5B7C);
CamoManager.GetBulletTracerTypeFromColorName = (int (*)(void*, monoString*))CamoManager.GetBulletTracerTypeFromColorNameOffset;

CamoManager.UnlockAndSetWeaponCamoOffset = getRealOffset(0x6D5C70);
CamoManager.UnlockAndSetWeaponCamo = (void(*)(void*, int, int))CamoManager.UnlockAndSetWeaponCamoOffset;

CamoManager.ClearCamoDataOffset = getRealOffset(0x6D5EF8);
CamoManager.ClearCamoData = (void(*)(void*))CamoManager.ClearCamoDataOffset;

CamoSetter.AwakeOffset = getRealOffset(0x6D6774);
CamoSetter.Awake = (void(*)(void*))CamoSetter.AwakeOffset;

CamoSetter.SetCharacterCamoOffset = getRealOffset(0x6D74FC);
CamoSetter.SetCharacterCamo = (void(*)(void*, int, bool))CamoSetter.SetCharacterCamoOffset;

CamoSetter.SetCharacterCamo1Offset = getRealOffset(0x6D26BC);
CamoSetter.SetCharacterCamo1 = (void(*)(void*, int, bool))CamoSetter.SetCharacterCamo1Offset;

CamoSetter.SetCamoOffset = getRealOffset(0x6D7500);
CamoSetter.SetCamo = (void(*)(void*, int, bool))CamoSetter.SetCamoOffset;

CamoSetter.SetCamo1Offset = getRealOffset(0x6D68B0);
CamoSetter.SetCamo1 = (void(*)(void*, int, bool))CamoSetter.SetCamo1Offset;

CamoSetter.SetBulletTracerColorOffset = getRealOffset(0x6D6F7C);
CamoSetter.SetBulletTracerColor = (void(*)(void*, int, bool))CamoSetter.SetBulletTracerColorOffset;

CamoSetter.UpdateMaterialOffset = getRealOffset(0x6D7504);
CamoSetter.UpdateMaterial = (void(*)(void*, void *, void *))CamoSetter.UpdateMaterialOffset;

CamoSetter.RunMaterialUpdateOffset = getRealOffset(0x6D7AA8);
CamoSetter.RunMaterialUpdate = (void(*)(void*, void *))CamoSetter.RunMaterialUpdateOffset;

CamoSetter.UpdateOffset = getRealOffset(0x6D7BD4);
CamoSetter.Update = (void(*)(void*))CamoSetter.UpdateOffset;

CamoSetter.RectTransformToScreenSpaceOffset = getRealOffset(0x6D8038);
CamoSetter.RectTransformToScreenSpace = (int (*)(void *))CamoSetter.RectTransformToScreenSpaceOffset;

CanvasGroupTransition.AwakeOffset = getRealOffset(0x6D8284);
CanvasGroupTransition.Awake = (void(*)(void*))CanvasGroupTransition.AwakeOffset;

CanvasGroupTransition.FadeInIfInactiveOffset = getRealOffset(0x6D8300);
CanvasGroupTransition.FadeInIfInactive = (void(*)(void*))CanvasGroupTransition.FadeInIfInactiveOffset;

CanvasGroupTransition.FadeOutIfActiveOffset = getRealOffset(0x6D8428);
CanvasGroupTransition.FadeOutIfActive = (void(*)(void*))CanvasGroupTransition.FadeOutIfActiveOffset;

CanvasGroupTransition.FadeInOffset = getRealOffset(0x6D8344);
CanvasGroupTransition.FadeIn = (void(*)(void*))CanvasGroupTransition.FadeInOffset;

CanvasGroupTransition.FadeOutOffset = getRealOffset(0x6D846C);
CanvasGroupTransition.FadeOut = (void(*)(void*))CanvasGroupTransition.FadeOutOffset;

CanvasGroupTransition.OnEnableOffset = getRealOffset(0x6D8550);
CanvasGroupTransition.OnEnable = (void(*)(void*))CanvasGroupTransition.OnEnableOffset;

CanvasGroupTransition.UpdateOffset = getRealOffset(0x6D85D8);
CanvasGroupTransition.Update = (void(*)(void*))CanvasGroupTransition.UpdateOffset;

Carousel.get_characterCamoCarouselOffset = getRealOffset(0x77C9D4);
Carousel.get_characterCamoCarousel = (bool(*)(void*))Carousel.get_characterCamoCarouselOffset;

Carousel.get_weaponCamoCarouselOffset = getRealOffset(0x77CA9C);
Carousel.get_weaponCamoCarousel = (bool(*)(void*))Carousel.get_weaponCamoCarouselOffset;

Carousel.get_bulletTracerCarouselOffset = getRealOffset(0x77CB64);
Carousel.get_bulletTracerCarousel = (bool(*)(void*))Carousel.get_bulletTracerCarouselOffset;

Carousel.get_selectedObjectOffset = getRealOffset(0x77CC2C);
Carousel.get_selectedObject = (void *(*)(void*))Carousel.get_selectedObjectOffset;

Carousel.get_activeChildrensOffset = getRealOffset(0x77CCC4);
Carousel.get_activeChildrenOffset = getRealOffset(0x77CE38);
Carousel.StartOffset = getRealOffset(0x77CFE0);
Carousel.Start = (void(*)(void*))Carousel.StartOffset;

Carousel.NextOffset = getRealOffset(0x77D868);
Carousel.Next = (void(*)(void*))Carousel.NextOffset;

Carousel.PreviousOffset = getRealOffset(0x77D8EC);
Carousel.Previous = (void(*)(void*))Carousel.PreviousOffset;

Carousel.SelectWithIndexOffset = getRealOffset(0x77CFF4);
Carousel.SelectWithIndex = (void(*)(void*, int))Carousel.SelectWithIndexOffset;

Carousel.FixMaskOffset = getRealOffset(0x77D900);
Carousel.FixMask = (void *(*)(void*))Carousel.FixMaskOffset;

Carousel.SelectWithObjectOffset = getRealOffset(0x77D9A0);
Carousel.SelectWithObject = (void(*)(void*, void *))Carousel.SelectWithObjectOffset;

Carousel.SelectWithNameOffset = getRealOffset(0x77DAB8);
Carousel.SelectWithName = (void(*)(void*, monoString*))Carousel.SelectWithNameOffset;

Carousel.OnEnableOffset = getRealOffset(0x77DBAC);
Carousel.OnEnable = (void(*)(void*))Carousel.OnEnableOffset;

ChangeTextForLanguage.GetSizeOffset = getRealOffset(0x77ED20);
ChangeTextForLanguage.GetSize = (int(*)(void*, void *, monoString*))ChangeTextForLanguage.GetSizeOffset;

ChangeTextForLanguage.AwakeOffset = getRealOffset(0x77EDF8);
ChangeTextForLanguage.Awake = (void(*)(void*))ChangeTextForLanguage.AwakeOffset;

ChangeTransformWithEvent.SetToPositionOffset = getRealOffset(0x77F174);
ChangeTransformWithEvent.SetToPosition = (void(*)(void*, int))ChangeTransformWithEvent.SetToPositionOffset;

ChatButton.AwakeOffset = getRealOffset(0x780D84);
ChatButton.Awake = (void(*)(void*))ChatButton.AwakeOffset;

ChatButton.StartOffset = getRealOffset(0x780DE0);
ChatButton.Start = (void(*)(void*))ChatButton.StartOffset;

ChatButton.RefreshVisibleOffset = getRealOffset(0x780F48);
ChatButton.RefreshVisible = (void(*)(void*, bool))ChatButton.RefreshVisibleOffset;

ChatButton.OnPointerUpOffset = getRealOffset(0x781054);
ChatButton.OnPointerUp = (void(*)(void*, void *))ChatButton.OnPointerUpOffset;

ChatButton.OnDestroyOffset = getRealOffset(0x781420);
ChatButton.OnDestroy = (void(*)(void*))ChatButton.OnDestroyOffset;

BanOrMuteCommand.ToStringOffset = getRealOffset(0x6C2C60);
BanOrMuteCommand.ToString = (monoString *(*)(void*))BanOrMuteCommand.ToStringOffset;

ChatCommand.get_IsOkOffset = getRealOffset(0x7815F0);
ChatCommand.get_IsOk = (bool(*)(void*))ChatCommand.get_IsOkOffset;

ChatOptions.AwakeOffset = getRealOffset(0x781600);
ChatOptions.Awake = (void(*)(void*))ChatOptions.AwakeOffset;

ChatOptions.StartOffset = getRealOffset(0x78167C);
ChatOptions.Start = (void(*)(void*))ChatOptions.StartOffset;

ChatOptions.IsEnabledOffset = getRealOffset(0x781998);
ChatOptions.IsEnabled = (bool(*)())ChatOptions.IsEnabledOffset;

ChatOptions.SetEnabledOffset = getRealOffset(0x7819FC);
ChatOptions.SetEnabled = (void(*)(bool))ChatOptions.SetEnabledOffset;

ChatOptions.SetDropdownOffset = getRealOffset(0x781B20);
ChatOptions.SetDropdown = (void(*)(void*, int))ChatOptions.SetDropdownOffset;

Chatbox.AwakeOffset = getRealOffset(0x781B88);
Chatbox.Awake = (void(*)(void*))Chatbox.AwakeOffset;

Chatbox.StartOffset = getRealOffset(0x781E3C);
Chatbox.Start = (void(*)(void*))Chatbox.StartOffset;

Chatbox.activateInputOffset = getRealOffset(0x781160);
Chatbox.activateInput = (void(*)(void*))Chatbox.activateInputOffset;

Chatbox.OnEnableChatConfirmedOffset = getRealOffset(0x78244C);
Chatbox.OnEnableChatConfirmed = (void(*)(void*))Chatbox.OnEnableChatConfirmedOffset;

Chatbox.OnDestroyOffset = getRealOffset(0x782498);
Chatbox.OnDestroy = (void(*)(void*))Chatbox.OnDestroyOffset;

Chatbox.ShowAllOffset = getRealOffset(0x78265C);
Chatbox.ShowAll = (void(*)(void*, bool))Chatbox.ShowAllOffset;

Chatbox.deactivateInputOffset = getRealOffset(0x7826F4);
Chatbox.deactivateInput = (void(*)(void*))Chatbox.deactivateInputOffset;

Chatbox.SelfSubmitMessageOffset = getRealOffset(0x782850);
Chatbox.SelfSubmitMessage = (void(*)(void*, monoString*))Chatbox.SelfSubmitMessageOffset;

Chatbox.RawShowMessageOffset = getRealOffset(0x783298);
Chatbox.RawShowMessage = (void(*)(void*, monoString*, Color))Chatbox.RawShowMessageOffset;

Chatbox.UpdateBackgroundHeightOffset = getRealOffset(0x782108);
Chatbox.UpdateBackgroundHeight = (void(*)(void*))Chatbox.UpdateBackgroundHeightOffset;

Chatbox.ShowMessageOffset = getRealOffset(0x78357C);
Chatbox.ShowMessage = (void(*)(void*, monoString*, monoString*, Color))Chatbox.ShowMessageOffset;

Chatbox.ShowPerkMessageOffset = getRealOffset(0x783624);
Chatbox.ShowPerkMessage = (void(*)(void*, monoString*, monoString*))Chatbox.ShowPerkMessageOffset;

Chatbox.UpdateFastOffset = getRealOffset(0x7836C8);
Chatbox.UpdateFast = (void(*)(void*))Chatbox.UpdateFastOffset;

ChatboxItem.AwakeOffset = getRealOffset(0x783804);
ChatboxItem.Awake = (void(*)(void*))ChatboxItem.AwakeOffset;

ChatboxItem.StartOffset = getRealOffset(0x7838A0);
ChatboxItem.Start = (void(*)(void*))ChatboxItem.StartOffset;

ChatboxItem.getTextStringOffset = getRealOffset(0x783530);
ChatboxItem.getTextString = (monoString *(*)(void*))ChatboxItem.getTextStringOffset;

ChatboxItem.GetTextColorOffset = getRealOffset(0x783550);
ChatboxItem.GetTextColor = (Color (*)(void*))ChatboxItem.GetTextColorOffset;

ChatboxItem.OnDestroyOffset = getRealOffset(0x783A50);
ChatboxItem.OnDestroy = (void(*)(void*))ChatboxItem.OnDestroyOffset;

ChatboxItem.updateTextOffset = getRealOffset(0x78201C);
ChatboxItem.updateText = (void(*)(void*, monoString*, Color, bool))ChatboxItem.updateTextOffset;

ChatboxItem.UpdateFastOffset = getRealOffset(0x783BB4);
ChatboxItem.UpdateFast = (void(*)(void*))ChatboxItem.UpdateFastOffset;

CombineAtRuntime.AwakeOffset = getRealOffset(0x81A91C);
CombineAtRuntime.Awake = (void(*)(void*))CombineAtRuntime.AwakeOffset;

ConnectLineRenderers.StartOffset = getRealOffset(0x81B34C);
ConnectLineRenderers.Start = (void(*)(void*))ConnectLineRenderers.StartOffset;

ConnectLineRenderers.UpdateOffset = getRealOffset(0x81B350);
ConnectLineRenderers.Update = (void(*)(void*))ConnectLineRenderers.UpdateOffset;

ConquestButton.AwakeOffset = getRealOffset(0x81B480);
ConquestButton.Awake = (void(*)(void*))ConquestButton.AwakeOffset;

ConquestButton.SetColorOffset = getRealOffset(0x81B4B0);
ConquestButton.SetColor = (void(*)(void*, Color))ConquestButton.SetColorOffset;

ConquestButton.ShowCircleOffset = getRealOffset(0x81B580);
ConquestButton.ShowCircle = (void(*)(void*, bool))ConquestButton.ShowCircleOffset;

ConquestButton.SelectFlagOffset = getRealOffset(0x81B5D4);
ConquestButton.SelectFlag = (void(*)(void*))ConquestButton.SelectFlagOffset;

ContinueButton.StartOffset = getRealOffset(0x81B830);
ContinueButton.Start = (void(*)(void*))ContinueButton.StartOffset;

ContinueButton.OnPointerUpOffset = getRealOffset(0x81B9F4);
ContinueButton.OnPointerUp = (void(*)(void*, void *))ContinueButton.OnPointerUpOffset;

CreditRewards.AdjustGameplayRewardOffset = getRealOffset(0x824ED0);
CreditRewards.AdjustGameplayReward = (int(*)(int))CreditRewards.AdjustGameplayRewardOffset;

CreditRewards.AdjustGameplayReward1Offset = getRealOffset(0x824ED8);
CreditRewards.AdjustGameplayReward1 = (int(*)(int, float))CreditRewards.AdjustGameplayReward1Offset;

CreditsManager.get_creditsPrefsKeyOffset = getRealOffset(0x824F80);
CreditsManager.get_creditsPrefsKey = (monoString *(*)())CreditsManager.get_creditsPrefsKeyOffset;

CreditsManager.AwakeOffset = getRealOffset(0x82500C);
CreditsManager.Awake = (void(*)(void*))CreditsManager.AwakeOffset;

CreditsManager.ShowLoadingOffset = getRealOffset(0x825068);
CreditsManager.ShowLoading = (void(*)(void*))CreditsManager.ShowLoadingOffset;

CreditsManager.StopLoadingOffset = getRealOffset(0x825150);
CreditsManager.StopLoading = (void(*)(void*))CreditsManager.StopLoadingOffset;

CreditsManager.HideConfirmationPopUpOffset = getRealOffset(0x825238);
CreditsManager.HideConfirmationPopUp = (void(*)(void*))CreditsManager.HideConfirmationPopUpOffset;

CreditsManager.BuyCreditsOffset = getRealOffset(0x825264);
CreditsManager.BuyCredits = (void(*)(void*, int))CreditsManager.BuyCreditsOffset;

CreditsManager.ConfirmBuyCreditsOffset = getRealOffset(0x825548);
CreditsManager.ConfirmBuyCredits = (void(*)(void*))CreditsManager.ConfirmBuyCreditsOffset;

CreditsManager.CancelConfirmationOffset = getRealOffset(0x82571C);
CreditsManager.CancelConfirmation = (void(*)(void*))CreditsManager.CancelConfirmationOffset;

CreditsManager.BuyCreditsFromServerOffset = getRealOffset(0x825684);
CreditsManager.BuyCreditsFromServer = (void *(*)(void*, int))CreditsManager.BuyCreditsFromServerOffset;

CreditsManager.FinishedUploadingCreditsOffset = getRealOffset(0x8257DC);
CreditsManager.FinishedUploadingCredits = (void(*)(void*))CreditsManager.FinishedUploadingCreditsOffset;

CreditsManager.OnDestroyOffset = getRealOffset(0x8258FC);
CreditsManager.OnDestroy = (void(*)(void*))CreditsManager.OnDestroyOffset;

CrosshairScript.ShowOffset = getRealOffset(0x826158);
CrosshairScript.Show = (void(*)(void*, bool))CrosshairScript.ShowOffset;

CrosshairScript.setTargetDistanceOffset = getRealOffset(0x8264E8);
CrosshairScript.setTargetDistance = (void(*)(void*, float))CrosshairScript.setTargetDistanceOffset;

CrosshairScript.AwakeOffset = getRealOffset(0x826514);
CrosshairScript.Awake = (void(*)(void*))CrosshairScript.AwakeOffset;

CrosshairScript.StartOffset = getRealOffset(0x8267F8);
CrosshairScript.Start = (void(*)(void*))CrosshairScript.StartOffset;

CrosshairScript.LerpPositionOffset = getRealOffset(0x8268B4);
CrosshairScript.LerpPosition = (void(*)(void*, void *, Vector2))CrosshairScript.LerpPositionOffset;

CrosshairScript.SetColorOffset = getRealOffset(0x8269B4);
CrosshairScript.SetColor = (void(*)(void*, Color))CrosshairScript.SetColorOffset;

CrosshairScript.OnDestroyOffset = getRealOffset(0x826AB4);
CrosshairScript.OnDestroy = (void(*)(void*))CrosshairScript.OnDestroyOffset;

CrosshairScript.UpdateFastOffset = getRealOffset(0x826C78);
CrosshairScript.UpdateFast = (void(*)(void*))CrosshairScript.UpdateFastOffset;

CrouchScript.AwakeOffset = getRealOffset(0x827260);
CrouchScript.Awake = (void(*)(void*))CrouchScript.AwakeOffset;

CrouchScript.StartOffset = getRealOffset(0x8272BC);
CrouchScript.Start = (void(*)(void*))CrouchScript.StartOffset;

CrouchScript.RefreshVisibleOffset = getRealOffset(0x82737C);
CrouchScript.RefreshVisible = (void(*)(void*, bool))CrouchScript.RefreshVisibleOffset;

CrouchScript.OnPointerDownOffset = getRealOffset(0x827448);
CrouchScript.OnPointerDown = (void(*)(void*, void *))CrouchScript.OnPointerDownOffset;

CrouchScript.OnDestroyOffset = getRealOffset(0x827550);
CrouchScript.OnDestroy = (void(*)(void*))CrouchScript.OnDestroyOffset;

CryptoRandom.NextDoubleOffset = getRealOffset(0x827778);
CryptoRandom.NextOffset = getRealOffset(0x82786C);
CryptoRandom.Next = (int(*)(void*, int, int))CryptoRandom.NextOffset;

CryptoRandom.Next1Offset = getRealOffset(0x8279A4);
CryptoRandom.Next1 = (int(*)(void*))CryptoRandom.Next1Offset;

CryptoRandom.Next2Offset = getRealOffset(0x8279B0);
CryptoRandom.Next2 = (int(*)(void*, int))CryptoRandom.Next2Offset;

AbstractCustomization.get_CamoNameOffset = getRealOffset(0x6B0210);
AbstractCustomization.get_CamoName = (monoString *(*)(void*))AbstractCustomization.get_CamoNameOffset;

AbstractCustomization.set_CamoNameOffset = getRealOffset(0x6B0250);
AbstractCustomization.set_CamoName = (void(*)(void*, monoString*))AbstractCustomization.set_CamoNameOffset;

AbstractCustomization.GetUnlockedCustomizationKeyOffset = getRealOffset(0x6B0258);
AbstractCustomization.GetUnlockedCustomizationKey = (monoString *(*)(int, int))AbstractCustomization.GetUnlockedCustomizationKeyOffset;

AbstractCustomization.GetEquippedCustomizationKeyOffset = getRealOffset(0x6B0344);
AbstractCustomization.GetEquippedCustomizationKey = (monoString *(*)(int))AbstractCustomization.GetEquippedCustomizationKeyOffset;

AbstractCustomization.DeserializeCustomizationsOffset = getRealOffset(0x6B0408);
AbstractCustomization.DeserializeCustomizations = (void *(*)(monoString*))AbstractCustomization.DeserializeCustomizationsOffset;

AbstractCustomization.get_GetTextureOffset = getRealOffset(0x6B0464);
AbstractCustomization.get_GetTexture = (void *(*)(void*))AbstractCustomization.get_GetTextureOffset;

AbstractCustomization.get_GetIconOffset = getRealOffset(0x6B0598);
AbstractCustomization.get_GetIcon = (void *(*)(void*))AbstractCustomization.get_GetIconOffset;

Armor.get_CustomizationTypeOffset = getRealOffset(0x841180);
Armor.get_CustomizationType = (int (*)(void*))Armor.get_CustomizationTypeOffset;

Armor.GetCustomizationIDOffset = getRealOffset(0x841188);
Armor.GetCustomizationID = (int(*)(void*))Armor.GetCustomizationIDOffset;

Armor.GetCustomizationTypeStringOffset = getRealOffset(0x841190);
Armor.GetCustomizationTypeString = (monoString *(*)(void*))Armor.GetCustomizationTypeStringOffset;

Backpack.get_CustomizationTypeOffset = getRealOffset(0x6BF588);
Backpack.get_CustomizationType = (int (*)(void*))Backpack.get_CustomizationTypeOffset;

Backpack.GetCustomizationIDOffset = getRealOffset(0x6BF590);
Backpack.GetCustomizationID = (int(*)(void*))Backpack.GetCustomizationIDOffset;

Backpack.GetCustomizationTypeStringOffset = getRealOffset(0x6BF598);
Backpack.GetCustomizationTypeString = (monoString *(*)(void*))Backpack.GetCustomizationTypeStringOffset;

Belts.get_CustomizationTypeOffset = getRealOffset(0x6C934C);
Belts.get_CustomizationType = (int (*)(void*))Belts.get_CustomizationTypeOffset;

Belts.GetCustomizationIDOffset = getRealOffset(0x6C9354);
Belts.GetCustomizationID = (int(*)(void*))Belts.GetCustomizationIDOffset;

Belts.GetCustomizationTypeStringOffset = getRealOffset(0x6C935C);
Belts.GetCustomizationTypeString = (monoString *(*)(void*))Belts.GetCustomizationTypeStringOffset;

Boots.get_CustomizationTypeOffset = getRealOffset(0x6CB08C);
Boots.get_CustomizationType = (int (*)(void*))Boots.get_CustomizationTypeOffset;

Boots.GetCustomizationIDOffset = getRealOffset(0x6CB094);
Boots.GetCustomizationID = (int(*)(void*))Boots.GetCustomizationIDOffset;

Boots.GetCustomizationTypeStringOffset = getRealOffset(0x6CB09C);
Boots.GetCustomizationTypeString = (monoString *(*)(void*))Boots.GetCustomizationTypeStringOffset;

CharacterCustomizationsReferences.AwakeOffset = getRealOffset(0x780288);
CharacterCustomizationsReferences.Awake = (void(*)(void*))CharacterCustomizationsReferences.AwakeOffset;

CharacterCustomizationsReferences.GetBodyPartDefaultMaterialOffset = getRealOffset(0x780474);
CharacterCustomizationsReferences.GetBodyPartDefaultMaterial = (void *(*)(void*, int))CharacterCustomizationsReferences.GetBodyPartDefaultMaterialOffset;

CharacterCustomizationsReferences.SetCustomizableOffset = getRealOffset(0x780564);
CharacterCustomizationsReferences.SetCustomizable = (void(*)(void*, int, int))CharacterCustomizationsReferences.SetCustomizableOffset;

CharacterCustomizationsReferences.SetOldCharacterCamoOffset = getRealOffset(0x780A40);
CharacterCustomizationsReferences.SetOldCharacterCamo = (void(*)(void*, int))CharacterCustomizationsReferences.SetOldCharacterCamoOffset;

CamoDataScriptableObject.get_camoTypeOffset = getRealOffset(0x6D3DC4);
CamoDataScriptableObject.get_camoType = (int (*)(void*))CamoDataScriptableObject.get_camoTypeOffset;

CamoDataScriptableObject.get_characterCamoTypeOffset = getRealOffset(0x6D3DCC);
CamoDataScriptableObject.get_characterCamoType = (int (*)(void*))CamoDataScriptableObject.get_characterCamoTypeOffset;

CamoDataScriptableObject.get_bulletTracerTypeOffset = getRealOffset(0x6D3DD4);
CamoDataScriptableObject.get_bulletTracerType = (int (*)(void*))CamoDataScriptableObject.get_bulletTracerTypeOffset;

CamoDataScriptableObject.get_nameOffset = getRealOffset(0x6D3DDC);
CamoDataScriptableObject.get_name = (monoString *(*)(void*))CamoDataScriptableObject.get_nameOffset;

CamoDataScriptableObject.get_recolorFactorOffset = getRealOffset(0x6D3DE4);
CamoDataScriptableObject.get_recolorFactor = (float(*)(void*))CamoDataScriptableObject.get_recolorFactorOffset;

CamoDataScriptableObject.get_colorsOffset = getRealOffset(0x6D3DEC);
CamoDataScriptableObject.get_useColorSwitchingOffset = getRealOffset(0x6D3DF4);
CamoDataScriptableObject.get_useColorSwitching = (bool(*)(void*))CamoDataScriptableObject.get_useColorSwitchingOffset;

CamoDataScriptableObject.get_colorsTwoOffset = getRealOffset(0x6D3DFC);
CamoDataScriptableObject.get_colorSwitchSpeedOffset = getRealOffset(0x6D3E04);
CamoDataScriptableObject.get_colorSwitchSpeed = (float(*)(void*))CamoDataScriptableObject.get_colorSwitchSpeedOffset;

CamoDataScriptableObject.get_priceOffset = getRealOffset(0x6D3E0C);
CamoDataScriptableObject.get_price = (int(*)(void*))CamoDataScriptableObject.get_priceOffset;

CamoDataScriptableObject.get_textureNameOffset = getRealOffset(0x6D3E14);
CamoDataScriptableObject.get_textureName = (monoString *(*)(void*))CamoDataScriptableObject.get_textureNameOffset;

CamoDataScriptableObject.get_tilingOffset = getRealOffset(0x6D3E1C);
CamoDataScriptableObject.get_tiling = (Vector2 (*)(void*))CamoDataScriptableObject.get_tilingOffset;

CamoDataScriptableObject.get_useTextureMovementOffset = getRealOffset(0x6D3E30);
CamoDataScriptableObject.get_useTextureMovement = (bool(*)(void*))CamoDataScriptableObject.get_useTextureMovementOffset;

CamoDataScriptableObject.get_textureMovementSpeedXOffset = getRealOffset(0x6D3E38);
CamoDataScriptableObject.get_textureMovementSpeedX = (float(*)(void*))CamoDataScriptableObject.get_textureMovementSpeedXOffset;

CamoDataScriptableObject.get_textureMovementSpeedYOffset = getRealOffset(0x6D3E40);
CamoDataScriptableObject.get_textureMovementSpeedY = (float(*)(void*))CamoDataScriptableObject.get_textureMovementSpeedYOffset;

CamoDataScriptableObject.get_usesInvisibleShaderOffset = getRealOffset(0x6D3E48);
CamoDataScriptableObject.get_usesInvisibleShader = (bool(*)(void*))CamoDataScriptableObject.get_usesInvisibleShaderOffset;

CamoDataScriptableObject.get_applyMultOffset = getRealOffset(0x6D3E50);
CamoDataScriptableObject.get_applyMult = (float(*)(void*))CamoDataScriptableObject.get_applyMultOffset;

CamoDataScriptableObject.get_rarityOffset = getRealOffset(0x6D3E58);
CamoDataScriptableObject.get_rarity = (int(*)(void*))CamoDataScriptableObject.get_rarityOffset;

CamoDataScriptableObject.get_isSeasonOnlyOffset = getRealOffset(0x6D3E60);
CamoDataScriptableObject.get_isSeasonOnly = (bool(*)(void*))CamoDataScriptableObject.get_isSeasonOnlyOffset;

CamoDataScriptableObject.get_isBannedOffset = getRealOffset(0x6D3E68);
CamoDataScriptableObject.get_isBanned = (bool(*)(void*))CamoDataScriptableObject.get_isBannedOffset;

CamoDataScriptableObject.SetCamoTypeOffset = getRealOffset(0x6D3E70);
CamoDataScriptableObject.SetCamoType = (void(*)(void*, int))CamoDataScriptableObject.SetCamoTypeOffset;

CamoDataScriptableObject.SetCharacterCamoTypeOffset = getRealOffset(0x6D3E78);
CamoDataScriptableObject.SetCharacterCamoType = (void(*)(void*, int))CamoDataScriptableObject.SetCharacterCamoTypeOffset;

CamoDataScriptableObject.SetBulletTracerTypeOffset = getRealOffset(0x6D3E80);
CamoDataScriptableObject.SetBulletTracerType = (void(*)(void*, int))CamoDataScriptableObject.SetBulletTracerTypeOffset;

CamoDataScriptableObject.SetBannedStatusOffset = getRealOffset(0x6D3E88);
CamoDataScriptableObject.SetBannedStatus = (void(*)(void*, bool))CamoDataScriptableObject.SetBannedStatusOffset;

CustomizableBodyPart.get_SkinnedMeshRendererOffset = getRealOffset(0x59EEC0);
CustomizableBodyPart.get_SkinnedMeshRenderer = (void *(*)(void*))CustomizableBodyPart.get_SkinnedMeshRendererOffset;

CustomizableBodyPart.set_SkinnedMeshRendererOffset = getRealOffset(0x59EEC8);
CustomizableBodyPart.set_SkinnedMeshRenderer = (void(*)(void*, void *))CustomizableBodyPart.set_SkinnedMeshRendererOffset;

CustomizableBodyPart.AwakeOffset = getRealOffset(0x59EED0);
CustomizableBodyPart.Awake = (void(*)(void*))CustomizableBodyPart.AwakeOffset;

CustomizableBodyPart.EquipNewCustomizationOffset = getRealOffset(0x59EFA8);
CustomizableBodyPart.EquipNewCustomization = (void(*)(void*, int, void *))CustomizableBodyPart.EquipNewCustomizationOffset;

CustomizableBodyPart.OnEnableOffset = getRealOffset(0x59F088);
CustomizableBodyPart.OnEnable = (void(*)(void*))CustomizableBodyPart.OnEnableOffset;

CustomizableBodyPart.EquipOldCharacterCamoCustomizationOffset = getRealOffset(0x59F134);
CustomizableBodyPart.EquipOldCharacterCamoCustomization = (void(*)(void*, int))CustomizableBodyPart.EquipOldCharacterCamoCustomizationOffset;

CustomizableBodyPart.UpdateOffset = getRealOffset(0x59F6E0);
CustomizableBodyPart.Update = (void(*)(void*))CustomizableBodyPart.UpdateOffset;

CustomizableBodyPart.RunMaterialUpdateOffset = getRealOffset(0x59F7E4);
CustomizableBodyPart.RunMaterialUpdate = (void(*)(void*, void *))CustomizableBodyPart.RunMaterialUpdateOffset;

Customizations.get_CustomizationDataLoadedOffset = getRealOffset(0x59FE70);
Customizations.get_CustomizationDataLoaded = (bool(*)(void*))Customizations.get_CustomizationDataLoadedOffset;

Customizations.set_CustomizationDataLoadedOffset = getRealOffset(0x59FE78);
Customizations.set_CustomizationDataLoaded = (void(*)(void*, bool))Customizations.set_CustomizationDataLoadedOffset;

Customizations.get_InstanceOffset = getRealOffset(0x59FE80);
Customizations.get_Instance = (void *(*)())Customizations.get_InstanceOffset;

Customizations.set_InstanceOffset = getRealOffset(0x5A1840);
Customizations.set_Instance = (void(*)(void *))Customizations.set_InstanceOffset;

Customizations.get_IsInitializedOffset = getRealOffset(0x5A189C);
Customizations.get_IsInitialized = (bool(*)())Customizations.get_IsInitializedOffset;

Customizations.set_IsInitializedOffset = getRealOffset(0x5A18F4);
Customizations.set_IsInitialized = (void(*)(bool))Customizations.set_IsInitializedOffset;

Customizations.GetCustomizationsFromBackendOffset = getRealOffset(0x5A1A30);
Customizations.GetCustomizationsFromBackend = (void(*)(void*))Customizations.GetCustomizationsFromBackendOffset;

Customizations.GetOffset = getRealOffset(0x5A1BDC);
Customizations.Get = (void *(*)(int))Customizations.GetOffset;

Customizations.Get1Offset = getRealOffset(0x5A1E54);
Customizations.Get1 = (void *(*)(int))Customizations.Get1Offset;

Customizations.Get2Offset = getRealOffset(0x5A20CC);
Customizations.Get2 = (void *(*)(int))Customizations.Get2Offset;

Customizations.Get3Offset = getRealOffset(0x5A2344);
Customizations.Get3 = (void *(*)(int))Customizations.Get3Offset;

Customizations.Get4Offset = getRealOffset(0x5A25BC);
Customizations.Get4 = (void *(*)(int))Customizations.Get4Offset;

Customizations.Get5Offset = getRealOffset(0x5A2834);
Customizations.Get5 = (void *(*)(int))Customizations.Get5Offset;

Customizations.Get6Offset = getRealOffset(0x5A2AAC);
Customizations.Get6 = (void *(*)(int))Customizations.Get6Offset;

Customizations.Get7Offset = getRealOffset(0x5A2D24);
Customizations.Get7 = (void *(*)(int))Customizations.Get7Offset;

Customizations.Get8Offset = getRealOffset(0x5A2F9C);
Customizations.Get8 = (void *(*)(int, int))Customizations.Get8Offset;

Customizations.GetCustomizationsFromBackendb__16_0Offset = getRealOffset(0x5A3208);
Customizations.GetCustomizationsFromBackendb__16_0 = (void(*)(void*, monoString*))Customizations.GetCustomizationsFromBackendb__16_0Offset;

Gloves.get_CustomizationTypeOffset = getRealOffset(0x601678);
Gloves.get_CustomizationType = (int (*)(void*))Gloves.get_CustomizationTypeOffset;

Gloves.GetCustomizationIDOffset = getRealOffset(0x601680);
Gloves.GetCustomizationID = (int(*)(void*))Gloves.GetCustomizationIDOffset;

Gloves.GetCustomizationTypeStringOffset = getRealOffset(0x601688);
Gloves.GetCustomizationTypeString = (monoString *(*)(void*))Gloves.GetCustomizationTypeStringOffset;

Head.get_CustomizationTypeOffset = getRealOffset(0x7F2148);
Head.get_CustomizationType = (int (*)(void*))Head.get_CustomizationTypeOffset;

Head.GetCustomizationIDOffset = getRealOffset(0x7F2150);
Head.GetCustomizationID = (int(*)(void*))Head.GetCustomizationIDOffset;

Head.GetCustomizationTypeStringOffset = getRealOffset(0x7F2158);
Head.GetCustomizationTypeString = (monoString *(*)(void*))Head.GetCustomizationTypeStringOffset;

Pants.get_CustomizationTypeOffset = getRealOffset(0x55B4B4);
Pants.get_CustomizationType = (int (*)(void*))Pants.get_CustomizationTypeOffset;

Pants.GetCustomizationIDOffset = getRealOffset(0x55B4BC);
Pants.GetCustomizationID = (int(*)(void*))Pants.GetCustomizationIDOffset;

Pants.GetCustomizationTypeStringOffset = getRealOffset(0x55B4C4);
Pants.GetCustomizationTypeString = (monoString *(*)(void*))Pants.GetCustomizationTypeStringOffset;

PerlinFlicker.StartOffset = getRealOffset(0x5663CC);
PerlinFlicker.Start = (void(*)(void*))PerlinFlicker.StartOffset;

PerlinFlicker.OnEnableOffset = getRealOffset(0x566420);
PerlinFlicker.OnEnable = (void(*)(void*))PerlinFlicker.OnEnableOffset;

PerlinFlicker.UpdateOffset = getRealOffset(0x5664D0);
PerlinFlicker.Update = (void(*)(void*))PerlinFlicker.UpdateOffset;

PerlinFlicker.TurnOffLightOffset = getRealOffset(0x5665E8);
PerlinFlicker.TurnOffLight = (void(*)(void*))PerlinFlicker.TurnOffLightOffset;

PerlinFlicker.TurnOnLightOffset = getRealOffset(0x566648);
PerlinFlicker.TurnOnLight = (void(*)(void*))PerlinFlicker.TurnOnLightOffset;

Shirt.get_CustomizationTypeOffset = getRealOffset(0x61DC0C);
Shirt.get_CustomizationType = (int (*)(void*))Shirt.get_CustomizationTypeOffset;

Shirt.GetCustomizationIDOffset = getRealOffset(0x61DC14);
Shirt.GetCustomizationID = (int(*)(void*))Shirt.GetCustomizationIDOffset;

Shirt.GetCustomizationTypeStringOffset = getRealOffset(0x61DC1C);
Shirt.GetCustomizationTypeString = (monoString *(*)(void*))Shirt.GetCustomizationTypeStringOffset;

UnlockedCustomizationsScriptableObject.GetUnlockedCustomizationOffset = getRealOffset(0x88E104);
UnlockedCustomizationsScriptableObject.GetEquippedCustomizationOffset = getRealOffset(0x88E178);
UnlockedCustomizationsScriptableObject.GetEquippedCustomization = (int(*)(void*, int))UnlockedCustomizationsScriptableObject.GetEquippedCustomizationOffset;

UnlockedCustomizationsScriptableObject.FeedEquippedOffset = getRealOffset(0x88E730);
UnlockedCustomizationsScriptableObject.FeedEquipped = (void(*)(void*, int, int))UnlockedCustomizationsScriptableObject.FeedEquippedOffset;

UnlockedCustomizationsScriptableObject.ClearAllDataOffset = getRealOffset(0x88E824);
UnlockedCustomizationsScriptableObject.ClearAllData = (void(*)(void*))UnlockedCustomizationsScriptableObject.ClearAllDataOffset;

UnlockedCustomizationsScriptableObject.ClearCustomizationLocalDataOffset = getRealOffset(0x88E328);
UnlockedCustomizationsScriptableObject.ClearCustomizationLocalData = (void(*)(void*, int))UnlockedCustomizationsScriptableObject.ClearCustomizationLocalDataOffset;

UnlockedCustomizationsScriptableObject.ClearEquippedLocalDataOffset = getRealOffset(0x88EBA8);
UnlockedCustomizationsScriptableObject.ClearEquippedLocalData = (void(*)(void*, int))UnlockedCustomizationsScriptableObject.ClearEquippedLocalDataOffset;

CustomizeHUDScript.AwakeOffset = getRealOffset(0x5A3774);
CustomizeHUDScript.Awake = (void(*)(void*))CustomizeHUDScript.AwakeOffset;

CustomizeHUDScript.setLocalCurrentSlotOffset = getRealOffset(0x5A392C);
CustomizeHUDScript.setLocalCurrentSlot = (void(*)(void*))CustomizeHUDScript.setLocalCurrentSlotOffset;

CustomizeHUDScript.loadCurrentHudDataOffset = getRealOffset(0x5A3B08);
CustomizeHUDScript.loadCurrentHudData = (void(*)(void*))CustomizeHUDScript.loadCurrentHudDataOffset;

CustomizeHUDScript.updateLocalCurrentSlotOffset = getRealOffset(0x5A41A8);
CustomizeHUDScript.updateLocalCurrentSlot = (void(*)(void*))CustomizeHUDScript.updateLocalCurrentSlotOffset;

CustomizeHUDScript.getServerHUDSlotsOffset = getRealOffset(0x5A38AC);
CustomizeHUDScript.getServerHUDSlots = (void *(*)(void*))CustomizeHUDScript.getServerHUDSlotsOffset;

CustomizeHUDScript.setServerHUDSlotsOffset = getRealOffset(0x5A45F4);
CustomizeHUDScript.setServerHUDSlots = (void *(*)(void*))CustomizeHUDScript.setServerHUDSlotsOffset;

CustomizeHUDScript.NoServerDataOffset = getRealOffset(0x5A4694);
CustomizeHUDScript.NoServerData = (void(*)(void*))CustomizeHUDScript.NoServerDataOffset;

CustomizeHUDScript.ChangeHUDSlotOffset = getRealOffset(0x5A474C);
CustomizeHUDScript.ChangeHUDSlot = (void(*)(void*, int))CustomizeHUDScript.ChangeHUDSlotOffset;

CustomizeHUDScript.registerUIObjectOffset = getRealOffset(0x5A48FC);
CustomizeHUDScript.registerUIObject = (void(*)(void*, void *))CustomizeHUDScript.registerUIObjectOffset;

CustomizeHUDScript.ScaleSliderValueChangedOffset = getRealOffset(0x5A4970);
CustomizeHUDScript.ScaleSliderValueChanged = (void(*)(void*, float))CustomizeHUDScript.ScaleSliderValueChangedOffset;

CustomizeHUDScript.RegisterRecolorObjectOffset = getRealOffset(0x5A4A20);
CustomizeHUDScript.RegisterRecolorObject = (void(*)(void*, void *))CustomizeHUDScript.RegisterRecolorObjectOffset;

CustomizeHUDScript.RecolorImagesOffset = getRealOffset(0x5A4A94);
CustomizeHUDScript.RecolorImages = (void(*)(void*, Color))CustomizeHUDScript.RecolorImagesOffset;

CustomizeHUDScript.FixImageColorsOffset = getRealOffset(0x5A4B70);
CustomizeHUDScript.FixImageColors = (void(*)(void*))CustomizeHUDScript.FixImageColorsOffset;

CustomizeHUDScript.SetLastEditedObjectOffset = getRealOffset(0x5A4C24);
CustomizeHUDScript.SetLastEditedObject = (void(*)(void*, void *))CustomizeHUDScript.SetLastEditedObjectOffset;

CustomizeHUDScript.OnAcceptCustomizationHUDPopUpOffset = getRealOffset(0x5A4F40);
CustomizeHUDScript.OnAcceptCustomizationHUDPopUp = (void(*)(void*))CustomizeHUDScript.OnAcceptCustomizationHUDPopUpOffset;

CustomizeHUDScript.toggleEditingOffset = getRealOffset(0x5A5060);
CustomizeHUDScript.toggleEditing = (void(*)(void*))CustomizeHUDScript.toggleEditingOffset;

CustomizeHUDScript.ResetToDefaultOffset = getRealOffset(0x5A4520);
CustomizeHUDScript.ResetToDefault = (void(*)(void*))CustomizeHUDScript.ResetToDefaultOffset;

CustomizeHUDScript.SetButtonsVisibleOffset = getRealOffset(0x5A563C);
CustomizeHUDScript.SetButtonsVisible = (void(*)(void*, bool))CustomizeHUDScript.SetButtonsVisibleOffset;

CustomizeHUDScript.startEditingOffset = getRealOffset(0x5A58CC);
CustomizeHUDScript.startEditing = (void(*)(void*))CustomizeHUDScript.startEditingOffset;

CustomizeHUDScript.stopEditingOffset = getRealOffset(0x5A58D8);
CustomizeHUDScript.stopEditing = (void(*)(void*))CustomizeHUDScript.stopEditingOffset;

CustomizeHUDScript.OnDestroyOffset = getRealOffset(0x5A58E8);
CustomizeHUDScript.OnDestroy = (void(*)(void*))CustomizeHUDScript.OnDestroyOffset;

DecalTest.StartOffset = getRealOffset(0x5A74F4);
DecalTest.Start = (void(*)(void*))DecalTest.StartOffset;

DecalTest.UpdateOffset = getRealOffset(0x5A75C4);
DecalTest.Update = (void(*)(void*))DecalTest.UpdateOffset;

DecayScript.AwakeOffset = getRealOffset(0x5A75D0);
DecayScript.Awake = (void(*)(void*))DecayScript.AwakeOffset;

DecayScript.OnEnableOffset = getRealOffset(0x5A767C);
DecayScript.OnEnable = (void(*)(void*))DecayScript.OnEnableOffset;

DecayScript.ResetLayerOffset = getRealOffset(0x5A78C4);
DecayScript.ResetLayer = (void(*)(void*))DecayScript.ResetLayerOffset;

DecayScript.StartOffset = getRealOffset(0x5A7944);
DecayScript.Start = (void(*)(void*))DecayScript.StartOffset;

DecayScript.OnDestroyOffset = getRealOffset(0x5A79F4);
DecayScript.OnDestroy = (void(*)(void*))DecayScript.OnDestroyOffset;

DecayScript.UpdateLifetimeOffset = getRealOffset(0x5A7B58);
DecayScript.UpdateLifetime = (void(*)(void*, float))DecayScript.UpdateLifetimeOffset;

DecayScript.UpdateFastOffset = getRealOffset(0x5A7BD8);
DecayScript.UpdateFast = (void(*)(void*))DecayScript.UpdateFastOffset;

DecayScript.removeOffset = getRealOffset(0x5A8038);
DecayScript.remove = (void(*)(void*))DecayScript.removeOffset;

DefaultLoadoutLoader.OnEnableOffset = getRealOffset(0x5A8088);
DefaultLoadoutLoader.OnEnable = (void(*)(void*))DefaultLoadoutLoader.OnEnableOffset;

DefaultLoadoutLoader.FetchDefaultDataOffset = getRealOffset(0x5A80F8);
DefaultLoadoutLoader.FetchDefaultData = (void(*)(void*))DefaultLoadoutLoader.FetchDefaultDataOffset;

Detectors.StartOffset = getRealOffset(0x5A86AC);
Detectors.Start = (void(*)(void*))Detectors.StartOffset;

Detectors.OnSpeedHackDetectedOffset = getRealOffset(0x5A88F4);
Detectors.OnSpeedHackDetected = (void(*)(void*))Detectors.OnSpeedHackDetectedOffset;

Detectors.OnWallHackDetectedOffset = getRealOffset(0x5A8998);
Detectors.OnWallHackDetected = (void(*)(void*))Detectors.OnWallHackDetectedOffset;

DismemberedBloodEffects.StartOffset = getRealOffset(0x67A6C0);
DismemberedBloodEffects.Start = (void(*)(void*))DismemberedBloodEffects.StartOffset;

DismemberedBloodEffects.UpdateOffset = getRealOffset(0x67A6C4);
DismemberedBloodEffects.Update = (void(*)(void*))DismemberedBloodEffects.UpdateOffset;

DisplayPurchasePopUpOnMP.OnLevelWasLoadedOffset = getRealOffset(0x67A8BC);
DisplayPurchasePopUpOnMP.OnLevelWasLoaded = (void(*)(void*, int))DisplayPurchasePopUpOnMP.OnLevelWasLoadedOffset;

DisplayPurchasePopUpOnMP.ShowAfterTwoFramesOffset = getRealOffset(0x67A980);
DisplayPurchasePopUpOnMP.ShowAfterTwoFrames = (void *(*)(void*))DisplayPurchasePopUpOnMP.ShowAfterTwoFramesOffset;

DontDestroyOnLoadManager.DontDestroyOnLoadOffset = getRealOffset(0x67B5F0);
DontDestroyOnLoadManager.DontDestroyOnLoad = (void(*)(void *))DontDestroyOnLoadManager.DontDestroyOnLoadOffset;

DontDestroyOnLoadManager.DestroyAllOffset = getRealOffset(0x67B6CC);
DontDestroyOnLoadManager.DestroyAll = (bool(*)())DontDestroyOnLoadManager.DestroyAllOffset;

DownloadOBB.AwakeOffset = getRealOffset(0x67BA5C);
DownloadOBB.Awake = (void(*)(void*))DownloadOBB.AwakeOffset;

DownloadOBB.logOffset = getRealOffset(0x67BB1C);
DownloadOBB.log = (void(*)(void*, monoString*))DownloadOBB.logOffset;

DownloadOBB.UpdateOffset = getRealOffset(0x67BBAC);
DownloadOBB.Update = (void(*)(void*))DownloadOBB.UpdateOffset;

DownloadOBB.CheckDeleteOldOBBsOffset = getRealOffset(0x67C3F0);
DownloadOBB.CheckDeleteOldOBBs = (void(*)(void*))DownloadOBB.CheckDeleteOldOBBsOffset;

DownloadOBB.loadLevelOffset = getRealOffset(0x67C370);
DownloadOBB.loadLevel = (void *(*)(void*))DownloadOBB.loadLevelOffset;

Elevator.get_closedOffset = getRealOffset(0x67DCC0);
Elevator.get_closed = (bool(*)(void*))Elevator.get_closedOffset;

Elevator.set_closedOffset = getRealOffset(0x67DCC8);
Elevator.set_closed = (void(*)(void*, bool))Elevator.set_closedOffset;

Elevator.AwakeOffset = getRealOffset(0x67DE30);
Elevator.Awake = (void(*)(void*))Elevator.AwakeOffset;

Elevator.StartOffset = getRealOffset(0x67DEA4);
Elevator.Start = (void(*)(void*))Elevator.StartOffset;

Elevator.CanBeClosedOffset = getRealOffset(0x67E670);
Elevator.CanBeClosed = (bool(*)(void*))Elevator.CanBeClosedOffset;

Elevator.PlayElevatorMovingSoundOffset = getRealOffset(0x67E6BC);
Elevator.PlayElevatorMovingSound = (void(*)(void*))Elevator.PlayElevatorMovingSoundOffset;

Elevator.RegisterElevatorOffset = getRealOffset(0x67E5F0);
Elevator.RegisterElevator = (void *(*)(void*))Elevator.RegisterElevatorOffset;

Elevator.ButtonPressedOffset = getRealOffset(0x67E784);
Elevator.ButtonPressed = (void(*)(void*))Elevator.ButtonPressedOffset;

Elevator.IsPlayerInsideElevatorOffset = getRealOffset(0x67E8C4);
Elevator.IsPlayerInsideElevator = (bool(*)(void*, void *))Elevator.IsPlayerInsideElevatorOffset;

Elevator.UpdateOffset = getRealOffset(0x67E9AC);
Elevator.Update = (void(*)(void*))Elevator.UpdateOffset;

Elevator.LateUpdateOffset = getRealOffset(0x67ED38);
Elevator.LateUpdate = (void(*)(void*))Elevator.LateUpdateOffset;

EnemiesRemainingSkirmish.StartOffset = getRealOffset(0x67F2EC);
EnemiesRemainingSkirmish.Start = (void(*)(void*))EnemiesRemainingSkirmish.StartOffset;

EnemyBodyPartScript.AwakeOffset = getRealOffset(0x67F694);
EnemyBodyPartScript.Awake = (void(*)(void*))EnemyBodyPartScript.AwakeOffset;

EnemyBodyPartScript.StartOffset = getRealOffset(0x67F6B0);
EnemyBodyPartScript.Start = (void(*)(void*))EnemyBodyPartScript.StartOffset;

EnemyBodyPartScript.get_angularVelocityOffset = getRealOffset(0x67F760);
EnemyBodyPartScript.get_angularVelocity = (Vector3 (*)(void*))EnemyBodyPartScript.get_angularVelocityOffset;

EnemyBodyPartScript.OnDestroyOffset = getRealOffset(0x67F910);
EnemyBodyPartScript.OnDestroy = (void(*)(void*))EnemyBodyPartScript.OnDestroyOffset;

EnemyBodyPartScript.UpdateFastOffset = getRealOffset(0x67FA74);
EnemyBodyPartScript.UpdateFast = (void(*)(void*))EnemyBodyPartScript.UpdateFastOffset;

EnemyRagdollScript.AwakeOffset = getRealOffset(0x67FBD0);
EnemyRagdollScript.Awake = (void(*)(void*))EnemyRagdollScript.AwakeOffset;

EnemyRagdollScript.StartOffset = getRealOffset(0x67FF18);
EnemyRagdollScript.Start = (void(*)(void*))EnemyRagdollScript.StartOffset;

EnemyRagdollScript.OnEnableOffset = getRealOffset(0x67FFC8);
EnemyRagdollScript.OnEnable = (void(*)(void*))EnemyRagdollScript.OnEnableOffset;

EnemyRagdollScript.OnDestroyOffset = getRealOffset(0x68006C);
EnemyRagdollScript.OnDestroy = (void(*)(void*))EnemyRagdollScript.OnDestroyOffset;

EnemyRagdollScript.playDeathSoundOffset = getRealOffset(0x6801D0);
EnemyRagdollScript.playDeathSound = (void(*)(void*, bool))EnemyRagdollScript.playDeathSoundOffset;

EnemyRagdollScript.dieOffset = getRealOffset(0x680330);
EnemyRagdollScript.die = (void(*)(void*))EnemyRagdollScript.dieOffset;

EnemyRagdollScript.SetCharacterCamoOffset = getRealOffset(0x680378);
EnemyRagdollScript.SetCharacterCamo = (void(*)(void*, int))EnemyRagdollScript.SetCharacterCamoOffset;

EnemyRagdollScript.ResetRagdollOffset = getRealOffset(0x68040C);
EnemyRagdollScript.ResetRagdoll = (void(*)(void*))EnemyRagdollScript.ResetRagdollOffset;

EnemyRagdollScript.DismemberPartOffset = getRealOffset(0x6808C4);
EnemyRagdollScript.DismemberPart = (void(*)(void*, void *, int, void *, bool, Vector3))EnemyRagdollScript.DismemberPartOffset;

EnemyRagdollScript.UpdateFastOffset = getRealOffset(0x68133C);
EnemyRagdollScript.UpdateFast = (void(*)(void*))EnemyRagdollScript.UpdateFastOffset;

EnemyScript.AwakeOffset = getRealOffset(0x6817C4);
EnemyScript.Awake = (void(*)(void*))EnemyScript.AwakeOffset;

EnemyScript.playFootStepSoundOffset = getRealOffset(0x681B2C);
EnemyScript.playFootStepSound = (void(*)(void*))EnemyScript.playFootStepSoundOffset;

EnemyScript.navmeshAgentOffset = getRealOffset(0x681C1C);
EnemyScript.navmeshAgent = (void *(*)(void*))EnemyScript.navmeshAgentOffset;

EnemyScript.OnTriggerEnterOffset = getRealOffset(0x681C24);
EnemyScript.OnTriggerEnter = (void(*)(void*, void *))EnemyScript.OnTriggerEnterOffset;

EnemyScript.UpdateAccessoryOffset = getRealOffset(0x682570);
EnemyScript.UpdateAccessory = (void(*)(void*, int))EnemyScript.UpdateAccessoryOffset;

EnemyScript.UpdateBarrelOffset = getRealOffset(0x6825A4);
EnemyScript.UpdateBarrel = (void(*)(void*, int))EnemyScript.UpdateBarrelOffset;

EnemyScript.StartOffset = getRealOffset(0x6825D8);
EnemyScript.Start = (void(*)(void*))EnemyScript.StartOffset;

EnemyScript.explodeEnemyOffset = getRealOffset(0x684ED8);
EnemyScript.explodeEnemy = (void(*)(void*, Vector3, float, float, void *))EnemyScript.explodeEnemyOffset;

EnemyScript.canHurtOffset = getRealOffset(0x6850E4);
EnemyScript.canHurt = (bool(*)(void*))EnemyScript.canHurtOffset;

EnemyScript.SetDestinationOffset = getRealOffset(0x685110);
EnemyScript.SetDestination = (void(*)(void*, Vector3))EnemyScript.SetDestinationOffset;

EnemyScript.damagePersonOffset = getRealOffset(0x6821A4);
EnemyScript.damagePerson = (bool(*)(void*, float, Vector3, Vector3, float, bool, void *))EnemyScript.damagePersonOffset;

EnemyScript.turnIntoRagdollOffset = getRealOffset(0x685ED4);
EnemyScript.turnIntoRagdoll = (void(*)(void*, bool))EnemyScript.turnIntoRagdollOffset;

EnemyScript.dropGunOffset = getRealOffset(0x686520);
EnemyScript.dropGun = (void(*)(void*))EnemyScript.dropGunOffset;

EnemyScript.spawnShellOffset = getRealOffset(0x686820);
EnemyScript.spawnShell = (void(*)(void*))EnemyScript.spawnShellOffset;

EnemyScript.get_healthOffset = getRealOffset(0x686C58);
EnemyScript.get_health = (float(*)(void*))EnemyScript.get_healthOffset;

EnemyScript.set_healthOffset = getRealOffset(0x6855B0);
EnemyScript.set_health = (void(*)(void*, float))EnemyScript.set_healthOffset;

EnemyScript.disableMuzzleFlashOffset = getRealOffset(0x686C60);
EnemyScript.disableMuzzleFlash = (void(*)(void*))EnemyScript.disableMuzzleFlashOffset;

EnemyScript.findAndGoToCoverOffset = getRealOffset(0x686C98);
EnemyScript.findAndGoToCover = (bool(*)(void*))EnemyScript.findAndGoToCoverOffset;

EnemyScript.spotPlayerOffset = getRealOffset(0x685238);
EnemyScript.spotPlayer = (void(*)(void*))EnemyScript.spotPlayerOffset;

EnemyScript.unSpotPlayerOffset = getRealOffset(0x686E38);
EnemyScript.unSpotPlayer = (void(*)(void*))EnemyScript.unSpotPlayerOffset;

EnemyScript.isLookingAtPlayerOffset = getRealOffset(0x686F80);
EnemyScript.isLookingAtPlayer = (bool(*)(void*))EnemyScript.isLookingAtPlayerOffset;

EnemyScript.isAimingAtPlayerOffset = getRealOffset(0x68754C);
EnemyScript.isAimingAtPlayer = (bool(*)(void*))EnemyScript.isAimingAtPlayerOffset;

EnemyScript.soundCheckOffset = getRealOffset(0x687A40);
EnemyScript.soundCheck = (void(*)(void*))EnemyScript.soundCheckOffset;

EnemyScript.FireBulletOffset = getRealOffset(0x687E08);
EnemyScript.FireBullet = (bool(*)(void*, int))EnemyScript.FireBulletOffset;

EnemyScript.animationStateChangedOffset = getRealOffset(0x688A68);
EnemyScript.animationStateChanged = (void(*)(void*))EnemyScript.animationStateChangedOffset;

EnemyScript.getUpFromGroundOffset = getRealOffset(0x688FC8);
EnemyScript.getUpFromGround = (void(*)(void*))EnemyScript.getUpFromGroundOffset;

EnemyScript.enableAgentOffset = getRealOffset(0x689308);
EnemyScript.enableAgent = (void(*)(void*))EnemyScript.enableAgentOffset;

EnemyScript.FlashOffset = getRealOffset(0x689344);
EnemyScript.Flash = (void(*)(void*))EnemyScript.FlashOffset;

EnemyScript.checkForMeleeOffset = getRealOffset(0x689360);
EnemyScript.checkForMelee = (bool(*)(void*))EnemyScript.checkForMeleeOffset;

EnemyScript.hurtFromMeleeOffset = getRealOffset(0x68968C);
EnemyScript.hurtFromMelee = (void(*)(void*))EnemyScript.hurtFromMeleeOffset;

EnemyScript.aimToPlayerOffset = getRealOffset(0x6898BC);
EnemyScript.aimToPlayer = (void(*)(void*))EnemyScript.aimToPlayerOffset;

EnemyScript.removeCoverOffset = getRealOffset(0x689B3C);
EnemyScript.removeCover = (void(*)(void*))EnemyScript.removeCoverOffset;

EnemyScript.handleHurtOffset = getRealOffset(0x689C00);
EnemyScript.handleHurt = (void(*)(void*))EnemyScript.handleHurtOffset;

EnemyScript.handleSoundInterestOffset = getRealOffset(0x689E4C);
EnemyScript.handleSoundInterest = (void(*)(void*))EnemyScript.handleSoundInterestOffset;

EnemyScript.calculateAngleOffset = getRealOffset(0x689F74);
EnemyScript.calculateAngle = (float(*)(void*, Vector3, Vector3, float))EnemyScript.calculateAngleOffset;

EnemyScript.throwGrenadeAtPlayerOffset = getRealOffset(0x68A168);
EnemyScript.throwGrenadeAtPlayer = (void(*)(void*))EnemyScript.throwGrenadeAtPlayerOffset;

EnemyScript.throwGrenadeDontCalculateOffset = getRealOffset(0x68A520);
EnemyScript.throwGrenadeDontCalculate = (void(*)(void*))EnemyScript.throwGrenadeDontCalculateOffset;

EnemyScript.OnDestroyOffset = getRealOffset(0x68A630);
EnemyScript.OnDestroy = (void(*)(void*))EnemyScript.OnDestroyOffset;

EnemyScript.UpdateFastOffset = getRealOffset(0x68A794);
EnemyScript.UpdateFast = (void(*)(void*))EnemyScript.UpdateFastOffset;

EnemySpawnTrigger.StartOffset = getRealOffset(0x68CA64);
EnemySpawnTrigger.Start = (void(*)(void*))EnemySpawnTrigger.StartOffset;

EnemySpawnTrigger.OnTriggerEnterOffset = getRealOffset(0x68CB50);
EnemySpawnTrigger.OnTriggerEnter = (void(*)(void*, void *))EnemySpawnTrigger.OnTriggerEnterOffset;

EnemyToBeSpawned.StartOffset = getRealOffset(0x68CF00);
EnemyToBeSpawned.Start = (void(*)(void*))EnemyToBeSpawned.StartOffset;

EnemyToBeSpawned.spawnEnemyOffset = getRealOffset(0x68CC6C);
EnemyToBeSpawned.spawnEnemy = (void(*)(void*))EnemyToBeSpawned.spawnEnemyOffset;

EnemyToBeSpawned.OnDestroyOffset = getRealOffset(0x68D0E4);
EnemyToBeSpawned.OnDestroy = (void(*)(void*))EnemyToBeSpawned.OnDestroyOffset;

EnemyToBeSpawned.UpdateFastOffset = getRealOffset(0x68D248);
EnemyToBeSpawned.UpdateFast = (void(*)(void*))EnemyToBeSpawned.UpdateFastOffset;

EnemyVehicle.DamageOffset = getRealOffset(0x68D46C);
EnemyVehicle.Damage = (void(*)(void*, float))EnemyVehicle.DamageOffset;

EnemyVehicle.ExplodeOffset = getRealOffset(0x68D48C);
EnemyVehicle.Explode = (void(*)(void*))EnemyVehicle.ExplodeOffset;

EnemyVehicle.AwakeOffset = getRealOffset(0x68D864);
EnemyVehicle.Awake = (void(*)(void*))EnemyVehicle.AwakeOffset;

EventSystemFix.StartOffset = getRealOffset(0x68DD34);
EventSystemFix.Start = (void(*)(void*))EventSystemFix.StartOffset;

ExtensionMethods.SetPivotOffset = getRealOffset(0x690078);
ExtensionMethods.SetPivot = (void(*)(void *, Vector2))ExtensionMethods.SetPivotOffset;

ExtensionMethods.LogTestOffset = getRealOffset(0x6902C4);
ExtensionMethods.LogTest = (void(*)(monoString*, void *))ExtensionMethods.LogTestOffset;

FTUEManager.get_FTUEActiveOffset = getRealOffset(0x694E90);
FTUEManager.get_FTUEActive = (bool(*)(void*))FTUEManager.get_FTUEActiveOffset;

FTUEManager.OnApplicationStartOffset = getRealOffset(0x694EEC);
FTUEManager.OnApplicationStart = (void(*)(void*))FTUEManager.OnApplicationStartOffset;

FTUEManager.get_IsTutorialCompletedOffset = getRealOffset(0x695200);
FTUEManager.get_IsTutorialCompleted = (bool(*)(void*))FTUEManager.get_IsTutorialCompletedOffset;

FTUEManager.WasCurrentUsernameTutorialRewardedOffset = getRealOffset(0x6953DC);
FTUEManager.WasCurrentUsernameTutorialRewarded = (bool(*)(void*, monoString*))FTUEManager.WasCurrentUsernameTutorialRewardedOffset;

FTUEManager.get_HaveTutorialJustBeenExecutedOffset = getRealOffset(0x6951A8);
FTUEManager.get_HaveTutorialJustBeenExecuted = (bool(*)(void*))FTUEManager.get_HaveTutorialJustBeenExecutedOffset;

FTUEManager.HandleNoFTUEOffset = getRealOffset(0x695430);
FTUEManager.HandleNoFTUE = (void(*)(void*))FTUEManager.HandleNoFTUEOffset;

FTUEManager.HandleFTUEOffset = getRealOffset(0x6954B4);
FTUEManager.HandleFTUE = (void(*)(void*))FTUEManager.HandleFTUEOffset;

FTUEManager.HandleHowToContinueQuestionOffset = getRealOffset(0x695584);
FTUEManager.HandleHowToContinueQuestion = (void(*)(void*))FTUEManager.HandleHowToContinueQuestionOffset;

FTUEManager.OnPopupClosedOffset = getRealOffset(0x6956B4);
FTUEManager.OnPopupClosed = (void(*)(void*))FTUEManager.OnPopupClosedOffset;

FTUEManager.HandleHowToContinueImpOffset = getRealOffset(0x695638);
FTUEManager.HandleHowToContinueImp = (void *(*)(void*))FTUEManager.HandleHowToContinueImpOffset;

FTUEManager.DoTrainingOffset = getRealOffset(0x6956C0);
FTUEManager.DoTraining = (void(*)(void*))FTUEManager.DoTrainingOffset;

FTUEManager.MultiplayerOffset = getRealOffset(0x695758);
FTUEManager.Multiplayer = (void(*)(void*))FTUEManager.MultiplayerOffset;

FTUEManager.BotsOffset = getRealOffset(0x6957F0);
FTUEManager.Bots = (void(*)(void*))FTUEManager.BotsOffset;

FTUEManager.TutorialRewardJustGotOffset = getRealOffset(0x695888);
FTUEManager.TutorialRewardJustGot = (void(*)(void*, monoString*))FTUEManager.TutorialRewardJustGotOffset;

FTUEManager.OnMarkFTUEDoneOffset = getRealOffset(0x6959E4);
FTUEManager.OnMarkFTUEDone = (void(*)(void*))FTUEManager.OnMarkFTUEDoneOffset;

FTUEManager.OnTutorialStartedOffset = getRealOffset(0x695A48);
FTUEManager.OnTutorialStarted = (void(*)(void*))FTUEManager.OnTutorialStartedOffset;

FTUEManager.ResetTutorialExecutedKeyOffset = getRealOffset(0x695AF0);
FTUEManager.ResetTutorialExecutedKey = (void(*)(void*))FTUEManager.ResetTutorialExecutedKeyOffset;

FTUEManager.GetTutorialCompletedKeyOffset = getRealOffset(0x6952A8);
FTUEManager.GetTutorialCompletedKey = (monoString *(*)(void*, bool, monoString*))FTUEManager.GetTutorialCompletedKeyOffset;

FTUEManager.TutorialCompletedOffset = getRealOffset(0x695B48);
FTUEManager.TutorialCompleted = (void(*)(void*))FTUEManager.TutorialCompletedOffset;

FTUEManager.TutorialUnCompletedOffset = getRealOffset(0x695BAC);
FTUEManager.TutorialUnCompleted = (void(*)(void*))FTUEManager.TutorialUnCompletedOffset;

FTUEManager.TutorialRewardReceivedOffset = getRealOffset(0x6959B8);
FTUEManager.TutorialRewardReceived = (void(*)(void*, monoString*))FTUEManager.TutorialRewardReceivedOffset;

FTUEManager.OnMatchAbortedOffset = getRealOffset(0x695C0C);
FTUEManager.OnMatchAborted = (void(*)(void*))FTUEManager.OnMatchAbortedOffset;

FTUEManager.OnMatchCompleteOffset = getRealOffset(0x695CB8);
FTUEManager.OnMatchComplete = (void(*)(void*))FTUEManager.OnMatchCompleteOffset;

FTUEManager.LogOffset = getRealOffset(0x695CB4);
FTUEManager.Log = (void(*)(monoString*))FTUEManager.LogOffset;

FTUEManager.GetManagerOffset = getRealOffset(0x69502C);
FTUEManager.GetManager = (void *(*)())FTUEManager.GetManagerOffset;

FTUEManager.LoadTutorialOffset = getRealOffset(0x695D60);
FTUEManager.LoadTutorial = (void(*)(void*))FTUEManager.LoadTutorialOffset;

FTUEManager.onLoadTutorialOffset = getRealOffset(0x695F94);
FTUEManager.onLoadTutorial = (void *(*)(void*))FTUEManager.onLoadTutorialOffset;

FacebookController.get_isLoggedInOffset = getRealOffset(0x7149C0);
FacebookController.get_isLoggedIn = (bool(*)())FacebookController.get_isLoggedInOffset;

FacebookController.AwakeOffset = getRealOffset(0x714A34);
FacebookController.Awake = (void(*)(void*))FacebookController.AwakeOffset;

FacebookController.InitCallbackOffset = getRealOffset(0x714BE4);
FacebookController.InitCallback = (void(*)(void*))FacebookController.InitCallbackOffset;

FacebookController.OnHideUnityOffset = getRealOffset(0x714CD0);
FacebookController.OnHideUnity = (void(*)(void*, bool))FacebookController.OnHideUnityOffset;

FacebookController.AuthCallbackOffset = getRealOffset(0x714CD4);
FacebookController.AuthCallback = (void(*)(void*, void *))FacebookController.AuthCallbackOffset;

FacebookController.OnLogInOffset = getRealOffset(0x714DCC);
FacebookController.OnLogIn = (void(*)(void*))FacebookController.OnLogInOffset;

FacebookController.HandleResultOffset = getRealOffset(0x714F54);
FacebookController.HandleResult = (void(*)(void*, void *))FacebookController.HandleResultOffset;

FacebookController.LogSectionLoadedOffset = getRealOffset(0x715110);
FacebookController.LogSectionLoaded = (void(*)(void*, monoString*))FacebookController.LogSectionLoadedOffset;

FacebookController.LogBuyCaseOffset = getRealOffset(0x715218);
FacebookController.LogBuyCase = (void(*)(void*, monoString*, int))FacebookController.LogBuyCaseOffset;

FacebookController.LogBuyCreditsOffset = getRealOffset(0x715350);
FacebookController.LogBuyCredits = (void(*)(void*, monoString*, int))FacebookController.LogBuyCreditsOffset;

FacebookController.LogSpentCreditsEventOffset = getRealOffset(0x7156A4);
FacebookController.LogSpentCreditsEvent = (void(*)(void*, monoString*, monoString*, monoString*, float))FacebookController.LogSpentCreditsEventOffset;

FacebookController.LogSpentGoldEventOffset = getRealOffset(0x715870);
FacebookController.LogSpentGoldEvent = (void(*)(void*, monoString*, monoString*, float))FacebookController.LogSpentGoldEventOffset;

FacebookController.LogPurchaseOffset = getRealOffset(0x715A04);
FacebookController.LogPurchase = (void(*)(void*, float, monoString*, monoString*, monoString*))FacebookController.LogPurchaseOffset;

FacebookController.LogShopEventOffset = getRealOffset(0x715B5C);
FacebookController.LogShopEvent = (void(*)(void*, monoString*))FacebookController.LogShopEventOffset;

FacebookController.LogCompletedRegistrationEventOffset = getRealOffset(0x715C64);
FacebookController.LogCompletedRegistrationEvent = (void(*)(void*, monoString*))FacebookController.LogCompletedRegistrationEventOffset;

FakeForces.AwakeOffset = getRealOffset(0x716E78);
FakeForces.Awake = (void(*)(void*))FakeForces.AwakeOffset;

FakeForces.StartOffset = getRealOffset(0x716E94);
FakeForces.Start = (void(*)(void*))FakeForces.StartOffset;

FakeForces.OnDestroyOffset = getRealOffset(0x716F44);
FakeForces.OnDestroy = (void(*)(void*))FakeForces.OnDestroyOffset;

FakeForces.ImpulseOffset = getRealOffset(0x7170A8);
FakeForces.Impulse = (void(*)(void*, Vector3))FakeForces.ImpulseOffset;

FakeForces.SetDefaultPositionOffset = getRealOffset(0x71716C);
FakeForces.SetDefaultPosition = (void(*)(void*, Vector3))FakeForces.SetDefaultPositionOffset;

FakeForces.TestForceOffset = getRealOffset(0x717178);
FakeForces.TestForce = (void(*)(void*))FakeForces.TestForceOffset;

FakeForces.UpdateFastOffset = getRealOffset(0x7171E8);
FakeForces.UpdateFast = (void(*)(void*))FakeForces.UpdateFastOffset;

FixStaticCollider.StartOffset = getRealOffset(0x7232EC);
FixStaticCollider.Start = (void(*)(void*))FixStaticCollider.StartOffset;

Flag.AwakeOffset = getRealOffset(0x7233EC);
Flag.Awake = (void(*)(void*))Flag.AwakeOffset;

Flag.StartOffset = getRealOffset(0x7236DC);
Flag.Start = (void(*)(void*))Flag.StartOffset;

Flag.UpdateTakenValueOffset = getRealOffset(0x72378C);
Flag.UpdateTakenValue = (void(*)(void*, float))Flag.UpdateTakenValueOffset;

Flag.UpdateOwnerTeamOffset = getRealOffset(0x723798);
Flag.UpdateOwnerTeam = (void(*)(void*, int))Flag.UpdateOwnerTeamOffset;

Flag.SetFlagOffset = getRealOffset(0x723B60);
Flag.SetFlag = (void(*)(void*, bool, bool))Flag.SetFlagOffset;

Flag.SetFlagOutlineColorOffset = getRealOffset(0x724058);
Flag.SetFlagOutlineColor = (void(*)(void*, Color))Flag.SetFlagOutlineColorOffset;

Flag.OnDestroyOffset = getRealOffset(0x724178);
Flag.OnDestroy = (void(*)(void*))Flag.OnDestroyOffset;

Flag.InitializeObjectsOffset = getRealOffset(0x7242DC);
Flag.InitializeObjects = (void(*)(void*))Flag.InitializeObjectsOffset;

Flag.UpdateFastOffset = getRealOffset(0x7246EC);
Flag.UpdateFast = (void(*)(void*))Flag.UpdateFastOffset;

Flag.LateUpdateOffset = getRealOffset(0x7255A4);
Flag.LateUpdate = (void(*)(void*))Flag.LateUpdateOffset;

FlagStatusUI.AwakeOffset = getRealOffset(0x725A4C);
FlagStatusUI.Awake = (void(*)(void*))FlagStatusUI.AwakeOffset;

FlagStatusUI.StartOffset = getRealOffset(0x725B60);
FlagStatusUI.Start = (void(*)(void*))FlagStatusUI.StartOffset;

FlagStatusUI.OnDestroyOffset = getRealOffset(0x725C10);
FlagStatusUI.OnDestroy = (void(*)(void*))FlagStatusUI.OnDestroyOffset;

FlagStatusUI.SetTakenValueOffset = getRealOffset(0x725DD4);
FlagStatusUI.SetTakenValue = (void(*)(void*, float))FlagStatusUI.SetTakenValueOffset;

FlagStatusUI.UpdateFastOffset = getRealOffset(0x72624C);
FlagStatusUI.UpdateFast = (void(*)(void*))FlagStatusUI.UpdateFastOffset;

FlashScript.AwakeOffset = getRealOffset(0x726784);
FlashScript.Awake = (void(*)(void*))FlashScript.AwakeOffset;

FlashScript.StartOffset = getRealOffset(0x7267FC);
FlashScript.Start = (void(*)(void*))FlashScript.StartOffset;

FlashScript.FlashOffset = getRealOffset(0x7268AC);
FlashScript.Flash = (void(*)(void*, float))FlashScript.FlashOffset;

FlashScript.ClearFlashOffset = getRealOffset(0x726930);
FlashScript.ClearFlash = (void(*)(void*))FlashScript.ClearFlashOffset;

FlashScript.OnDestroyOffset = getRealOffset(0x726940);
FlashScript.OnDestroy = (void(*)(void*))FlashScript.OnDestroyOffset;

FlashScript.UpdateFastOffset = getRealOffset(0x726B04);
FlashScript.UpdateFast = (void(*)(void*))FlashScript.UpdateFastOffset;

FootstepSoundSampler.StartOffset = getRealOffset(0x726EAC);
FootstepSoundSampler.Start = (void(*)(void*))FootstepSoundSampler.StartOffset;

FootstepSoundSampler.CheckGroundOffset = getRealOffset(0x727050);
FootstepSoundSampler.CheckGround = (void(*)(void*))FootstepSoundSampler.CheckGroundOffset;

FootstepSoundSampler.UpdateOffset = getRealOffset(0x7275FC);
FootstepSoundSampler.Update = (void(*)(void*))FootstepSoundSampler.UpdateOffset;

FootstepSoundSampler.GetFootstepSoundOffset = getRealOffset(0x727658);
FootstepSoundSampler.GetFootstepSound = (void *(*)(void*, bool))FootstepSoundSampler.GetFootstepSoundOffset;

FootstepSoundSampler.GetTextureMixOffset = getRealOffset(0x727A9C);
FootstepSoundSampler.GetMainTextureOffset = getRealOffset(0x727548);
FootstepSoundSampler.GetMainTexture = (int(*)(void*, Vector3, void *))FootstepSoundSampler.GetMainTextureOffset;

FirebaseManager.set_singletonOffset = getRealOffset(0x71DE28);
FirebaseManager.set_singleton = (void(*)(void *))FirebaseManager.set_singletonOffset;

FirebaseManager.get_singletonOffset = getRealOffset(0x71DE84);
FirebaseManager.get_singleton = (void *(*)())FirebaseManager.get_singletonOffset;

FirebaseManager.get_RegistrationTokenOffset = getRealOffset(0x71DEDC);
FirebaseManager.get_RegistrationToken = (monoString *(*)())FirebaseManager.get_RegistrationTokenOffset;

FirebaseManager.set_RegistrationTokenOffset = getRealOffset(0x71DF34);
FirebaseManager.set_RegistrationToken = (void(*)(monoString*))FirebaseManager.set_RegistrationTokenOffset;

FirebaseManager.get_GameIDOffset = getRealOffset(0x71DF90);
FirebaseManager.get_GameID = (monoString *(*)(void*))FirebaseManager.get_GameIDOffset;

FirebaseManager.set_GameIDOffset = getRealOffset(0x71DF98);
FirebaseManager.set_GameID = (void(*)(void*, monoString*))FirebaseManager.set_GameIDOffset;

FirebaseManager.set_allowNotificationsOffset = getRealOffset(0x71DFA0);
FirebaseManager.set_allowNotifications = (void(*)(void*, bool))FirebaseManager.set_allowNotificationsOffset;

FirebaseManager.get_allowNotificationsOffset = getRealOffset(0x71DFA8);
FirebaseManager.get_allowNotifications = (bool(*)(void*))FirebaseManager.get_allowNotificationsOffset;

FirebaseManager.set_isLoginOffset = getRealOffset(0x71DFB0);
FirebaseManager.set_isLogin = (void(*)(void*, bool))FirebaseManager.set_isLoginOffset;

FirebaseManager.get_isLoginOffset = getRealOffset(0x71DFB8);
FirebaseManager.get_isLogin = (bool(*)(void*))FirebaseManager.get_isLoginOffset;

FirebaseManager.AwakeOffset = getRealOffset(0x71DFC0);
FirebaseManager.Awake = (void(*)(void*))FirebaseManager.AwakeOffset;

FirebaseManager.GetNotificationConfigOffset = getRealOffset(0x71E2C8);
FirebaseManager.GetNotificationConfig = (void(*)(void*))FirebaseManager.GetNotificationConfigOffset;

FirebaseManager.Call_SetNotificationsConfigOffset = getRealOffset(0x71F6DC);
FirebaseManager.Call_SetNotificationsConfig = (void(*)(void*, bool))FirebaseManager.Call_SetNotificationsConfigOffset;

FirebaseManager.onSuccessSetNotificationsConfigOffset = getRealOffset(0x71F908);
FirebaseManager.onSuccessSetNotificationsConfig = (void(*)(void*, monoString*))FirebaseManager.onSuccessSetNotificationsConfigOffset;

FirebaseManager.Call_GetNotificationsConfigOffset = getRealOffset(0x71E58C);
FirebaseManager.Call_GetNotificationsConfig = (void(*)(void*))FirebaseManager.Call_GetNotificationsConfigOffset;

FirebaseManager.onSuccessGetNotificationsConfigOffset = getRealOffset(0x71FA14);
FirebaseManager.onSuccessGetNotificationsConfig = (void(*)(void*, monoString*))FirebaseManager.onSuccessGetNotificationsConfigOffset;

FirebaseManager.onSuccessLogoutOffset = getRealOffset(0x71FC04);
FirebaseManager.onSuccessLogout = (void(*)(void*, monoString*))FirebaseManager.onSuccessLogoutOffset;

FirebaseManager.Call_RegisterTokenOffset = getRealOffset(0x71FD64);
FirebaseManager.Call_RegisterToken = (void(*)(void*, monoString*))FirebaseManager.Call_RegisterTokenOffset;

FirebaseManager.onSuccessRegisterTokenOffset = getRealOffset(0x71FEEC);
FirebaseManager.onSuccessRegisterToken = (void(*)(void*, monoString*))FirebaseManager.onSuccessRegisterTokenOffset;

FirebaseManager.onSuccessRegisterInStoreMatchOffset = getRealOffset(0x71FFB8);
FirebaseManager.onSuccessRegisterInStoreMatch = (void(*)(void*, monoString*))FirebaseManager.onSuccessRegisterInStoreMatchOffset;

FirebaseManager.Call_UnregisterFromMatchOffset = getRealOffset(0x72021C);
FirebaseManager.Call_UnregisterFromMatch = (void(*)(void*, monoString*))FirebaseManager.Call_UnregisterFromMatchOffset;

FirebaseManager.onSuccessUnregisterFromMatchOffset = getRealOffset(0x7203A4);
FirebaseManager.onSuccessUnregisterFromMatch = (void(*)(void*, monoString*))FirebaseManager.onSuccessUnregisterFromMatchOffset;

FirebaseManager.Call_GetMatchIdOffset = getRealOffset(0x720598);
FirebaseManager.Call_GetMatchId = (void(*)(void*, int))FirebaseManager.Call_GetMatchIdOffset;

FirebaseManager.onSuccessGetMatchIdOffset = getRealOffset(0x720720);
FirebaseManager.onSuccessGetMatchId = (void(*)(void*, monoString*))FirebaseManager.onSuccessGetMatchIdOffset;

FirebaseManager.onErrorOffset = getRealOffset(0x7208E4);
FirebaseManager.onError = (void(*)(void*, monoString*))FirebaseManager.onErrorOffset;

FirebaseManager.ManageMessageOffset = getRealOffset(0x71F01C);
FirebaseManager.ManageMessage = (void(*)(void*, monoString*))FirebaseManager.ManageMessageOffset;

FirebaseManager.ClearInviteOffset = getRealOffset(0x7209B0);
FirebaseManager.ClearInvite = (void(*)(void*))FirebaseManager.ClearInviteOffset;

FirebaseManager.JoinToTheMatchOffset = getRealOffset(0x720A38);
FirebaseManager.JoinToTheMatch = (void(*)(void*))FirebaseManager.JoinToTheMatchOffset;

FirebaseManager.JoinToMatchOffset = getRealOffset(0x720C44);
FirebaseManager.JoinToMatch = (void(*)(void*, void *))FirebaseManager.JoinToMatchOffset;

FirebaseManager.LeaveMatchAndJoinNewMatchOffset = getRealOffset(0x720B44);
FirebaseManager.LeaveMatchAndJoinNewMatch = (void *(*)(void*))FirebaseManager.LeaveMatchAndJoinNewMatchOffset;

FirebaseManager.JoinMatchCoroutineOffset = getRealOffset(0x720CE8);
FirebaseManager.JoinMatchCoroutine = (void *(*)(void*, void *))FirebaseManager.JoinMatchCoroutineOffset;

FirebaseManager.JoinToTheMatchCoroutineOffset = getRealOffset(0x720BC4);
FirebaseManager.JoinToTheMatchCoroutine = (void *(*)(void*))FirebaseManager.JoinToTheMatchCoroutineOffset;

GFL_AllowNotificationsController.OnEnableOffset = getRealOffset(0x7288B4);
GFL_AllowNotificationsController.OnEnable = (void(*)(void*))GFL_AllowNotificationsController.OnEnableOffset;

GFL_AllowNotificationsController.SetDoNotDisturbOffset = getRealOffset(0x728B14);
GFL_AllowNotificationsController.SetDoNotDisturb = (void(*)(void*))GFL_AllowNotificationsController.SetDoNotDisturbOffset;

GFL_FriendInformationController.set_isFavoriteOffset = getRealOffset(0x728D88);
GFL_FriendInformationController.set_isFavorite = (void(*)(void*, bool))GFL_FriendInformationController.set_isFavoriteOffset;

GFL_FriendInformationController.get_isFavoriteOffset = getRealOffset(0x728D90);
GFL_FriendInformationController.get_isFavorite = (bool(*)(void*))GFL_FriendInformationController.get_isFavoriteOffset;

GFL_FriendInformationController.OnEnableOffset = getRealOffset(0x728D98);
GFL_FriendInformationController.OnEnable = (void(*)(void*))GFL_FriendInformationController.OnEnableOffset;

GFL_FriendInformationController.JoinMatchOffset = getRealOffset(0x728F30);
GFL_FriendInformationController.JoinMatch = (void(*)(void*))GFL_FriendInformationController.JoinMatchOffset;

GFL_FriendInformationController.InviteFriendOffset = getRealOffset(0x72929C);
GFL_FriendInformationController.InviteFriend = (void(*)(void*))GFL_FriendInformationController.InviteFriendOffset;

GFL_FriendInformationController.Call_MatchInviteOffset = getRealOffset(0x7292D4);
GFL_FriendInformationController.Call_MatchInvite = (void(*)(void*))GFL_FriendInformationController.Call_MatchInviteOffset;

GFL_FriendInformationController.onCompleteMatchInviteOffset = getRealOffset(0x729848);
GFL_FriendInformationController.onCompleteMatchInvite = (void(*)(void*))GFL_FriendInformationController.onCompleteMatchInviteOffset;

GFL_FriendInformationController.onErrorOffset = getRealOffset(0x7298D0);
GFL_FriendInformationController.onError = (void(*)(void*, monoString*))GFL_FriendInformationController.onErrorOffset;

GFL_FriendInformationController.GetFriendDataOffset = getRealOffset(0x72999C);
GFL_FriendInformationController.GetFriendData = (void *(*)(void*))GFL_FriendInformationController.GetFriendDataOffset;

GFL_FriendInformationController.GetFriendUsernameOffset = getRealOffset(0x7299A4);
GFL_FriendInformationController.GetFriendUsername = (monoString *(*)(void*))GFL_FriendInformationController.GetFriendUsernameOffset;

GFL_FriendInformationController.GetFriendOnlineStatusOffset = getRealOffset(0x7299C4);
GFL_FriendInformationController.GetFriendOnlineStatus = (bool(*)(void*))GFL_FriendInformationController.GetFriendOnlineStatusOffset;

GFL_FriendInformationController.UpdateFriendUIOffset = getRealOffset(0x7299E4);
GFL_FriendInformationController.UpdateFriendUI = (void(*)(void*))GFL_FriendInformationController.UpdateFriendUIOffset;

GFL_FriendInformationController.SetFriendInformationOffset = getRealOffset(0x72A378);
GFL_FriendInformationController.SetFriendInformation = (void(*)(void*, void *, void *, void *))GFL_FriendInformationController.SetFriendInformationOffset;

GFL_FriendInformationController.WaitToInviteAgainOffset = getRealOffset(0x728EB0);
GFL_FriendInformationController.WaitToInviteAgain = (void *(*)(void*))GFL_FriendInformationController.WaitToInviteAgainOffset;

GFL_FriendInformationController.SelectFavoriteFriendOffset = getRealOffset(0x72A3A8);
GFL_FriendInformationController.SelectFavoriteFriend = (void(*)(void*))GFL_FriendInformationController.SelectFavoriteFriendOffset;

GFL_FriendInformationController.ShowConfirmDeleteFriendPopupOffset = getRealOffset(0x72A440);
GFL_FriendInformationController.ShowConfirmDeleteFriendPopup = (void(*)(void*))GFL_FriendInformationController.ShowConfirmDeleteFriendPopupOffset;

GFL_FriendInformationController.DeleteFriendOffset = getRealOffset(0x72A470);
GFL_FriendInformationController.DeleteFriend = (void(*)(void*))GFL_FriendInformationController.DeleteFriendOffset;

GFL_FriendInformationController.onCompleteDeleteFriendOffset = getRealOffset(0x72A6D8);
GFL_FriendInformationController.onCompleteDeleteFriend = (void(*)(void*))GFL_FriendInformationController.onCompleteDeleteFriendOffset;

GFL_FriendInformationModel.set_responseGetMatchIdOffset = getRealOffset(0x72ADA4);
GFL_FriendInformationModel.set_responseGetMatchId = (void(*)(void*, void *))GFL_FriendInformationModel.set_responseGetMatchIdOffset;

GFL_FriendInformationModel.get_responseGetMatchIdOffset = getRealOffset(0x72ADAC);
GFL_FriendInformationModel.get_responseGetMatchId = (void *(*)(void*))GFL_FriendInformationModel.get_responseGetMatchIdOffset;

GFL_FriendInformationModel.set_responseMatchInviteOffset = getRealOffset(0x72ADB4);
GFL_FriendInformationModel.set_responseMatchInvite = (void(*)(void*, void *))GFL_FriendInformationModel.set_responseMatchInviteOffset;

GFL_FriendInformationModel.get_responseMatchInviteOffset = getRealOffset(0x72ADBC);
GFL_FriendInformationModel.get_responseMatchInvite = (void *(*)(void*))GFL_FriendInformationModel.get_responseMatchInviteOffset;

GFL_FriendInformationModel.set_responseRemoveFriendOffset = getRealOffset(0x72ADC4);
GFL_FriendInformationModel.set_responseRemoveFriend = (void(*)(void*, void *))GFL_FriendInformationModel.set_responseRemoveFriendOffset;

GFL_FriendInformationModel.get_responseRemoveFriendOffset = getRealOffset(0x72ADCC);
GFL_FriendInformationModel.get_responseRemoveFriend = (void *(*)(void*))GFL_FriendInformationModel.get_responseRemoveFriendOffset;

GFL_FriendInformationModel.onSuccessGetMatchIdOffset = getRealOffset(0x72AF3C);
GFL_FriendInformationModel.onSuccessGetMatchId = (void(*)(void*, monoString*))GFL_FriendInformationModel.onSuccessGetMatchIdOffset;

GFL_FriendInformationModel.onSuccessMatchInviteOffset = getRealOffset(0x72B0DC);
GFL_FriendInformationModel.onSuccessMatchInvite = (void(*)(void*, monoString*))GFL_FriendInformationModel.onSuccessMatchInviteOffset;

GFL_FriendInformationModel.onSuccessRemoveFriendOffset = getRealOffset(0x72B284);
GFL_FriendInformationModel.onSuccessRemoveFriend = (void(*)(void*, monoString*))GFL_FriendInformationModel.onSuccessRemoveFriendOffset;

GFL_FriendInformationModel.WrapJsonStringOffset = getRealOffset(0x72B40C);
GFL_FriendInformationModel.WrapJsonString = (monoString *(*)(void*, monoString*))GFL_FriendInformationModel.WrapJsonStringOffset;

GFL_FriendsListController.set_onlineFriendsOffset = getRealOffset(0x72B484);
GFL_FriendsListController.set_onlineFriends = (void(*)(void*, int))GFL_FriendsListController.set_onlineFriendsOffset;

GFL_FriendsListController.get_onlineFriendsOffset = getRealOffset(0x72B48C);
GFL_FriendsListController.get_onlineFriends = (int(*)(void*))GFL_FriendsListController.get_onlineFriendsOffset;

GFL_FriendsListController.set_totalFriendsOffset = getRealOffset(0x72B494);
GFL_FriendsListController.set_totalFriends = (void(*)(void*, int))GFL_FriendsListController.set_totalFriendsOffset;

GFL_FriendsListController.get_totalFriendsOffset = getRealOffset(0x72B49C);
GFL_FriendsListController.get_totalFriends = (int(*)(void*))GFL_FriendsListController.get_totalFriendsOffset;

GFL_FriendsListController.OnEnableOffset = getRealOffset(0x72B4A4);
GFL_FriendsListController.OnEnable = (void(*)(void*))GFL_FriendsListController.OnEnableOffset;

GFL_FriendsListController.RefreshAllOffset = getRealOffset(0x72B63C);
GFL_FriendsListController.RefreshAll = (void(*)(void*))GFL_FriendsListController.RefreshAllOffset;

GFL_FriendsListController.SetGenericFriendsListManagerOffset = getRealOffset(0x72B6F4);
GFL_FriendsListController.SetGenericFriendsListManager = (void(*)(void*, void *))GFL_FriendsListController.SetGenericFriendsListManagerOffset;

GFL_FriendsListController.ShowOffset = getRealOffset(0x72B6FC);
GFL_FriendsListController.Show = (void(*)(void*, bool))GFL_FriendsListController.ShowOffset;

GFL_FriendsListController.GetAllFriendsOffset = getRealOffset(0x72B76C);
GFL_FriendsListController.GetFriendDataOffset = getRealOffset(0x72B774);
GFL_FriendsListController.GetFriendData = (void *(*)(void*, int))GFL_FriendsListController.GetFriendDataOffset;

GFL_FriendsListController.Call_GetFriendsOffset = getRealOffset(0x72B838);
GFL_FriendsListController.Call_GetFriends = (void(*)(void*))GFL_FriendsListController.Call_GetFriendsOffset;

GFL_FriendsListController.onCompleteOffset = getRealOffset(0x72B9B4);
GFL_FriendsListController.onComplete = (void(*)(void*))GFL_FriendsListController.onCompleteOffset;

GFL_FriendsListController.SetFriendsOffset = getRealOffset(0x72BB98);
GFL_FriendsListController.SetFriends = (void(*)(void*, void *))GFL_FriendsListController.SetFriendsOffset;

GFL_FriendsListController.DeleteAllFriendsOffset = getRealOffset(0x72C888);
GFL_FriendsListController.DeleteAllFriends = (void(*)(void*))GFL_FriendsListController.DeleteAllFriendsOffset;

GFL_FriendsListController.onErrorOffset = getRealOffset(0x72C9E4);
GFL_FriendsListController.onError = (void(*)(void*, monoString*))GFL_FriendsListController.onErrorOffset;

GFL_FriendsListController.RemoveFriendFromListOffset = getRealOffset(0x72A834);
GFL_FriendsListController.RemoveFriendFromList = (void(*)(void*, void *))GFL_FriendsListController.RemoveFriendFromListOffset;

GFL_FriendsListModel.onSuccessOffset = getRealOffset(0x72CC34);
GFL_FriendsListModel.onSuccess = (void(*)(void*, monoString*))GFL_FriendsListModel.onSuccessOffset;

GFL_FriendsListModel.GetFriendsDataOffset = getRealOffset(0x72CDA4);
GFL_FriendsListModel.GetFriendsData = (void *(*)(void*))GFL_FriendsListModel.GetFriendsDataOffset;

GFL_FriendsListModel.WrapJsonStringOffset = getRealOffset(0x72CD34);
GFL_FriendsListModel.WrapJsonString = (monoString *(*)(void*, monoString*))GFL_FriendsListModel.WrapJsonStringOffset;

GFL_PeopleInformationController.StartOffset = getRealOffset(0x72CDDC);
GFL_PeopleInformationController.Start = (void(*)(void*))GFL_PeopleInformationController.StartOffset;

GFL_PeopleInformationController.AddFriendOffset = getRealOffset(0x72CE48);
GFL_PeopleInformationController.AddFriend = (void(*)(void*))GFL_PeopleInformationController.AddFriendOffset;

GFL_PeopleInformationController.onCompleteOffset = getRealOffset(0x72D0B0);
GFL_PeopleInformationController.onComplete = (void(*)(void*))GFL_PeopleInformationController.onCompleteOffset;

GFL_PeopleInformationController.onErrorOffset = getRealOffset(0x72D530);
GFL_PeopleInformationController.onError = (void(*)(void*, monoString*))GFL_PeopleInformationController.onErrorOffset;

GFL_PeopleInformationController.UpdateUIOffset = getRealOffset(0x72D620);
GFL_PeopleInformationController.UpdateUI = (void(*)(void*))GFL_PeopleInformationController.UpdateUIOffset;

GFL_PeopleInformationController.SetPeopleInformationOffset = getRealOffset(0x72D7C4);
GFL_PeopleInformationController.SetPeopleInformation = (void(*)(void*, void *, void *))GFL_PeopleInformationController.SetPeopleInformationOffset;

GFL_PeopleInformationModel.onSuccessOffset = getRealOffset(0x72D908);
GFL_PeopleInformationModel.onSuccess = (void(*)(void*, monoString*))GFL_PeopleInformationModel.onSuccessOffset;

GFL_PeopleInformationModel.GetAddFriendDataOffset = getRealOffset(0x72DADC);
GFL_PeopleInformationModel.GetAddFriendData = (void *(*)(void*))GFL_PeopleInformationModel.GetAddFriendDataOffset;

GFL_PeopleInformationModel.WrapJsonStringOffset = getRealOffset(0x72DA6C);
GFL_PeopleInformationModel.WrapJsonString = (monoString *(*)(void*, monoString*))GFL_PeopleInformationModel.WrapJsonStringOffset;

GFL_PeopleListController.OnEnableOffset = getRealOffset(0x72DAE4);
GFL_PeopleListController.OnEnable = (void(*)(void*))GFL_PeopleListController.OnEnableOffset;

GFL_PeopleListController.RefreshAllOffset = getRealOffset(0x72DC7C);
GFL_PeopleListController.RefreshAll = (void(*)(void*))GFL_PeopleListController.RefreshAllOffset;

GFL_PeopleListController.ShowOffset = getRealOffset(0x72DD34);
GFL_PeopleListController.Show = (void(*)(void*, bool))GFL_PeopleListController.ShowOffset;

GFL_PeopleListController.get_IsShowedOffset = getRealOffset(0x72DDA4);
GFL_PeopleListController.get_IsShowed = (bool(*)(void*))GFL_PeopleListController.get_IsShowedOffset;

GFL_PeopleListController.Call_SearchPeopleOffset = getRealOffset(0x72DDE8);
GFL_PeopleListController.Call_SearchPeople = (void(*)(void*, monoString*))GFL_PeopleListController.Call_SearchPeopleOffset;

GFL_PeopleListController.ClearPeopleFoundOffset = getRealOffset(0x72DF90);
GFL_PeopleListController.ClearPeopleFound = (void(*)(void*))GFL_PeopleListController.ClearPeopleFoundOffset;

GFL_PeopleListController.onCompleteSearchPeopleOffset = getRealOffset(0x72E2A0);
GFL_PeopleListController.onCompleteSearchPeople = (void(*)(void*))GFL_PeopleListController.onCompleteSearchPeopleOffset;

GFL_PeopleListController.onErrorOffset = getRealOffset(0x72E774);
GFL_PeopleListController.onError = (void(*)(void*, monoString*))GFL_PeopleListController.onErrorOffset;

GFL_PeopleListModel.onSuccessOffset = getRealOffset(0x72E8F0);
GFL_PeopleListModel.onSuccess = (void(*)(void*, monoString*))GFL_PeopleListModel.onSuccessOffset;

GFL_PeopleListModel.GetSearchPeopleDataOffset = getRealOffset(0x72EA68);
GFL_PeopleListModel.GetSearchPeopleData = (void *(*)(void*))GFL_PeopleListModel.GetSearchPeopleDataOffset;

GFL_PeopleListModel.WrapJsonStringOffset = getRealOffset(0x72E9F0);
GFL_PeopleListModel.WrapJsonString = (monoString *(*)(void*, monoString*))GFL_PeopleListModel.WrapJsonStringOffset;

GFL_RequestInformationController.OnDisableOffset = getRealOffset(0x72EA80);
GFL_RequestInformationController.OnDisable = (void(*)(void*))GFL_RequestInformationController.OnDisableOffset;

GFL_RequestInformationController.AcceptRequestOffset = getRealOffset(0x72EB38);
GFL_RequestInformationController.AcceptRequest = (void(*)(void*))GFL_RequestInformationController.AcceptRequestOffset;

GFL_RequestInformationController.RejectRequestOffset = getRealOffset(0x72EDA0);
GFL_RequestInformationController.RejectRequest = (void(*)(void*))GFL_RequestInformationController.RejectRequestOffset;

GFL_RequestInformationController.onCompleteAcceptOffset = getRealOffset(0x72F008);
GFL_RequestInformationController.onCompleteAccept = (void(*)(void*))GFL_RequestInformationController.onCompleteAcceptOffset;

GFL_RequestInformationController.onCompleteRejectOffset = getRealOffset(0x72F5D0);
GFL_RequestInformationController.onCompleteReject = (void(*)(void*))GFL_RequestInformationController.onCompleteRejectOffset;

GFL_RequestInformationController.onErrorOffset = getRealOffset(0x72F6FC);
GFL_RequestInformationController.onError = (void(*)(void*, monoString*))GFL_RequestInformationController.onErrorOffset;

GFL_RequestInformationController.UpdateRequestUIOffset = getRealOffset(0x72F7C8);
GFL_RequestInformationController.UpdateRequestUI = (void(*)(void*))GFL_RequestInformationController.UpdateRequestUIOffset;

GFL_RequestInformationController.SetRequestInformationOffset = getRealOffset(0x72F80C);
GFL_RequestInformationController.SetRequestInformation = (void(*)(void*, void *, void *))GFL_RequestInformationController.SetRequestInformationOffset;

GFL_RequestInformationModel.onSuccessAcceptOffset = getRealOffset(0x72F894);
GFL_RequestInformationModel.onSuccessAccept = (void(*)(void*, monoString*))GFL_RequestInformationModel.onSuccessAcceptOffset;

GFL_RequestInformationModel.onSuccessRejectOffset = getRealOffset(0x72FA04);
GFL_RequestInformationModel.onSuccessReject = (void(*)(void*, monoString*))GFL_RequestInformationModel.onSuccessRejectOffset;

GFL_RequestInformationModel.GetAcceptRequestDataOffset = getRealOffset(0x72FB98);
GFL_RequestInformationModel.GetAcceptRequestData = (void *(*)(void*))GFL_RequestInformationModel.GetAcceptRequestDataOffset;

GFL_RequestInformationModel.WrapJsonStringOffset = getRealOffset(0x72F994);
GFL_RequestInformationModel.WrapJsonString = (monoString *(*)(void*, monoString*))GFL_RequestInformationModel.WrapJsonStringOffset;

GFL_RequestsListController.get_actualPendingRequestsOffset = getRealOffset(0x72FBA0);
GFL_RequestsListController.get_actualPendingRequests = (int(*)(void*))GFL_RequestsListController.get_actualPendingRequestsOffset;

GFL_RequestsListController.set_actualPendingRequestsOffset = getRealOffset(0x72FBA8);
GFL_RequestsListController.set_actualPendingRequests = (void(*)(void*, int))GFL_RequestsListController.set_actualPendingRequestsOffset;

GFL_RequestsListController.OnEnableOffset = getRealOffset(0x72FBB0);
GFL_RequestsListController.OnEnable = (void(*)(void*))GFL_RequestsListController.OnEnableOffset;

GFL_RequestsListController.RefreshAllOffset = getRealOffset(0x72FD48);
GFL_RequestsListController.RefreshAll = (void(*)(void*))GFL_RequestsListController.RefreshAllOffset;

GFL_RequestsListController.SetGenericFriendsListManagerOffset = getRealOffset(0x72FE20);
GFL_RequestsListController.SetGenericFriendsListManager = (void(*)(void*, void *))GFL_RequestsListController.SetGenericFriendsListManagerOffset;

GFL_RequestsListController.GetRequestsNumberOffset = getRealOffset(0x72FE28);
GFL_RequestsListController.GetRequestsNumber = (int(*)(void*))GFL_RequestsListController.GetRequestsNumberOffset;

GFL_RequestsListController.GetRequestsDataOffset = getRealOffset(0x72FE4C);
GFL_RequestsListController.GetRequestsData = (void *(*)(void*))GFL_RequestsListController.GetRequestsDataOffset;

GFL_RequestsListController.GetPendingRequestsDataOffset = getRealOffset(0x72FE6C);
GFL_RequestsListController.GetPendingRequestsData = (void *(*)(void*))GFL_RequestsListController.GetPendingRequestsDataOffset;

GFL_RequestsListController.Call_GetRequestsOffset = getRealOffset(0x72FE8C);
GFL_RequestsListController.Call_GetRequests = (void(*)(void*))GFL_RequestsListController.Call_GetRequestsOffset;

GFL_RequestsListController.Call_GetPendingRequestsOffset = getRealOffset(0x730100);
GFL_RequestsListController.Call_GetPendingRequests = (void(*)(void*))GFL_RequestsListController.Call_GetPendingRequestsOffset;

GFL_RequestsListController.CreateRequestInformationObjectOffset = getRealOffset(0x7302F8);
GFL_RequestsListController.CreateRequestInformationObject = (void(*)(void*, void *))GFL_RequestsListController.CreateRequestInformationObjectOffset;

GFL_RequestsListController.onCompleteGetRequestsOffset = getRealOffset(0x730DF8);
GFL_RequestsListController.onCompleteGetRequests = (void(*)(void*))GFL_RequestsListController.onCompleteGetRequestsOffset;

GFL_RequestsListController.onCompleteGetPendingRequestsOffset = getRealOffset(0x730FD4);
GFL_RequestsListController.onCompleteGetPendingRequests = (void(*)(void*))GFL_RequestsListController.onCompleteGetPendingRequestsOffset;

GFL_RequestsListController.onErrorOffset = getRealOffset(0x73110C);
GFL_RequestsListController.onError = (void(*)(void*, monoString*))GFL_RequestsListController.onErrorOffset;

GFL_RequestsListModel.onSuccessGetRequestsOffset = getRealOffset(0x7312BC);
GFL_RequestsListModel.onSuccessGetRequests = (void(*)(void*, monoString*))GFL_RequestsListModel.onSuccessGetRequestsOffset;

GFL_RequestsListModel.onSuccessGetPendingRequestsOffset = getRealOffset(0x73142C);
GFL_RequestsListModel.onSuccessGetPendingRequests = (void(*)(void*, monoString*))GFL_RequestsListModel.onSuccessGetPendingRequestsOffset;

GFL_RequestsListModel.GetRequestsDataOffset = getRealOffset(0x73152C);
GFL_RequestsListModel.GetRequestsData = (void *(*)(void*))GFL_RequestsListModel.GetRequestsDataOffset;

GFL_RequestsListModel.GetPendingRequestsDataOffset = getRealOffset(0x731534);
GFL_RequestsListModel.GetPendingRequestsData = (void *(*)(void*))GFL_RequestsListModel.GetPendingRequestsDataOffset;

GFL_RequestsListModel.WrapJsonStringOffset = getRealOffset(0x7313BC);
GFL_RequestsListModel.WrapJsonString = (monoString *(*)(void*, monoString*))GFL_RequestsListModel.WrapJsonStringOffset;

GenericFriendsListManager.get_RequestsNumberOffset = getRealOffset(0x5FD660);
GenericFriendsListManager.get_RequestsNumber = (int(*)(void*))GenericFriendsListManager.get_RequestsNumberOffset;

GenericFriendsListManager.set_RequestsNumberOffset = getRealOffset(0x5FD668);
GenericFriendsListManager.set_RequestsNumber = (void(*)(void*, int))GenericFriendsListManager.set_RequestsNumberOffset;

GenericFriendsListManager.AwakeOffset = getRealOffset(0x5FD670);
GenericFriendsListManager.Awake = (void(*)(void*))GenericFriendsListManager.AwakeOffset;

GenericFriendsListManager.OnEnableOffset = getRealOffset(0x5FD86C);
GenericFriendsListManager.OnEnable = (void(*)(void*))GenericFriendsListManager.OnEnableOffset;

GenericFriendsListManager.RefreshFriendsOnlineOffset = getRealOffset(0x5FDBF4);
GenericFriendsListManager.RefreshFriendsOnline = (void(*)(void*))GenericFriendsListManager.RefreshFriendsOnlineOffset;

GenericFriendsListManager.GoToLoginSceneOffset = getRealOffset(0x5FDFA0);
GenericFriendsListManager.GoToLoginScene = (void(*)(void*))GenericFriendsListManager.GoToLoginSceneOffset;

GenericFriendsListManager.CancelRegisterUserOffset = getRealOffset(0x5FE028);
GenericFriendsListManager.CancelRegisterUser = (void(*)(void*))GenericFriendsListManager.CancelRegisterUserOffset;

GenericFriendsListManager.ActiveGuestUserPopupContainerOffset = getRealOffset(0x5FE074);
GenericFriendsListManager.ActiveGuestUserPopupContainer = (void(*)(void*))GenericFriendsListManager.ActiveGuestUserPopupContainerOffset;

GenericFriendsListManager.RefreshAllOffset = getRealOffset(0x5FDA54);
GenericFriendsListManager.RefreshAll = (void(*)(void*))GenericFriendsListManager.RefreshAllOffset;

GenericFriendsListManager.UpdateRequestsNumberOffset = getRealOffset(0x5FE120);
GenericFriendsListManager.UpdateRequestsNumber = (void(*)(void*, int))GenericFriendsListManager.UpdateRequestsNumberOffset;

GenericFriendsListManager.ShowNotificationBoxOffset = getRealOffset(0x5FE1A4);
GenericFriendsListManager.ShowNotificationBox = (void(*)(void*, bool))GenericFriendsListManager.ShowNotificationBoxOffset;

GenericFriendsListManager.SetPeopleNameToFindOffset = getRealOffset(0x5FE254);
GenericFriendsListManager.SetPeopleNameToFind = (void(*)(void*, monoString*))GenericFriendsListManager.SetPeopleNameToFindOffset;

GenericFriendsListManager.SearchPeopleOffset = getRealOffset(0x5FE3A4);
GenericFriendsListManager.SearchPeople = (void(*)(void*))GenericFriendsListManager.SearchPeopleOffset;

GenericFriendsListManager.CheckVisibleOfNotificationBoxOffset = getRealOffset(0x5FE0A0);
GenericFriendsListManager.CheckVisibleOfNotificationBox = (void *(*)(void*))GenericFriendsListManager.CheckVisibleOfNotificationBoxOffset;

GenericFriendsListManager.AddFavoriteFriendOffset = getRealOffset(0x5FE450);
GenericFriendsListManager.AddFavoriteFriend = (void(*)(void*, void *))GenericFriendsListManager.AddFavoriteFriendOffset;

GenericFriendsListManager.RemoveFavoriteFriendOffset = getRealOffset(0x5FE534);
GenericFriendsListManager.RemoveFavoriteFriend = (void(*)(void*, void *))GenericFriendsListManager.RemoveFavoriteFriendOffset;

GenericFriendsListManager.SaveFavoritesFriendsOffset = getRealOffset(0x5FE610);
GenericFriendsListManager.SaveFavoritesFriends = (void(*)(void*))GenericFriendsListManager.SaveFavoritesFriendsOffset;

GenericFriendsListManager.onSuccessUpdateFavoritesOffset = getRealOffset(0x5FEEC0);
GenericFriendsListManager.onSuccessUpdateFavorites = (void(*)(void*, monoString*))GenericFriendsListManager.onSuccessUpdateFavoritesOffset;

GenericFriendsListManager.onErrorOffset = getRealOffset(0x5FF11C);
GenericFriendsListManager.onError = (void(*)(void*, monoString*))GenericFriendsListManager.onErrorOffset;

GenericFriendsListManager.WrapJsonStringOffset = getRealOffset(0x5FF0AC);
GenericFriendsListManager.WrapJsonString = (monoString *(*)(void*, monoString*))GenericFriendsListManager.WrapJsonStringOffset;

GenericFriendsListManager.ShowFeedbackSavingFavoritesOffset = getRealOffset(0x5FE81C);
GenericFriendsListManager.ShowFeedbackSavingFavorites = (void(*)(void*, bool, bool))GenericFriendsListManager.ShowFeedbackSavingFavoritesOffset;

GenericFriendsListManager.ShowConfirmDeleteFriendPopupOffset = getRealOffset(0x5FF1FC);
GenericFriendsListManager.ShowConfirmDeleteFriendPopup = (void(*)(void*, void *))GenericFriendsListManager.ShowConfirmDeleteFriendPopupOffset;

GenericFriendsListManager.DeleteFriendOffset = getRealOffset(0x5FF2F8);
GenericFriendsListManager.DeleteFriend = (void(*)(void*))GenericFriendsListManager.DeleteFriendOffset;

GenericFriendsListManager.ClearConfirmDeleteFriendPopupOffset = getRealOffset(0x5FF39C);
GenericFriendsListManager.ClearConfirmDeleteFriendPopup = (void(*)(void*))GenericFriendsListManager.ClearConfirmDeleteFriendPopupOffset;

VisibilityFriendsSystemController.StartOffset = getRealOffset(0x89B4C4);
VisibilityFriendsSystemController.Start = (void(*)(void*))VisibilityFriendsSystemController.StartOffset;

VisibilityFriendsSystemController.ReviewEnabledStateOffset = getRealOffset(0x89B620);
VisibilityFriendsSystemController.ReviewEnabledState = (void(*)(void*))VisibilityFriendsSystemController.ReviewEnabledStateOffset;

VisibilityFriendsSystemController.ShowFriendsSystemOffset = getRealOffset(0x89B6C8);
VisibilityFriendsSystemController.ShowFriendsSystem = (void(*)(void*))VisibilityFriendsSystemController.ShowFriendsSystemOffset;

VisibilityFriendsSystemController.HideFriendsSystemOffset = getRealOffset(0x89B718);
VisibilityFriendsSystemController.HideFriendsSystem = (void(*)(void*))VisibilityFriendsSystemController.HideFriendsSystemOffset;

VisibilityFriendsSystemMainMenuController.StartOffset = getRealOffset(0x89B770);
VisibilityFriendsSystemMainMenuController.Start = (void(*)(void*))VisibilityFriendsSystemMainMenuController.StartOffset;

VisibilityFriendsSystemMainMenuController.ReviewEnabledStateOffset = getRealOffset(0x89B8CC);
VisibilityFriendsSystemMainMenuController.ReviewEnabledState = (void(*)(void*))VisibilityFriendsSystemMainMenuController.ReviewEnabledStateOffset;

VisibilityFriendsSystemMainMenuController.ShowFriendsSystemOffset = getRealOffset(0x89B974);
VisibilityFriendsSystemMainMenuController.ShowFriendsSystem = (void(*)(void*))VisibilityFriendsSystemMainMenuController.ShowFriendsSystemOffset;

VisibilityFriendsSystemMainMenuController.HideFriendsSystemOffset = getRealOffset(0x89B9C4);
VisibilityFriendsSystemMainMenuController.HideFriendsSystem = (void(*)(void*))VisibilityFriendsSystemMainMenuController.HideFriendsSystemOffset;

GOActivePlayerPrefs.StartOffset = getRealOffset(0x731544);
GOActivePlayerPrefs.Start = (void(*)(void*))GOActivePlayerPrefs.StartOffset;

GOActivePlayerPrefsString.StartOffset = getRealOffset(0x73159C);
GOActivePlayerPrefsString.Start = (void(*)(void*))GOActivePlayerPrefsString.StartOffset;

GameManager.get_CreditsMultiplierOffset = getRealOffset(0x5E69F8);
GameManager.get_CreditsMultiplier = (float(*)(void*))GameManager.get_CreditsMultiplierOffset;

GameManager.get_XPMultiplierOffset = getRealOffset(0x5E6AF8);
GameManager.get_XPMultiplier = (float(*)(void*))GameManager.get_XPMultiplierOffset;

GameManager.get_totalHealthInfractionsOffset = getRealOffset(0x5E6BF8);
GameManager.get_totalHealthInfractions = (int(*)(void*))GameManager.get_totalHealthInfractionsOffset;

GameManager.set_totalHealthInfractionsOffset = getRealOffset(0x5E6C00);
GameManager.set_totalHealthInfractions = (void(*)(void*, int))GameManager.set_totalHealthInfractionsOffset;

GameManager.SetEnemyInPoolOffset = getRealOffset(0x5E6D10);
GameManager.SetEnemyInPool = (void(*)(void *))GameManager.SetEnemyInPoolOffset;

GameManager.GetPlatformNameOffset = getRealOffset(0x5E6FEC);
GameManager.GetPlatformName = (monoString *(*)())GameManager.GetPlatformNameOffset;

GameManager.GetTouchDeltaTimeOffset = getRealOffset(0x5E713C);
GameManager.GetTouchDeltaTime = (float(*)(int))GameManager.GetTouchDeltaTimeOffset;

GameManager.GetTouchScreenDPIOffset = getRealOffset(0x5E71FC);
GameManager.GetTouchScreenDPI = (float(*)())GameManager.GetTouchScreenDPIOffset;

GameManager.RefreshHighPingWarningOffset = getRealOffset(0x5E7244);
GameManager.RefreshHighPingWarning = (void(*)(void*, bool))GameManager.RefreshHighPingWarningOffset;

GameManager.ShowHighPingWarningOffset = getRealOffset(0x5E7308);
GameManager.ShowHighPingWarning = (void(*)(void*, int))GameManager.ShowHighPingWarningOffset;

GameManager.findClosestEnemyInRangeOffset = getRealOffset(0x5E74C0);
GameManager.findClosestEnemyInRange = (void *(*)(void*, Vector3, float, Vector3, float))GameManager.findClosestEnemyInRangeOffset;

GameManager.getBestEnemyPointOffset = getRealOffset(0x5E79A8);
GameManager.getBestEnemyPoint = (Vector3 (*)(void*))GameManager.getBestEnemyPointOffset;

GameManager.ButtonPressedOffset = getRealOffset(0x5E7F5C);
GameManager.ButtonPressed = (void(*)(void*))GameManager.ButtonPressedOffset;

GameManager.CalculatePathLengthOffset = getRealOffset(0x5E7F70);
GameManager.CalculatePathLength = (float(*)(void*, Vector3, Vector3))GameManager.CalculatePathLengthOffset;

GameManager.getBestSpawnPointOffset = getRealOffset(0x5E82BC);
GameManager.getBestSpawnPoint = (Vector3 (*)(void*))GameManager.getBestSpawnPointOffset;

GameManager.AddGraphicColorExtraItemOffset = getRealOffset(0x5E8B7C);
GameManager.AddGraphicColorExtraItem = (void(*)(void*, void *))GameManager.AddGraphicColorExtraItemOffset;

GameManager.ToggleHUDEnabledOffset = getRealOffset(0x5E8D60);
GameManager.ToggleHUDEnabled = (void(*)(void*, bool))GameManager.ToggleHUDEnabledOffset;

GameManager.ShowOrQueueCreditsXPRewardPopupOffset = getRealOffset(0x5E9128);
GameManager.ShowOrQueueCreditsXPRewardPopup = (void(*)(int, int))GameManager.ShowOrQueueCreditsXPRewardPopupOffset;

GameManager.SwitchTeamsOffset = getRealOffset(0x5E95E4);
GameManager.SwitchTeams = (void(*)(void*))GameManager.SwitchTeamsOffset;

GameManager.RespawnAsSpectatorOffset = getRealOffset(0x5E99F8);
GameManager.RespawnAsSpectator = (void(*)(void*))GameManager.RespawnAsSpectatorOffset;

GameManager.InstantiateSpectatorOffset = getRealOffset(0x5EA0D4);
GameManager.InstantiateSpectator = (void *(*)(void*))GameManager.InstantiateSpectatorOffset;

GameManager.ReportPlayerOffset = getRealOffset(0x5EA61C);
GameManager.ReportPlayer = (void(*)(void*, monoString*))GameManager.ReportPlayerOffset;

GameManager.OnVoteProcessInitiatedOffset = getRealOffset(0x5EA804);
GameManager.OnVoteProcessInitiated = (void(*)(void*, monoString*))GameManager.OnVoteProcessInitiatedOffset;

GameManager.PerformVoteOffset = getRealOffset(0x5EA848);
GameManager.PerformVote = (void(*)(void*))GameManager.PerformVoteOffset;

GameManager.PerformAutomaticYesVoteOffset = getRealOffset(0x5EA994);
GameManager.PerformAutomaticYesVote = (void(*)(void*))GameManager.PerformAutomaticYesVoteOffset;

GameManager.DisplayVoteDataOffset = getRealOffset(0x5EAAC0);
GameManager.DisplayVoteData = (void(*)(void*, monoString*, monoString*, monoString*, int, int))GameManager.DisplayVoteDataOffset;

GameManager.PunishPlayerOffset = getRealOffset(0x5EADD8);
GameManager.PunishPlayer = (void(*)(void*, monoString*))GameManager.PunishPlayerOffset;

GameManager.addSoundOffset = getRealOffset(0x5EAE3C);
GameManager.addSound = (bool(*)(void*, Vector3, float, void *))GameManager.addSoundOffset;

GameManager.throwGrenadeOffset = getRealOffset(0x5EB05C);
GameManager.throwGrenade = (void(*)(void*, Vector3, float, Vector3, int, int))GameManager.throwGrenadeOffset;

GameManager.createSplatterOffset = getRealOffset(0x5EBB20);
GameManager.createSplatter = (void *(*)(void*, Vector3, Vector3, bool, void *, float))GameManager.createSplatterOffset;

GameManager.isSoundInRangeOffset = getRealOffset(0x5EC80C);
GameManager.isSoundInRange = (Vector3 (*)(void*, Vector3, float, void *))GameManager.isSoundInRangeOffset;

GameManager.GetAvailableBulletOffset = getRealOffset(0x5ECB58);
GameManager.GetAvailableBullet = (int(*)(void*))GameManager.GetAvailableBulletOffset;

GameManager.GetSquareDistanceFromPointToLineOffset = getRealOffset(0x5ECC3C);
GameManager.GetSquareDistanceFromPointToLine = (float(*)(Vector3, Vector3, Vector3, Vector3 *))GameManager.GetSquareDistanceFromPointToLineOffset;

GameManager.AddXPOffset = getRealOffset(0x5ECE44);
GameManager.AddXP = (void(*)(void*, int, bool))GameManager.AddXPOffset;

GameManager.AddMoneyOffset = getRealOffset(0x5ED10C);
GameManager.AddMoney = (void(*)(void*, int, bool))GameManager.AddMoneyOffset;

GameManager.createExplosionOffset = getRealOffset(0x5ED3A0);
GameManager.createExplosion = (bool(*)(void*, Vector3, float, int, int))GameManager.createExplosionOffset;

GameManager.playExplosionAtPointOffset = getRealOffset(0x5EECC8);
GameManager.playExplosionAtPoint = (bool(*)(void*, Vector3))GameManager.playExplosionAtPointOffset;

GameManager.playHitParticleOffset = getRealOffset(0x5EF040);
GameManager.playHitParticle = (bool(*)(void*, Vector3, Vector3, Color))GameManager.playHitParticleOffset;

GameManager.GetAvailableParticleSystemOffset = getRealOffset(0x5EF474);
GameManager.GetAvailableParticleSystem = (int(*)(void*))GameManager.GetAvailableParticleSystemOffset;

GameManager.GetAvailableExplosionOffset = getRealOffset(0x5EEF38);
GameManager.GetAvailableExplosion = (int(*)(void*))GameManager.GetAvailableExplosionOffset;

GameManager.GetAvailableHitParticleOffset = getRealOffset(0x5EF36C);
GameManager.GetAvailableHitParticle = (int(*)(void*))GameManager.GetAvailableHitParticleOffset;

GameManager.AddPlayerOffset = getRealOffset(0x5EF558);
GameManager.AddPlayer = (void(*)(int, void *))GameManager.AddPlayerOffset;

GameManager.JSOffset = getRealOffset(0x5EF604);
GameManager.JS = (void(*)(void*, bool))GameManager.JSOffset;

GameManager.CancelJSOffset = getRealOffset(0x5EF724);
GameManager.CancelJS = (void(*)(void*))GameManager.CancelJSOffset;

GameManager.LoadLevel3Offset = getRealOffset(0x5EF790);
GameManager.LoadLevel3 = (void(*)(void*))GameManager.LoadLevel3Offset;

GameManager.LogAmountOfTransformsOffset = getRealOffset(0x5EF814);
GameManager.LogAmountOfTransforms = (void(*)(void*))GameManager.LogAmountOfTransformsOffset;

GameManager.AwakeOffset = getRealOffset(0x5EF818);
GameManager.Awake = (void(*)(void*))GameManager.AwakeOffset;

GameManager.StartOffset = getRealOffset(0x5F2080);
GameManager.Start = (void(*)(void*))GameManager.StartOffset;

GameManager.RefreshHardcoreUIElementsVisibilityOffset = getRealOffset(0x5F3278);
GameManager.RefreshHardcoreUIElementsVisibility = (void(*)(void*, bool))GameManager.RefreshHardcoreUIElementsVisibilityOffset;

GameManager.SetHealthOffset = getRealOffset(0x5F33A0);
GameManager.SetHealth = (void(*)(void*, float, float))GameManager.SetHealthOffset;

GameManager.GetHealthbarColorOffset = getRealOffset(0x5F3454);
GameManager.GetHealthbarColor = (Color (*)(void*, int))GameManager.GetHealthbarColorOffset;

GameManager.showHitMarkerOffset = getRealOffset(0x5F346C);
GameManager.showHitMarker = (void(*)(void*, Vector3, Color, float, bool))GameManager.showHitMarkerOffset;

GameManager.HideHitMarkerOffset = getRealOffset(0x5F37AC);
GameManager.HideHitMarker = (void(*)(void*))GameManager.HideHitMarkerOffset;

GameManager.enemyKilledOffset = getRealOffset(0x5F3AAC);
GameManager.enemyKilled = (void(*)(void*))GameManager.enemyKilledOffset;

GameManager.InvokeLoadNextLevelOffset = getRealOffset(0x5F3FF4);
GameManager.InvokeLoadNextLevel = (void(*)(void*))GameManager.InvokeLoadNextLevelOffset;

GameManager.LoadNextLevelOffset = getRealOffset(0x5F41C4);
GameManager.LoadNextLevel = (void(*)(void*))GameManager.LoadNextLevelOffset;

GameManager.OnMasterClientSwitchedOffset = getRealOffset(0x5F4A74);
GameManager.OnMasterClientSwitched = (void(*)(void*, void *))GameManager.OnMasterClientSwitchedOffset;

GameManager.DisableMessageQueueOffset = getRealOffset(0x5F4BE4);
GameManager.DisableMessageQueue = (void(*)(void*))GameManager.DisableMessageQueueOffset;

GameManager.DestroyMatchManagerOffset = getRealOffset(0x5F4C5C);
GameManager.DestroyMatchManager = (void(*)(void*))GameManager.DestroyMatchManagerOffset;

GameManager.InvokeShowLoadingScreenOffset = getRealOffset(0x5F4A0C);
GameManager.InvokeShowLoadingScreen = (void(*)(void*, float))GameManager.InvokeShowLoadingScreenOffset;

GameManager.ShowLoadingScreenOffset = getRealOffset(0x5F4E10);
GameManager.ShowLoadingScreen = (void(*)(void*))GameManager.ShowLoadingScreenOffset;

GameManager.InvokeLoadNewNetworkSceneOffset = getRealOffset(0x5F49E8);
GameManager.InvokeLoadNewNetworkScene = (void(*)(void*, float))GameManager.InvokeLoadNewNetworkSceneOffset;

GameManager.LoadNewNetworkSceneOffset = getRealOffset(0x5F5190);
GameManager.LoadNewNetworkScene = (void *(*)(void*, float))GameManager.LoadNewNetworkSceneOffset;

GameManager.SetPlayerLivingOffset = getRealOffset(0x5F523C);
GameManager.SetPlayerLiving = (void(*)(void*, bool))GameManager.SetPlayerLivingOffset;

GameManager.addBulletHoleOffset = getRealOffset(0x5F52B8);
GameManager.addBulletHole = (void(*)(void*, Vector3, Vector3, float))GameManager.addBulletHoleOffset;

GameManager.SpawnStaticBloodSplatterOffset = getRealOffset(0x5F53D0);
GameManager.SpawnStaticBloodSplatter = (void(*)(void*, Vector3, Vector3))GameManager.SpawnStaticBloodSplatterOffset;

GameManager.createMinimapItemOffset = getRealOffset(0x5F5550);
GameManager.createMinimapItem = (void *(*)(void*, void *, Color, void *))GameManager.createMinimapItemOffset;

GameManager.spawnBloodEffectOffset = getRealOffset(0x5F57F4);
GameManager.spawnBloodEffect = (void *(*)(void*, Vector3))GameManager.spawnBloodEffectOffset;

GameManager.spawnBigBloodEffectOffset = getRealOffset(0x5F58F8);
GameManager.spawnBigBloodEffect = (void *(*)(void*, Vector3))GameManager.spawnBigBloodEffectOffset;

GameManager.spawnShellOffset = getRealOffset(0x5F59FC);
GameManager.spawnShell = (void *(*)(void*, Vector3, int, Vector3, Vector3))GameManager.spawnShellOffset;

GameManager.OnLeftRoomOffset = getRealOffset(0x5F5B88);
GameManager.OnLeftRoom = (void(*)(void*))GameManager.OnLeftRoomOffset;

GameManager.OnDisconnectedFromPhotonOffset = getRealOffset(0x5F5C0C);
GameManager.OnDisconnectedFromPhoton = (void(*)(void*))GameManager.OnDisconnectedFromPhotonOffset;

GameManager.OnDestroyOffset = getRealOffset(0x5F5C90);
GameManager.OnDestroy = (void(*)(void*))GameManager.OnDestroyOffset;

GameManager.enemyDeathOffset = getRealOffset(0x5F2878);
GameManager.enemyDeath = (void(*)(void*, bool, bool, bool, bool))GameManager.enemyDeathOffset;

GameManager.OnApplicationQuitOffset = getRealOffset(0x5F5FD0);
GameManager.OnApplicationQuit = (void(*)(void*))GameManager.OnApplicationQuitOffset;

GameManager.spawnEnemyOffset = getRealOffset(0x5F6054);
GameManager.spawnEnemy = (void(*)(void*))GameManager.spawnEnemyOffset;

GameManager.resetPlayerBodyOffset = getRealOffset(0x5F6240);
GameManager.resetPlayerBody = (void(*)(void*, void *))GameManager.resetPlayerBodyOffset;

GameManager.resetBulletOffset = getRealOffset(0x5F6350);
GameManager.resetBullet = (void(*)(void*, int))GameManager.resetBulletOffset;

GameManager.PracticeModeFinishedOffset = getRealOffset(0x5F64CC);
GameManager.PracticeModeFinished = (void(*)(void*, bool))GameManager.PracticeModeFinishedOffset;

GameManager.ReturnToMainMenuOffset = getRealOffset(0x5F67C0);
GameManager.ReturnToMainMenu = (void(*)(void*))GameManager.ReturnToMainMenuOffset;

GameManager.InstantiateWaveOfEnemiesOffset = getRealOffset(0x5F6880);
GameManager.InstantiateWaveOfEnemies = (void(*)(void*, int))GameManager.InstantiateWaveOfEnemiesOffset;

GameManager.UpdateFastOffset = getRealOffset(0x5F6934);
GameManager.UpdateFast = (void(*)(void*))GameManager.UpdateFastOffset;

GameManager.LocalPlayerTeamUpdatedOffset = getRealOffset(0x5F8788);
GameManager.LocalPlayerTeamUpdated = (void(*)(void*))GameManager.LocalPlayerTeamUpdatedOffset;

GameManager.TakeScreenshotOffset = getRealOffset(0x5F8970);
GameManager.TakeScreenshot = (void(*)(void*, void *, int, int, void *))GameManager.TakeScreenshotOffset;

GameManager.LateUpdateOffset = getRealOffset(0x5F8F08);
GameManager.LateUpdate = (void(*)(void*))GameManager.LateUpdateOffset;

GameManager.LoadAllowedWeaponsInfoOffset = getRealOffset(0x5F9478);
GameManager.LoadAllowedWeaponsInfo = (void(*)(void*))GameManager.LoadAllowedWeaponsInfoOffset;

GameManager.ShowStartMatchButtonOffset = getRealOffset(0x5F95E0);
GameManager.ShowStartMatchButton = (void(*)(void*))GameManager.ShowStartMatchButtonOffset;

GameManager.HideStartMatchButtonOffset = getRealOffset(0x5F9984);
GameManager.HideStartMatchButton = (void(*)(void*))GameManager.HideStartMatchButtonOffset;

GameManager.IsHardcoreMatchOffset = getRealOffset(0x5F26D8);
GameManager.IsHardcoreMatch = (bool(*)())GameManager.IsHardcoreMatchOffset;

GameManager.IsMatchStartedOffset = getRealOffset(0x5F9A08);
GameManager.IsMatchStarted = (bool(*)())GameManager.IsMatchStartedOffset;

GameManager.IsRoundStartedOffset = getRealOffset(0x5F9B80);
GameManager.IsRoundStarted = (bool(*)())GameManager.IsRoundStartedOffset;

GameObjectPoolManager.AwakeOffset = getRealOffset(0x5FA98C);
GameObjectPoolManager.Awake = (void(*)(void*))GameObjectPoolManager.AwakeOffset;

GameObjectPoolManager.StartOffset = getRealOffset(0x5FA9E8);
GameObjectPoolManager.Start = (void(*)(void*))GameObjectPoolManager.StartOffset;

GameObjectPoolManager.GetObjectPrefabOffset = getRealOffset(0x5FAD20);
GameObjectPoolManager.GetObjectPrefab = (void *(*)(void*, int))GameObjectPoolManager.GetObjectPrefabOffset;

GameObjectPoolManager.GetMaxCountForTypeOffset = getRealOffset(0x5FB184);
GameObjectPoolManager.GetMaxCountForType = (int(*)(void*, int))GameObjectPoolManager.GetMaxCountForTypeOffset;

GameObjectPoolManager.FillListOffset = getRealOffset(0x5FB1A4);
GameObjectPoolManager.FillList = (void(*)(void*, int))GameObjectPoolManager.FillListOffset;

GameObjectPoolManager.FillLimitedListsOffset = getRealOffset(0x5FA9EC);
GameObjectPoolManager.FillLimitedLists = (void(*)(void*))GameObjectPoolManager.FillLimitedListsOffset;

GameObjectPoolManager.CreateLimitedObjectOffset = getRealOffset(0x5EBEEC);
GameObjectPoolManager.CreateLimitedObject = (void *(*)(void*, int, void *, Vector3, int))GameObjectPoolManager.CreateLimitedObjectOffset;

GameObjectPoolManager.CreateObjectOffset = getRealOffset(0x5EB374);
GameObjectPoolManager.CreateObject = (void *(*)(void*, void *, Vector3, int, bool))GameObjectPoolManager.CreateObjectOffset;

GameObjectPoolManager.DestroyObjectOffset = getRealOffset(0x5FB628);
GameObjectPoolManager.DestroyObject = (void(*)(void*, void *))GameObjectPoolManager.DestroyObjectOffset;

GameObjectPoolManager.OnDestroyOffset = getRealOffset(0x5FB654);
GameObjectPoolManager.OnDestroy = (void(*)(void*))GameObjectPoolManager.OnDestroyOffset;

GameObjectReferences.AwakeOffset = getRealOffset(0x5FB968);
GameObjectReferences.Awake = (void(*)(void*))GameObjectReferences.AwakeOffset;

GameObjectReferences.InitOffset = getRealOffset(0x5FB978);
GameObjectReferences.Init = (void(*)(void*))GameObjectReferences.InitOffset;

GeneralUtils.TranslateDropdownOptionsOffset = getRealOffset(0x5FBAA0);
GeneralUtils.TranslateDropdownOptions = (void(*)(void *))GeneralUtils.TranslateDropdownOptionsOffset;

Gibs.AwakeOffset = getRealOffset(0x5FFB0C);
Gibs.Awake = (void(*)(void*))Gibs.AwakeOffset;

Gibs.HideGibsOffset = getRealOffset(0x5FFB70);
Gibs.HideGibs = (void(*)(void*))Gibs.HideGibsOffset;

Gibs.ResetOffset = getRealOffset(0x5FB374);
Gibs.Reset = (void(*)(void*))Gibs.ResetOffset;

Gibs.SetVelocityOffset = getRealOffset(0x5FFBA4);
Gibs.SetVelocity = (void(*)(void*, Vector3))Gibs.SetVelocityOffset;

GlobalVehicleCamera.setTargetOffset = getRealOffset(0x6001F4);
GlobalVehicleCamera.setTarget = (void(*)(void*, void *, float, float, float, float))GlobalVehicleCamera.setTargetOffset;

GlobalVehicleCamera.UpdateOffset = getRealOffset(0x6003D8);
GlobalVehicleCamera.Update = (void(*)(void*))GlobalVehicleCamera.UpdateOffset;

GlobalVehicleCamera.enableCamOffset = getRealOffset(0x600BBC);
GlobalVehicleCamera.enableCam = (void(*)(void*))GlobalVehicleCamera.enableCamOffset;

GlobalVehicleCamera.disableCamOffset = getRealOffset(0x600CC8);
GlobalVehicleCamera.disableCam = (void(*)(void*))GlobalVehicleCamera.disableCamOffset;

GlobalVehicleCamera.shakeOffset = getRealOffset(0x600EFC);
GlobalVehicleCamera.shake = (void(*)(void*, float))GlobalVehicleCamera.shakeOffset;

GlobalVehicleCamera.LateUpdateOffset = getRealOffset(0x600F2C);
GlobalVehicleCamera.LateUpdate = (void(*)(void*))GlobalVehicleCamera.LateUpdateOffset;

GlobalVehicleCamera.AwakeOffset = getRealOffset(0x600FA8);
GlobalVehicleCamera.Awake = (void(*)(void*))GlobalVehicleCamera.AwakeOffset;

GlobalVehicleCamera.OnDestroyOffset = getRealOffset(0x6010D4);
GlobalVehicleCamera.OnDestroy = (void(*)(void*))GlobalVehicleCamera.OnDestroyOffset;

GlobalWeaponResourceHandler.AwakeOffset = getRealOffset(0x60122C);
GlobalWeaponResourceHandler.Awake = (void(*)(void*))GlobalWeaponResourceHandler.AwakeOffset;

GlobalWeaponResourceHandler.ApplyTexturesAsyncOffset = getRealOffset(0x601288);
GlobalWeaponResourceHandler.ApplyTexturesAsync = (void(*)(void*, monoString*, monoString*, void *))GlobalWeaponResourceHandler.ApplyTexturesAsyncOffset;

GlobalWeaponResourceHandler.ApplyTexturesAsyncCROffset = getRealOffset(0x6012B4);
GlobalWeaponResourceHandler.ApplyTexturesAsyncCR = (void *(*)(void*, monoString*, monoString*, void *))GlobalWeaponResourceHandler.ApplyTexturesAsyncCROffset;

GlobalWeaponResourceHandler.OnDestroyOffset = getRealOffset(0x601380);
GlobalWeaponResourceHandler.OnDestroy = (void(*)(void*))GlobalWeaponResourceHandler.OnDestroyOffset;

GoToSingleplayer.StartOffset = getRealOffset(0x6026EC);
GoToSingleplayer.Start = (void(*)(void*))GoToSingleplayer.StartOffset;

GoToSingleplayer.RefreshActiveStateOffset = getRealOffset(0x602C58);
GoToSingleplayer.RefreshActiveState = (void(*)(void*))GoToSingleplayer.RefreshActiveStateOffset;

GoToSingleplayer.OnPointerUpOffset = getRealOffset(0x60314C);
GoToSingleplayer.OnPointerUp = (void(*)(void*, void *))GoToSingleplayer.OnPointerUpOffset;

GoldManager.GetProductIDFromAmountOffset = getRealOffset(0x6035F8);
GoldManager.GetProductIDFromAmount = (monoString *(*)(int))GoldManager.GetProductIDFromAmountOffset;

GoldManager.GetAmountFromProductIDOffset = getRealOffset(0x6036AC);
GoldManager.GetAmountFromProductID = (int(*)(monoString*))GoldManager.GetAmountFromProductIDOffset;

GoldManager.AwakeOffset = getRealOffset(0x603798);
GoldManager.Awake = (void(*)(void*))GoldManager.AwakeOffset;

GoldManager.StartOffset = getRealOffset(0x603814);
GoldManager.Start = (void(*)(void*))GoldManager.StartOffset;

GoldManager.OnDestroyOffset = getRealOffset(0x603C3C);
GoldManager.OnDestroy = (void(*)(void*))GoldManager.OnDestroyOffset;

GoldManager.BuyGoldOffset = getRealOffset(0x603D30);
GoldManager.BuyGold = (void(*)(void*, int))GoldManager.BuyGoldOffset;

GoldManager.IAPInitializedOffset = getRealOffset(0x6038A4);
GoldManager.IAPInitialized = (void(*)(void*))GoldManager.IAPInitializedOffset;

GoldManager.ChangePriceTierTextOffset = getRealOffset(0x6044A4);
GoldManager.ChangePriceTierText = (void(*)(void*, void *, monoString*))GoldManager.ChangePriceTierTextOffset;

GoldManager.GetLocalizedPriceAndCurrencyOffset = getRealOffset(0x604254);
GoldManager.SetGoldOffset = getRealOffset(0x60459C);
GoldManager.SetGold = (void(*)(void*, int))GoldManager.SetGoldOffset;

GoldManager.GoldPurchaseFailedOffset = getRealOffset(0x604654);
GoldManager.GoldPurchaseFailed = (void(*)(void*))GoldManager.GoldPurchaseFailedOffset;

GoldManager.BoughtGoldOffset = getRealOffset(0x60467C);
GoldManager.BoughtGold = (void(*)(void*))GoldManager.BoughtGoldOffset;

GraphicAnimations.AwakeOffset = getRealOffset(0x604794);
GraphicAnimations.Awake = (void(*)(void*))GraphicAnimations.AwakeOffset;

GraphicAnimations.SetGraphicScaleOffset = getRealOffset(0x604998);
GraphicAnimations.SetGraphicScale = (void(*)(void*, float))GraphicAnimations.SetGraphicScaleOffset;

GraphicAnimations.SetGraphicScale1Offset = getRealOffset(0x604B10);
GraphicAnimations.SetGraphicScale1 = (void(*)(void*, Vector3))GraphicAnimations.SetGraphicScale1Offset;

GraphicAnimations.OnPointerDownOffset = getRealOffset(0x604B78);
GraphicAnimations.OnPointerDown = (void(*)(void*, void *))GraphicAnimations.OnPointerDownOffset;

GraphicAnimations.ScaleToOriginalSizeOffset = getRealOffset(0x604B94);
GraphicAnimations.ScaleToOriginalSize = (void *(*)(void*))GraphicAnimations.ScaleToOriginalSizeOffset;

GraphicAnimations.OnPointerUpOffset = getRealOffset(0x604C34);
GraphicAnimations.OnPointerUp = (void(*)(void*, void *))GraphicAnimations.OnPointerUpOffset;

GraphicColorExtra.AwakeOffset = getRealOffset(0x604E74);
GraphicColorExtra.Awake = (void(*)(void*))GraphicColorExtra.AwakeOffset;

GraphicColorExtra.CheckTextOffset = getRealOffset(0x604F84);
GraphicColorExtra.CheckText = (void(*)(void*))GraphicColorExtra.CheckTextOffset;

GraphicColorExtra.CheckImageOffset = getRealOffset(0x60507C);
GraphicColorExtra.CheckImage = (void(*)(void*))GraphicColorExtra.CheckImageOffset;

GraphicColorExtra.get_rectTransformOffset = getRealOffset(0x5F2850);
GraphicColorExtra.get_rectTransform = (void *(*)(void*))GraphicColorExtra.get_rectTransformOffset;

GraphicColorExtra.get_raycastTargetOffset = getRealOffset(0x605154);
GraphicColorExtra.get_raycastTarget = (bool(*)(void*))GraphicColorExtra.get_raycastTargetOffset;

GraphicColorExtra.set_raycastTargetOffset = getRealOffset(0x605184);
GraphicColorExtra.set_raycastTarget = (void(*)(void*, bool))GraphicColorExtra.set_raycastTargetOffset;

GraphicColorExtra.OnEnableOffset = getRealOffset(0x605334);
GraphicColorExtra.OnEnable = (void(*)(void*))GraphicColorExtra.OnEnableOffset;

GraphicColorExtra.OnDisableOffset = getRealOffset(0x60536C);
GraphicColorExtra.OnDisable = (void(*)(void*))GraphicColorExtra.OnDisableOffset;

GraphicColorExtra.StartOffset = getRealOffset(0x6053A4);
GraphicColorExtra.Start = (void(*)(void*))GraphicColorExtra.StartOffset;

GraphicColorExtra.get_spriteOffset = getRealOffset(0x6054B0);
GraphicColorExtra.get_sprite = (void *(*)(void*))GraphicColorExtra.get_spriteOffset;

GraphicColorExtra.set_spriteOffset = getRealOffset(0x6054B8);
GraphicColorExtra.set_sprite = (void(*)(void*, void *))GraphicColorExtra.set_spriteOffset;

GraphicColorExtra.get_fontSizeOffset = getRealOffset(0x605570);
GraphicColorExtra.get_fontSize = (int(*)(void*))GraphicColorExtra.get_fontSizeOffset;

GraphicColorExtra.set_fontSizeOffset = getRealOffset(0x605594);
GraphicColorExtra.set_fontSize = (void(*)(void*, int))GraphicColorExtra.set_fontSizeOffset;

GraphicColorExtra.get_textOffset = getRealOffset(0x60565C);
GraphicColorExtra.get_text = (monoString *(*)(void*))GraphicColorExtra.get_textOffset;

GraphicColorExtra.set_textOffset = getRealOffset(0x5F66F0);
GraphicColorExtra.set_text = (void(*)(void*, monoString*))GraphicColorExtra.set_textOffset;

GraphicColorExtra.get_visibleOffset = getRealOffset(0x605664);
GraphicColorExtra.get_visible = (bool(*)(void*))GraphicColorExtra.get_visibleOffset;

GraphicColorExtra.set_visibleOffset = getRealOffset(0x5E8C14);
GraphicColorExtra.set_visible = (void(*)(void*, bool))GraphicColorExtra.set_visibleOffset;

GraphicColorExtra.get_colorOffset = getRealOffset(0x60566C);
GraphicColorExtra.get_color = (Color (*)(void*))GraphicColorExtra.get_colorOffset;

GraphicColorExtra.set_colorOffset = getRealOffset(0x5F3730);
GraphicColorExtra.set_color = (void(*)(void*, Color))GraphicColorExtra.set_colorOffset;

GraphicColorExtra.EnabledCheckOffset = getRealOffset(0x605240);
GraphicColorExtra.EnabledCheck = (void(*)(void*))GraphicColorExtra.EnabledCheckOffset;

GraphicsDependentEnabling.AwakeOffset = getRealOffset(0x6056E0);
GraphicsDependentEnabling.Awake = (void(*)(void*))GraphicsDependentEnabling.AwakeOffset;

GraphicsOptions.StartOffset = getRealOffset(0x605A58);
GraphicsOptions.Start = (void(*)(void*))GraphicsOptions.StartOffset;

GraphicsOptions.GetGraphicsOptionOffset = getRealOffset(0x605800);
GraphicsOptions.GetGraphicsOption = (int (*)(bool))GraphicsOptions.GetGraphicsOptionOffset;

GraphicsOptions.ApplyTextureQualityOffset = getRealOffset(0x605E58);
GraphicsOptions.ApplyTextureQuality = (void(*)())GraphicsOptions.ApplyTextureQualityOffset;

GraphicsOptions.AwakeOffset = getRealOffset(0x605EE0);
GraphicsOptions.Awake = (void(*)(void*))GraphicsOptions.AwakeOffset;

GraphicsOptions.SetTextureQualityOffset = getRealOffset(0x605FD0);
GraphicsOptions.SetTextureQuality = (void(*)(void*, int))GraphicsOptions.SetTextureQualityOffset;

GraphicsOptions.SetValueOffset = getRealOffset(0x6060FC);
GraphicsOptions.SetValue = (void(*)(void*, int))GraphicsOptions.SetValueOffset;

GrenadeButton.StartOffset = getRealOffset(0x6064D0);
GrenadeButton.Start = (void(*)(void*))GrenadeButton.StartOffset;

GrenadeButton.OnPointerUpOffset = getRealOffset(0x606688);
GrenadeButton.OnPointerUp = (void(*)(void*, void *))GrenadeButton.OnPointerUpOffset;

GrenadeScript.launchGrenadeOffset = getRealOffset(0x5EB850);
GrenadeScript.launchGrenade = (void(*)(void*, float, Vector3, int, int))GrenadeScript.launchGrenadeOffset;

GrenadeScript.pullPinOffset = getRealOffset(0x60679C);
GrenadeScript.pullPin = (void(*)(void*, float))GrenadeScript.pullPinOffset;

GrenadeScript.AwakeOffset = getRealOffset(0x606AA0);
GrenadeScript.Awake = (void(*)(void*))GrenadeScript.AwakeOffset;

GrenadeScript.StartOffset = getRealOffset(0x606D3C);
GrenadeScript.Start = (void(*)(void*))GrenadeScript.StartOffset;

GrenadeScript.OnCollisionEnterOffset = getRealOffset(0x606DEC);
GrenadeScript.OnCollisionEnter = (void(*)(void*, void *))GrenadeScript.OnCollisionEnterOffset;

GrenadeScript.CheckForPlayersNearbyOffset = getRealOffset(0x606EE0);
GrenadeScript.CheckForPlayersNearby = (void(*)(void*))GrenadeScript.CheckForPlayersNearbyOffset;

GrenadeScript.explodeOffset = getRealOffset(0x6074EC);
GrenadeScript.explode = (void(*)(void*))GrenadeScript.explodeOffset;

GrenadeScript.removeGrenadeOffset = getRealOffset(0x608964);
GrenadeScript.removeGrenade = (void(*)(void*))GrenadeScript.removeGrenadeOffset;

GrenadeScript.disableSelfOffset = getRealOffset(0x6089F4);
GrenadeScript.disableSelf = (void(*)(void*))GrenadeScript.disableSelfOffset;

GrenadeScript.OnDestroyOffset = getRealOffset(0x608B04);
GrenadeScript.OnDestroy = (void(*)(void*))GrenadeScript.OnDestroyOffset;

GrenadeScript.UpdateFastOffset = getRealOffset(0x608C68);
GrenadeScript.UpdateFast = (void(*)(void*))GrenadeScript.UpdateFastOffset;

GrenadesLeft.AwakeOffset = getRealOffset(0x8FD598);
GrenadesLeft.Awake = (void(*)(void*))GrenadesLeft.AwakeOffset;

GrenadesLeft.SetTypeOffset = getRealOffset(0x8FD5F4);
GrenadesLeft.SetType = (void(*)(void*, int))GrenadesLeft.SetTypeOffset;

GrenadesLeft.getGrenadesLeftOffset = getRealOffset(0x8FD818);
GrenadesLeft.getGrenadesLeft = (int(*)(void*))GrenadesLeft.getGrenadesLeftOffset;

GrenadesLeft.GetMaxGrenadesOffset = getRealOffset(0x8FD8C0);
GrenadesLeft.GetMaxGrenades = (int(*)(void*))GrenadesLeft.GetMaxGrenadesOffset;

GrenadesLeft.setGrenadesLeftOffset = getRealOffset(0x8FDA64);
GrenadesLeft.setGrenadesLeft = (void(*)(void*, int))GrenadesLeft.setGrenadesLeftOffset;

GrenadesLeft.OnDestroyOffset = getRealOffset(0x8FDB58);
GrenadesLeft.OnDestroy = (void(*)(void*))GrenadesLeft.OnDestroyOffset;

GuestLogin.StartOffset = getRealOffset(0x8FF650);
GuestLogin.Start = (void(*)(void*))GuestLogin.StartOffset;

GunAvailableThroughAdsButton.set_InstanceOffset = getRealOffset(0x8FF65C);
GunAvailableThroughAdsButton.set_Instance = (void(*)(void *))GunAvailableThroughAdsButton.set_InstanceOffset;

GunAvailableThroughAdsButton.get_InstanceOffset = getRealOffset(0x8FF6B8);
GunAvailableThroughAdsButton.get_Instance = (void *(*)())GunAvailableThroughAdsButton.get_InstanceOffset;

GunAvailableThroughAdsButton.StartOffset = getRealOffset(0x8FF710);
GunAvailableThroughAdsButton.Start = (void(*)(void*))GunAvailableThroughAdsButton.StartOffset;

GunAvailableThroughAdsButton.CheckTimeSinceLastAdOffset = getRealOffset(0x8FF8DC);
GunAvailableThroughAdsButton.GetWatchAdButtonTextOffset = getRealOffset(0x8FFA20);
GunAvailableThroughAdsButton.GetWatchAdButtonText = (monoString *(*)(void*))GunAvailableThroughAdsButton.GetWatchAdButtonTextOffset;

GunAvailableThroughAdsButton.WatchAdOffset = getRealOffset(0x8FFC5C);
GunAvailableThroughAdsButton.WatchAd = (void(*)(void*))GunAvailableThroughAdsButton.WatchAdOffset;

GunAvailableThroughAdsButton.WatchedAdOffset = getRealOffset(0x8FFD10);
GunAvailableThroughAdsButton.WatchedAd = (void(*)(void*))GunAvailableThroughAdsButton.WatchedAdOffset;

GunAvailableThroughAdsButton.UpdateOffset = getRealOffset(0x8FFDF0);
GunAvailableThroughAdsButton.Update = (void(*)(void*))GunAvailableThroughAdsButton.UpdateOffset;

GunAvailableThroughAdsButton.OnDestroyOffset = getRealOffset(0x900250);
GunAvailableThroughAdsButton.OnDestroy = (void(*)(void*))GunAvailableThroughAdsButton.OnDestroyOffset;

GunCustomizeScript.AwakeOffset = getRealOffset(0x9002B4);
GunCustomizeScript.Awake = (void(*)(void*))GunCustomizeScript.AwakeOffset;

GunCustomizeScript.UpdateArmsTeamNumberOffset = getRealOffset(0x900660);
GunCustomizeScript.UpdateArmsTeamNumber = (void(*)(void*, int))GunCustomizeScript.UpdateArmsTeamNumberOffset;

GunCustomizeScript.DestroyAttachmentTransformsOffset = getRealOffset(0x90076C);
GunCustomizeScript.DestroyAttachmentTransforms = (void(*)(void*))GunCustomizeScript.DestroyAttachmentTransformsOffset;

GunCustomizeScript.LoadLocalPlayerWeaponPrefabOffset = getRealOffset(0x900EBC);
GunCustomizeScript.LoadLocalPlayerWeaponPrefab = (void(*)(void*))GunCustomizeScript.LoadLocalPlayerWeaponPrefabOffset;

GunCustomizeScript.InitOriginalCameraAnglesOffset = getRealOffset(0x903930);
GunCustomizeScript.InitOriginalCameraAngles = (void(*)(void*))GunCustomizeScript.InitOriginalCameraAnglesOffset;

GunCustomizeScript.UnloadLocalPlayerWeaponPrefabOffset = getRealOffset(0x903EF0);
GunCustomizeScript.UnloadLocalPlayerWeaponPrefab = (void(*)(void*))GunCustomizeScript.UnloadLocalPlayerWeaponPrefabOffset;

GunCustomizeScript.LoadLocalPlayerAudioDataOffset = getRealOffset(0x904078);
GunCustomizeScript.LoadLocalPlayerAudioData = (void(*)(void*))GunCustomizeScript.LoadLocalPlayerAudioDataOffset;

GunCustomizeScript.UnloadLocalPlayerAudioDataOffset = getRealOffset(0x904178);
GunCustomizeScript.UnloadLocalPlayerAudioData = (void(*)(void*))GunCustomizeScript.UnloadLocalPlayerAudioDataOffset;

GunCustomizeScript.StartOffset = getRealOffset(0x904278);
GunCustomizeScript.Start = (void(*)(void*))GunCustomizeScript.StartOffset;

GunCustomizeScript.PopulateSightPositionsOffset = getRealOffset(0x900564);
GunCustomizeScript.PopulateSightPositions = (void(*)(void*))GunCustomizeScript.PopulateSightPositionsOffset;

GunCustomizeScript.GetADSPositionOffset = getRealOffset(0x90430C);
GunCustomizeScript.GetADSPosition = (Vector3 (*)(void*, int))GunCustomizeScript.GetADSPositionOffset;

GunCustomizeScript.GetCameraDeltaOffset = getRealOffset(0x904388);
GunCustomizeScript.GetCameraDelta = (Vector3 (*)(void*))GunCustomizeScript.GetCameraDeltaOffset;

GunCustomizeScript.SetSightsOffset = getRealOffset(0x9017E4);
GunCustomizeScript.SetSights = (void(*)(void*, int))GunCustomizeScript.SetSightsOffset;

GunCustomizeScript.SetAccessoryOffset = getRealOffset(0x901E50);
GunCustomizeScript.SetAccessory = (void(*)(void*, int, bool))GunCustomizeScript.SetAccessoryOffset;

GunCustomizeScript.SetBarrelOffset = getRealOffset(0x902648);
GunCustomizeScript.SetBarrel = (void(*)(void*, int, bool))GunCustomizeScript.SetBarrelOffset;

GunCustomizeScript.OnDestroyOffset = getRealOffset(0x904694);
GunCustomizeScript.OnDestroy = (void(*)(void*))GunCustomizeScript.OnDestroyOffset;

GunCustomizeScript.RemoveCamoOffset = getRealOffset(0x903620);
GunCustomizeScript.RemoveCamo = (void(*)(void*))GunCustomizeScript.RemoveCamoOffset;

GunCustomizeScript.SetCorrectShaderOffset = getRealOffset(0x903AC0);
GunCustomizeScript.SetCorrectShader = (void(*)(void*))GunCustomizeScript.SetCorrectShaderOffset;

GunCustomizeScript.UpdateOffset = getRealOffset(0x904948);
GunCustomizeScript.Update = (void(*)(void*))GunCustomizeScript.UpdateOffset;

GunCustomizeScript.AddCamoOffset = getRealOffset(0x902CF0);
GunCustomizeScript.AddCamo = (void(*)(void*, int))GunCustomizeScript.AddCamoOffset;

GunScript.DestroyGunOffset = getRealOffset(0x90521C);
GunScript.DestroyGun = (void(*)(void*))GunScript.DestroyGunOffset;

GunScript.SetAccessoryOffset = getRealOffset(0x9052C0);
GunScript.SetAccessory = (void(*)(void*, int))GunScript.SetAccessoryOffset;

GunScript.CurrentWeaponGOOffset = getRealOffset(0x905420);
GunScript.CurrentWeaponGO = (void *(*)(void*))GunScript.CurrentWeaponGOOffset;

GunScript.PlayShootSoundOffset = getRealOffset(0x9054B0);
GunScript.PlayShootSound = (void(*)(void*))GunScript.PlayShootSoundOffset;

GunScript.ShowMuzzleFlashOffset = getRealOffset(0x90596C);
GunScript.ShowMuzzleFlash = (void(*)(void*))GunScript.ShowMuzzleFlashOffset;

GunScript.GetMuzzlePositionOffset = getRealOffset(0x906024);
GunScript.GetMuzzlePosition = (Vector3 (*)(void*))GunScript.GetMuzzlePositionOffset;

GunScript.ShowOffset = getRealOffset(0x906094);
GunScript.Show = (void(*)(void*, bool))GunScript.ShowOffset;

GunScript.InitCurrentRenderersOffset = getRealOffset(0x905364);
GunScript.InitCurrentRenderers = (void(*)(void*))GunScript.InitCurrentRenderersOffset;

GunScript.IsShownOffset = getRealOffset(0x90624C);
GunScript.IsShown = (bool(*)(void*))GunScript.IsShownOffset;

GunScript.EnablePhysicsOffset = getRealOffset(0x90633C);
GunScript.EnablePhysics = (void(*)(void*))GunScript.EnablePhysicsOffset;

GunScript.RemoveRigidbodyOffset = getRealOffset(0x906584);
GunScript.RemoveRigidbody = (void(*)(void*))GunScript.RemoveRigidbodyOffset;

GunScript.DisablePhysicsOffset = getRealOffset(0x906988);
GunScript.DisablePhysics = (void(*)(void*))GunScript.DisablePhysicsOffset;

GunScript.SetTypeOffset = getRealOffset(0x906A14);
GunScript.SetType = (void(*)(void*, int))GunScript.SetTypeOffset;

GunScript.OnEnableOffset = getRealOffset(0x907214);
GunScript.OnEnable = (void(*)(void*))GunScript.OnEnableOffset;

GunScript.StartOffset = getRealOffset(0x907308);
GunScript.Start = (void(*)(void*))GunScript.StartOffset;

GunScript.OnDestroyOffset = getRealOffset(0x9073B8);
GunScript.OnDestroy = (void(*)(void*))GunScript.OnDestroyOffset;

GunScript.DisableMuzzleFlashOffset = getRealOffset(0x90751C);
GunScript.DisableMuzzleFlash = (void(*)(void*))GunScript.DisableMuzzleFlashOffset;

GunScript.AwakeOffset = getRealOffset(0x907588);
GunScript.Awake = (void(*)(void*))GunScript.AwakeOffset;

GunScript.SetBarrelOffset = getRealOffset(0x90705C);
GunScript.SetBarrel = (void(*)(void*, int))GunScript.SetBarrelOffset;

GunScript.SetSightOffset = getRealOffset(0x908F44);
GunScript.SetSight = (void(*)(void*, int))GunScript.SetSightOffset;

GunScript.SetCamoOffset = getRealOffset(0x907100);
GunScript.SetCamo = (void(*)(void*, int))GunScript.SetCamoOffset;

GunScript.UpdateFastOffset = getRealOffset(0x908F4C);
GunScript.UpdateFast = (void(*)(void*))GunScript.UpdateFastOffset;

GunSounds.StartOffset = getRealOffset(0x90924C);
GunSounds.Start = (void(*)(void*))GunSounds.StartOffset;

GunSounds.ShouldPlayOffset = getRealOffset(0x9092E8);
GunSounds.ShouldPlay = (bool(*)(void*))GunSounds.ShouldPlayOffset;

GunSounds.PlayInsertShellOffset = getRealOffset(0x909410);
GunSounds.PlayInsertShell = (void(*)(void*))GunSounds.PlayInsertShellOffset;

GunSounds.PlayChamberOffset = getRealOffset(0x909470);
GunSounds.PlayChamber = (void(*)(void*))GunSounds.PlayChamberOffset;

GunSounds.PlayCustomSound01Offset = getRealOffset(0x9094D0);
GunSounds.PlayCustomSound01 = (void(*)(void*))GunSounds.PlayCustomSound01Offset;

GunSounds.PlayCustomSound02Offset = getRealOffset(0x909530);
GunSounds.PlayCustomSound02 = (void(*)(void*))GunSounds.PlayCustomSound02Offset;

GunSounds.PlayCustomSound03Offset = getRealOffset(0x909590);
GunSounds.PlayCustomSound03 = (void(*)(void*))GunSounds.PlayCustomSound03Offset;

GunSounds.PlayCustomSound04Offset = getRealOffset(0x9095F0);
GunSounds.PlayCustomSound04 = (void(*)(void*))GunSounds.PlayCustomSound04Offset;

GunSounds.PlayCustomSound05Offset = getRealOffset(0x909650);
GunSounds.PlayCustomSound05 = (void(*)(void*))GunSounds.PlayCustomSound05Offset;

GunSounds.PlayCustomSound06Offset = getRealOffset(0x9096B0);
GunSounds.PlayCustomSound06 = (void(*)(void*))GunSounds.PlayCustomSound06Offset;

GunSounds.PlayCustomSound07Offset = getRealOffset(0x909710);
GunSounds.PlayCustomSound07 = (void(*)(void*))GunSounds.PlayCustomSound07Offset;

GunSounds.PlayCustomSound08Offset = getRealOffset(0x909770);
GunSounds.PlayCustomSound08 = (void(*)(void*))GunSounds.PlayCustomSound08Offset;

GunSounds.PlayCustomSound09Offset = getRealOffset(0x9097D0);
GunSounds.PlayCustomSound09 = (void(*)(void*))GunSounds.PlayCustomSound09Offset;

GunStats.get_gunGameLevelsOffset = getRealOffset(0x909840);
GunStats.AwakeOffset = getRealOffset(0x909860);
GunStats.Awake = (void(*)(void*))GunStats.AwakeOffset;

GunStats.InitializeGunGameLevelsOffset = getRealOffset(0x92340C);
GunStats.InitializeGunGameLevels = (void(*)(void*))GunStats.InitializeGunGameLevelsOffset;

GunStats.PrintGunGameLevelsOffset = getRealOffset(0x9246B8);
GunStats.PrintGunGameLevels = (void(*)(void*, int))GunStats.PrintGunGameLevelsOffset;

GunStats.AddGunGameLevelOffset = getRealOffset(0x9251C0);
GunStats.AddGunGameLevel = (void(*)(void*, int, int, int, int, int))GunStats.AddGunGameLevelOffset;

GunStats.SetGunGamePreset0Offset = getRealOffset(0x9235FC);
GunStats.SetGunGamePreset0 = (void(*)(void*))GunStats.SetGunGamePreset0Offset;

GunStats.SetGunGamePreset1Offset = getRealOffset(0x923B90);
GunStats.SetGunGamePreset1 = (void(*)(void*))GunStats.SetGunGamePreset1Offset;

GunStats.SetGunGamePreset2Offset = getRealOffset(0x924124);
GunStats.SetGunGamePreset2 = (void(*)(void*))GunStats.SetGunGamePreset2Offset;

GunStats.GetGunGameLevelIndexOffset = getRealOffset(0x9252D0);
GunStats.GetGunGameLevelIndex = (int(*)(void*, int))GunStats.GetGunGameLevelIndexOffset;

GunStats.IsWeaponAPrimaryWeaponOffset = getRealOffset(0x925444);
GunStats.IsWeaponAPrimaryWeapon = (bool(*)(void*, int))GunStats.IsWeaponAPrimaryWeaponOffset;

GunStats.GetWeaponNameOffset = getRealOffset(0x925510);
GunStats.GetWeaponName = (monoString *(*)(void*, int))GunStats.GetWeaponNameOffset;

GunStats.GetWeaponName1Offset = getRealOffset(0x925514);
GunStats.GetWeaponName1 = (monoString *(*)(void*, int))GunStats.GetWeaponName1Offset;

GunStats.WeaponNameToWeaponTypeOffset = getRealOffset(0x9080B4);
GunStats.WeaponNameToWeaponType = (int (*)(void*, monoString*))GunStats.WeaponNameToWeaponTypeOffset;

GunStats.GetGunStatsOffset = getRealOffset(0x925678);
GunStats.GetGunStats = (int (*)(void*, int))GunStats.GetGunStatsOffset;

GunStats.GetGunStats1Offset = getRealOffset(0x90AF64);
GunStats.GetGunStats1 = (int (*)(void*, int))GunStats.GetGunStats1Offset;

GunStats.GetCountOfPrimaryTypeOffset = getRealOffset(0x925688);
GunStats.GetCountOfPrimaryType = (int(*)(void*, int))GunStats.GetCountOfPrimaryTypeOffset;

GunStats.GetAllGunstatsOfCategoryOffset = getRealOffset(0x925764);
GunStats.GetPrimaryCategoryUnlockCountOffset = getRealOffset(0x925884);
GunStats.GetPrimaryCategoryUnlockCount = (int(*)(void*, int))GunStats.GetPrimaryCategoryUnlockCountOffset;

GunStats.OnDestroyOffset = getRealOffset(0x9259B0);
GunStats.OnDestroy = (void(*)(void*))GunStats.OnDestroyOffset;

GyroscopeMode.AwakeOffset = getRealOffset(0x7ED458);
GyroscopeMode.Awake = (void(*)(void*))GyroscopeMode.AwakeOffset;

GyroscopeMode.StartOffset = getRealOffset(0x7ED50C);
GyroscopeMode.Start = (void(*)(void*))GyroscopeMode.StartOffset;

GyroscopeMode.IsEnabledOffset = getRealOffset(0x7EDAE4);
GyroscopeMode.IsEnabled = (bool(*)())GyroscopeMode.IsEnabledOffset;

GyroscopeMode.SetEnabledOffset = getRealOffset(0x7ED8E8);
GyroscopeMode.SetEnabled = (void(*)(void*, bool))GyroscopeMode.SetEnabledOffset;

GyroscopeMode.SetDropdownOffset = getRealOffset(0x7EDB4C);
GyroscopeMode.SetDropdown = (void(*)(void*, int))GyroscopeMode.SetDropdownOffset;

HeadCamera.AwakeOffset = getRealOffset(0x7F2208);
HeadCamera.Awake = (void(*)(void*))HeadCamera.AwakeOffset;

HidingPopup.UpdateOffset = getRealOffset(0x7F2478);
HidingPopup.Update = (void(*)(void*))HidingPopup.UpdateOffset;

HitSoundScript.AwakeOffset = getRealOffset(0x7F278C);
HitSoundScript.Awake = (void(*)(void*))HitSoundScript.AwakeOffset;

HitSoundScript.OnCollisionEnterOffset = getRealOffset(0x7F27EC);
HitSoundScript.OnCollisionEnter = (void(*)(void*, void *))HitSoundScript.OnCollisionEnterOffset;

HumanReferences.AwakeOffset = getRealOffset(0x7FFD94);
HumanReferences.Awake = (void(*)(void*))HumanReferences.AwakeOffset;

HumanReferences.EnableTeammateCollidersOffset = getRealOffset(0x8001E8);
HumanReferences.EnableTeammateColliders = (void(*)(void*, bool))HumanReferences.EnableTeammateCollidersOffset;

IAP.AwakeOffset = getRealOffset(0x800394);
IAP.Awake = (void(*)(void*))IAP.AwakeOffset;

IAP.ItemPurchasedOffset = getRealOffset(0x8007F0);
IAP.ItemPurchased = (void(*)(void*, monoString*))IAP.ItemPurchasedOffset;

IAP.PurchaseFraudOffset = getRealOffset(0x800AD8);
IAP.PurchaseFraud = (void(*)(void*, monoString*))IAP.PurchaseFraudOffset;

IAP.PurchaseFailedOffset = getRealOffset(0x800CC8);
IAP.PurchaseFailed = (void(*)(void*))IAP.PurchaseFailedOffset;

IAP.InitializePurchasingOffset = getRealOffset(0x800420);
IAP.InitializePurchasing = (void(*)(void*))IAP.InitializePurchasingOffset;

IAP.IsInitializedOffset = getRealOffset(0x800E9C);
IAP.IsInitialized = (bool(*)(void*))IAP.IsInitializedOffset;

IAP.BuyNonConsumableOffset = getRealOffset(0x800F54);
IAP.BuyNonConsumable = (void(*)(void*))IAP.BuyNonConsumableOffset;

IAP.BuyGoldTierOneOffset = getRealOffset(0x8015C8);
IAP.BuyGoldTierOne = (bool(*)(void*))IAP.BuyGoldTierOneOffset;

IAP.BuyGoldTierTwoOffset = getRealOffset(0x801660);
IAP.BuyGoldTierTwo = (bool(*)(void*))IAP.BuyGoldTierTwoOffset;

IAP.BuyGoldTierThreeOffset = getRealOffset(0x8016F8);
IAP.BuyGoldTierThree = (bool(*)(void*))IAP.BuyGoldTierThreeOffset;

IAP.BuyGoldTierFourOffset = getRealOffset(0x801790);
IAP.BuyGoldTierFour = (bool(*)(void*))IAP.BuyGoldTierFourOffset;

IAP.BuyProductIDOffset = getRealOffset(0x800FE8);
IAP.BuyProductID = (bool(*)(void*, monoString*, monoString*))IAP.BuyProductIDOffset;

IAP.RestorePurchasesOffset = getRealOffset(0x801828);
IAP.RestorePurchases = (void(*)(void*))IAP.RestorePurchasesOffset;

IAP.OnInitializedOffset = getRealOffset(0x801974);
IAP.OnInitialized = (void(*)(void*, void *, void *))IAP.OnInitializedOffset;

IAP.GetProductWithIDOffset = getRealOffset(0x801AD0);
IAP.GetProductWithID = (void *(*)(void*, monoString*))IAP.GetProductWithIDOffset;

IAP.OnInitializeFailedOffset = getRealOffset(0x801BF0);
IAP.OnInitializeFailed = (void(*)(void*, int))IAP.OnInitializeFailedOffset;

IAP.ProcessPurchaseOffset = getRealOffset(0x801CB0);
IAP.ProcessPurchase = (int (*)(void*, void *))IAP.ProcessPurchaseOffset;

IAP.OnPurchaseFailedOffset = getRealOffset(0x802060);
IAP.OnPurchaseFailed = (void(*)(void*, void *, int))IAP.OnPurchaseFailedOffset;

ImageFillScreen.StartOffset = getRealOffset(0x80A2FC);
ImageFillScreen.Start = (void(*)(void*))ImageFillScreen.StartOffset;

ImageFillScreen.calculateSizeOffset = getRealOffset(0x80A364);
ImageFillScreen.calculateSize = (void(*)(void*))ImageFillScreen.calculateSizeOffset;

Intro.AwakeOffset = getRealOffset(0xC97200);
Intro.Awake = (void(*)(void*))Intro.AwakeOffset;

Intro.LoadMainMenuOffset = getRealOffset(0xC977B0);
Intro.LoadMainMenu = (void(*)(void*))Intro.LoadMainMenuOffset;

Intro.SetDefaultsOffset = getRealOffset(0xC97998);
Intro.SetDefaults = (void(*)(bool))Intro.SetDefaultsOffset;

Intro.StartOffset = getRealOffset(0xC98B7C);
Intro.Start = (void(*)(void*))Intro.StartOffset;

IntroScript.get_AutoLoggingInProcessOffset = getRealOffset(0xC98F60);
IntroScript.get_AutoLoggingInProcess = (bool(*)(void*))IntroScript.get_AutoLoggingInProcessOffset;

IntroScript.set_AutoLoggingInProcessOffset = getRealOffset(0xC98F68);
IntroScript.set_AutoLoggingInProcess = (void(*)(void*, bool))IntroScript.set_AutoLoggingInProcessOffset;

IntroScript.HandleOldVersionOffset = getRealOffset(0xC98F70);
IntroScript.HandleOldVersion = (void(*)())IntroScript.HandleOldVersionOffset;

IntroScript.AwakeOffset = getRealOffset(0xC990C4);
IntroScript.Awake = (void(*)(void*))IntroScript.AwakeOffset;

IntroScript.LoadCampaignOffset = getRealOffset(0xC994D4);
IntroScript.LoadCampaign = (void(*)(void*))IntroScript.LoadCampaignOffset;

IntroScript.LoadSkirmishOffset = getRealOffset(0xC9956C);
IntroScript.LoadSkirmish = (void(*)(void*))IntroScript.LoadSkirmishOffset;

IntroScript.HandleAutoLoginOffset = getRealOffset(0xC995E4);
IntroScript.HandleAutoLogin = (void(*)(void*, void *))IntroScript.HandleAutoLoginOffset;

IntroScript.HandleDefaultGraphicsOptionsOffset = getRealOffset(0xC99BD0);
IntroScript.HandleDefaultGraphicsOptions = (void(*)(void*))IntroScript.HandleDefaultGraphicsOptionsOffset;

IntroScript.HandleDefaultLanguageOffset = getRealOffset(0xC99E14);
IntroScript.HandleDefaultLanguage = (void(*)(void*))IntroScript.HandleDefaultLanguageOffset;

IntroScript.InitClanTagOffset = getRealOffset(0xC9A054);
IntroScript.InitClanTag = (void(*)(void*))IntroScript.InitClanTagOffset;

IntroScript.InitGameCenterOffset = getRealOffset(0xC9A350);
IntroScript.InitGameCenter = (void(*)(void*))IntroScript.InitGameCenterOffset;

IntroScript.InitOneSignalOffset = getRealOffset(0xC9A354);
IntroScript.InitOneSignal = (void(*)(void*))IntroScript.InitOneSignalOffset;

IntroScript.LoadVideosOffset = getRealOffset(0xC9A358);
IntroScript.LoadVideos = (void(*)(void*))IntroScript.LoadVideosOffset;

IntroScript.StartOffset = getRealOffset(0xC9A844);
IntroScript.Start = (void(*)(void*))IntroScript.StartOffset;

IntroScript.WaitAndCheckVersionOffset = getRealOffset(0xC9AAFC);
IntroScript.WaitAndCheckVersion = (void *(*)(void*))IntroScript.WaitAndCheckVersionOffset;

IntroScript.OnVersionCheckedOffset = getRealOffset(0xC9AB9C);
IntroScript.OnVersionChecked = (void(*)(void*, bool))IntroScript.OnVersionCheckedOffset;

IntroScript.CheckStatusAndVersionFlagsOffset = getRealOffset(0xC9ABA0);
IntroScript.CheckStatusAndVersionFlags = (void(*)(void*))IntroScript.CheckStatusAndVersionFlagsOffset;

IntroScript.OnOfflineModeActivatedOffset = getRealOffset(0xC9ADF4);
IntroScript.OnOfflineModeActivated = (void(*)(void*))IntroScript.OnOfflineModeActivatedOffset;

IntroScript.OnFeatureConfigByRegionInitializedOffset = getRealOffset(0xC9AE3C);
IntroScript.OnFeatureConfigByRegionInitialized = (void(*)(void*))IntroScript.OnFeatureConfigByRegionInitializedOffset;

IntroScript.HideLoadingPopupOffset = getRealOffset(0xC9ADC8);
IntroScript.HideLoadingPopup = (void(*)(void*))IntroScript.HideLoadingPopupOffset;

IntroScript.ShowLoadingPopupOffset = getRealOffset(0xC9AA90);
IntroScript.ShowLoadingPopup = (void(*)(void*))IntroScript.ShowLoadingPopupOffset;

IntroScript.HideLoadingPopupProcessOffset = getRealOffset(0xC9AF18);
IntroScript.HideLoadingPopupProcess = (void *(*)(void*))IntroScript.HideLoadingPopupProcessOffset;

IntroScript.CheckNewSettingsAddedOffset = getRealOffset(0xC9A988);
IntroScript.CheckNewSettingsAdded = (void(*)(void*))IntroScript.CheckNewSettingsAddedOffset;

IntroScript.LoadVideos1Offset = getRealOffset(0xC9A784);
IntroScript.LoadVideos1 = (void *(*)(void*, bool, int, int))IntroScript.LoadVideos1Offset;

IntroScript.LoadAnnouncementImageOffset = getRealOffset(0xC9AFD8);
IntroScript.LoadAnnouncementImage = (void *(*)(void*, monoString*, int))IntroScript.LoadAnnouncementImageOffset;

IntroScript.AnnouncementLinkButtonPressedOffset = getRealOffset(0xC9B0A4);
IntroScript.AnnouncementLinkButtonPressed = (void(*)(void*, int))IntroScript.AnnouncementLinkButtonPressedOffset;

IntroScript.AnnouncementLinkPointerUpOffset = getRealOffset(0xC9B99C);
IntroScript.AnnouncementLinkPointerUp = (void(*)(void*, int))IntroScript.AnnouncementLinkPointerUpOffset;

IntroScript.AnnouncementLinkPressedOffset = getRealOffset(0xC9B0AC);
IntroScript.AnnouncementLinkPressed = (void(*)(void*, int, monoString*))IntroScript.AnnouncementLinkPressedOffset;

IntroScript.RewardVideoViewOffset = getRealOffset(0xC9B9A0);
IntroScript.RewardVideoView = (void *(*)(void*, void *))IntroScript.RewardVideoViewOffset;

IntroScript.SupportButtonPressedOffset = getRealOffset(0xC9BA58);
IntroScript.SupportButtonPressed = (void(*)(void*))IntroScript.SupportButtonPressedOffset;

IntroScript.LoggedInOffset = getRealOffset(0xC99A24);
IntroScript.LoggedIn = (void(*)(void*, bool))IntroScript.LoggedInOffset;

IntroScript.LogoutOffset = getRealOffset(0xC9BAA8);
IntroScript.Logout = (void(*)(void*))IntroScript.LogoutOffset;

IntroScript.onSuccessLogoutOffset = getRealOffset(0xC9BCC4);
IntroScript.onSuccessLogout = (void(*)(void*))IntroScript.onSuccessLogoutOffset;

IntroScript.onErrorLogoutOffset = getRealOffset(0xC9BED0);
IntroScript.onErrorLogout = (void(*)(void*, monoString*))IntroScript.onErrorLogoutOffset;

IntroScript.FinishLogoutOffset = getRealOffset(0xC9BF6C);
IntroScript.FinishLogout = (void(*)(void*))IntroScript.FinishLogoutOffset;

IntroScript.OnLogoutFinishedAfterASecondOffset = getRealOffset(0xC9C324);
IntroScript.OnLogoutFinishedAfterASecond = (void *(*)(void*))IntroScript.OnLogoutFinishedAfterASecondOffset;

IntroScript.ShowLeaderboardsOffset = getRealOffset(0xC9C3C4);
IntroScript.ShowLeaderboards = (void(*)(void*))IntroScript.ShowLeaderboardsOffset;

IntroScript.ToggleGraphicsSettingsOffset = getRealOffset(0xC9C3C8);
IntroScript.ToggleGraphicsSettings = (void(*)(void*))IntroScript.ToggleGraphicsSettingsOffset;

IntroScript.ShowGraphicsSettingsOffset = getRealOffset(0xC9C67C);
IntroScript.ShowGraphicsSettings = (void(*)(void*))IntroScript.ShowGraphicsSettingsOffset;

IntroScript.HideGraphicsSettingsOffset = getRealOffset(0xC9C3DC);
IntroScript.HideGraphicsSettings = (void(*)(void*))IntroScript.HideGraphicsSettingsOffset;

IntroScript.LoadLoadoutOffset = getRealOffset(0xC9C778);
IntroScript.LoadLoadout = (void(*)(void*))IntroScript.LoadLoadoutOffset;

IntroScript.LoadMultiplayerOffset = getRealOffset(0xC9C858);
IntroScript.LoadMultiplayer = (void(*)(void*))IntroScript.LoadMultiplayerOffset;

IntroScript.EditClanTagOffset = getRealOffset(0xC9A158);
IntroScript.EditClanTag = (void(*)(void*, monoString*))IntroScript.EditClanTagOffset;

IntroScript.ChangeUsernameClickedOffset = getRealOffset(0xC9C938);
IntroScript.ChangeUsernameClicked = (void(*)(void*))IntroScript.ChangeUsernameClickedOffset;

IntroScript.OpenServerStatusLinkOffset = getRealOffset(0xC9CA00);
IntroScript.OpenServerStatusLink = (void(*)(void*))IntroScript.OpenServerStatusLinkOffset;

IntroScript.OnDestroyOffset = getRealOffset(0xC9CAA8);
IntroScript.OnDestroy = (void(*)(void*))IntroScript.OnDestroyOffset;

JoinMatchReferences.AwakeOffset = getRealOffset(0x64F0DC);
JoinMatchReferences.Awake = (void(*)(void*))JoinMatchReferences.AwakeOffset;

JoinMatchReferences.SetBeginnerMatchColorsOffset = getRealOffset(0x64F1D4);
JoinMatchReferences.SetBeginnerMatchColors = (void(*)(void*, int))JoinMatchReferences.SetBeginnerMatchColorsOffset;

JoinMatchReferences.ChangeAndSetOriginalColorOffset = getRealOffset(0x64F340);
JoinMatchReferences.ChangeAndSetOriginalColor = (void(*)(void*, Color))JoinMatchReferences.ChangeAndSetOriginalColorOffset;

JoinMatchReferences.SetOriginalColorOffset = getRealOffset(0x64F358);
JoinMatchReferences.SetOriginalColor = (void(*)(void*))JoinMatchReferences.SetOriginalColorOffset;

JoystickToggle.AwakeOffset = getRealOffset(0x64F40C);
JoystickToggle.Awake = (void(*)(void*))JoystickToggle.AwakeOffset;

JoystickToggle.StartOffset = getRealOffset(0x64F484);
JoystickToggle.Start = (void(*)(void*))JoystickToggle.StartOffset;

JoystickToggle.SetEnabledOffset = getRealOffset(0x64F550);
JoystickToggle.SetEnabled = (void(*)(void*, bool))JoystickToggle.SetEnabledOffset;

JoystickToggle.ToggleChangedOffset = getRealOffset(0x64F648);
JoystickToggle.ToggleChanged = (void(*)(void*, bool))JoystickToggle.ToggleChangedOffset;

JoystickToggle.OnDestroyOffset = getRealOffset(0x64F64C);
JoystickToggle.OnDestroy = (void(*)(void*))JoystickToggle.OnDestroyOffset;

JumpButton.StartOffset = getRealOffset(0x64F7EC);
JumpButton.Start = (void(*)(void*))JumpButton.StartOffset;

JumpButton.OnPointerDownOffset = getRealOffset(0x64F7F0);
JumpButton.OnPointerDown = (void(*)(void*, void *))JumpButton.OnPointerDownOffset;

JumpButton.OnPointerUpOffset = getRealOffset(0x64F8F4);
JumpButton.OnPointerUp = (void(*)(void*, void *))JumpButton.OnPointerUpOffset;

KeepCameraPosition.AwakeOffset = getRealOffset(0x64F9DC);
KeepCameraPosition.Awake = (void(*)(void*))KeepCameraPosition.AwakeOffset;

KeepCameraPosition.UpdateOffset = getRealOffset(0x64F9F8);
KeepCameraPosition.Update = (void(*)(void*))KeepCameraPosition.UpdateOffset;

KillLogItem.StartOffset = getRealOffset(0x650D5C);
KillLogItem.Start = (void(*)(void*))KillLogItem.StartOffset;

KillLogItem.SetIsFriendlyKillerOffset = getRealOffset(0x650E88);
KillLogItem.SetIsFriendlyKiller = (void(*)(void*, bool))KillLogItem.SetIsFriendlyKillerOffset;

KillLogItem.SetIsFriendlyKilledOffset = getRealOffset(0x650F8C);
KillLogItem.SetIsFriendlyKilled = (void(*)(void*, bool))KillLogItem.SetIsFriendlyKilledOffset;

KillLogItem.SetValuesOffset = getRealOffset(0x651090);
KillLogItem.SetValues = (void(*)(void*, monoString*, int, monoString*, bool))KillLogItem.SetValuesOffset;

KillLogItem.SetValuesSpectatorOffset = getRealOffset(0x65162C);
KillLogItem.SetValuesSpectator = (void(*)(void*, monoString*, void *))KillLogItem.SetValuesSpectatorOffset;

KillLogItem.OnDestroyOffset = getRealOffset(0x651F7C);
KillLogItem.OnDestroy = (void(*)(void*))KillLogItem.OnDestroyOffset;

KillLogItem.UpdateFastOffset = getRealOffset(0x6520E0);
KillLogItem.UpdateFast = (void(*)(void*))KillLogItem.UpdateFastOffset;

KillLogItem.DestroySelfOffset = getRealOffset(0x6525F0);
KillLogItem.DestroySelf = (void(*)(void*))KillLogItem.DestroySelfOffset;

KillLogScript.AwakeOffset = getRealOffset(0x65262C);
KillLogScript.Awake = (void(*)(void*))KillLogScript.AwakeOffset;

KillLogScript.showKillOffset = getRealOffset(0x6526B8);
KillLogScript.showKill = (void(*)(void*, monoString*, int, monoString*, bool, bool, bool))KillLogScript.showKillOffset;

KillLogScript.ShowSpectatorOffset = getRealOffset(0x6529B4);
KillLogScript.ShowSpectator = (void(*)(void*, monoString*))KillLogScript.ShowSpectatorOffset;

KillLogScript.HideSpectatorOffset = getRealOffset(0x652C50);
KillLogScript.HideSpectator = (void(*)(void*, monoString*))KillLogScript.HideSpectatorOffset;

KillLogScript.OnDestroyOffset = getRealOffset(0x652DC0);
KillLogScript.OnDestroy = (void(*)(void*))KillLogScript.OnDestroyOffset;

KillerStatsScript.AwakeOffset = getRealOffset(0x6530CC);
KillerStatsScript.Awake = (void(*)(void*))KillerStatsScript.AwakeOffset;

KillerStatsScript.StartOffset = getRealOffset(0x6532FC);
KillerStatsScript.Start = (void(*)(void*))KillerStatsScript.StartOffset;

KillerStatsScript.SetWeaponAsThrowingWeaponOffset = getRealOffset(0x6533AC);
KillerStatsScript.SetWeaponAsThrowingWeapon = (void(*)(void*, int))KillerStatsScript.SetWeaponAsThrowingWeaponOffset;

KillerStatsScript.ShowRespawnScreenOffset = getRealOffset(0x6533B0);
KillerStatsScript.ShowRespawnScreen = (void(*)(void*))KillerStatsScript.ShowRespawnScreenOffset;

KillerStatsScript.HideOffset = getRealOffset(0x653130);
KillerStatsScript.Hide = (void(*)(void*))KillerStatsScript.HideOffset;

KillerStatsScript.OnDestroyOffset = getRealOffset(0x653420);
KillerStatsScript.OnDestroy = (void(*)(void*))KillerStatsScript.OnDestroyOffset;

KillerStatsScript.UpdateFastOffset = getRealOffset(0x6535E4);
KillerStatsScript.UpdateFast = (void(*)(void*))KillerStatsScript.UpdateFastOffset;

KillsToWin.StartOffset = getRealOffset(0x6537A4);
KillsToWin.Start = (void(*)(void*))KillsToWin.StartOffset;

KillsToWin.SetValueOffset = getRealOffset(0x653800);
KillsToWin.SetValue = (void(*)(void*, float))KillsToWin.SetValueOffset;

KillstreakManager.AwakeOffset = getRealOffset(0x653874);
KillstreakManager.Awake = (void(*)(void*))KillstreakManager.AwakeOffset;

KillstreakManager.FillStreakStatsOffset = getRealOffset(0x653AD4);
KillstreakManager.FillStreakStats = (void(*)(void*))KillstreakManager.FillStreakStatsOffset;

KillstreakManager.FillSpritesDictionaryOffset = getRealOffset(0x653EB4);
KillstreakManager.FillSpritesDictionary = (void(*)(void*))KillstreakManager.FillSpritesDictionaryOffset;

KillstreakManager.StartOffset = getRealOffset(0x65536C);
KillstreakManager.Start = (void(*)(void*))KillstreakManager.StartOffset;

KillstreakManager.GetKillstreakSpritesFromLoadoutOffset = getRealOffset(0x655C44);
KillstreakManager.ReloadKillstreaksOffset = getRealOffset(0x6560B4);
KillstreakManager.ReloadKillstreaks = (void(*)(void*))KillstreakManager.ReloadKillstreaksOffset;

KillstreakManager.SetButtonActiveOffset = getRealOffset(0x655B20);
KillstreakManager.SetButtonActive = (void(*)(void*, int, bool))KillstreakManager.SetButtonActiveOffset;

KillstreakManager.ResizeButtonsOffset = getRealOffset(0x656A60);
KillstreakManager.ResizeButtons = (void(*)(void*))KillstreakManager.ResizeButtonsOffset;

KillstreakManager.LoadKillstreaksOffset = getRealOffset(0x6555A8);
KillstreakManager.LoadKillstreaks = (void(*)(void*))KillstreakManager.LoadKillstreaksOffset;

KillstreakManager.DisableKillstreakOffset = getRealOffset(0x656C88);
KillstreakManager.DisableKillstreak = (void(*)(void*))KillstreakManager.DisableKillstreakOffset;

KillstreakManager.TimeLeftInKillstreakOffset = getRealOffset(0x656E20);
KillstreakManager.TimeLeftInKillstreak = (float(*)(void*))KillstreakManager.TimeLeftInKillstreakOffset;

KillstreakManager.UseKillstreakOffset = getRealOffset(0x656EC8);
KillstreakManager.UseKillstreak = (void(*)(void*, int))KillstreakManager.UseKillstreakOffset;

KillstreakManager.ForceKillstreakOffset = getRealOffset(0x658B10);
KillstreakManager.ForceKillstreak = (void(*)(void*, int, bool))KillstreakManager.ForceKillstreakOffset;

KillstreakManager.ShowNukeOverlayOffset = getRealOffset(0x6593C8);
KillstreakManager.ShowNukeOverlay = (void(*)(void*))KillstreakManager.ShowNukeOverlayOffset;

KillstreakManager.HasKillstreakOffset = getRealOffset(0x659438);
KillstreakManager.HasKillstreak = (bool(*)(void*, int))KillstreakManager.HasKillstreakOffset;

KillstreakManager.GetValidKillstreaksOffset = getRealOffset(0x6594F4);
KillstreakManager.ShowWarningOffset = getRealOffset(0x659978);
KillstreakManager.ShowWarning = (void(*)(void*, int))KillstreakManager.ShowWarningOffset;

KillstreakManager.HideKillstreakWarningTextOffset = getRealOffset(0x659A9C);
KillstreakManager.HideKillstreakWarningText = (void(*)(void*))KillstreakManager.HideKillstreakWarningTextOffset;

KillstreakManager.GetKillstreakStatsOffset = getRealOffset(0x654254);
KillstreakManager.GetKillstreakStats = (int (*)(void*, int))KillstreakManager.GetKillstreakStatsOffset;

KillstreakManager.ResetCurrentKillStreakOffset = getRealOffset(0x659AC8);
KillstreakManager.ResetCurrentKillStreak = (void(*)(void*))KillstreakManager.ResetCurrentKillStreakOffset;

KillstreakManager.AddKillToKillStreakOffset = getRealOffset(0x659B40);
KillstreakManager.AddKillToKillStreak = (void(*)(void*))KillstreakManager.AddKillToKillStreakOffset;

KillstreakManager.GetKillstreakIndexOffset = getRealOffset(0x659BF4);
KillstreakManager.GetKillstreakIndex = (int(*)(void*, int))KillstreakManager.GetKillstreakIndexOffset;

KillstreakManager.SetCurrentKillStreakOffset = getRealOffset(0x6563EC);
KillstreakManager.SetCurrentKillStreak = (void(*)(void*, int))KillstreakManager.SetCurrentKillStreakOffset;

KillstreakManager.HideKillstreakAvailableTextOffset = getRealOffset(0x659D28);
KillstreakManager.HideKillstreakAvailableText = (void(*)(void*))KillstreakManager.HideKillstreakAvailableTextOffset;

KillstreakManager.OnDestroyOffset = getRealOffset(0x659D54);
KillstreakManager.OnDestroy = (void(*)(void*))KillstreakManager.OnDestroyOffset;

KillstreakManager.UpdateFastOffset = getRealOffset(0x659F18);
KillstreakManager.UpdateFast = (void(*)(void*))KillstreakManager.UpdateFastOffset;

KillstreakManager.GetActiveKillstreakOffset = getRealOffset(0x65A324);
KillstreakManager.GetActiveKillstreak = (int (*)(void*, int))KillstreakManager.GetActiveKillstreakOffset;

KillstreakMenuManager.AwakeOffset = getRealOffset(0x65A6CC);
KillstreakMenuManager.Awake = (void(*)(void*))KillstreakMenuManager.AwakeOffset;

KillstreakMenuManager.StartOffset = getRealOffset(0x65A790);
KillstreakMenuManager.Start = (void(*)(void*))KillstreakMenuManager.StartOffset;

KillstreakMenuManager.SetActiveLoadoutOffset = getRealOffset(0x65B6A0);
KillstreakMenuManager.SetActiveLoadout = (void(*)(void*, int))KillstreakMenuManager.SetActiveLoadoutOffset;

KillstreakMenuManager.PopulateKillstreakUIItemsOffset = getRealOffset(0x65A994);
KillstreakMenuManager.PopulateKillstreakUIItems = (void(*)(void*))KillstreakMenuManager.PopulateKillstreakUIItemsOffset;

KillstreakMenuManager.LoadKillstreaksOffset = getRealOffset(0x65AE98);
KillstreakMenuManager.LoadKillstreaks = (void(*)(void*))KillstreakMenuManager.LoadKillstreaksOffset;

KillstreakMenuManager.SaveAllKillstreaksOffset = getRealOffset(0x65BB58);
KillstreakMenuManager.SaveAllKillstreaks = (void(*)(void*))KillstreakMenuManager.SaveAllKillstreaksOffset;

KillstreakMenuManager.SetInSlotOffset = getRealOffset(0x65BDA4);
KillstreakMenuManager.SetInSlot = (void(*)(void*, int))KillstreakMenuManager.SetInSlotOffset;

KillstreakMenuManager.StopUsingKillstreakOffset = getRealOffset(0x65BE7C);
KillstreakMenuManager.StopUsingKillstreak = (void(*)(void*))KillstreakMenuManager.StopUsingKillstreakOffset;

KillstreakMenuManager.RefreshkillsUsedOffset = getRealOffset(0x65AFC4);
KillstreakMenuManager.RefreshkillsUsed = (void(*)(void*))KillstreakMenuManager.RefreshkillsUsedOffset;

KillstreakMenuManager.RefreshKillstreakUIItemColorsOffset = getRealOffset(0x65B0EC);
KillstreakMenuManager.RefreshKillstreakUIItemColors = (void(*)(void*))KillstreakMenuManager.RefreshKillstreakUIItemColorsOffset;

KillstreakMenuManager.ShowKillstreakDescriptionOffset = getRealOffset(0x65B348);
KillstreakMenuManager.ShowKillstreakDescription = (void(*)(void*, int))KillstreakMenuManager.ShowKillstreakDescriptionOffset;

KillstreakMenuManager.OnDestroyOffset = getRealOffset(0x65BF5C);
KillstreakMenuManager.OnDestroy = (void(*)(void*))KillstreakMenuManager.OnDestroyOffset;

KillstreakUIItem.SetKillstreakTypeOffset = getRealOffset(0x65B888);
KillstreakUIItem.SetKillstreakType = (void(*)(void*, int))KillstreakUIItem.SetKillstreakTypeOffset;

KillstreakUIItem.SetEquippedOffset = getRealOffset(0x65BF54);
KillstreakUIItem.SetEquipped = (void(*)(void*, bool))KillstreakUIItem.SetEquippedOffset;

KillstreakUIItem.SetSelectedOffset = getRealOffset(0x65BF4C);
KillstreakUIItem.SetSelected = (void(*)(void*, bool))KillstreakUIItem.SetSelectedOffset;

KillstreakUIItem.SetCorrectVisualsOffset = getRealOffset(0x65C010);
KillstreakUIItem.SetCorrectVisuals = (void(*)(void*))KillstreakUIItem.SetCorrectVisualsOffset;

KillstreakUIItem.ShowKillstreakDescriptionOffset = getRealOffset(0x65C0E8);
KillstreakUIItem.ShowKillstreakDescription = (void(*)(void*))KillstreakUIItem.ShowKillstreakDescriptionOffset;

KnifeButton.AwakeOffset = getRealOffset(0x65C168);
KnifeButton.Awake = (void(*)(void*))KnifeButton.AwakeOffset;

KnifeButton.StartOffset = getRealOffset(0x65C22C);
KnifeButton.Start = (void(*)(void*))KnifeButton.StartOffset;

KnifeButton.OnDestroyOffset = getRealOffset(0x65C2DC);
KnifeButton.OnDestroy = (void(*)(void*))KnifeButton.OnDestroyOffset;

KnifeButton.UpdateFastOffset = getRealOffset(0x65C440);
KnifeButton.UpdateFast = (void(*)(void*))KnifeButton.UpdateFastOffset;

KnifeButton.OnPointerDownOffset = getRealOffset(0x65D024);
KnifeButton.OnPointerDown = (void(*)(void*, void *))KnifeButton.OnPointerDownOffset;

LanguageManager.get_singletonOffset = getRealOffset(0x65D0EC);
LanguageManager.get_singleton = (void *(*)())LanguageManager.get_singletonOffset;

LanguageManager.InitializeOffset = getRealOffset(0x65D2F8);
LanguageManager.Initialize = (void(*)(void*))LanguageManager.InitializeOffset;

LanguageManager.AwakeOffset = getRealOffset(0x65D2FC);
LanguageManager.Awake = (void(*)(void*))LanguageManager.AwakeOffset;

LanguageManager.InitStaticStringsOffset = getRealOffset(0x65D4B8);
LanguageManager.InitStaticStrings = (void(*)(void*))LanguageManager.InitStaticStringsOffset;

LanguageManager.LanguageChangedOffset = getRealOffset(0x65DF7C);
LanguageManager.LanguageChanged = (void(*)(void*))LanguageManager.LanguageChangedOffset;

LanguageManager.OnLevelWasLoadedOffset = getRealOffset(0x65DF90);
LanguageManager.OnLevelWasLoaded = (void(*)(void*))LanguageManager.OnLevelWasLoadedOffset;

LanguageManager.FillLanguagesOffset = getRealOffset(0x65D394);
LanguageManager.FillLanguages = (void(*)(void*))LanguageManager.FillLanguagesOffset;

LanguageManager.FillLanguageOffset = getRealOffset(0x65DF94);
LanguageManager.FillLanguage = (void(*)(void*, monoString*))LanguageManager.FillLanguageOffset;

LanguageManager.OnDestroyOffset = getRealOffset(0x65E498);
LanguageManager.OnDestroy = (void(*)(void*))LanguageManager.OnDestroyOffset;

LanguageOptions.AwakeOffset = getRealOffset(0x65E61C);
LanguageOptions.Awake = (void(*)(void*))LanguageOptions.AwakeOffset;

LanguageOptions.RemoveWebGLLanguagesOffset = getRealOffset(0x65E9B4);
LanguageOptions.RemoveWebGLLanguages = (void(*)(void*))LanguageOptions.RemoveWebGLLanguagesOffset;

LanguageOptions.ShouldRemoveOffset = getRealOffset(0x65EB5C);
LanguageOptions.ShouldRemove = (bool(*)(void*, monoString*))LanguageOptions.ShouldRemoveOffset;

LanguageOptions.SetLanguageOffset = getRealOffset(0x65EE34);
LanguageOptions.SetLanguage = (void(*)(void*, monoString*))LanguageOptions.SetLanguageOffset;

LanguageOptions.LanguageToIntOffset = getRealOffset(0x65E720);
LanguageOptions.LanguageToInt = (int(*)(void*, monoString*))LanguageOptions.LanguageToIntOffset;

LanguageOptions.SetValueOffset = getRealOffset(0x65F028);
LanguageOptions.SetValue = (void(*)(void*, int))LanguageOptions.SetValueOffset;

LaserSight.AwakeOffset = getRealOffset(0x65F210);
LaserSight.Awake = (void(*)(void*))LaserSight.AwakeOffset;

LaserSight.StartOffset = getRealOffset(0x65F4B8);
LaserSight.Start = (void(*)(void*))LaserSight.StartOffset;

LaserSight.SetAimingDownSightsOffset = getRealOffset(0x65F568);
LaserSight.SetAimingDownSights = (void(*)(void*, bool))LaserSight.SetAimingDownSightsOffset;

LaserSight.OnDestroyOffset = getRealOffset(0x65F570);
LaserSight.OnDestroy = (void(*)(void*))LaserSight.OnDestroyOffset;

LaserSight.UpdateFastOffset = getRealOffset(0x65F6D4);
LaserSight.UpdateFast = (void(*)(void*))LaserSight.UpdateFastOffset;

LoadScene.StartOffset = getRealOffset(0x6E1C8C);
LoadScene.Start = (void(*)(void*))LoadScene.StartOffset;

LoadSceneButton.StartOffset = getRealOffset(0x6E1CA0);
LoadSceneButton.Start = (void(*)(void*))LoadSceneButton.StartOffset;

LoadSceneButton.UpdateOffset = getRealOffset(0x6E1CA4);
LoadSceneButton.Update = (void(*)(void*))LoadSceneButton.UpdateOffset;

LoadingMap.AwakeOffset = getRealOffset(0x6E1D80);
LoadingMap.Awake = (void(*)(void*))LoadingMap.AwakeOffset;

LoadingMap.ShowLoadingScreenOffset = getRealOffset(0x6E1DDC);
LoadingMap.ShowLoadingScreen = (void(*)(void*, monoString*, monoString*))LoadingMap.ShowLoadingScreenOffset;

LoadingMap.HideLoadingScreenOffset = getRealOffset(0x6E2254);
LoadingMap.HideLoadingScreen = (void(*)(void*))LoadingMap.HideLoadingScreenOffset;

LoadingMap.UpdateOffset = getRealOffset(0x6E2354);
LoadingMap.Update = (void(*)(void*))LoadingMap.UpdateOffset;

LoadingMap.OnDestroyOffset = getRealOffset(0x6E23A4);
LoadingMap.OnDestroy = (void(*)(void*))LoadingMap.OnDestroyOffset;

LoadoutBulletController.AwakeOffset = getRealOffset(0x6E2458);
LoadoutBulletController.Awake = (void(*)(void*))LoadoutBulletController.AwakeOffset;

LoadoutBulletController.StartOffset = getRealOffset(0x6E259C);
LoadoutBulletController.Start = (void(*)(void*))LoadoutBulletController.StartOffset;

LoadoutBulletController.SetDefaultColorsOffset = getRealOffset(0x6E25A0);
LoadoutBulletController.SetDefaultColors = (void(*)(void*))LoadoutBulletController.SetDefaultColorsOffset;

LoadoutBulletController.SetColorOffset = getRealOffset(0x6E2748);
LoadoutBulletController.SetColor = (void(*)(void*, int, Color))LoadoutBulletController.SetColorOffset;

LoadoutBulletController.OnDestroyOffset = getRealOffset(0x6E28E4);
LoadoutBulletController.OnDestroy = (void(*)(void*))LoadoutBulletController.OnDestroyOffset;

LoadoutGuns.GetWeaponPrefabNameOffset = getRealOffset(0x6E2B18);
LoadoutGuns.GetWeaponPrefabName = (monoString *(*)(void*, int))LoadoutGuns.GetWeaponPrefabNameOffset;

LoadoutGuns.AwakeOffset = getRealOffset(0x6E2BC4);
LoadoutGuns.Awake = (void(*)(void*))LoadoutGuns.AwakeOffset;

LoadoutGuns.GetWeaponPrefabOffset = getRealOffset(0x6E2C3C);
LoadoutGuns.GetWeaponPrefab = (void *(*)(void*, int))LoadoutGuns.GetWeaponPrefabOffset;

LoadoutGuns.UnloadWeaponPrefabOffset = getRealOffset(0x6E2DF8);
LoadoutGuns.UnloadWeaponPrefab = (void(*)(void*, int))LoadoutGuns.UnloadWeaponPrefabOffset;

LoadoutManager.GetLoadoutNameOffset = getRealOffset(0x6E2F24);
LoadoutManager.GetLoadoutName = (monoString *(*)(int))LoadoutManager.GetLoadoutNameOffset;

LoadoutManager.AwakeOffset = getRealOffset(0x6E2F94);
LoadoutManager.Awake = (void(*)(void*))LoadoutManager.AwakeOffset;

LoadoutManager.StartOffset = getRealOffset(0x6E3010);
LoadoutManager.Start = (void(*)(void*))LoadoutManager.StartOffset;

LoadoutManager.OnVersionCheckedOffset = getRealOffset(0x6E4A20);
LoadoutManager.OnVersionChecked = (void(*)(void*, bool))LoadoutManager.OnVersionCheckedOffset;

LoadoutManager.SetGunRotationPointOffset = getRealOffset(0x6E4928);
LoadoutManager.SetGunRotationPoint = (void(*)(void*, bool))LoadoutManager.SetGunRotationPointOffset;

LoadoutManager.SetCustomizingOffset = getRealOffset(0x6E4B90);
LoadoutManager.SetCustomizing = (void(*)(void*, bool))LoadoutManager.SetCustomizingOffset;

LoadoutManager.ShowChooseGunOffset = getRealOffset(0x6E4C98);
LoadoutManager.ShowChooseGun = (void(*)(void*))LoadoutManager.ShowChooseGunOffset;

LoadoutManager.AddXPOffset = getRealOffset(0x6E4C9C);
LoadoutManager.AddXP = (void(*)(void*, int))LoadoutManager.AddXPOffset;

LoadoutManager.GetContainerOffset = getRealOffset(0x6E4D70);
LoadoutManager.GetContainer = (void *(*)(void*, monoString*))LoadoutManager.GetContainerOffset;

LoadoutManager.SetGoldOffset = getRealOffset(0x6E4E88);
LoadoutManager.SetGold = (void(*)(void*, int))LoadoutManager.SetGoldOffset;

LoadoutManager.LoadMultiplayerSceneOffset = getRealOffset(0x6E4F2C);
LoadoutManager.LoadMultiplayerScene = (void(*)(void*))LoadoutManager.LoadMultiplayerSceneOffset;

LoadoutManager.DestroyAll3DObjectsOffset = getRealOffset(0x6E5008);
LoadoutManager.DestroyAll3DObjects = (void(*)(void*))LoadoutManager.DestroyAll3DObjectsOffset;

LoadoutManager.ShowCurrentGunObjectOffset = getRealOffset(0x6E5108);
LoadoutManager.ShowCurrentGunObject = (void(*)(void*, bool))LoadoutManager.ShowCurrentGunObjectOffset;

LoadoutManager.RefreshLoadoutOffset = getRealOffset(0x6E51B8);
LoadoutManager.RefreshLoadout = (void(*)(void*, bool))LoadoutManager.RefreshLoadoutOffset;

LoadoutManager.SetActiveLoadoutOffset = getRealOffset(0x6E98D8);
LoadoutManager.SetActiveLoadout = (void(*)(void*, int))LoadoutManager.SetActiveLoadoutOffset;

LoadoutManager.RevertToPreviouslySelectedLoadoutOffset = getRealOffset(0x6EA14C);
LoadoutManager.RevertToPreviouslySelectedLoadout = (void(*)(void*))LoadoutManager.RevertToPreviouslySelectedLoadoutOffset;

LoadoutManager.FillGunsListOffset = getRealOffset(0x6E5658);
LoadoutManager.FillGunsList = (void(*)(void*, bool, int))LoadoutManager.FillGunsListOffset;

LoadoutManager.SortGunsListOffset = getRealOffset(0x6E5D68);
LoadoutManager.SortGunsList = (void(*)(void*))LoadoutManager.SortGunsListOffset;

LoadoutManager.SetBulletTracerColorOffset = getRealOffset(0x6EA1BC);
LoadoutManager.SetBulletTracerColor = (void(*)(void*))LoadoutManager.SetBulletTracerColorOffset;

LoadoutManager.SetCorrectBulletTracerColorOffset = getRealOffset(0x6E45FC);
LoadoutManager.SetCorrectBulletTracerColor = (void(*)(void*))LoadoutManager.SetCorrectBulletTracerColorOffset;

LoadoutManager.SetCharacterCamoOffset = getRealOffset(0x6EB47C);
LoadoutManager.SetCharacterCamo = (void(*)(void*))LoadoutManager.SetCharacterCamoOffset;

LoadoutManager.SetCorrectCharacterCamoOffset = getRealOffset(0x6E420C);
LoadoutManager.SetCorrectCharacterCamo = (void(*)(void*))LoadoutManager.SetCorrectCharacterCamoOffset;

LoadoutManager.SetSlotTypeOffset = getRealOffset(0x6E3808);
LoadoutManager.SetSlotType = (void(*)(void*, int))LoadoutManager.SetSlotTypeOffset;

LoadoutManager.SetCorrectCharacterCamoAtEndOfFrameOffset = getRealOffset(0x6EB958);
LoadoutManager.SetCorrectCharacterCamoAtEndOfFrame = (void *(*)(void*))LoadoutManager.SetCorrectCharacterCamoAtEndOfFrameOffset;

LoadoutManager.SetCorrectBulletTracerColorAtEndOfFrameOffset = getRealOffset(0x6EB9D8);
LoadoutManager.SetCorrectBulletTracerColorAtEndOfFrame = (void *(*)(void*))LoadoutManager.SetCorrectBulletTracerColorAtEndOfFrameOffset;

LoadoutManager.SetCategoryOffset = getRealOffset(0x6EBA98);
LoadoutManager.SetCategory = (void(*)(void*))LoadoutManager.SetCategoryOffset;

LoadoutManager.StartEditingAttachmentsOffset = getRealOffset(0x6EBAA0);
LoadoutManager.StartEditingAttachments = (void(*)(void*))LoadoutManager.StartEditingAttachmentsOffset;

LoadoutManager.CostsGoldOffset = getRealOffset(0x6EBAB4);
LoadoutManager.CostsGold = (int (*)(void*, int))LoadoutManager.CostsGoldOffset;

LoadoutManager.CostsMoneyOffset = getRealOffset(0x6EBB6C);
LoadoutManager.CostsMoney = (int (*)(void*, int))LoadoutManager.CostsMoneyOffset;

LoadoutManager.BuyExtraLoadoutOffset = getRealOffset(0x6EBC24);
LoadoutManager.BuyExtraLoadout = (void(*)(void*))LoadoutManager.BuyExtraLoadoutOffset;

LoadoutManager.BuyExtraLoadoutFromServerOffset = getRealOffset(0x6EBDD0);
LoadoutManager.BuyExtraLoadoutFromServer = (void *(*)(void*))LoadoutManager.BuyExtraLoadoutFromServerOffset;

LoadoutManager.GetCostOfGunOffset = getRealOffset(0x6EC02C);
LoadoutManager.GetCostOfGun = (int (*)(void*, int))LoadoutManager.GetCostOfGunOffset;

LoadoutManager.AccountInfoUpdatedOffset = getRealOffset(0x6EC150);
LoadoutManager.AccountInfoUpdated = (void(*)(void*))LoadoutManager.AccountInfoUpdatedOffset;

LoadoutManager.WeaponAttemptedPurchaseOffset = getRealOffset(0x6EC1BC);
LoadoutManager.WeaponAttemptedPurchase = (void(*)(void*))LoadoutManager.WeaponAttemptedPurchaseOffset;

LoadoutManager.WeaponPricesGotOffset = getRealOffset(0x6EC9A0);
LoadoutManager.WeaponPricesGot = (void(*)(void*, monoString*))LoadoutManager.WeaponPricesGotOffset;

LoadoutManager.BuyWeaponOffset = getRealOffset(0x6EC908);
LoadoutManager.BuyWeapon = (void *(*)(void*, int))LoadoutManager.BuyWeaponOffset;

LoadoutManager.PurchaseGunOffset = getRealOffset(0x6ED09C);
LoadoutManager.PurchaseGun = (void(*)(void*))LoadoutManager.PurchaseGunOffset;

LoadoutManager.PurchaseBulletTracerColorFromServerOffset = getRealOffset(0x6ED7A4);
LoadoutManager.PurchaseBulletTracerColorFromServer = (void(*)(void*))LoadoutManager.PurchaseBulletTracerColorFromServerOffset;

LoadoutManager.PurchaseItemFromServerOffset = getRealOffset(0x6ED9FC);
LoadoutManager.PurchaseItemFromServer = (void *(*)(void*, int, monoString*, int, int))LoadoutManager.PurchaseItemFromServerOffset;

LoadoutManager.ProcessPurchaseItemFromServerResponseOffset = getRealOffset(0x6EDAF4);
LoadoutManager.ProcessPurchaseItemFromServerResponse = (void(*)(void*, monoString*, monoString*, int, int))LoadoutManager.ProcessPurchaseItemFromServerResponseOffset;

LoadoutManager.BuyGunSightOffset = getRealOffset(0x6EF0C4);
LoadoutManager.BuyGunSight = (void(*)(void*))LoadoutManager.BuyGunSightOffset;

LoadoutManager.BuyGunBarrelOffset = getRealOffset(0x6EF2D0);
LoadoutManager.BuyGunBarrel = (void(*)(void*))LoadoutManager.BuyGunBarrelOffset;

LoadoutManager.BuyGunAccessoryOffset = getRealOffset(0x6EF4DC);
LoadoutManager.BuyGunAccessory = (void(*)(void*))LoadoutManager.BuyGunAccessoryOffset;

LoadoutManager.SetGunAsPrimaryOffset = getRealOffset(0x6E866C);
LoadoutManager.SetGunAsPrimary = (void(*)(void*))LoadoutManager.SetGunAsPrimaryOffset;

LoadoutManager.SetGunAsSecondaryOffset = getRealOffset(0x6E873C);
LoadoutManager.SetGunAsSecondary = (void(*)(void*))LoadoutManager.SetGunAsSecondaryOffset;

LoadoutManager.SetAsThrowableOffset = getRealOffset(0x6E880C);
LoadoutManager.SetAsThrowable = (void(*)(void*))LoadoutManager.SetAsThrowableOffset;

LoadoutManager.SetCorrectWeaponStatsOffset = getRealOffset(0x6EF6E8);
LoadoutManager.SetCorrectWeaponStats = (void(*)(void*))LoadoutManager.SetCorrectWeaponStatsOffset;

LoadoutManager.SetGunSightOffset = getRealOffset(0x6EDE20);
LoadoutManager.SetGunSight = (void(*)(void*))LoadoutManager.SetGunSightOffset;

LoadoutManager.SetGunBarrelOffset = getRealOffset(0x6EE44C);
LoadoutManager.SetGunBarrel = (void(*)(void*))LoadoutManager.SetGunBarrelOffset;

LoadoutManager.SetGunAccessoryOffset = getRealOffset(0x6EEA88);
LoadoutManager.SetGunAccessory = (void(*)(void*))LoadoutManager.SetGunAccessoryOffset;

LoadoutManager.SortUnlockedFirstOffset = getRealOffset(0x6EFC88);
LoadoutManager.SortUnlockedFirst = (void(*)(void*, void *))LoadoutManager.SortUnlockedFirstOffset;

LoadoutManager.SortLockedNewOffset = getRealOffset(0x6EFE28);
LoadoutManager.SortLockedNew = (void(*)(void*, void *))LoadoutManager.SortLockedNewOffset;

LoadoutManager.RefreshUnlockedCustomizationsOffset = getRealOffset(0x6E88DC);
LoadoutManager.RefreshUnlockedCustomizations = (void(*)(void*))LoadoutManager.RefreshUnlockedCustomizationsOffset;

LoadoutManager.ShouldAllowNormalSightOffset = getRealOffset(0x6F0088);
LoadoutManager.ShouldAllowNormalSight = (bool(*)(void*, int))LoadoutManager.ShouldAllowNormalSightOffset;

LoadoutManager.OptimizeCarouselOffset = getRealOffset(0x6EA7BC);
LoadoutManager.OptimizeCarousel = (void(*)(void*, void *))LoadoutManager.OptimizeCarouselOffset;

LoadoutManager.GetRarityTextOffset = getRealOffset(0x6F00A0);
LoadoutManager.GetRarityText = (monoString *(*)(int))LoadoutManager.GetRarityTextOffset;

LoadoutManager.GetRarityText1Offset = getRealOffset(0x6EA954);
LoadoutManager.GetRarityText1 = (monoString *(*)(int))LoadoutManager.GetRarityText1Offset;

LoadoutManager.GetCharacterRarityTextOffset = getRealOffset(0x6EB8A4);
LoadoutManager.GetCharacterRarityText = (monoString *(*)(int))LoadoutManager.GetCharacterRarityTextOffset;

LoadoutManager.SetGunCamoOffset = getRealOffset(0x6F0154);
LoadoutManager.SetGunCamo = (void(*)(void*))LoadoutManager.SetGunCamoOffset;

LoadoutManager.PreviousGunOffset = getRealOffset(0x6F0910);
LoadoutManager.PreviousGun = (void(*)(void*))LoadoutManager.PreviousGunOffset;

LoadoutManager.NextGunOffset = getRealOffset(0x6F0A90);
LoadoutManager.NextGun = (void(*)(void*))LoadoutManager.NextGunOffset;

LoadoutManager.UpdateOffset = getRealOffset(0x6F0C30);
LoadoutManager.Update = (void(*)(void*))LoadoutManager.UpdateOffset;

LoadoutManager.RefreshCurrentWeaponCustomizationOffset = getRealOffset(0x6F168C);
LoadoutManager.RefreshCurrentWeaponCustomization = (void(*)(void*))LoadoutManager.RefreshCurrentWeaponCustomizationOffset;

LoadoutManager.SetCurrentGunOffset = getRealOffset(0x6E707C);
LoadoutManager.SetCurrentGun = (bool(*)(void*, int, bool))LoadoutManager.SetCurrentGunOffset;

LoadoutManager.ShouldWeaponShowStatsOffset = getRealOffset(0x6F1860);
LoadoutManager.ShouldWeaponShowStats = (bool(*)(void*, int))LoadoutManager.ShouldWeaponShowStatsOffset;

LoadoutManager.ResetPurchaseButtonsOffset = getRealOffset(0x6F17D0);
LoadoutManager.ResetPurchaseButtons = (void(*)(void*))LoadoutManager.ResetPurchaseButtonsOffset;

LoadoutManager.OnDestroyOffset = getRealOffset(0x6F1894);
LoadoutManager.OnDestroy = (void(*)(void*))LoadoutManager.OnDestroyOffset;

LoadoutManager.ToggleWaitingPopUpOffset = getRealOffset(0x6EBFA8);
LoadoutManager.ToggleWaitingPopUp = (void(*)(void*, bool))LoadoutManager.ToggleWaitingPopUpOffset;

LoadoutManager.GetThrowableFromObscuredOffset = getRealOffset(0x6E3734);
LoadoutManager.GetThrowableFromObscured = (int(*)(monoString*, monoString*))LoadoutManager.GetThrowableFromObscuredOffset;

LoadoutManagerHelper.StartOffset = getRealOffset(0x6F3E44);
LoadoutManagerHelper.Start = (void(*)(void*))LoadoutManagerHelper.StartOffset;

LoadoutManagerHelper.GetWeaponPricesOffset = getRealOffset(0x6F3E68);
LoadoutManagerHelper.GetWeaponPrices = (void *(*)(void*))LoadoutManagerHelper.GetWeaponPricesOffset;

LocalPlayer.HandlePlayerSerializationRatesOffset = getRealOffset(0x6F5028);
LocalPlayer.HandlePlayerSerializationRates = (void(*)(void*))LocalPlayer.HandlePlayerSerializationRatesOffset;

LocalPlayer.UpdateOffset = getRealOffset(0x6F5548);
LocalPlayer.Update = (void(*)(void*))LocalPlayer.UpdateOffset;

LogStore.HandleLogOffset = getRealOffset(0x6F612C);
LogStore.HandleLog = (void(*)(void*, monoString*, monoString*, int))LogStore.HandleLogOffset;

LogStore.GetLogOffset = getRealOffset(0x6F73F8);
LogStore.GetLog = (void *(*)(void*))LogStore.GetLogOffset;

LogStore.GetTypeOffset = getRealOffset(0x6F7844);
LogReporter.AwakeOffset = getRealOffset(0x6F5F0C);
LogReporter.Awake = (void(*)(void*))LogReporter.AwakeOffset;

LogReporter.OnEnableOffset = getRealOffset(0x6F5FD8);
LogReporter.OnEnable = (void(*)(void*))LogReporter.OnEnableOffset;

LogReporter.OnDisableOffset = getRealOffset(0x6F6060);
LogReporter.OnDisable = (void(*)(void*))LogReporter.OnDisableOffset;

LogReporter.HandleLogOffset = getRealOffset(0x6F60E8);
LogReporter.HandleLog = (void(*)(void*, monoString*, monoString*, int))LogReporter.HandleLogOffset;

LogReporter.GetInstanceOffset = getRealOffset(0x6F64A0);
LogReporter.GetInstance = (void *(*)())LogReporter.GetInstanceOffset;

MasterClientFinder.LatencySendOffset = getRealOffset(0x50C1A8);
MasterClientFinder.LatencySend = (void(*)(void*, int))MasterClientFinder.LatencySendOffset;

MasterClientFinder.LatencyReceiveOffset = getRealOffset(0x50C318);
MasterClientFinder.LatencyReceive = (void(*)(void*, int))MasterClientFinder.LatencyReceiveOffset;

MasterClientFinder.CheckIfLowPingerOffset = getRealOffset(0x50C528);
MasterClientFinder.CheckIfLowPinger = (void(*)(void*))MasterClientFinder.CheckIfLowPingerOffset;

MasterClientFinder.SendLatencyCheckOffset = getRealOffset(0x50C96C);
MasterClientFinder.SendLatencyCheck = (void(*)(void*))MasterClientFinder.SendLatencyCheckOffset;

MasterClientFinder.ReceiveLatencyCheckOffset = getRealOffset(0x50C488);
MasterClientFinder.ReceiveLatencyCheck = (void(*)(void*, float))MasterClientFinder.ReceiveLatencyCheckOffset;

MasterClientFinder.LatencyCheckFailedOffset = getRealOffset(0x50D244);
MasterClientFinder.LatencyCheckFailed = (void(*)(void*))MasterClientFinder.LatencyCheckFailedOffset;

MasterClientFinder.CheckForNewMasterClientOffset = getRealOffset(0x50D258);
MasterClientFinder.CheckForNewMasterClient = (void(*)(void*))MasterClientFinder.CheckForNewMasterClientOffset;

MasterClientFinder.BecomeNewMasterClientOffset = getRealOffset(0x50D8D8);
MasterClientFinder.BecomeNewMasterClient = (void(*)(void*, int))MasterClientFinder.BecomeNewMasterClientOffset;

MasterClientFinder.UpdateOffset = getRealOffset(0x50DBE4);
MasterClientFinder.Update = (void(*)(void*))MasterClientFinder.UpdateOffset;

MasterClientFinder.OnMasterClientSwitchedOffset = getRealOffset(0x50DFA8);
MasterClientFinder.OnMasterClientSwitched = (void(*)(void*, void *))MasterClientFinder.OnMasterClientSwitchedOffset;

MasterClientUtils.AwakeOffset = getRealOffset(0x50E16C);
MasterClientUtils.Awake = (void(*)(void*))MasterClientUtils.AwakeOffset;

MasterClientUtils.UpdateAverageRankOffset = getRealOffset(0x50E1C8);
MasterClientUtils.UpdateAverageRank = (void(*)())MasterClientUtils.UpdateAverageRankOffset;

MasterClientUtils.GetBestSpawnPointForPlayerOffset = getRealOffset(0x50E480);
MasterClientUtils.GetBestSpawnPointForPlayer = (Vector3 (*)(void*, int, int))MasterClientUtils.GetBestSpawnPointForPlayerOffset;

MasterClientUtils.GetSpawnsForTypeOffset = getRealOffset(0x510918);
MasterClientUtils.GetWeightNearPositionOffset = getRealOffset(0x5109B0);
MasterClientUtils.GetWeightNearPosition = (float(*)(void*, Vector3, Vector3, float))MasterClientUtils.GetWeightNearPositionOffset;

MasterClientUtils.CheckIfSpawnsShouldFlipOffset = getRealOffset(0x510148);
MasterClientUtils.CheckIfSpawnsShouldFlip = (void(*)(void*))MasterClientUtils.CheckIfSpawnsShouldFlipOffset;

MasterClientUtils.OnDestroyOffset = getRealOffset(0x510B00);
MasterClientUtils.OnDestroy = (void(*)(void*))MasterClientUtils.OnDestroyOffset;

MatchManager.get_IsMatchOverOffset = getRealOffset(0x510C60);
MatchManager.get_IsMatchOver = (bool(*)(void*))MatchManager.get_IsMatchOverOffset;

MatchManager.set_RoomVisibleOffset = getRealOffset(0x510C68);
MatchManager.set_RoomVisible = (void(*)(bool))MatchManager.set_RoomVisibleOffset;

MatchManager.get_CurrentMapOffset = getRealOffset(0x510D4C);
MatchManager.get_CurrentMap = (monoString *(*)(void*))MatchManager.get_CurrentMapOffset;

MatchManager.get_TimeInMatchOffset = getRealOffset(0x510DE0);
MatchManager.get_TimeInMatch = (float(*)(void*))MatchManager.get_TimeInMatchOffset;

MatchManager.AwakeOffset = getRealOffset(0x510DE8);
MatchManager.Awake = (void(*)(void*))MatchManager.AwakeOffset;

MatchManager.OnDestroyOffset = getRealOffset(0x5115C0);
MatchManager.OnDestroy = (void(*)(void*))MatchManager.OnDestroyOffset;

MatchManager.ResetTimeMatchStartedOffset = getRealOffset(0x51186C);
MatchManager.ResetTimeMatchStarted = (void(*)())MatchManager.ResetTimeMatchStartedOffset;

MatchManager.RelayVoteInitiatedMessageOffset = getRealOffset(0x511A38);
MatchManager.RelayVoteInitiatedMessage = (void(*)(void*, monoString*))MatchManager.RelayVoteInitiatedMessageOffset;

MatchManager.OnPhotonCustomRoomPropertiesChangedOffset = getRealOffset(0x511B3C);
MatchManager.OnPhotonCustomRoomPropertiesChanged = (void(*)(void*, void *))MatchManager.OnPhotonCustomRoomPropertiesChangedOffset;

MatchManager.FetchVoteDataOffset = getRealOffset(0x511ED8);
MatchManager.FetchVoteData = (void(*)(void*, monoString*))MatchManager.FetchVoteDataOffset;

MatchManager.RelayVoteDataOffset = getRealOffset(0x511F70);
MatchManager.RelayVoteData = (void(*)(void*, monoString*, monoString*, monoString*, int, int))MatchManager.RelayVoteDataOffset;

MatchManager.DisplayVoteDataOffset = getRealOffset(0x5121D8);
MatchManager.DisplayVoteData = (void(*)(void*, monoString*, monoString*, monoString*, int, int))MatchManager.DisplayVoteDataOffset;

MatchManager.RelayCheatersFetchNecessaryOffset = getRealOffset(0x51229C);
MatchManager.RelayCheatersFetchNecessary = (void(*)(void*))MatchManager.RelayCheatersFetchNecessaryOffset;

MatchManager.FetchCheatersOffset = getRealOffset(0x5123D4);
MatchManager.FetchCheaters = (void(*)(void*))MatchManager.FetchCheatersOffset;

MatchManager.OpenAllElevatorsOffset = getRealOffset(0x512404);
MatchManager.OpenAllElevators = (void(*)(void*))MatchManager.OpenAllElevatorsOffset;

MatchManager.StartTimerOffset = getRealOffset(0x5126E0);
MatchManager.StartTimer = (void(*)(void*))MatchManager.StartTimerOffset;

MatchManager.OnPhotonPlayerConnectedOffset = getRealOffset(0x512850);
MatchManager.OnPhotonPlayerConnected = (void(*)(void*, void *))MatchManager.OnPhotonPlayerConnectedOffset;

MatchManager.SendNewInfoToPlayerOffset = getRealOffset(0x512950);
MatchManager.SendNewInfoToPlayer = (void(*)(void*, void *))MatchManager.SendNewInfoToPlayerOffset;

MatchManager.SendNewInfoToPlayer1Offset = getRealOffset(0x51297C);
MatchManager.SendNewInfoToPlayer1 = (void *(*)(void*, float, void *))MatchManager.SendNewInfoToPlayer1Offset;

MatchManager.RestartMatchAfterTimeOffset = getRealOffset(0x512A54);
MatchManager.RestartMatchAfterTime = (void(*)(void*, float))MatchManager.RestartMatchAfterTimeOffset;

MatchManager.RestartMatchOffset = getRealOffset(0x512ABC);
MatchManager.RestartMatch = (void(*)(void*))MatchManager.RestartMatchOffset;

MatchManager.FlagTakenValueUpdatedOffset = getRealOffset(0x51326C);
MatchManager.FlagTakenValueUpdated = (void(*)(void*, int, float))MatchManager.FlagTakenValueUpdatedOffset;

MatchManager.ElevatorButtonPressedOffset = getRealOffset(0x513728);
MatchManager.ElevatorButtonPressed = (void(*)(void*, int))MatchManager.ElevatorButtonPressedOffset;

MatchManager.RPCElevatorButtonPressedOffset = getRealOffset(0x51384C);
MatchManager.RPCElevatorButtonPressed = (void(*)(void*, int))MatchManager.RPCElevatorButtonPressedOffset;

MatchManager.SetElevatorsClosedOffset = getRealOffset(0x513B90);
MatchManager.SetElevatorsClosed = (void(*)(void*, int, bool))MatchManager.SetElevatorsClosedOffset;

MatchManager.TeleportPlayersInsideElevatorsOffset = getRealOffset(0x513AD8);
MatchManager.TeleportPlayersInsideElevators = (void *(*)(void*, float, int))MatchManager.TeleportPlayersInsideElevatorsOffset;

MatchManager.OpenElevatorsOffset = getRealOffset(0x513CD0);
MatchManager.OpenElevators = (void *(*)(void*, float, int))MatchManager.OpenElevatorsOffset;

MatchManager.UpdateFlagTakenValueOffset = getRealOffset(0x513DA8);
MatchManager.UpdateFlagTakenValue = (void(*)(void*, int, float))MatchManager.UpdateFlagTakenValueOffset;

MatchManager.UpdateFlagOwnerTeamOffset = getRealOffset(0x513FFC);
MatchManager.UpdateFlagOwnerTeam = (void(*)(void*, int, int))MatchManager.UpdateFlagOwnerTeamOffset;

MatchManager.UpdateTimeInMatchOffset = getRealOffset(0x514528);
MatchManager.UpdateTimeInMatch = (void(*)(void*, float, int))MatchManager.UpdateTimeInMatchOffset;

MatchManager.StartOffset = getRealOffset(0x514758);
MatchManager.Start = (void(*)(void*))MatchManager.StartOffset;

MatchManager.MatchOverChangedOffset = getRealOffset(0x514ADC);
MatchManager.MatchOverChanged = (void(*)(void*, bool, int))MatchManager.MatchOverChangedOffset;

MatchManager.SetMapsOffset = getRealOffset(0x518218);
MatchManager.SetMaps = (void(*)(void*, monoString*, monoString*))MatchManager.SetMapsOffset;

MatchManager.CalculateWinningTeamOffset = getRealOffset(0x517810);
MatchManager.CalculateTDMWinningTeamOffset = getRealOffset(0x517598);
MatchManager.SetNextMPMapOffset = getRealOffset(0x518274);
MatchManager.SetNextMPMap = (void(*)(void*, monoString*))MatchManager.SetNextMPMapOffset;

MatchManager.SetNextMapOffset = getRealOffset(0x518378);
MatchManager.SetNextMap = (void(*)(void*, monoString*))MatchManager.SetNextMapOffset;

MatchManager.PrepareToShowVoteMapOffset = getRealOffset(0x518404);
MatchManager.PrepareToShowVoteMap = (void(*)(void*))MatchManager.PrepareToShowVoteMapOffset;

MatchManager.ShowRoundStatsOffset = getRealOffset(0x51792C);
MatchManager.ShowRoundStats = (void(*)(void*, monoString*))MatchManager.ShowRoundStatsOffset;

MatchManager.DestroySelfOffset = getRealOffset(0x51855C);
MatchManager.DestroySelf = (void(*)(void*))MatchManager.DestroySelfOffset;

MatchManager.EnableSceneSyncingOffset = getRealOffset(0x5185E8);
MatchManager.EnableSceneSyncing = (void(*)(void*))MatchManager.EnableSceneSyncingOffset;

MatchManager.OnPhotonPlayerDisconnectedOffset = getRealOffset(0x5186D8);
MatchManager.OnPhotonPlayerDisconnected = (void(*)(void*, void *))MatchManager.OnPhotonPlayerDisconnectedOffset;

MatchManager.UpdateFastOffset = getRealOffset(0x51899C);
MatchManager.UpdateFast = (void(*)(void*))MatchManager.UpdateFastOffset;

MatchManager.RequestVipsOnMasterFromSubordinateOffset = getRealOffset(0x51B4F0);
MatchManager.RequestVipsOnMasterFromSubordinate = (void(*)(void*, int))MatchManager.RequestVipsOnMasterFromSubordinateOffset;

MatchManager.CheckHardcoreModeEndOffset = getRealOffset(0x5188FC);
MatchManager.CheckHardcoreModeEnd = (void(*)(void*))MatchManager.CheckHardcoreModeEndOffset;

MatchManager.CheckPlayersPlayingAndEndRoundOrMatchOffset = getRealOffset(0x51BF84);
MatchManager.CheckPlayersPlayingAndEndRoundOrMatch = (void(*)(void*))MatchManager.CheckPlayersPlayingAndEndRoundOrMatchOffset;

MatchManager.CheckAlivePlayersOffset = getRealOffset(0x51BADC);
MatchManager.CheckAlivePlayers = (void(*)(void*))MatchManager.CheckAlivePlayersOffset;

MatchManager.UpdateAlivePlayersOffset = getRealOffset(0x51BFA0);
MatchManager.UpdateAlivePlayers = (void(*)(void*, int, int))MatchManager.UpdateAlivePlayersOffset;

MatchManager.HardcoreModeRoundEndedOffset = getRealOffset(0x51ABC4);
MatchManager.HardcoreModeRoundEnded = (void(*)(void*, bool))MatchManager.HardcoreModeRoundEndedOffset;

MatchManager.EndMatchOffset = getRealOffset(0x51C030);
MatchManager.EndMatch = (void(*)(void*))MatchManager.EndMatchOffset;

MatchManager.UpdateHMFFARoundsOffset = getRealOffset(0x51C1AC);
MatchManager.UpdateHMFFARounds = (void(*)(void*, int, int))MatchManager.UpdateHMFFARoundsOffset;

MatchManager.RestartHardcoreModeRoundOffset = getRealOffset(0x51C3F0);
MatchManager.RestartHardcoreModeRound = (void(*)(void*, int))MatchManager.RestartHardcoreModeRoundOffset;

MatchManager.RespawnHardcoreModePlayersOffset = getRealOffset(0x51CBF8);
MatchManager.RespawnHardcoreModePlayers = (void(*)(void*))MatchManager.RespawnHardcoreModePlayersOffset;

MatchManager.get_RoundStartedOffset = getRealOffset(0x51CF14);
MatchManager.get_RoundStarted = (bool(*)(void*))MatchManager.get_RoundStartedOffset;

MatchManager.set_RoundStartedOffset = getRealOffset(0x51CDC8);
MatchManager.set_RoundStarted = (void(*)(void*, bool))MatchManager.set_RoundStartedOffset;

ScoreLimits.GetScoreLimitHardcoreOffset = getRealOffset(0x61611C);
ScoreLimits.GetScoreLimitHardcore = (int(*)(monoString*))ScoreLimits.GetScoreLimitHardcoreOffset;

ScoreLimits.GetScoreLimitOffset = getRealOffset(0x61618C);
ScoreLimits.GetScoreLimit = (int(*)(monoString*, monoString*))ScoreLimits.GetScoreLimitOffset;

MathUtils.UnixTimeMSOffset = getRealOffset(0x51B9E0);
MathUtils.UnixTimeSecondsOffset = getRealOffset(0x51E460);
MaxEnemies.StartOffset = getRealOffset(0x51E8C8);
MaxEnemies.Start = (void(*)(void*))MaxEnemies.StartOffset;

MaxEnemies.SetValueOffset = getRealOffset(0x51E924);
MaxEnemies.SetValue = (void(*)(void*, float))MaxEnemies.SetValueOffset;

MenuSoldier.OnEnableOffset = getRealOffset(0x51EFCC);
MenuSoldier.OnEnable = (void(*)(void*))MenuSoldier.OnEnableOffset;

MenuToggleGroup.AwakeOffset = getRealOffset(0x51F170);
MenuToggleGroup.Awake = (void(*)(void*))MenuToggleGroup.AwakeOffset;

MenuToggleGroup.SelectMenuOffset = getRealOffset(0x51F174);
MenuToggleGroup.SelectMenu = (void(*)(void*, monoString*))MenuToggleGroup.SelectMenuOffset;

MenuToggleGroup.GetMenuByNameOffset = getRealOffset(0x51F300);
MenuToggleGroup.GetMenuByName = (void *(*)(void*, monoString*))MenuToggleGroup.GetMenuByNameOffset;

MeshCombineUtility.PrepareForAddingVerticesOffset = getRealOffset(0x521414);
MeshCombineUtility.PrepareForAddingVertices = (void(*)(void*, int))MeshCombineUtility.PrepareForAddingVerticesOffset;

MeshCombineUtility.PrepareForAddingTrianglesOffset = getRealOffset(0x5216F8);
MeshCombineUtility.PrepareForAddingTriangles = (void(*)(void*, int, int))MeshCombineUtility.PrepareForAddingTrianglesOffset;

MeshCombineUtility.AddMeshInstanceOffset = getRealOffset(0x521D44);
MeshCombineUtility.AddMeshInstance = (void(*)(void*, void *))MeshCombineUtility.AddMeshInstanceOffset;

MeshCombineUtility.CreateCombinedMeshOffset = getRealOffset(0x52308C);
MeshCombineUtility.CreateCombinedMesh = (void *(*)(void*))MeshCombineUtility.CreateCombinedMeshOffset;

MethodManager.AwakeOffset = getRealOffset(0x52533C);
MethodManager.Awake = (void(*)(void*))MethodManager.AwakeOffset;

MethodManager.AddMethodOffset = getRealOffset(0x514A68);
MethodManager.AddMethod = (void(*)(void*, void *))MethodManager.AddMethodOffset;

MethodManager.RemoveMethodOffset = getRealOffset(0x5117F8);
MethodManager.RemoveMethod = (void(*)(void*, void *))MethodManager.RemoveMethodOffset;

MethodManager.UpdateOffset = getRealOffset(0x5253CC);
MethodManager.Update = (void(*)(void*))MethodManager.UpdateOffset;

MethodManager.OnDestroyOffset = getRealOffset(0x525484);
MethodManager.OnDestroy = (void(*)(void*))MethodManager.OnDestroyOffset;

Minimap.AwakeOffset = getRealOffset(0x525850);
Minimap.Awake = (void(*)(void*))Minimap.AwakeOffset;

Minimap.RenderMapImageOffset = getRealOffset(0x525960);
Minimap.RenderMapImage = (void(*)(void*))Minimap.RenderMapImageOffset;

Minimap.CreateMapSpriteOffset = getRealOffset(0x525A2C);
Minimap.CreateMapSprite = (void *(*)(void*))Minimap.CreateMapSpriteOffset;

Minimap.StartOffset = getRealOffset(0x526278);
Minimap.Start = (void(*)(void*))Minimap.StartOffset;

Minimap.addItemOffset = getRealOffset(0x526580);
Minimap.addItem = (void(*)(void*, void *))Minimap.addItemOffset;

Minimap.removeItemOffset = getRealOffset(0x526684);
Minimap.removeItem = (void(*)(void*, void *))Minimap.removeItemOffset;

Minimap.updatePlayerTransformOffset = getRealOffset(0x5266F8);
Minimap.updatePlayerTransform = (void(*)(void*, void *))Minimap.updatePlayerTransformOffset;

Minimap.DisableMinimapOffset = getRealOffset(0x52672C);
Minimap.DisableMinimap = (void(*)(void*))Minimap.DisableMinimapOffset;

Minimap.EnableMinimapAfterTimeOffset = getRealOffset(0x5267B4);
Minimap.EnableMinimapAfterTime = (void(*)(void*, float))Minimap.EnableMinimapAfterTimeOffset;

Minimap.EnableMinimapOffset = getRealOffset(0x52682C);
Minimap.EnableMinimap = (void(*)(void*))Minimap.EnableMinimapOffset;

Minimap.rotatePointOffset = getRealOffset(0x5268E8);
Minimap.rotatePoint = (Vector2 (*)(void*, float, float, float, Vector2))Minimap.rotatePointOffset;

Minimap.OnDestroyOffset = getRealOffset(0x5269CC);
Minimap.OnDestroy = (void(*)(void*))Minimap.OnDestroyOffset;

Minimap.UpdateFastOffset = getRealOffset(0x526B8C);
Minimap.UpdateFast = (void(*)(void*))Minimap.UpdateFastOffset;

MinimapItem.AwakeOffset = getRealOffset(0x527D1C);
MinimapItem.Awake = (void(*)(void*))MinimapItem.AwakeOffset;

MinimapItem.FlashOffset = getRealOffset(0x527E44);
MinimapItem.Flash = (void(*)(void*, float))MinimapItem.FlashOffset;

MinimapItem.SetAsTriangleOffset = getRealOffset(0x527F6C);
MinimapItem.SetAsTriangle = (void(*)(void*, bool))MinimapItem.SetAsTriangleOffset;

MinimapItem.HideOffset = getRealOffset(0x5280E8);
MinimapItem.Hide = (void(*)(void*))MinimapItem.HideOffset;

MinimapItem.StartOffset = getRealOffset(0x528128);
MinimapItem.Start = (void(*)(void*))MinimapItem.StartOffset;

MinimapItem.ShowOffset = getRealOffset(0x527ED4);
MinimapItem.Show = (void(*)(void*, bool))MinimapItem.ShowOffset;

MinimapItem.updateColorOffset = getRealOffset(0x52819C);
MinimapItem.updateColor = (void(*)(void*))MinimapItem.updateColorOffset;

MinimapItem.OnEnableOffset = getRealOffset(0x5281A0);
MinimapItem.OnEnable = (void(*)(void*))MinimapItem.OnEnableOffset;

MinimapItem.SetAlwaysDisplayColorOffset = getRealOffset(0x5281A4);
MinimapItem.SetAlwaysDisplayColor = (void(*)(void*, Color))MinimapItem.SetAlwaysDisplayColorOffset;

MinimapItem.UnserAlwaysDisplayColorOffset = getRealOffset(0x5281C8);
MinimapItem.UnserAlwaysDisplayColor = (void(*)(void*))MinimapItem.UnserAlwaysDisplayColorOffset;

MinimapItem.SetAlwaysDisplayOffset = getRealOffset(0x5281D4);
MinimapItem.SetAlwaysDisplay = (void(*)(void*, bool))MinimapItem.SetAlwaysDisplayOffset;

MinimapItem.UpdateImageStatusOffset = getRealOffset(0x527FC0);
MinimapItem.UpdateImageStatus = (void(*)(void*))MinimapItem.UpdateImageStatusOffset;

MissionCompleteScript.AwakeOffset = getRealOffset(0x5282C4);
MissionCompleteScript.Awake = (void(*)(void*))MissionCompleteScript.AwakeOffset;

MissionCompleteScript.MissionCompleteTextFinishedOffset = getRealOffset(0x528320);
MissionCompleteScript.MissionCompleteTextFinished = (void(*)(void*))MissionCompleteScript.MissionCompleteTextFinishedOffset;

MissionCompleteScript.MoveMissionCompleteTextUpOffset = getRealOffset(0x528384);
MissionCompleteScript.MoveMissionCompleteTextUp = (void(*)(void*))MissionCompleteScript.MoveMissionCompleteTextUpOffset;

MissionCompleteScript.ShowRankTextOffset = getRealOffset(0x5283E8);
MissionCompleteScript.ShowRankText = (void(*)(void*))MissionCompleteScript.ShowRankTextOffset;

MissionCompleteScript.ShowXPIncreaseOffset = getRealOffset(0x5284C0);
MissionCompleteScript.ShowXPIncrease = (void(*)(void*))MissionCompleteScript.ShowXPIncreaseOffset;

MissionCompleteScript.StartOffset = getRealOffset(0x528550);
MissionCompleteScript.Start = (void(*)(void*))MissionCompleteScript.StartOffset;

MissionCompleteTextScript.StartOffset = getRealOffset(0x52855C);
MissionCompleteTextScript.Start = (void(*)(void*))MissionCompleteTextScript.StartOffset;

MoveUIObject.AwakeOffset = getRealOffset(0x529290);
MoveUIObject.Awake = (void(*)(void*))MoveUIObject.AwakeOffset;

MoveUIObject.MoveAnchorOffset = getRealOffset(0x529324);
MoveUIObject.MoveAnchor = (void(*)(void*, Vector2))MoveUIObject.MoveAnchorOffset;

MoveUIObject.UpdateOffset = getRealOffset(0x529330);
MoveUIObject.Update = (void(*)(void*))MoveUIObject.UpdateOffset;

MovieTextureBG.set_MusicVolumeOffset = getRealOffset(0x5294F8);
MovieTextureBG.set_MusicVolume = (void(*)(void*, float))MovieTextureBG.set_MusicVolumeOffset;

MovieTextureBG.AwakeOffset = getRealOffset(0x529528);
MovieTextureBG.Awake = (void(*)(void*))MovieTextureBG.AwakeOffset;

MovieTextureBG.StartOffset = getRealOffset(0x529660);
MovieTextureBG.Start = (void(*)(void*))MovieTextureBG.StartOffset;

MovieTextureBG.ReloadVideoOffset = getRealOffset(0x5296EC);
MovieTextureBG.ReloadVideo = (void(*)(void*))MovieTextureBG.ReloadVideoOffset;

MovieTextureBG.OnLevelWasLoadedOffset = getRealOffset(0x529788);
MovieTextureBG.OnLevelWasLoaded = (void(*)(void*, int))MovieTextureBG.OnLevelWasLoadedOffset;

MovieTextureBG.RepositionOffset = getRealOffset(0x529954);
MovieTextureBG.Reposition = (void(*)(void*))MovieTextureBG.RepositionOffset;

MovieTextureBG.SetVisualsEnabledOffset = getRealOffset(0x529CD8);
MovieTextureBG.SetVisualsEnabled = (void(*)(void*, bool))MovieTextureBG.SetVisualsEnabledOffset;

NameTagScript.SetColorOffset = getRealOffset(0x529FC0);
NameTagScript.SetColor = (void(*)(void*, Color))NameTagScript.SetColorOffset;

NameTagScript.AwakeOffset = getRealOffset(0x52A170);
NameTagScript.Awake = (void(*)(void*))NameTagScript.AwakeOffset;

NameTagScript.StartOffset = getRealOffset(0x52A1D4);
NameTagScript.Start = (void(*)(void*))NameTagScript.StartOffset;

NameTagScript.SetToCrouchHeightOffset = getRealOffset(0x52A554);
NameTagScript.SetToCrouchHeight = (void(*)(void*))NameTagScript.SetToCrouchHeightOffset;

NameTagScript.ResetHeightOffset = getRealOffset(0x52A5A8);
NameTagScript.ResetHeight = (void(*)(void*))NameTagScript.ResetHeightOffset;

NameTagScript.SetHealthNormalizedOffset = getRealOffset(0x52A5BC);
NameTagScript.SetHealthNormalized = (void(*)(void*, float))NameTagScript.SetHealthNormalizedOffset;

NameTagScript.UpdateFastOffset = getRealOffset(0x52A67C);
NameTagScript.UpdateFast = (void(*)(void*))NameTagScript.UpdateFastOffset;

NameTagScript.LateUpdateOffset = getRealOffset(0x52A78C);
NameTagScript.LateUpdate = (void(*)(void*))NameTagScript.LateUpdateOffset;

NameTagScript.OnDestroyOffset = getRealOffset(0x52ACF0);
NameTagScript.OnDestroy = (void(*)(void*))NameTagScript.OnDestroyOffset;

NameTagScript.HideOffset = getRealOffset(0x52AF50);
NameTagScript.Hide = (void(*)(void*))NameTagScript.HideOffset;

NameTagScript.HideAllOffset = getRealOffset(0x52B0F0);
NameTagScript.HideAll = (void(*)(void*))NameTagScript.HideAllOffset;

NameTagScript.HideTriangleOffset = getRealOffset(0x52B1D0);
NameTagScript.HideTriangle = (void(*)(void*))NameTagScript.HideTriangleOffset;

NameTagScript.ShowTriangleOffset = getRealOffset(0x52B2C8);
NameTagScript.ShowTriangle = (void(*)(void*, float))NameTagScript.ShowTriangleOffset;

NameTagScript.ShowAllButHealthOffset = getRealOffset(0x52B48C);
NameTagScript.ShowAllButHealth = (void(*)(void*))NameTagScript.ShowAllButHealthOffset;

NameTagScript.ShowOffset = getRealOffset(0x52B5C8);
NameTagScript.Show = (void(*)(void*))NameTagScript.ShowOffset;

NameTagScript.SetNameOffset = getRealOffset(0x52B6C0);
NameTagScript.SetName = (void(*)(void*, monoString*))NameTagScript.SetNameOffset;

NameTagUI.AwakeOffset = getRealOffset(0x52B78C);
NameTagUI.Awake = (void(*)(void*))NameTagUI.AwakeOffset;

NameTagUI.SetColorOffset = getRealOffset(0x52A094);
NameTagUI.SetColor = (void(*)(void*, Color))NameTagUI.SetColorOffset;

NameTagUI.StartOffset = getRealOffset(0x52B91C);
NameTagUI.Start = (void(*)(void*))NameTagUI.StartOffset;

NameTagUI.RemoveOffset = getRealOffset(0x52AEA0);
NameTagUI.Remove = (void(*)(void*))NameTagUI.RemoveOffset;

NameTagUI.ToggleActiveOffset = getRealOffset(0x52AC00);
NameTagUI.ToggleActive = (void(*)(void*, bool))NameTagUI.ToggleActiveOffset;

NameTagUI.SetHealthNormalizedOffset = getRealOffset(0x52A4A0);
NameTagUI.SetHealthNormalized = (void(*)(void*, float))NameTagUI.SetHealthNormalizedOffset;

NameTagUI.SetPositionOffset = getRealOffset(0x52AB88);
NameTagUI.SetPosition = (void(*)(void*, Vector3))NameTagUI.SetPositionOffset;

NameTagUI.ShowOffset = getRealOffset(0x52B030);
NameTagUI.Show = (void(*)(void*, bool))NameTagUI.ShowOffset;

NoZone.GetBoundsOfParentOffset = getRealOffset(0x546ED0);
NoZone.GetBoundsOfParent = (int (*)(void*))NoZone.GetBoundsOfParentOffset;

NukeOverlay.AwakeOffset = getRealOffset(0x5490E4);
NukeOverlay.Awake = (void(*)(void*))NukeOverlay.AwakeOffset;

NukeOverlay.StartOffset = getRealOffset(0x549310);
NukeOverlay.Start = (void(*)(void*))NukeOverlay.StartOffset;

NukeOverlay.SetAsSingletonOffset = getRealOffset(0x5493C0);
NukeOverlay.SetAsSingleton = (void(*)(void*))NukeOverlay.SetAsSingletonOffset;

NukeOverlay.OnDestroyOffset = getRealOffset(0x54941C);
NukeOverlay.OnDestroy = (void(*)(void*))NukeOverlay.OnDestroyOffset;

NukeOverlay.ShowNukeOffset = getRealOffset(0x5495E0);
NukeOverlay.ShowNuke = (void(*)(void*))NukeOverlay.ShowNukeOffset;

NukeOverlay.HideNukeOffset = getRealOffset(0x5491B4);
NukeOverlay.HideNuke = (void(*)(void*))NukeOverlay.HideNukeOffset;

NukeOverlay.SetColorOffset = getRealOffset(0x54973C);
NukeOverlay.SetColor = (void(*)(void*, Color))NukeOverlay.SetColorOffset;

NukeOverlay.UpdateFastOffset = getRealOffset(0x5498E4);
NukeOverlay.UpdateFast = (void(*)(void*))NukeOverlay.UpdateFastOffset;

ObjectOptimizer.StartOffset = getRealOffset(0x549FC8);
ObjectOptimizer.Start = (void(*)(void*))ObjectOptimizer.StartOffset;

ObjectOptimizer.UpdateOffset = getRealOffset(0x54A1E8);
ObjectOptimizer.Update = (void(*)(void*))ObjectOptimizer.UpdateOffset;

ObjectOptimizer.CheckVisibilityForAllRenderersOffset = getRealOffset(0x54A20C);
ObjectOptimizer.CheckVisibilityForAllRenderers = (void(*)(void*))ObjectOptimizer.CheckVisibilityForAllRenderersOffset;

OW_UnlockAdRewardModel.onSuccessGetRewardOffset = getRealOffset(0x549D90);
OW_UnlockAdRewardModel.onSuccessGetReward = (void(*)(void*, monoString*))OW_UnlockAdRewardModel.onSuccessGetRewardOffset;

OW_UnlockAdRewardModel.GetResponseOffset = getRealOffset(0x549E9C);
OW_UnlockAdRewardModel.GetResponse = (void *(*)(void*))OW_UnlockAdRewardModel.GetResponseOffset;

OW_UnlockAdRewardModel.GetResponseJsonOffset = getRealOffset(0x549EA4);
OW_UnlockAdRewardModel.GetResponseJson = (monoString *(*)(void*))OW_UnlockAdRewardModel.GetResponseJsonOffset;

OnlineCasesManager.SetLastOpenCaseContainerOffset = getRealOffset(0x551C98);
OnlineCasesManager.SetLastOpenCaseContainer = (void(*)(void*))OnlineCasesManager.SetLastOpenCaseContainerOffset;

OnlineCasesManager.SetCountOffset = getRealOffset(0x551D40);
OnlineCasesManager.SetCount = (void(*)(void*, int, int))OnlineCasesManager.SetCountOffset;

OnlineCasesManager.GetCountOffset = getRealOffset(0x551E20);
OnlineCasesManager.GetCount = (int(*)(void*, int))OnlineCasesManager.GetCountOffset;

OnlineCasesManager.SetCasePriceOffset = getRealOffset(0x552068);
OnlineCasesManager.SetCasePrice = (void(*)(void*, int, int, monoString*))OnlineCasesManager.SetCasePriceOffset;

OnlineCasesManager.GetCasePriceOffset = getRealOffset(0x5522AC);
OnlineCasesManager.GetCasePrice = (monoString *(*)(void*, int, int))OnlineCasesManager.GetCasePriceOffset;

OnlineCasesManager.UseDebugDataOffset = getRealOffset(0x5528A8);
OnlineCasesManager.UseDebugData = (monoString *(*)(void*))OnlineCasesManager.UseDebugDataOffset;

OnlineCasesManager.GetManagerOffset = getRealOffset(0x5528F8);
OnlineCasesManager.GetManager = (void *(*)())OnlineCasesManager.GetManagerOffset;

OnlyVisibleOnMobile.OnEnableOffset = getRealOffset(0x5537C0);
OnlyVisibleOnMobile.OnEnable = (void(*)(void*))OnlyVisibleOnMobile.OnEnableOffset;

OnlyVisibleOnMobile.CR_HideOrShowObjectOffset = getRealOffset(0x5537E4);
OnlyVisibleOnMobile.CR_HideOrShowObject = (void *(*)(void*))OnlyVisibleOnMobile.CR_HideOrShowObjectOffset;

OrientationSettler.StartOffset = getRealOffset(0x553EB0);
OrientationSettler.Start = (void(*)(void*))OrientationSettler.StartOffset;

OutOfBoundsHandler.get_outOfBoundsOffset = getRealOffset(0x5545A0);
OutOfBoundsHandler.get_outOfBounds = (bool(*)(void*))OutOfBoundsHandler.get_outOfBoundsOffset;

OutOfBoundsHandler.set_outOfBoundsOffset = getRealOffset(0x554440);
OutOfBoundsHandler.set_outOfBounds = (void(*)(void*, bool))OutOfBoundsHandler.set_outOfBoundsOffset;

OutOfBoundsHandler.AwakeOffset = getRealOffset(0x5545A8);
OutOfBoundsHandler.Awake = (void(*)(void*))OutOfBoundsHandler.AwakeOffset;

OutOfBoundsHandler.IsOutsideBoundsOffset = getRealOffset(0x554700);
OutOfBoundsHandler.IsOutsideBounds = (bool(*)(void*, Vector3, int))OutOfBoundsHandler.IsOutsideBoundsOffset;

OutOfBoundsHandler.UpdateOffset = getRealOffset(0x554800);
OutOfBoundsHandler.Update = (void(*)(void*))OutOfBoundsHandler.UpdateOffset;

OutOfBoundsHandler.OnDestroyOffset = getRealOffset(0x554BB8);
OutOfBoundsHandler.OnDestroy = (void(*)(void*))OutOfBoundsHandler.OnDestroyOffset;

ActiveGenericMessagePopup.SetMessageOffset = getRealOffset(0x6B085C);
ActiveGenericMessagePopup.SetMessage = (void(*)(void*, monoString*, bool))ActiveGenericMessagePopup.SetMessageOffset;

ActiveGenericMessagePopup.UpdateOffset = getRealOffset(0x6B08A0);
ActiveGenericMessagePopup.Update = (void(*)(void*))ActiveGenericMessagePopup.UpdateOffset;

ActiveGenericMessagePopup.OnDisplayOffset = getRealOffset(0x6B08EC);
ActiveGenericMessagePopup.OnDisplay = (void(*)(void*))ActiveGenericMessagePopup.OnDisplayOffset;

ActiveGenericMessagePopup.OnHideOffset = getRealOffset(0x6B08F0);
ActiveGenericMessagePopup.OnHide = (void(*)(void*))ActiveGenericMessagePopup.OnHideOffset;

AllowedWeaponsPopup.AwakeOffset = getRealOffset(0x6B4FA0);
AllowedWeaponsPopup.Awake = (void(*)(void*))AllowedWeaponsPopup.AwakeOffset;

AllowedWeaponsPopup.LoadCommonDataOffset = getRealOffset(0x6B4FA4);
AllowedWeaponsPopup.LoadCommonData = (void(*)(void*))AllowedWeaponsPopup.LoadCommonDataOffset;

AllowedWeaponsPopup.OnDisplayOffset = getRealOffset(0x6B5154);
AllowedWeaponsPopup.OnDisplay = (void(*)(void*))AllowedWeaponsPopup.OnDisplayOffset;

AllowedWeaponsPopup.OnHideOffset = getRealOffset(0x6B6C90);
AllowedWeaponsPopup.OnHide = (void(*)(void*))AllowedWeaponsPopup.OnHideOffset;

AllowedWeaponsPopup.ClearDataOffset = getRealOffset(0x6B69C8);
AllowedWeaponsPopup.ClearData = (void(*)(void*))AllowedWeaponsPopup.ClearDataOffset;

AllowedWeaponsPopup.DestroyChildrenOffset = getRealOffset(0x6B6C94);
AllowedWeaponsPopup.DestroyChildren = (void(*)(void*, void *))AllowedWeaponsPopup.DestroyChildrenOffset;

AllowedWeaponsPopup.CloseOffset = getRealOffset(0x6B6FC8);
AllowedWeaponsPopup.Close = (void(*)(void*))AllowedWeaponsPopup.CloseOffset;

AskRegionPopup.OnDisplayOffset = getRealOffset(0x841240);
AskRegionPopup.OnDisplay = (void(*)(void*))AskRegionPopup.OnDisplayOffset;

AskRegionPopup.OnHideOffset = getRealOffset(0x841244);
AskRegionPopup.OnHide = (void(*)(void*))AskRegionPopup.OnHideOffset;

AskRegionPopup.ChosenRegionOffset = getRealOffset(0x841248);
AskRegionPopup.ChosenRegion = (void(*)(void*, int))AskRegionPopup.ChosenRegionOffset;

AskRegionPopup.GoToMultiplayerOffset = getRealOffset(0x841334);
AskRegionPopup.GoToMultiplayer = (void(*)(void*))AskRegionPopup.GoToMultiplayerOffset;

SelectRegionButton.StartOffset = getRealOffset(0x61C2D4);
SelectRegionButton.Start = (void(*)(void*))SelectRegionButton.StartOffset;

SelectRegionButton.OnClickOffset = getRealOffset(0x61C300);
SelectRegionButton.OnClick = (void(*)(void*))SelectRegionButton.OnClickOffset;

BanNoticePopup.SetReasonOffset = getRealOffset(0x6C21C4);
BanNoticePopup.SetReason = (void(*)(void*, monoString*))BanNoticePopup.SetReasonOffset;

BanNoticePopup.OnDisplayOffset = getRealOffset(0x6C21CC);
BanNoticePopup.OnDisplay = (void(*)(void*))BanNoticePopup.OnDisplayOffset;

BanNoticePopup.OnHideOffset = getRealOffset(0x6C2624);
BanNoticePopup.OnHide = (void(*)(void*))BanNoticePopup.OnHideOffset;

BanNoticePopup.CloseOffset = getRealOffset(0x6C2628);
BanNoticePopup.Close = (void(*)(void*))BanNoticePopup.CloseOffset;

BeginnerJoiningExperiencedMatchPopup.get_PlayAnywaysOffset = getRealOffset(0x6C8AE4);
BeginnerJoiningExperiencedMatchPopup.get_PlayAnyways = (bool(*)(void*))BeginnerJoiningExperiencedMatchPopup.get_PlayAnywaysOffset;

BeginnerJoiningExperiencedMatchPopup.set_PlayAnywaysOffset = getRealOffset(0x6C8AEC);
BeginnerJoiningExperiencedMatchPopup.set_PlayAnyways = (void(*)(void*, bool))BeginnerJoiningExperiencedMatchPopup.set_PlayAnywaysOffset;

BeginnerJoiningExperiencedMatchPopup.AwakeOffset = getRealOffset(0x6C8AF4);
BeginnerJoiningExperiencedMatchPopup.Awake = (void(*)(void*))BeginnerJoiningExperiencedMatchPopup.AwakeOffset;

BeginnerJoiningExperiencedMatchPopup.OnEnableOffset = getRealOffset(0x6C8C60);
BeginnerJoiningExperiencedMatchPopup.OnEnable = (void(*)(void*))BeginnerJoiningExperiencedMatchPopup.OnEnableOffset;

BeginnerJoiningExperiencedMatchPopup.OnYesButtonPressedOffset = getRealOffset(0x6C91C8);
BeginnerJoiningExperiencedMatchPopup.OnYesButtonPressed = (void(*)(void*))BeginnerJoiningExperiencedMatchPopup.OnYesButtonPressedOffset;

BeginnerJoiningExperiencedMatchPopup.OnTDMButtonPressedOffset = getRealOffset(0x6C9244);
BeginnerJoiningExperiencedMatchPopup.OnTDMButtonPressed = (void(*)(void*))BeginnerJoiningExperiencedMatchPopup.OnTDMButtonPressedOffset;

BeginnerJoiningExperiencedMatchPopup.OnGunGameButtonPressedOffset = getRealOffset(0x6C92C4);
BeginnerJoiningExperiencedMatchPopup.OnGunGameButtonPressed = (void(*)(void*))BeginnerJoiningExperiencedMatchPopup.OnGunGameButtonPressedOffset;

ForceEarnedSkinPopup.UpdateOffset = getRealOffset(0x727E14);
ForceEarnedSkinPopup.Update = (void(*)(void*))ForceEarnedSkinPopup.UpdateOffset;

ForceEarnedSkinPopup.ShowPopupOffset = getRealOffset(0x727F3C);
ForceEarnedSkinPopup.ShowPopup = (void(*)(void*))ForceEarnedSkinPopup.ShowPopupOffset;

ForceEarnedSkinPopup.SetUpPopupOffset = getRealOffset(0x727F84);
ForceEarnedSkinPopup.SetUpPopup = (void(*)(void*, int))ForceEarnedSkinPopup.SetUpPopupOffset;

EarnedSkinPopup.SetMessageOffset = getRealOffset(0x67D544);
EarnedSkinPopup.SetMessage = (void(*)(void*, int))EarnedSkinPopup.SetMessageOffset;

EarnedSkinPopup.SetMessage1Offset = getRealOffset(0x67D710);
EarnedSkinPopup.SetMessage1 = (void(*)(void*, int))EarnedSkinPopup.SetMessage1Offset;

EarnedSkinPopup.SetMessage2Offset = getRealOffset(0x67D8BC);
EarnedSkinPopup.SetMessage2 = (void(*)(void*, int))EarnedSkinPopup.SetMessage2Offset;

EarnedSkinPopup.OnDisplayOffset = getRealOffset(0x67DA7C);
EarnedSkinPopup.OnDisplay = (void(*)(void*))EarnedSkinPopup.OnDisplayOffset;

EarnedSkinPopup.OnHideOffset = getRealOffset(0x67DB60);
EarnedSkinPopup.OnHide = (void(*)(void*))EarnedSkinPopup.OnHideOffset;

EarnedSkinPopup.ResetStateOffset = getRealOffset(0x67D700);
EarnedSkinPopup.ResetState = (void(*)(void*))EarnedSkinPopup.ResetStateOffset;

EarnedSkinPopup.ConfirmClickedOffset = getRealOffset(0x67DB64);
EarnedSkinPopup.ConfirmClicked = (void(*)(void*))EarnedSkinPopup.ConfirmClickedOffset;

EarnedSkinPopup.CloseOffset = getRealOffset(0x67DB68);
EarnedSkinPopup.Close = (void(*)(void*))EarnedSkinPopup.CloseOffset;

FTUEBackground.UpdateOffset = getRealOffset(0x6948C0);
FTUEBackground.Update = (void(*)(void*))FTUEBackground.UpdateOffset;

FTUEPopup.AwakeOffset = getRealOffset(0x714140);
FTUEPopup.Awake = (void(*)(void*))FTUEPopup.AwakeOffset;

FTUEPopup.HowToContinueQuestionOffset = getRealOffset(0x713694);
FTUEPopup.HowToContinueQuestion = (void(*)(void*))FTUEPopup.HowToContinueQuestionOffset;

FTUEPopup.DoYouHaveAnAccQuestionOffset = getRealOffset(0x7142FC);
FTUEPopup.DoYouHaveAnAccQuestion = (void(*)(void*))FTUEPopup.DoYouHaveAnAccQuestionOffset;

FTUEPopup.OnDoTrainingOffset = getRealOffset(0x714784);
FTUEPopup.OnDoTraining = (void(*)(void*))FTUEPopup.OnDoTrainingOffset;

FTUEPopup.OnMultiplayerOffset = getRealOffset(0x7147B4);
FTUEPopup.OnMultiplayer = (void(*)(void*))FTUEPopup.OnMultiplayerOffset;

FTUEPopup.OnBotsOffset = getRealOffset(0x7147E4);
FTUEPopup.OnBots = (void(*)(void*))FTUEPopup.OnBotsOffset;

FTUEPopup.OnYesButtonPressedOffset = getRealOffset(0x714814);
FTUEPopup.OnYesButtonPressed = (void(*)(void*))FTUEPopup.OnYesButtonPressedOffset;

FTUEPopup.OnNoButtonPressedOffset = getRealOffset(0x714908);
FTUEPopup.OnNoButtonPressed = (void(*)(void*))FTUEPopup.OnNoButtonPressedOffset;

FTUEPopup.OnDisplayOffset = getRealOffset(0x7149B0);
FTUEPopup.OnDisplay = (void(*)(void*))FTUEPopup.OnDisplayOffset;

FTUEPopup.OnHideOffset = getRealOffset(0x7149B4);
FTUEPopup.OnHide = (void(*)(void*))FTUEPopup.OnHideOffset;

FTUEPopup.ActivateLoadingOffset = getRealOffset(0x713C18);
FTUEPopup.ActivateLoading = (void(*)(void*, monoString*, bool))FTUEPopup.ActivateLoadingOffset;

GenericConfirmationPopup.SetMessageOffset = getRealOffset(0x5FCACC);
GenericConfirmationPopup.SetMessage = (void(*)(void*, monoString*, monoString*, void *, void *, monoString*, monoString*))GenericConfirmationPopup.SetMessageOffset;

GenericConfirmationPopup.ConfirmClickedOffset = getRealOffset(0x5FD5B4);
GenericConfirmationPopup.ConfirmClicked = (void(*)(void*))GenericConfirmationPopup.ConfirmClickedOffset;

GenericConfirmationPopup.CancelClickedOffset = getRealOffset(0x5FD624);
GenericConfirmationPopup.CancelClicked = (void(*)(void*))GenericConfirmationPopup.CancelClickedOffset;

GenericConfirmationPopup.OnDisplayOffset = getRealOffset(0x5FD650);
GenericConfirmationPopup.OnDisplay = (void(*)(void*))GenericConfirmationPopup.OnDisplayOffset;

GenericConfirmationPopup.OnHideOffset = getRealOffset(0x5FD654);
GenericConfirmationPopup.OnHide = (void(*)(void*))GenericConfirmationPopup.OnHideOffset;

GenericConfirmationPopup.CloseOffset = getRealOffset(0x5FD5E0);
GenericConfirmationPopup.Close = (void(*)(void*))GenericConfirmationPopup.CloseOffset;

GenericInformationPopup.SetMessageOffset = getRealOffset(0x5EA264);
GenericInformationPopup.SetMessage = (void(*)(void*, monoString*, monoString*, void *, int, monoString*))GenericInformationPopup.SetMessageOffset;

GenericInformationPopup.ConfirmClickedOffset = getRealOffset(0x5FF6E4);
GenericInformationPopup.ConfirmClicked = (void(*)(void*))GenericInformationPopup.ConfirmClickedOffset;

GenericInformationPopup.OnDisplayOffset = getRealOffset(0x5FF750);
GenericInformationPopup.OnDisplay = (void(*)(void*))GenericInformationPopup.OnDisplayOffset;

GenericInformationPopup.OnHideOffset = getRealOffset(0x5FF754);
GenericInformationPopup.OnHide = (void(*)(void*))GenericInformationPopup.OnHideOffset;

GenericInformationPopup.CloseOffset = getRealOffset(0x5FF710);
GenericInformationPopup.Close = (void(*)(void*))GenericInformationPopup.CloseOffset;

GenericMessagePopup.SetMessageOffset = getRealOffset(0x5FF760);
GenericMessagePopup.SetMessage = (void(*)(void*, monoString*, bool))GenericMessagePopup.SetMessageOffset;

GenericMessagePopup.HideMessageOnTapOffset = getRealOffset(0x5FF7C4);
GenericMessagePopup.HideMessageOnTap = (void *(*)(void*))GenericMessagePopup.HideMessageOnTapOffset;

GenericMessagePopup.OnDisplayOffset = getRealOffset(0x5FF864);
GenericMessagePopup.OnDisplay = (void(*)(void*))GenericMessagePopup.OnDisplayOffset;

GenericMessagePopup.OnHideOffset = getRealOffset(0x5FF868);
GenericMessagePopup.OnHide = (void(*)(void*))GenericMessagePopup.OnHideOffset;

HardcoreModePopup.OnDisplayOffset = getRealOffset(0x7F1868);
HardcoreModePopup.OnDisplay = (void(*)(void*))HardcoreModePopup.OnDisplayOffset;

HardcoreModePopup.OnHideOffset = getRealOffset(0x7F19CC);
HardcoreModePopup.OnHide = (void(*)(void*))HardcoreModePopup.OnHideOffset;

HardcoreModePopup.DisplayHardcoreOffset = getRealOffset(0x7F186C);
HardcoreModePopup.DisplayHardcore = (void(*)(void*))HardcoreModePopup.DisplayHardcoreOffset;

OfferwallPopUp.SetUpOffset = getRealOffset(0x54AA04);
OfferwallPopUp.SetUp = (void(*)(void*, void *))OfferwallPopUp.SetUpOffset;

OfferwallPopUp.SetUp1Offset = getRealOffset(0x54AA90);
OfferwallPopUp.SetUp1 = (void(*)(void*))OfferwallPopUp.SetUp1Offset;

OfferwallPopUp.SetWatchProgressOffset = getRealOffset(0x54AB84);
OfferwallPopUp.SetWatchProgress = (void(*)(void*, void *))OfferwallPopUp.SetWatchProgressOffset;

OfferwallPopUp.GetInfoLabelOffset = getRealOffset(0x54B408);
OfferwallPopUp.GetInfoLabel = (monoString *(*)(void*, void *))OfferwallPopUp.GetInfoLabelOffset;

OfferwallPopUp.GetValidDateOffset = getRealOffset(0x54B91C);
OfferwallPopUp.GetValidDate = (monoString *(*)(void*, void *))OfferwallPopUp.GetValidDateOffset;

OfferwallPopUp.DisplayWeaponInfoOffset = getRealOffset(0x54B698);
OfferwallPopUp.DisplayWeaponInfo = (void(*)(void*, void *))OfferwallPopUp.DisplayWeaponInfoOffset;

OfferwallPopUp.SetOpenGoldOffset = getRealOffset(0x54ADC0);
OfferwallPopUp.SetOpenGold = (void(*)(void*, void *))OfferwallPopUp.SetOpenGoldOffset;

OfferwallPopUp.SetOpenRewardOffset = getRealOffset(0x54B0E4);
OfferwallPopUp.SetOpenReward = (void(*)(void*, void *))OfferwallPopUp.SetOpenRewardOffset;

OfferwallPopUp.OnTryGetRewardOffset = getRealOffset(0x54BB40);
OfferwallPopUp.OnTryGetReward = (void(*)(void*))OfferwallPopUp.OnTryGetRewardOffset;

OfferwallPopUp.OnRewardSuccessOffset = getRealOffset(0x54BD10);
OfferwallPopUp.OnRewardSuccess = (void(*)(void*))OfferwallPopUp.OnRewardSuccessOffset;

OfferwallPopUp.OnRewardErrorOffset = getRealOffset(0x54BEC4);
OfferwallPopUp.OnRewardError = (void(*)(void*, monoString*))OfferwallPopUp.OnRewardErrorOffset;

OfferwallPopUp.OnDisplayOffset = getRealOffset(0x54C0EC);
OfferwallPopUp.OnDisplay = (void(*)(void*))OfferwallPopUp.OnDisplayOffset;

OfferwallPopUp.TweenToDesiredFillOffset = getRealOffset(0x54C110);
OfferwallPopUp.TweenToDesiredFill = (void *(*)(void*))OfferwallPopUp.TweenToDesiredFillOffset;

OfferwallPopUp.OnHideOffset = getRealOffset(0x54C1B0);
OfferwallPopUp.OnHide = (void(*)(void*))OfferwallPopUp.OnHideOffset;

OfferwallPopUp.OnDestroyOffset = getRealOffset(0x54C1B8);
OfferwallPopUp.OnDestroy = (void(*)(void*))OfferwallPopUp.OnDestroyOffset;

OfferWallRewardInfo.get_GoldEarnedOffset = getRealOffset(0x54A914);
OfferWallRewardInfo.get_GoldEarned = (int(*)(void*))OfferWallRewardInfo.get_GoldEarnedOffset;

OfferWallRewardInfo.get_GoldGoalOffset = getRealOffset(0x54A91C);
OfferWallRewardInfo.get_GoldGoal = (int(*)(void*))OfferWallRewardInfo.get_GoldGoalOffset;

OfferWallRewardInfo.get_WeaponCodeOffset = getRealOffset(0x54A924);
OfferWallRewardInfo.get_WeaponCode = (int(*)(void*))OfferWallRewardInfo.get_WeaponCodeOffset;

OfferWallRewardInfo.get_DuplicatedGoldOffset = getRealOffset(0x54A92C);
OfferWallRewardInfo.get_DuplicatedGold = (int(*)(void*))OfferWallRewardInfo.get_DuplicatedGoldOffset;

OfferWallRewardInfo.get_PercentageEarnedOffset = getRealOffset(0x54A934);
OfferWallRewardInfo.get_PercentageEarned = (float(*)(void*))OfferWallRewardInfo.get_PercentageEarnedOffset;

OfferWallRewardInfo.get_ExpirationDateOffset = getRealOffset(0x54A950);
OfferWallRewardInfo.get_IsGoldGoalCompletedOffset = getRealOffset(0x54A95C);
OfferWallRewardInfo.get_IsGoldGoalCompleted = (bool(*)(void*))OfferWallRewardInfo.get_IsGoldGoalCompletedOffset;

OfferWallRewardInfo.get_IsInfoOnlyOffset = getRealOffset(0x54A970);
OfferWallRewardInfo.get_IsInfoOnly = (bool(*)(void*))OfferWallRewardInfo.get_IsInfoOnlyOffset;

OverlayPopup.get_IsDisplayedOffset = getRealOffset(0x554C6C);
OverlayPopup.get_IsDisplayed = (bool(*)(void*))OverlayPopup.get_IsDisplayedOffset;

OverlayPopup.CloseOffset = getRealOffset(0x554C9C);
OverlayPopup.Close = (void(*)(void*))OverlayPopup.CloseOffset;

OverlayPopupsOrganizer.get_GetHardcoreModePopupOffset = getRealOffset(0x554F30);
OverlayPopupsOrganizer.get_GetHardcoreModePopup = (void *(*)(void*))OverlayPopupsOrganizer.get_GetHardcoreModePopupOffset;

OverlayPopupsOrganizer.get_SalesPopupOffset = getRealOffset(0x554F38);
OverlayPopupsOrganizer.get_SalesPopup = (void *(*)(void*))OverlayPopupsOrganizer.get_SalesPopupOffset;

OverlayPopupsOrganizer.get_AskRegionPopupOffset = getRealOffset(0x554F40);
OverlayPopupsOrganizer.get_AskRegionPopup = (void *(*)(void*))OverlayPopupsOrganizer.get_AskRegionPopupOffset;

OverlayPopupsOrganizer.AwakeOffset = getRealOffset(0x554F48);
OverlayPopupsOrganizer.Awake = (void(*)(void*))OverlayPopupsOrganizer.AwakeOffset;

OverlayPopupsOrganizer.DisplayPopupOffset = getRealOffset(0x554FF4);
OverlayPopupsOrganizer.DisplayPopup = (void(*)(void*, void *))OverlayPopupsOrganizer.DisplayPopupOffset;

OverlayPopupsOrganizer.HidePopupOffset = getRealOffset(0x554D4C);
OverlayPopupsOrganizer.HidePopup = (void(*)(void*, void *))OverlayPopupsOrganizer.HidePopupOffset;

OverlayPopupsOrganizer.GetOrganizerOffset = getRealOffset(0x554CCC);
OverlayPopupsOrganizer.GetOrganizer = (void *(*)())OverlayPopupsOrganizer.GetOrganizerOffset;

OverlayPopupsOrganizer.GetIconSpriteOffset = getRealOffset(0x5550A4);
OverlayPopupsOrganizer.GetIconSprite = (void *(*)(void*, int))OverlayPopupsOrganizer.GetIconSpriteOffset;

PleaseWaitPopup.OnDisplayOffset = getRealOffset(0x706C1C);
PleaseWaitPopup.OnDisplay = (void(*)(void*))PleaseWaitPopup.OnDisplayOffset;

PleaseWaitPopup.OnHideOffset = getRealOffset(0x706D7C);
PleaseWaitPopup.OnHide = (void(*)(void*))PleaseWaitPopup.OnHideOffset;

PopupAfterLogin2.OnDisplayOffset = getRealOffset(0x70DC64);
PopupAfterLogin2.OnDisplay = (void(*)(void*))PopupAfterLogin2.OnDisplayOffset;

PopupAfterLogin2.OnHideOffset = getRealOffset(0x70DDE4);
PopupAfterLogin2.OnHide = (void(*)(void*))PopupAfterLogin2.OnHideOffset;

PopupAfterLogin2.CloseOffset = getRealOffset(0x70DD78);
PopupAfterLogin2.Close = (void(*)(void*))PopupAfterLogin2.CloseOffset;

ReadyToOpenRewardPopup.SetConfirmActionOffset = getRealOffset(0x63A35C);
ReadyToOpenRewardPopup.SetConfirmAction = (void(*)(void*, void *))ReadyToOpenRewardPopup.SetConfirmActionOffset;

ReadyToOpenRewardPopup.ConfirmClickedOffset = getRealOffset(0x63A364);
ReadyToOpenRewardPopup.ConfirmClicked = (void(*)(void*))ReadyToOpenRewardPopup.ConfirmClickedOffset;

ReadyToOpenRewardPopup.OnDisplayOffset = getRealOffset(0x63A3D0);
ReadyToOpenRewardPopup.OnDisplay = (void(*)(void*))ReadyToOpenRewardPopup.OnDisplayOffset;

ReadyToOpenRewardPopup.OnHideOffset = getRealOffset(0x63A3D4);
ReadyToOpenRewardPopup.OnHide = (void(*)(void*))ReadyToOpenRewardPopup.OnHideOffset;

ReadyToOpenRewardPopup.CloseOffset = getRealOffset(0x63A390);
ReadyToOpenRewardPopup.Close = (void(*)(void*))ReadyToOpenRewardPopup.CloseOffset;

ReleaseMessagePopup.SetTextOffset = getRealOffset(0x63D2AC);
ReleaseMessagePopup.SetText = (void(*)(void*, monoString*))ReleaseMessagePopup.SetTextOffset;

ReleaseMessagePopup.OnDisplayOffset = getRealOffset(0x63D4DC);
ReleaseMessagePopup.OnDisplay = (void(*)(void*))ReleaseMessagePopup.OnDisplayOffset;

ReleaseMessagePopup.OnHideOffset = getRealOffset(0x63D580);
ReleaseMessagePopup.OnHide = (void(*)(void*))ReleaseMessagePopup.OnHideOffset;

ReleaseMessagePopup.InitReleaseMessageOffset = getRealOffset(0x63D500);
ReleaseMessagePopup.InitReleaseMessage = (void *(*)(void*))ReleaseMessagePopup.InitReleaseMessageOffset;

ReleaseMessagePopup.ReleaseNotesNecessaryOffset = getRealOffset(0x63D5A4);
ReleaseMessagePopup.ReleaseNotesNecessary = (bool(*)(void*))ReleaseMessagePopup.ReleaseNotesNecessaryOffset;

ReleaseMessagePopup.OnAcceptOffset = getRealOffset(0x63D66C);
ReleaseMessagePopup.OnAccept = (void(*)(void*))ReleaseMessagePopup.OnAcceptOffset;

ScrollableText.SetTextOffset = getRealOffset(0x6176C0);
ScrollableText.SetText = (void(*)(void*, monoString*))ScrollableText.SetTextOffset;

ScrollableText.ResetPositionOffset = getRealOffset(0x617A00);
ScrollableText.ResetPosition = (void *(*)(void*))ScrollableText.ResetPositionOffset;

SeasonRewardsEarnedPopup.SetUpOffset = getRealOffset(0x619560);
SeasonRewardsEarnedPopup.SetUp = (void(*)(void*, void *, int))SeasonRewardsEarnedPopup.SetUpOffset;

SeasonRewardsEarnedPopup.OnDisplayOffset = getRealOffset(0x619984);
SeasonRewardsEarnedPopup.OnDisplay = (void(*)(void*))SeasonRewardsEarnedPopup.OnDisplayOffset;

SeasonRewardsEarnedPopup.OnHideOffset = getRealOffset(0x619B74);
SeasonRewardsEarnedPopup.OnHide = (void(*)(void*))SeasonRewardsEarnedPopup.OnHideOffset;

SeasonRewardsEarnedPopup.FetchRewardsToOpenOffset = getRealOffset(0x6199E4);
SeasonRewardsEarnedPopup.FetchRewardsToOpen = (void(*)(void*))SeasonRewardsEarnedPopup.FetchRewardsToOpenOffset;

SeasonRewardsEarnedPopup.OnFetchRewardsSuccessOffset = getRealOffset(0x619B78);
SeasonRewardsEarnedPopup.OnFetchRewardsSuccess = (void(*)(void*))SeasonRewardsEarnedPopup.OnFetchRewardsSuccessOffset;

SeasonRewardsEarnedPopup.OnFetchRewardsFailedOffset = getRealOffset(0x619C94);
SeasonRewardsEarnedPopup.OnFetchRewardsFailed = (void(*)(void*, monoString*))SeasonRewardsEarnedPopup.OnFetchRewardsFailedOffset;

SeasonRewardsEarnedPopup.OnPressClaimOffset = getRealOffset(0x619E44);
SeasonRewardsEarnedPopup.OnPressClaim = (void(*)(void*))SeasonRewardsEarnedPopup.OnPressClaimOffset;

SpecialOfferPopup.get_OfferImageLoadedOffset = getRealOffset(0x57C768);
SpecialOfferPopup.get_OfferImageLoaded = (bool(*)(void*))SpecialOfferPopup.get_OfferImageLoadedOffset;

SpecialOfferPopup.set_OfferImageLoadedOffset = getRealOffset(0x57C770);
SpecialOfferPopup.set_OfferImageLoaded = (void(*)(void*, bool))SpecialOfferPopup.set_OfferImageLoadedOffset;

SpecialOfferPopup.OnDisplayOffset = getRealOffset(0x57C828);
SpecialOfferPopup.OnDisplay = (void(*)(void*))SpecialOfferPopup.OnDisplayOffset;

SpecialOfferPopup.OnChangeOfferVisibilityOffset = getRealOffset(0x57C778);
SpecialOfferPopup.OnChangeOfferVisibility = (void(*)(void*, bool))SpecialOfferPopup.OnChangeOfferVisibilityOffset;

SpecialOfferPopup.WaitIAPOffset = getRealOffset(0x57C90C);
SpecialOfferPopup.WaitIAP = (void *(*)(void*))SpecialOfferPopup.WaitIAPOffset;

SpecialOfferPopup.OnHideOffset = getRealOffset(0x57C9AC);
SpecialOfferPopup.OnHide = (void(*)(void*))SpecialOfferPopup.OnHideOffset;

SpecialOfferPopup.ShowNextPopUpOffset = getRealOffset(0x57CC54);
SpecialOfferPopup.ShowNextPopUp = (void(*)(void*))SpecialOfferPopup.ShowNextPopUpOffset;

SpecialOfferPopup.CloseOffset = getRealOffset(0x57C8C8);
SpecialOfferPopup.Close = (void(*)(void*))SpecialOfferPopup.CloseOffset;

SpecialOfferPopup.SetPopupsSeenOffset = getRealOffset(0x57CC48);
SpecialOfferPopup.SetPopupsSeen = (void(*)(void*))SpecialOfferPopup.SetPopupsSeenOffset;

SpecialOfferPopup.HavePopupsBeenSeenOffset = getRealOffset(0x57CD08);
SpecialOfferPopup.HavePopupsBeenSeen = (bool(*)(void*))SpecialOfferPopup.HavePopupsBeenSeenOffset;

SpecialOfferPopup.OnSceneLoadedOffset = getRealOffset(0x57CD10);
SpecialOfferPopup.OnSceneLoaded = (void(*)(void*, int, int))SpecialOfferPopup.OnSceneLoadedOffset;

SpecialOfferPopup.GetOfferOffset = getRealOffset(0x57CEB0);
SpecialOfferPopup.GetOffer = (void(*)(void*))SpecialOfferPopup.GetOfferOffset;

SpecialOfferPopup.OnGetOfferSucessOffset = getRealOffset(0x57D108);
SpecialOfferPopup.OnGetOfferSucess = (void(*)(void*, monoString*))SpecialOfferPopup.OnGetOfferSucessOffset;

SpecialOfferPopup.OnGetOfferErrorOffset = getRealOffset(0x57D318);
SpecialOfferPopup.OnGetOfferError = (void(*)(void*, monoString*))SpecialOfferPopup.OnGetOfferErrorOffset;

SpecialOfferPopup.getOfferImageOffset = getRealOffset(0x57D280);
SpecialOfferPopup.getOfferImage = (void *(*)(void*, monoString*))SpecialOfferPopup.getOfferImageOffset;

SpecialOfferPopup.LoadingPopupVisibilityOffset = getRealOffset(0x57CAC4);
SpecialOfferPopup.LoadingPopupVisibility = (void(*)(void*, bool))SpecialOfferPopup.LoadingPopupVisibilityOffset;

SpecialOfferPopup.OnPurchaseButtonPressedOffset = getRealOffset(0x57D344);
SpecialOfferPopup.OnPurchaseButtonPressed = (void(*)(void*))SpecialOfferPopup.OnPurchaseButtonPressedOffset;

Support_1_View.OnDisplayOffset = getRealOffset(0x589D08);
Support_1_View.OnDisplay = (void(*)(void*))Support_1_View.OnDisplayOffset;

Support_1_View.OnHideOffset = getRealOffset(0x58A144);
Support_1_View.OnHide = (void(*)(void*))Support_1_View.OnHideOffset;

Support_1_View.DisplayMessageOffset = getRealOffset(0x58A148);
Support_1_View.DisplayMessage = (void(*)(void*, monoString*, bool))Support_1_View.DisplayMessageOffset;

Support_1_View.HideMessageOnTapOffset = getRealOffset(0x58A208);
Support_1_View.HideMessageOnTap = (void *(*)(void*))Support_1_View.HideMessageOnTapOffset;

Support_1_View.HideMessageOffset = getRealOffset(0x58A2A8);
Support_1_View.HideMessage = (void(*)(void*))Support_1_View.HideMessageOffset;

Support_1_View.HideMessageImplOffset = getRealOffset(0x58A2CC);
Support_1_View.HideMessageImpl = (void *(*)(void*))Support_1_View.HideMessageImplOffset;

Support_1_View.SendLogsOffset = getRealOffset(0x58A36C);
Support_1_View.SendLogs = (void(*)(void*))Support_1_View.SendLogsOffset;

Support_1_View.GetLogsEmailOffset = getRealOffset(0x58A740);
Support_1_View.GetLogsEmail = (monoString *(*)(void*))Support_1_View.GetLogsEmailOffset;

Support_1_View.ToggleSendLogsOffset = getRealOffset(0x58A80C);
Support_1_View.ToggleSendLogs = (void(*)(void*, bool))Support_1_View.ToggleSendLogsOffset;

Support_1_View.OnCompleteOffset = getRealOffset(0x58A790);
Support_1_View.OnComplete = (void(*)(void*))Support_1_View.OnCompleteOffset;

Support_1_View.OnErrorOffset = getRealOffset(0x58A8C8);
Support_1_View.OnError = (void(*)(void*, monoString*))Support_1_View.OnErrorOffset;

Support_1_View.CancelOffset = getRealOffset(0x58A9D4);
Support_1_View.Cancel = (void(*)(void*))Support_1_View.CancelOffset;

Support_2_View.OnDisplayOffset = getRealOffset(0x58ACF8);
Support_2_View.OnDisplay = (void(*)(void*))Support_2_View.OnDisplayOffset;

Support_2_View.OnHideOffset = getRealOffset(0x58B0F8);
Support_2_View.OnHide = (void(*)(void*))Support_2_View.OnHideOffset;

Support_2_View.OpenSupportPageOffset = getRealOffset(0x58B0FC);
Support_2_View.OpenSupportPage = (void(*)(void*))Support_2_View.OpenSupportPageOffset;

Support_2_View.CancelOffset = getRealOffset(0x58B180);
Support_2_View.Cancel = (void(*)(void*))Support_2_View.CancelOffset;

TemporalNotification.OnEnableOffset = getRealOffset(0x5CA378);
TemporalNotification.OnEnable = (void(*)(void*))TemporalNotification.OnEnableOffset;

TemporalNotification.SetUpOffset = getRealOffset(0x5CA404);
TemporalNotification.SetUp = (void(*)(void*))TemporalNotification.SetUpOffset;

TemporalNotification.SetTimeOffset = getRealOffset(0x5CA474);
TemporalNotification.SetTime = (void(*)(void*, float))TemporalNotification.SetTimeOffset;

TemporalNotification.UpdateOffset = getRealOffset(0x5CA47C);
TemporalNotification.Update = (void(*)(void*))TemporalNotification.UpdateOffset;

TemporalNotification.TurnOffOffset = getRealOffset(0x5CA578);
TemporalNotification.TurnOff = (void(*)(void*))TemporalNotification.TurnOffOffset;

TemporalNotification.ForceTurnOffOffset = getRealOffset(0x5CA5E8);
TemporalNotification.ForceTurnOff = (void(*)(void*))TemporalNotification.ForceTurnOffOffset;

OpenTermsAndConditions.OnOpenTermsAndConditionsOffset = getRealOffset(0x553E0C);
OpenTermsAndConditions.OnOpenTermsAndConditions = (void(*)(void*))OpenTermsAndConditions.OnOpenTermsAndConditionsOffset;

TermsAndConditionsPopup.InitOffset = getRealOffset(0x5CA63C);
TermsAndConditionsPopup.Init = (void(*)(void*, monoString*, monoString*, int))TermsAndConditionsPopup.InitOffset;

TermsAndConditionsPopup.OnDisplayOffset = getRealOffset(0x5CAA0C);
TermsAndConditionsPopup.OnDisplay = (void(*)(void*))TermsAndConditionsPopup.OnDisplayOffset;

TermsAndConditionsPopup.OnHideOffset = getRealOffset(0x5CAA10);
TermsAndConditionsPopup.OnHide = (void(*)(void*))TermsAndConditionsPopup.OnHideOffset;

TermsAndConditionsPopup.OnLinkPressedOffset = getRealOffset(0x5CAA14);
TermsAndConditionsPopup.OnLinkPressed = (void(*)(void*))TermsAndConditionsPopup.OnLinkPressedOffset;

TermsAndConditionsPopup.OnAcceptOffset = getRealOffset(0x5CAAA8);
TermsAndConditionsPopup.OnAccept = (void(*)(void*))TermsAndConditionsPopup.OnAcceptOffset;

TermsAndConditionsPopup.PerformAcceptProcessOffset = getRealOffset(0x5CAACC);
TermsAndConditionsPopup.PerformAcceptProcess = (void *(*)(void*))TermsAndConditionsPopup.PerformAcceptProcessOffset;

UniWebTest.StartOffset = getRealOffset(0x5E2354);
UniWebTest.Start = (void(*)(void*))UniWebTest.StartOffset;

UniWebTest.DisplayOffset = getRealOffset(0x5E23B8);
UniWebTest.Display = (void(*)(void*))UniWebTest.DisplayOffset;

WaitingForSpecialOffers.OnDisplayOffset = getRealOffset(0x8A85FC);
WaitingForSpecialOffers.OnDisplay = (void(*)(void*))WaitingForSpecialOffers.OnDisplayOffset;

WaitingForSpecialOffers.OnHideOffset = getRealOffset(0x8A8600);
WaitingForSpecialOffers.OnHide = (void(*)(void*))WaitingForSpecialOffers.OnHideOffset;

PNetworkManager.get_PingTimesOffset = getRealOffset(0x5551F4);
PNetworkManager.AwakeOffset = getRealOffset(0x5551FC);
PNetworkManager.Awake = (void(*)(void*))PNetworkManager.AwakeOffset;

PNetworkManager.SetServerIDsOffset = getRealOffset(0x555560);
PNetworkManager.SetServerIDs = (void(*)(void*))PNetworkManager.SetServerIDsOffset;

PNetworkManager.ReconnectOffset = getRealOffset(0x555710);
PNetworkManager.Reconnect = (void(*)(void*))PNetworkManager.ReconnectOffset;

PNetworkManager.StartOffset = getRealOffset(0x555794);
PNetworkManager.Start = (void(*)(void*))PNetworkManager.StartOffset;

PNetworkManager.GetBestServerAndConnectOffset = getRealOffset(0x555890);
PNetworkManager.GetBestServerAndConnect = (void(*)(void*))PNetworkManager.GetBestServerAndConnectOffset;

PNetworkManager.OnDisconnectedFromPhotonOffset = getRealOffset(0x555934);
PNetworkManager.OnDisconnectedFromPhoton = (void(*)(void*))PNetworkManager.OnDisconnectedFromPhotonOffset;

PNetworkManager.ConnectOffset = getRealOffset(0x5559F0);
PNetworkManager.Connect = (void(*)(void*))PNetworkManager.ConnectOffset;

PNetworkManager.CR_GetBestServerOffset = getRealOffset(0x5558B4);
PNetworkManager.CR_GetBestServer = (void *(*)(void*))PNetworkManager.CR_GetBestServerOffset;

PNetworkManager.RedirectDeactivatedRegionOffset = getRealOffset(0x555E54);
PNetworkManager.RedirectDeactivatedRegion = (void(*)(void*))PNetworkManager.RedirectDeactivatedRegionOffset;

PNetworkManager.retryConnectOffset = getRealOffset(0x556014);
PNetworkManager.retryConnect = (void(*)(void*))PNetworkManager.retryConnectOffset;

PNetworkManager.JoinLobbyRoomOffset = getRealOffset(0x556024);
PNetworkManager.JoinLobbyRoom = (void(*)(void*))PNetworkManager.JoinLobbyRoomOffset;

PNetworkManager.GetRoomListOffset = getRealOffset(0x556028);
PNetworkManager.JoinRoomOffset = getRealOffset(0x5566A0);
PNetworkManager.JoinRoom = (void(*)(void*, monoString*, monoString*))PNetworkManager.JoinRoomOffset;

PNetworkManager.ActualCreateRoomOffset = getRealOffset(0x55691C);
PNetworkManager.ActualCreateRoom = (void(*)(void*, int, monoString*, monoString*, bool, bool))PNetworkManager.ActualCreateRoomOffset;

PNetworkManager.OnConnectedToMasterOffset = getRealOffset(0x557F58);
PNetworkManager.OnConnectedToMaster = (void(*)(void*))PNetworkManager.OnConnectedToMasterOffset;

PNetworkManager.OnJoinedLobbyOffset = getRealOffset(0x557F5C);
PNetworkManager.OnJoinedLobby = (void(*)(void*))PNetworkManager.OnJoinedLobbyOffset;

PNetworkManager.OnFailedToConnectToPhotonOffset = getRealOffset(0x5581F0);
PNetworkManager.OnFailedToConnectToPhoton = (void(*)(void*, int))PNetworkManager.OnFailedToConnectToPhotonOffset;

PNetworkManager.OnPhotonJoinRoomFailedOffset = getRealOffset(0x558374);
PNetworkManager.OnPhotonJoinRoomFailed = (void(*)(void*))PNetworkManager.OnPhotonJoinRoomFailedOffset;

PNetworkManager.OnPhotonRandomJoinFailedOffset = getRealOffset(0x5585C0);
PNetworkManager.OnPhotonRandomJoinFailed = (void(*)(void*))PNetworkManager.OnPhotonRandomJoinFailedOffset;

PNetworkManager.OnJoinedRoomOffset = getRealOffset(0x558644);
PNetworkManager.OnJoinedRoom = (void(*)(void*))PNetworkManager.OnJoinedRoomOffset;

PNetworkManager.LoadLevelOffset = getRealOffset(0x558F98);
PNetworkManager.LoadLevel = (void *(*)(void*, float, monoString*))PNetworkManager.LoadLevelOffset;

PNetworkManager.OnLeftRoomOffset = getRealOffset(0x55905C);
PNetworkManager.OnLeftRoom = (void(*)(void*))PNetworkManager.OnLeftRoomOffset;

PNetworkManager.OnLevelWasLoadedOffset = getRealOffset(0x5591BC);
PNetworkManager.OnLevelWasLoaded = (void(*)(void*, int))PNetworkManager.OnLevelWasLoadedOffset;

PNetworkManager.ResetTimeMatchStartedOffset = getRealOffset(0x5599F4);
PNetworkManager.ResetTimeMatchStarted = (void(*)(void*))PNetworkManager.ResetTimeMatchStartedOffset;

PNetworkManager.SpawnPlayerOffset = getRealOffset(0x559BF0);
PNetworkManager.SpawnPlayer = (void(*)(void*))PNetworkManager.SpawnPlayerOffset;

PNetworkManager.OnDestroyOffset = getRealOffset(0x559DF4);
PNetworkManager.OnDestroy = (void(*)(void*))PNetworkManager.OnDestroyOffset;

ParticleSystemDecayScript.AwakeOffset = getRealOffset(0x55B57C);
ParticleSystemDecayScript.Awake = (void(*)(void*))ParticleSystemDecayScript.AwakeOffset;

ParticleSystemDecayScript.StartOffset = getRealOffset(0x55B5DC);
ParticleSystemDecayScript.Start = (void(*)(void*))ParticleSystemDecayScript.StartOffset;

ParticleSystemDecayScript.OnEnableOffset = getRealOffset(0x55B6BC);
ParticleSystemDecayScript.OnEnable = (void(*)(void*))ParticleSystemDecayScript.OnEnableOffset;

ParticleSystemDecayScript.removeOffset = getRealOffset(0x55B978);
ParticleSystemDecayScript.remove = (void(*)(void*))ParticleSystemDecayScript.removeOffset;

ChatButtonToggle.AwakeOffset = getRealOffset(0x7814D4);
ChatButtonToggle.Awake = (void(*)(void*))ChatButtonToggle.AwakeOffset;

ChatButtonToggle.SetEnabledOffset = getRealOffset(0x781564);
ChatButtonToggle.SetEnabled = (void(*)(void*, bool))ChatButtonToggle.SetEnabledOffset;

ChatButtonToggle.IsEnabledOffset = getRealOffset(0x780EE0);
ChatButtonToggle.IsEnabled = (bool(*)())ChatButtonToggle.IsEnabledOffset;

CrouchButtonToggle.AwakeOffset = getRealOffset(0x8270DC);
CrouchButtonToggle.Awake = (void(*)(void*))CrouchButtonToggle.AwakeOffset;

CrouchButtonToggle.SetEnabledOffset = getRealOffset(0x82716C);
CrouchButtonToggle.SetEnabled = (void(*)(void*, bool))CrouchButtonToggle.SetEnabledOffset;

CrouchButtonToggle.IsEnabledOffset = getRealOffset(0x8271F0);
CrouchButtonToggle.IsEnabled = (bool(*)())CrouchButtonToggle.IsEnabledOffset;

PauseOptions.AwakeOffset = getRealOffset(0x55BD08);
PauseOptions.Awake = (void(*)(void*))PauseOptions.AwakeOffset;

PauseOptions.StartOffset = getRealOffset(0x55BD80);
PauseOptions.Start = (void(*)(void*))PauseOptions.StartOffset;

PauseOptions.LoadHUDSlotToggleOffset = getRealOffset(0x55C22C);
PauseOptions.LoadHUDSlotToggle = (void(*)(void*, int))PauseOptions.LoadHUDSlotToggleOffset;

PauseOptions.SetVolumeOffset = getRealOffset(0x55C108);
PauseOptions.SetVolume = (void(*)(void*, float))PauseOptions.SetVolumeOffset;

PauseOptions.SetScreenScaleOffset = getRealOffset(0x55BFFC);
PauseOptions.SetScreenScale = (void(*)(void*, float))PauseOptions.SetScreenScaleOffset;

PauseOptions.OnDestroyOffset = getRealOffset(0x55C2EC);
PauseOptions.OnDestroy = (void(*)(void*))PauseOptions.OnDestroyOffset;

PauseScript.AwakeOffset = getRealOffset(0x55C3A0);
PauseScript.Awake = (void(*)(void*))PauseScript.AwakeOffset;

PauseScript.StartOffset = getRealOffset(0x55C408);
PauseScript.Start = (void(*)(void*))PauseScript.StartOffset;

PauseScript.ApplyScreenScaleOffset = getRealOffset(0x55C52C);
PauseScript.ApplyScreenScale = (void(*)(void*))PauseScript.ApplyScreenScaleOffset;

PauseScript.togglePauseOffset = getRealOffset(0x55C730);
PauseScript.togglePause = (void(*)(void*, bool))PauseScript.togglePauseOffset;

PauseScript.ResumeOffset = getRealOffset(0x55D488);
PauseScript.Resume = (void(*)(void*))PauseScript.ResumeOffset;

PauseScript.OnPointerUpOffset = getRealOffset(0x55D51C);
PauseScript.OnPointerUp = (void(*)(void*, void *))PauseScript.OnPointerUpOffset;

PauseScript.OnDestroyOffset = getRealOffset(0x55D5DC);
PauseScript.OnDestroy = (void(*)(void*))PauseScript.OnDestroyOffset;

PerkManager.AwakeOffset = getRealOffset(0x55E0B4);
PerkManager.Awake = (void(*)(void*))PerkManager.AwakeOffset;

PerkManager.FillPerkStatsOffset = getRealOffset(0x55E1BC);
PerkManager.FillPerkStats = (void(*)(void*))PerkManager.FillPerkStatsOffset;

PerkManager.StartOffset = getRealOffset(0x5613A4);
PerkManager.Start = (void(*)(void*))PerkManager.StartOffset;

PerkManager.SetActiveLoadoutOffset = getRealOffset(0x562AAC);
PerkManager.SetActiveLoadout = (void(*)(void*, int))PerkManager.SetActiveLoadoutOffset;

PerkManager.PopulatePerkSpriteDictionaryOffset = getRealOffset(0x55E538);
PerkManager.PopulatePerkSpriteDictionary = (void(*)(void*))PerkManager.PopulatePerkSpriteDictionaryOffset;

PerkManager.PopulatePerkUIItemsOffset = getRealOffset(0x561600);
PerkManager.PopulatePerkUIItems = (void(*)(void*))PerkManager.PopulatePerkUIItemsOffset;

PerkManager.LoadPerksOffset = getRealOffset(0x561B04);
PerkManager.LoadPerks = (void(*)(void*))PerkManager.LoadPerksOffset;

PerkManager.SaveAllPerksOffset = getRealOffset(0x562E5C);
PerkManager.SaveAllPerks = (void(*)(void*))PerkManager.SaveAllPerksOffset;

PerkManager.UsePerkOffset = getRealOffset(0x5630A8);
PerkManager.UsePerk = (void(*)(void*))PerkManager.UsePerkOffset;

PerkManager.StopUsingPerkOffset = getRealOffset(0x5632B8);
PerkManager.StopUsingPerk = (void(*)(void*))PerkManager.StopUsingPerkOffset;

PerkManager.GetPointsUsedOffset = getRealOffset(0x5631D0);
PerkManager.GetPointsUsed = (int(*)(void*))PerkManager.GetPointsUsedOffset;

PerkManager.RefreshPointsUsedOffset = getRealOffset(0x561C30);
PerkManager.RefreshPointsUsed = (void(*)(void*))PerkManager.RefreshPointsUsedOffset;

PerkManager.GetPerkStatsOffset = getRealOffset(0x55E8D8);
PerkManager.GetPerkStats = (int (*)(void*, int))PerkManager.GetPerkStatsOffset;

PerkManager.RefreshPerkUIItemColorsOffset = getRealOffset(0x561E34);
PerkManager.RefreshPerkUIItemColors = (void(*)(void*))PerkManager.RefreshPerkUIItemColorsOffset;

PerkManager.ShowPerkDescriptionOffset = getRealOffset(0x5621E8);
PerkManager.ShowPerkDescription = (void(*)(void*, int))PerkManager.ShowPerkDescriptionOffset;

PerkManager.OnDestroyOffset = getRealOffset(0x563630);
PerkManager.OnDestroy = (void(*)(void*))PerkManager.OnDestroyOffset;

PerkUIItem.SetPerkTypeOffset = getRealOffset(0x562C6C);
PerkUIItem.SetPerkType = (void(*)(void*, int))PerkUIItem.SetPerkTypeOffset;

PerkUIItem.ConfigurePerkInfoOffset = getRealOffset(0x563768);
PerkUIItem.ConfigurePerkInfo = (void(*)(void*, int))PerkUIItem.ConfigurePerkInfoOffset;

PerkUIItem.ConfigurePerkLockOffset = getRealOffset(0x5637E8);
PerkUIItem.ConfigurePerkLock = (void(*)(void*, bool))PerkUIItem.ConfigurePerkLockOffset;

PerkUIItem.SetPerkLockedOffset = getRealOffset(0x5637F8);
PerkUIItem.SetPerkLocked = (void(*)(void*))PerkUIItem.SetPerkLockedOffset;

PerkUIItem.SetPerkUnlockedOffset = getRealOffset(0x563894);
PerkUIItem.SetPerkUnlocked = (void(*)(void*))PerkUIItem.SetPerkUnlockedOffset;

PerkUIItem.SetPerkSelectedOffset = getRealOffset(0x5635D4);
PerkUIItem.SetPerkSelected = (void(*)(void*))PerkUIItem.SetPerkSelectedOffset;

PerkUIItem.SetPerkDeselectedOffset = getRealOffset(0x563388);
PerkUIItem.SetPerkDeselected = (void(*)(void*))PerkUIItem.SetPerkDeselectedOffset;

PerkUIItem.SetPerkEquipedOffset = getRealOffset(0x56352C);
PerkUIItem.SetPerkEquiped = (void(*)(void*))PerkUIItem.SetPerkEquipedOffset;

PerkUIItem.SetPerkUnequipedOffset = getRealOffset(0x56344C);
PerkUIItem.SetPerkUnequiped = (void(*)(void*))PerkUIItem.SetPerkUnequipedOffset;

PerkUIItem.ShowPerkDescriptionOffset = getRealOffset(0x563930);
PerkUIItem.ShowPerkDescription = (void(*)(void*))PerkUIItem.ShowPerkDescriptionOffset;

Perk_Base.IsAvailableOffset = getRealOffset(0x563B30);
Perk_Base.IsAvailable = (bool(*)(void*))Perk_Base.IsAvailableOffset;

Perk_InvisibleNametag.UseIfAvailableOffset = getRealOffset(0x564AD0);
Perk_InvisibleNametag.UseIfAvailable = (void(*)(void*, void *))Perk_InvisibleNametag.UseIfAvailableOffset;

Perk_LastLaugh.UseIfAvailableOffset = getRealOffset(0x564CBC);
Perk_LastLaugh.UseIfAvailable = (void(*)(void*, void *))Perk_LastLaugh.UseIfAvailableOffset;

PerksHandler.GetPerksOffset = getRealOffset(0x565FE0);
PerksHandler.SetNewPerks1Offset = getRealOffset(0x5662FC);
PerksHandler.SetNewPerks1 = (void(*)(void*, int))PerksHandler.SetNewPerks1Offset;

PerksHandler.HasPerkOffset = getRealOffset(0x563B5C);
PerksHandler.HasPerk = (bool(*)(void*, int))PerksHandler.HasPerkOffset;

PerksHandler.GetPerkControllerOffset = getRealOffset(0x566318);
PerksHandler.GetPerkController = (void *(*)(void*, int))PerksHandler.GetPerkControllerOffset;

PickUpWeapon.AwakeOffset = getRealOffset(0x7E6AAC);
PickUpWeapon.Awake = (void(*)(void*))PickUpWeapon.AwakeOffset;

PickUpWeapon.AddGunScriptOffset = getRealOffset(0x7E6BC0);
PickUpWeapon.AddGunScript = (void(*)(void*, void *))PickUpWeapon.AddGunScriptOffset;

PickUpWeapon.RemoveGunScriptOffset = getRealOffset(0x7E6C34);
PickUpWeapon.RemoveGunScript = (void(*)(void*, void *))PickUpWeapon.RemoveGunScriptOffset;

PickUpWeapon.StartOffset = getRealOffset(0x7E6CA8);
PickUpWeapon.Start = (void(*)(void*))PickUpWeapon.StartOffset;

PickUpWeapon.setWeaponTypeOffset = getRealOffset(0x7E7090);
PickUpWeapon.setWeaponType = (void(*)(void*, int))PickUpWeapon.setWeaponTypeOffset;

PickUpWeapon.showOffset = getRealOffset(0x7E6DF4);
PickUpWeapon.show = (void(*)(void*, bool))PickUpWeapon.showOffset;

PickUpWeapon.PickUpGunOffset = getRealOffset(0x7E71A8);
PickUpWeapon.PickUpGun = (void(*)(void*))PickUpWeapon.PickUpGunOffset;

PickUpWeapon.OnPointerUpOffset = getRealOffset(0x7E758C);
PickUpWeapon.OnPointerUp = (void(*)(void*, void *))PickUpWeapon.OnPointerUpOffset;

PickUpWeapon.StopPressingOffset = getRealOffset(0x7E764C);
PickUpWeapon.StopPressing = (void(*)(void*))PickUpWeapon.StopPressingOffset;

PickUpWeapon.FindClosestGunScriptOffset = getRealOffset(0x7E7660);
PickUpWeapon.FindClosestGunScript = (void(*)(void*))PickUpWeapon.FindClosestGunScriptOffset;

PickUpWeapon.OnDestroyOffset = getRealOffset(0x7E79E4);
PickUpWeapon.OnDestroy = (void(*)(void*))PickUpWeapon.OnDestroyOffset;

PickUpWeapon.UpdateFastOffset = getRealOffset(0x7E7BA8);
PickUpWeapon.UpdateFast = (void(*)(void*))PickUpWeapon.UpdateFastOffset;

PingDisplay.OnEnableOffset = getRealOffset(0x7EADEC);
PingDisplay.OnEnable = (void(*)(void*))PingDisplay.OnEnableOffset;

PingDisplay.ShowPingOffset = getRealOffset(0x7EADF0);
PingDisplay.ShowPing = (void(*)(void*))PingDisplay.ShowPingOffset;

PingDisplay.DisplaySelectedOffset = getRealOffset(0x7EB4B8);
PingDisplay.DisplaySelected = (void(*)(void*))PingDisplay.DisplaySelectedOffset;

PingDisplay.ShowNameOnlyOffset = getRealOffset(0x7EB580);
PingDisplay.ShowNameOnly = (void(*)(void*))PingDisplay.ShowNameOnlyOffset;

PingDisplay.OnClickOffset = getRealOffset(0x7EB61C);
PingDisplay.OnClick = (void(*)(void*))PingDisplay.OnClickOffset;

PlatformAddCameraEffects.StartOffset = getRealOffset(0x4BBC88);
PlatformAddCameraEffects.Start = (void(*)(void*))PlatformAddCameraEffects.StartOffset;

PlatformDependentChangeTextForLanguage.AwakeOffset = getRealOffset(0x4BBF10);
PlatformDependentChangeTextForLanguage.Awake = (void(*)(void*))PlatformDependentChangeTextForLanguage.AwakeOffset;

PlatformDependentChangeTextForLanguage.GetPlatformStringPairOffset = getRealOffset(0x4BBFD4);
PlatformDependentChangeTextForLanguage.GetPlatformStringPair = (void *(*)(void*))PlatformDependentChangeTextForLanguage.GetPlatformStringPairOffset;

PlatformDependentEnabling.OnEnableOffset = getRealOffset(0x4BC0B4);
PlatformDependentEnabling.OnEnable = (void(*)(void*))PlatformDependentEnabling.OnEnableOffset;

PlatformDependentMaterial.StartOffset = getRealOffset(0x4BC1A8);
PlatformDependentMaterial.Start = (void(*)(void*))PlatformDependentMaterial.StartOffset;

PlatformDependentShader.AwakeOffset = getRealOffset(0x4BC518);
PlatformDependentShader.Awake = (void(*)(void*))PlatformDependentShader.AwakeOffset;

PlatformDependentShader.ApplyShaderOffset = getRealOffset(0x4BC528);
PlatformDependentShader.ApplyShader = (void(*)(void*))PlatformDependentShader.ApplyShaderOffset;

PlatformDependentShader.StartOffset = getRealOffset(0x4BC840);
PlatformDependentShader.Start = (void(*)(void*))PlatformDependentShader.StartOffset;

PlatformMaterial.StartOffset = getRealOffset(0x4BC858);
PlatformMaterial.Start = (void(*)(void*))PlatformMaterial.StartOffset;

PlayFullVersion.StartOffset = getRealOffset(0x4BC920);
PlayFullVersion.Start = (void(*)(void*))PlayFullVersion.StartOffset;

PlayFullVersion.OnPointerUpOffset = getRealOffset(0x4BC9E0);
PlayFullVersion.OnPointerUp = (void(*)(void*, void *))PlayFullVersion.OnPointerUpOffset;

PlaySoundWhenShot.AwakeOffset = getRealOffset(0x4BCA54);
PlaySoundWhenShot.Awake = (void(*)(void*))PlaySoundWhenShot.AwakeOffset;

PlaySoundWhenShot.GetHitOffset = getRealOffset(0x4BCAB4);
PlaySoundWhenShot.GetHit = (void(*)(void*))PlaySoundWhenShot.GetHitOffset;

PlayerAntiHack.AwakeOffset = getRealOffset(0x4BCAE4);
PlayerAntiHack.Awake = (void(*)(void*))PlayerAntiHack.AwakeOffset;

PlayerAntiHack.IsWeaponUnlockedOffset = getRealOffset(0x4BCCA0);
PlayerAntiHack.IsWeaponUnlocked = (bool(*)(void*, int, int))PlayerAntiHack.IsWeaponUnlockedOffset;

PlayerAntiHack.PlayerNameUpdatedOffset = getRealOffset(0x4BCE9C);
PlayerAntiHack.PlayerNameUpdated = (void(*)(void*, void *))PlayerAntiHack.PlayerNameUpdatedOffset;

PlayerAntiHack.GetUnlockedWeaponsOffset = getRealOffset(0x4BCF74);
PlayerAntiHack.GetUnlockedWeapons = (void *(*)(void*, monoString*, int))PlayerAntiHack.GetUnlockedWeaponsOffset;

PlayerAntiHack.IsInsideOffset = getRealOffset(0x4BD37C);
PlayerAntiHack.IsInside = (bool(*)(void*, void *, Vector3))PlayerAntiHack.IsInsideOffset;

PlayerAntiHack.IsInsideNoZoneOffset = getRealOffset(0x4BD568);
PlayerAntiHack.IsInsideNoZone = (bool(*)(void*, void *, Vector3))PlayerAntiHack.IsInsideNoZoneOffset;

PlayerAntiHack.CheckForOutOfBoundsOffset = getRealOffset(0x4BD664);
PlayerAntiHack.CheckForOutOfBounds = (void(*)(void*))PlayerAntiHack.CheckForOutOfBoundsOffset;

PlayerAntiHack.UpdateOffset = getRealOffset(0x4BDA5C);
PlayerAntiHack.Update = (void(*)(void*))PlayerAntiHack.UpdateOffset;

PlayerFootSensorScript.onTriggerEnterOffset = getRealOffset(0x4BE4F8);
PlayerFootSensorScript.onTriggerEnter = (void(*)(void*, void *))PlayerFootSensorScript.onTriggerEnterOffset;

LoadoutsPrefsHelper.GetLoadoutIntValueOffset = getRealOffset(0x6E3584);
LoadoutsPrefsHelper.GetLoadoutIntValue = (int(*)(monoString*, monoString*))LoadoutsPrefsHelper.GetLoadoutIntValueOffset;

LoadoutsPrefsHelper.SetLoadoutIntValueOffset = getRealOffset(0x6E3658);
LoadoutsPrefsHelper.SetLoadoutIntValue = (void(*)(monoString*, int, monoString*))LoadoutsPrefsHelper.SetLoadoutIntValueOffset;

LoadoutsPrefsHelper.SetPlayerIDOffset = getRealOffset(0x6F46F0);
LoadoutsPrefsHelper.SetPlayerID = (void(*)(monoString*))LoadoutsPrefsHelper.SetPlayerIDOffset;

LoadoutsPrefsHelper.MigratePrefsOffset = getRealOffset(0x6F47E8);
LoadoutsPrefsHelper.MigratePrefs = (void(*)(monoString*, monoString*))LoadoutsPrefsHelper.MigratePrefsOffset;

PlayerScript.get_LastKillerIDOffset = getRealOffset(0x4BECC8);
PlayerScript.get_LastKillerID = (int(*)(void*))PlayerScript.get_LastKillerIDOffset;

PlayerScript.get_rawUsernameOffset = getRealOffset(0x4BECD0);
PlayerScript.get_rawUsername = (monoString *(*)(void*))PlayerScript.get_rawUsernameOffset;

PlayerScript.set_rawUsernameOffset = getRealOffset(0x4BECD8);
PlayerScript.set_rawUsername = (void(*)(void*, monoString*))PlayerScript.set_rawUsernameOffset;

PlayerScript.EncodeRawUserNameOffset = getRealOffset(0x4BECE0);
PlayerScript.EncodeRawUserName = (void(*)(void*, monoString*))PlayerScript.EncodeRawUserNameOffset;

PlayerScript.DecodeRawUserNameOffset = getRealOffset(0x4BEE9C);
PlayerScript.DecodeRawUserName = (monoString *(*)(void*))PlayerScript.DecodeRawUserNameOffset;

PlayerScript.set_PerksHandlerOffset = getRealOffset(0x4BEFD4);
PlayerScript.set_PerksHandler = (void(*)(void*, void *))PlayerScript.set_PerksHandlerOffset;

PlayerScript.get_PerksHandlerOffset = getRealOffset(0x4BEFDC);
PlayerScript.get_PerksHandler = (void *(*)(void*))PlayerScript.get_PerksHandlerOffset;

PlayerScript.AwakeOffset = getRealOffset(0x4BEFE4);
PlayerScript.Awake = (void(*)(void*))PlayerScript.AwakeOffset;

PlayerScript.LoadPerksOffset = getRealOffset(0x4BFDEC);
PlayerScript.LoadPerks = (void(*)(void*))PlayerScript.LoadPerksOffset;

PlayerScript.PushPerksToPlayerPropertiesOffset = getRealOffset(0x4BFF38);
PlayerScript.PushPerksToPlayerProperties = (void(*)(void*))PlayerScript.PushPerksToPlayerPropertiesOffset;

PlayerScript.GetBestSpawnPointOffset = getRealOffset(0x4C00F8);
PlayerScript.GetBestSpawnPoint = (void(*)(void*))PlayerScript.GetBestSpawnPointOffset;

PlayerScript.CheckForMatchCountdownBeginOffset = getRealOffset(0x4C0290);
PlayerScript.CheckForMatchCountdownBegin = (void(*)(void*))PlayerScript.CheckForMatchCountdownBeginOffset;

PlayerScript.OnPhotonInstantiateOffset = getRealOffset(0x4C0618);
PlayerScript.OnPhotonInstantiate = (void(*)(void*, int))PlayerScript.OnPhotonInstantiateOffset;

PlayerScript.RpcForceKillstreakOffset = getRealOffset(0x4C2A24);
PlayerScript.RpcForceKillstreak = (void(*)(void*, int, bool))PlayerScript.RpcForceKillstreakOffset;

PlayerScript.UseKillstreakOffset = getRealOffset(0x4C2AB0);
PlayerScript.UseKillstreak = (void(*)(void*, int))PlayerScript.UseKillstreakOffset;

PlayerScript.NukeOffset = getRealOffset(0x4C2CBC);
PlayerScript.Nuke = (void(*)(void*))PlayerScript.NukeOffset;

PlayerScript.NukeKillOffset = getRealOffset(0x4C39F4);
PlayerScript.NukeKill = (void(*)(void*, int))PlayerScript.NukeKillOffset;

PlayerScript.EndKillstreakOnLocalPlayerOffset = getRealOffset(0x4C3EB0);
PlayerScript.EndKillstreakOnLocalPlayer = (void(*)(void*))PlayerScript.EndKillstreakOnLocalPlayerOffset;

PlayerScript.OnPhotonPlayerDisconnectedOffset = getRealOffset(0x4C4290);
PlayerScript.OnPhotonPlayerDisconnected = (void(*)(void*, void *))PlayerScript.OnPhotonPlayerDisconnectedOffset;

PlayerScript.EnforceGunStatsOffset = getRealOffset(0x4C4EF8);
PlayerScript.EnforceGunStats = (void *(*)(void*))PlayerScript.EnforceGunStatsOffset;

PlayerScript.PunishCheatersOffset = getRealOffset(0x4C4F74);
PlayerScript.PunishCheaters = (void(*)(void*))PlayerScript.PunishCheatersOffset;

PlayerScript.PunishCheatersImplOffset = getRealOffset(0x4C4F98);
PlayerScript.PunishCheatersImpl = (void *(*)(void*))PlayerScript.PunishCheatersImplOffset;

PlayerScript.cycleWeaponOffset = getRealOffset(0x4C5000);
PlayerScript.cycleWeapon = (int (*)(void*))PlayerScript.cycleWeaponOffset;

PlayerScript.findNextAvailableWeaponOffset = getRealOffset(0x4C509C);
PlayerScript.findNextAvailableWeapon = (int(*)(void*, int))PlayerScript.findNextAvailableWeaponOffset;

PlayerScript.addAmmoOffset = getRealOffset(0x4C59CC);
PlayerScript.addAmmo = (bool(*)(void*, int, int))PlayerScript.addAmmoOffset;

PlayerScript.addAmmoToClipOffset = getRealOffset(0x4C5C54);
PlayerScript.addAmmoToClip = (bool(*)(void*, int, int))PlayerScript.addAmmoToClipOffset;

PlayerScript.findWeaponWithTypeOffset = getRealOffset(0x4C5A60);
PlayerScript.findWeaponWithType = (int(*)(void*, int))PlayerScript.findWeaponWithTypeOffset;

PlayerScript.GetRandomSightForGunOffset = getRealOffset(0x4C6368);
PlayerScript.GetRandomSightForGun = (int (*)(void*, int))PlayerScript.GetRandomSightForGunOffset;

PlayerScript.SetRandomGunAttachmentsOffset = getRealOffset(0x4C64B8);
PlayerScript.SetRandomGunAttachments = (void(*)(void*, int))PlayerScript.SetRandomGunAttachmentsOffset;

PlayerScript.SetGunAccessoryOffset = getRealOffset(0x4C69EC);
PlayerScript.SetGunAccessory = (void(*)(void*, int, int))PlayerScript.SetGunAccessoryOffset;

PlayerScript.SetGunCamoOffset = getRealOffset(0x4C6C00);
PlayerScript.SetGunCamo = (void(*)(void*, int, int))PlayerScript.SetGunCamoOffset;

PlayerScript.SetGunBarrelOffset = getRealOffset(0x4C6EC8);
PlayerScript.SetGunBarrel = (void(*)(void*, int, int))PlayerScript.SetGunBarrelOffset;

PlayerScript.SetGunSightOffset = getRealOffset(0x4C70BC);
PlayerScript.SetGunSight = (void(*)(void*, int, int))PlayerScript.SetGunSightOffset;

PlayerScript.setWeaponAvailableOffset = getRealOffset(0x4C74B8);
PlayerScript.setWeaponAvailable = (void *(*)(void*, int))PlayerScript.setWeaponAvailableOffset;

PlayerScript.DropGunOffset = getRealOffset(0x4C7894);
PlayerScript.DropGun = (void *(*)(void*, int))PlayerScript.DropGunOffset;

PlayerScript.isWeaponAvailableOffset = getRealOffset(0x4C815C);
PlayerScript.isWeaponAvailable = (bool(*)(void*, int))PlayerScript.isWeaponAvailableOffset;

PlayerScript.GetGunTransformOffset = getRealOffset(0x4C81AC);
PlayerScript.GetGunTransform = (void *(*)(void*))PlayerScript.GetGunTransformOffset;

PlayerScript.SwitchWeaponCROffset = getRealOffset(0x4C81F0);
PlayerScript.SwitchWeaponCR = (void *(*)(void*))PlayerScript.SwitchWeaponCROffset;

PlayerScript.shouldHideCrosshairsOffset = getRealOffset(0x4C826C);
PlayerScript.shouldHideCrosshairs = (bool(*)(void*, int))PlayerScript.shouldHideCrosshairsOffset;

PlayerScript.hasADSDisabledOffset = getRealOffset(0x4C82BC);
PlayerScript.hasADSDisabled = (bool(*)(void*, int))PlayerScript.hasADSDisabledOffset;

PlayerScript.ShouldADSDissapearOffset = getRealOffset(0x4C8304);
PlayerScript.ShouldADSDissapear = (bool(*)(void*))PlayerScript.ShouldADSDissapearOffset;

PlayerScript.isAKnifeOffset = getRealOffset(0x4C82E4);
PlayerScript.isAKnife = (bool(*)(void*, int))PlayerScript.isAKnifeOffset;

PlayerScript.ActualSwitchWeaponOffset = getRealOffset(0x4C8370);
PlayerScript.ActualSwitchWeapon = (void(*)(void*))PlayerScript.ActualSwitchWeaponOffset;

PlayerScript.switchWeaponOffset = getRealOffset(0x4C51AC);
PlayerScript.switchWeapon = (int (*)(void*, int, bool))PlayerScript.switchWeaponOffset;

PlayerScript.focusOnObjectOffset = getRealOffset(0x4C92A4);
PlayerScript.focusOnObject = (void(*)(void*, void *, float, float, float, float))PlayerScript.focusOnObjectOffset;

PlayerScript.resetFixedDeltaTimeOffset = getRealOffset(0x4C95E0);
PlayerScript.resetFixedDeltaTime = (void(*)(void*))PlayerScript.resetFixedDeltaTimeOffset;

PlayerScript.stopFocusingOffset = getRealOffset(0x4C9620);
PlayerScript.stopFocusing = (void(*)(void*))PlayerScript.stopFocusingOffset;

PlayerScript.enableCameraOffset = getRealOffset(0x4C9760);
PlayerScript.enableCamera = (void(*)(void*))PlayerScript.enableCameraOffset;

PlayerScript.disableCameraOffset = getRealOffset(0x4C9940);
PlayerScript.disableCamera = (void(*)(void*))PlayerScript.disableCameraOffset;

PlayerScript.DisableAllCameraFunctionsOffset = getRealOffset(0x4C9AA8);
PlayerScript.DisableAllCameraFunctions = (void(*)(void*))PlayerScript.DisableAllCameraFunctionsOffset;

PlayerScript.EnableAllCameraFunctionsOffset = getRealOffset(0x4C9C7C);
PlayerScript.EnableAllCameraFunctions = (void(*)(void*))PlayerScript.EnableAllCameraFunctionsOffset;

PlayerScript.setGunStatsOffset = getRealOffset(0x4C9D58);
PlayerScript.setGunStats = (void(*)(void*, int, int, int))PlayerScript.setGunStatsOffset;

PlayerScript.ReloadSavedWeaponAttachmentsOffset = getRealOffset(0x4CB400);
PlayerScript.ReloadSavedWeaponAttachments = (void(*)(void*, int))PlayerScript.ReloadSavedWeaponAttachmentsOffset;

PlayerScript.playFootStepSoundOffset = getRealOffset(0x4CBAB8);
PlayerScript.playFootStepSound = (void(*)(void*))PlayerScript.playFootStepSoundOffset;

PlayerScript.HeadshottedOffset = getRealOffset(0x4CBABC);
PlayerScript.Headshotted = (void(*)(void*))PlayerScript.HeadshottedOffset;

PlayerScript.KnifedOffset = getRealOffset(0x4CBAC8);
PlayerScript.Knifed = (void(*)(void*))PlayerScript.KnifedOffset;

PlayerScript.UpdateBulletTracerColorOffset = getRealOffset(0x4CBAD4);
PlayerScript.UpdateBulletTracerColor = (void(*)(void*))PlayerScript.UpdateBulletTracerColorOffset;

PlayerScript.UpdateSkinOffset = getRealOffset(0x4CBAD8);
PlayerScript.UpdateSkin = (void(*)(void*, bool))PlayerScript.UpdateSkinOffset;

PlayerScript.StartOffset = getRealOffset(0x4CCB08);
PlayerScript.Start = (void(*)(void*))PlayerScript.StartOffset;

PlayerScript.SendNewInfoOffset = getRealOffset(0x4D025C);
PlayerScript.SendNewInfo = (void(*)(void*))PlayerScript.SendNewInfoOffset;

PlayerScript.SendNewPlayerInfoOffset = getRealOffset(0x4D02C0);
PlayerScript.SendNewPlayerInfo = (void(*)(void*))PlayerScript.SendNewPlayerInfoOffset;

PlayerScript.CheckTeamNumberOffset = getRealOffset(0x4D0498);
PlayerScript.CheckTeamNumber = (void(*)(void*))PlayerScript.CheckTeamNumberOffset;

PlayerScript.getTeamNumberOffset = getRealOffset(0x4C1DC4);
PlayerScript.getTeamNumber = (void(*)(void*))PlayerScript.getTeamNumberOffset;

PlayerScript.CmdGetTeamNumberOffset = getRealOffset(0x4D05A0);
PlayerScript.CmdGetTeamNumber = (void(*)(void*, int))PlayerScript.CmdGetTeamNumberOffset;

PlayerScript.get_requiresSkinForTeamNumberOffset = getRealOffset(0x4D10A0);
PlayerScript.get_requiresSkinForTeamNumber = (bool(*)(void*))PlayerScript.get_requiresSkinForTeamNumberOffset;

PlayerScript.JSNowOffset = getRealOffset(0x4D1AB4);
PlayerScript.JSNow = (void(*)(void*, int))PlayerScript.JSNowOffset;

PlayerScript.ActualUpdateTeamNumberOffset = getRealOffset(0x4D11C4);
PlayerScript.ActualUpdateTeamNumber = (void(*)(void*))PlayerScript.ActualUpdateTeamNumberOffset;

PlayerScript.GetIntCamoTypeOffset = getRealOffset(0x4D1D50);
PlayerScript.GetIntCamoType = (int(*)(void*))PlayerScript.GetIntCamoTypeOffset;

PlayerScript.GetWeaponByteOffset = getRealOffset(0x4D1DC0);
PlayerScript.updateSensitivityOffset = getRealOffset(0x4D1E30);
PlayerScript.updateSensitivity = (void(*)(void*, float))PlayerScript.updateSensitivityOffset;

PlayerScript.updateAimingSensitivityOffset = getRealOffset(0x4D1E50);
PlayerScript.updateAimingSensitivity = (void(*)(void*, float))PlayerScript.updateAimingSensitivityOffset;

PlayerScript.updateUsernameOffset = getRealOffset(0x4D1E64);
PlayerScript.updateUsername = (void(*)(void*, monoString*))PlayerScript.updateUsernameOffset;

PlayerScript.UpdateMPKillsOffset = getRealOffset(0x4D1E68);
PlayerScript.UpdateMPKills = (void(*)(void*, int, int, bool))PlayerScript.UpdateMPKillsOffset;

PlayerScript.UpdateMPDeathsOffset = getRealOffset(0x4D3168);
PlayerScript.UpdateMPDeaths = (void(*)(void*, int))PlayerScript.UpdateMPDeathsOffset;

PlayerScript.UpdateMPRoundsOffset = getRealOffset(0x4D325C);
PlayerScript.UpdateMPRounds = (void(*)(void*, int))PlayerScript.UpdateMPRoundsOffset;

PlayerScript.UsernameChangedOffset = getRealOffset(0x4D3480);
PlayerScript.UsernameChanged = (void(*)(void*, monoString*))PlayerScript.UsernameChangedOffset;

PlayerScript.AddTabListItemOffset = getRealOffset(0x4D26E0);
PlayerScript.AddTabListItem = (void(*)(void*))PlayerScript.AddTabListItemOffset;

PlayerScript.mpShowMuzzleFlashOffset = getRealOffset(0x4D4094);
PlayerScript.mpShowMuzzleFlash = (void(*)(void*))PlayerScript.mpShowMuzzleFlashOffset;

PlayerScript.NormalRespawnOffset = getRealOffset(0x4D40C8);
PlayerScript.NormalRespawn = (void(*)(void*))PlayerScript.NormalRespawnOffset;

PlayerScript.RespawnOffset = getRealOffset(0x4D40DC);
PlayerScript.Respawn = (void(*)(void*))PlayerScript.RespawnOffset;

PlayerScript.OnDestroyOffset = getRealOffset(0x4D42E0);
PlayerScript.OnDestroy = (void(*)(void*))PlayerScript.OnDestroyOffset;

PlayerScript.finishReloadingGunOffset = getRealOffset(0x4C5EFC);
PlayerScript.finishReloadingGun = (void(*)(void*))PlayerScript.finishReloadingGunOffset;

PlayerScript.enlargeAmmoTextOffset = getRealOffset(0x4D4C54);
PlayerScript.enlargeAmmoText = (void(*)(void*))PlayerScript.enlargeAmmoTextOffset;

PlayerScript.refreshAmmoTextOffset = getRealOffset(0x4C5AEC);
PlayerScript.refreshAmmoText = (void(*)(void*))PlayerScript.refreshAmmoTextOffset;

PlayerScript.reloadRoundsInMagazineOffset = getRealOffset(0x4CF788);
PlayerScript.reloadRoundsInMagazine = (void(*)(void*))PlayerScript.reloadRoundsInMagazineOffset;

PlayerScript.TeleportToPositionOffset = getRealOffset(0x4D4D60);
PlayerScript.TeleportToPosition = (void(*)(void*, Vector3, int))PlayerScript.TeleportToPositionOffset;

PlayerScript.reloadRoundsInMagazineWithIndexOffset = getRealOffset(0x4CF158);
PlayerScript.reloadRoundsInMagazineWithIndex = (void(*)(void*, int, bool))PlayerScript.reloadRoundsInMagazineWithIndexOffset;

PlayerScript.currentWeaponTypeOffset = getRealOffset(0x4D5030);
PlayerScript.currentWeaponType = (int (*)(void*))PlayerScript.currentWeaponTypeOffset;

PlayerScript.WeaponDoTrickOffset = getRealOffset(0x4D5084);
PlayerScript.WeaponDoTrick = (void(*)(void*))PlayerScript.WeaponDoTrickOffset;

PlayerScript.FinishWeaponTrickOffset = getRealOffset(0x4D5254);
PlayerScript.FinishWeaponTrick = (void(*)(void*))PlayerScript.FinishWeaponTrickOffset;

PlayerScript.reloadWeaponOffset = getRealOffset(0x4D525C);
PlayerScript.reloadWeapon = (void(*)(void*))PlayerScript.reloadWeaponOffset;

PlayerScript.cancelReloadOffset = getRealOffset(0x4C8394);
PlayerScript.cancelReload = (void(*)(void*))PlayerScript.cancelReloadOffset;

PlayerScript.getWeaponIndexOfTypeOffset = getRealOffset(0x4C6438);
PlayerScript.getWeaponIndexOfType = (int(*)(void*, int))PlayerScript.getWeaponIndexOfTypeOffset;

PlayerScript.TimeLeftInKillstreakOffset = getRealOffset(0x4D5C7C);
PlayerScript.TimeLeftInKillstreak = (float(*)(void*))PlayerScript.TimeLeftInKillstreakOffset;

PlayerScript.CanShowTriangleOffset = getRealOffset(0x4D5D04);
PlayerScript.CanShowTriangle = (bool(*)(void*))PlayerScript.CanShowTriangleOffset;

PlayerScript.shouldMoveScopeUpOffset = getRealOffset(0x4D7364);
PlayerScript.shouldMoveScopeUp = (bool(*)(void*, int))PlayerScript.shouldMoveScopeUpOffset;

PlayerScript.isSupressedWeaponOffset = getRealOffset(0x4D6DBC);
PlayerScript.isSupressedWeapon = (bool(*)(void*, int))PlayerScript.isSupressedWeaponOffset;

PlayerScript.goToNextLevelOffset = getRealOffset(0x4D73B4);
PlayerScript.goToNextLevel = (void(*)(void*))PlayerScript.goToNextLevelOffset;

PlayerScript.disableMuzzleFlashLightOffset = getRealOffset(0x4D75AC);
PlayerScript.disableMuzzleFlashLight = (void(*)(void*))PlayerScript.disableMuzzleFlashLightOffset;

PlayerScript.dieOffset = getRealOffset(0x4D7788);
PlayerScript.die = (void(*)(void*))PlayerScript.dieOffset;

PlayerScript.ACKillOffset = getRealOffset(0x4DAFE0);
PlayerScript.ACKill = (void(*)(void*))PlayerScript.ACKillOffset;

PlayerScript.RpcACKillOffset = getRealOffset(0x4DB110);
PlayerScript.RpcACKill = (void(*)(void*, int))PlayerScript.RpcACKillOffset;

PlayerScript.UpdateKillerStatsOffset = getRealOffset(0x4DB15C);
PlayerScript.UpdateKillerStats = (void(*)(void*, float, int))PlayerScript.UpdateKillerStatsOffset;

PlayerScript.BanOrMutePlayerOffset = getRealOffset(0x4DB164);
PlayerScript.BanOrMutePlayer = (void *(*)(void*, void *, bool, bool))PlayerScript.BanOrMutePlayerOffset;

PlayerScript.UnbanPlayerOffset = getRealOffset(0x4DB220);
PlayerScript.UnbanPlayer = (void *(*)(void*, monoString*, monoString*))PlayerScript.UnbanPlayerOffset;

PlayerScript.DisconnectFromGameOffset = getRealOffset(0x4DB2B4);
PlayerScript.DisconnectFromGame = (void *(*)(void*))PlayerScript.DisconnectFromGameOffset;

PlayerScript.SendChatMessageOffset = getRealOffset(0x4DB31C);
PlayerScript.SendChatMessage = (void(*)(void*, monoString*, Color))PlayerScript.SendChatMessageOffset;

PlayerScript.SendDirectChatMessageOffset = getRealOffset(0x4DC780);
PlayerScript.SendDirectChatMessage = (void(*)(void*, monoString*, Color))PlayerScript.SendDirectChatMessageOffset;

PlayerScript.RestartMatchOffset = getRealOffset(0x4DCA48);
PlayerScript.RestartMatch = (void(*)(void*))PlayerScript.RestartMatchOffset;

PlayerScript.KickPlayerOffset = getRealOffset(0x4DCD98);
PlayerScript.KickPlayer = (void(*)(void*, monoString*, monoString*))PlayerScript.KickPlayerOffset;

PlayerScript.KickPlayerAsMasterOffset = getRealOffset(0x4DCD9C);
PlayerScript.KickPlayerAsMaster = (void(*)(void*, void *))PlayerScript.KickPlayerAsMasterOffset;

PlayerScript.KickPlayerAsMaster1Offset = getRealOffset(0x4DCE58);
PlayerScript.KickPlayerAsMaster1 = (void(*)(void*, monoString*))PlayerScript.KickPlayerAsMaster1Offset;

PlayerScript.DelayedKickPlayerOffset = getRealOffset(0x4D3F10);
PlayerScript.DelayedKickPlayer = (void *(*)(void*, monoString*))PlayerScript.DelayedKickPlayerOffset;

PlayerScript.GetPlayerFromPartialUsernameOffset = getRealOffset(0x4DD048);
PlayerScript.GetPlayerFromPartialUsername = (void *(*)(void*, monoString*))PlayerScript.GetPlayerFromPartialUsernameOffset;

PlayerScript.ActualKickPlayerOffset = getRealOffset(0x4DCFA0);
PlayerScript.ActualKickPlayer = (void *(*)(void*, monoString*, void *))PlayerScript.ActualKickPlayerOffset;

PlayerScript.ActualRestartMatchOffset = getRealOffset(0x4DCB78);
PlayerScript.ActualRestartMatch = (void *(*)(void*))PlayerScript.ActualRestartMatchOffset;

PlayerScript.ResetKillsDeathsOffset = getRealOffset(0x4DD2AC);
PlayerScript.ResetKillsDeaths = (void(*)(void*))PlayerScript.ResetKillsDeathsOffset;

PlayerScript.RunFunctionIfModOffset = getRealOffset(0x4DD2E0);
PlayerScript.RunFunctionIfMod = (void(*)(void*, monoString*, void *))PlayerScript.RunFunctionIfModOffset;

PlayerScript.RunFunctionIfRestarterOffset = getRealOffset(0x4DCBF4);
PlayerScript.RunFunctionIfRestarter = (void(*)(void*, monoString*, void *))PlayerScript.RunFunctionIfRestarterOffset;

PlayerScript.SetTimeScaleOffset = getRealOffset(0x4DD484);
PlayerScript.SetTimeScale = (void(*)(void*, float))PlayerScript.SetTimeScaleOffset;

PlayerScript.RpcSendChatMessageOffset = getRealOffset(0x4DD668);
PlayerScript.RpcSendChatMessage = (void(*)(void*, monoString*, monoString*, byte, byte, byte, int))PlayerScript.RpcSendChatMessageOffset;

PlayerScript.RpcShowPerkMessageOffset = getRealOffset(0x4DDD98);
PlayerScript.RpcShowPerkMessage = (void(*)(void*, monoString*, monoString*))PlayerScript.RpcShowPerkMessageOffset;

PlayerScript.AddKillToStreakOffset = getRealOffset(0x4DDE18);
PlayerScript.AddKillToStreak = (void(*)(void*))PlayerScript.AddKillToStreakOffset;

PlayerScript.playerKilledOffset = getRealOffset(0x4D93D8);
PlayerScript.playerKilled = (void(*)(void*, int, int))PlayerScript.playerKilledOffset;

PlayerScript.playerKilledAnnounceOffset = getRealOffset(0x4D8B60);
PlayerScript.playerKilledAnnounce = (void(*)(void*, int, int, bool, bool))PlayerScript.playerKilledAnnounceOffset;

PlayerScript.mpPlaySoundOffset = getRealOffset(0x4DE980);
PlayerScript.mpPlaySound = (void(*)(void*, void *))PlayerScript.mpPlaySoundOffset;

PlayerScript.localDieOffset = getRealOffset(0x4D82C0);
PlayerScript.localDie = (void(*)(void*, int, int))PlayerScript.localDieOffset;

PlayerScript.FixHumanMeshAnimationOffset = getRealOffset(0x4DFC28);
PlayerScript.FixHumanMeshAnimation = (void(*)(void*))PlayerScript.FixHumanMeshAnimationOffset;

PlayerScript.RagdollAfterTimeOffset = getRealOffset(0x4DFCD8);
PlayerScript.RagdollAfterTime = (void(*)(void*))PlayerScript.RagdollAfterTimeOffset;

PlayerScript.RagdollOffset = getRealOffset(0x4DF168);
PlayerScript.Ragdoll = (void(*)(void*, bool))PlayerScript.RagdollOffset;

PlayerScript.ShowHideHumanMeshOffset = getRealOffset(0x4E0FE4);
PlayerScript.ShowHideHumanMesh = (void(*)(void*, bool))PlayerScript.ShowHideHumanMeshOffset;

PlayerScript.LocalTurnIntoRagdollOffset = getRealOffset(0x4D7ABC);
PlayerScript.LocalTurnIntoRagdoll = (void *(*)(void*))PlayerScript.LocalTurnIntoRagdollOffset;

PlayerScript.ResetHumanMeshPositionOffset = getRealOffset(0x4E15F0);
PlayerScript.ResetHumanMeshPosition = (void(*)(void*))PlayerScript.ResetHumanMeshPositionOffset;

PlayerScript.EnableRootMotionOffset = getRealOffset(0x4E16E0);
PlayerScript.EnableRootMotion = (void(*)(void*, bool))PlayerScript.EnableRootMotionOffset;

PlayerScript.SetExplosionForcePositionOffset = getRealOffset(0x4E17A0);
PlayerScript.SetExplosionForcePosition = (void(*)(void*, Vector3))PlayerScript.SetExplosionForcePositionOffset;

PlayerScript.mpTurnIntoRagdollOffset = getRealOffset(0x4DFCE0);
PlayerScript.mpTurnIntoRagdoll = (void(*)(void*, bool))PlayerScript.mpTurnIntoRagdollOffset;

PlayerScript.resetHumanMeshAnimationOffset = getRealOffset(0x4DEA70);
PlayerScript.resetHumanMeshAnimation = (void(*)(void*))PlayerScript.resetHumanMeshAnimationOffset;

PlayerScript.localReloadOffset = getRealOffset(0x4E17AC);
PlayerScript.localReload = (void(*)(void*))PlayerScript.localReloadOffset;

PlayerScript.mpFinishReloadOffset = getRealOffset(0x4E1960);
PlayerScript.mpFinishReload = (void(*)(void*))PlayerScript.mpFinishReloadOffset;

PlayerScript.mpReloadOffset = getRealOffset(0x4D5C78);
PlayerScript.mpReload = (void(*)(void*))PlayerScript.mpReloadOffset;

PlayerScript.mpUpdateAccessoryOffset = getRealOffset(0x4C6B40);
PlayerScript.mpUpdateAccessory = (void(*)(void*, int))PlayerScript.mpUpdateAccessoryOffset;

PlayerScript.mpUpdateBarrelOffset = getRealOffset(0x4C6FFC);
PlayerScript.mpUpdateBarrel = (void(*)(void*, int))PlayerScript.mpUpdateBarrelOffset;

PlayerScript.mpUpdateSightOffset = getRealOffset(0x4C7424);
PlayerScript.mpUpdateSight = (void(*)(void*, int))PlayerScript.mpUpdateSightOffset;

PlayerScript.mpUpdateCamoOffset = getRealOffset(0x4D3FD8);
PlayerScript.mpUpdateCamo = (void(*)(void*, int))PlayerScript.mpUpdateCamoOffset;

PlayerScript.localSwitchGunOffset = getRealOffset(0x4C20AC);
PlayerScript.localSwitchGun = (void(*)(void*, int, int, int, bool))PlayerScript.localSwitchGunOffset;

PlayerScript.SetCurrentGunObjectOffset = getRealOffset(0x4E1A10);
PlayerScript.SetCurrentGunObject = (void *(*)(void*, float, int, int))PlayerScript.SetCurrentGunObjectOffset;

PlayerScript.setLastDamagerIDOffset = getRealOffset(0x4E1AC4);
PlayerScript.setLastDamagerID = (void(*)(void*, int))PlayerScript.setLastDamagerIDOffset;

PlayerScript.mpShowHurtAnimationOffset = getRealOffset(0x4E1ACC);
PlayerScript.mpShowHurtAnimation = (void(*)(void*))PlayerScript.mpShowHurtAnimationOffset;

PlayerScript.HitAtLocalPointOffset = getRealOffset(0x4E1D78);
PlayerScript.HitAtLocalPoint = (void(*)(void*, Vector3, void *))PlayerScript.HitAtLocalPointOffset;

PlayerScript.SprayBloodEverywhereOffset = getRealOffset(0x4C30F0);
PlayerScript.SprayBloodEverywhere = (void(*)(void*))PlayerScript.SprayBloodEverywhereOffset;

PlayerScript.ShowHitmarkerOffset = getRealOffset(0x4E2CF4);
PlayerScript.hurtOffset = getRealOffset(0x4E2DBC);
PlayerScript.hurt = (void(*)(void*, float, void *, Vector3, bool, int))PlayerScript.hurtOffset;

PlayerScript.IsHitValidOffset = getRealOffset(0x4E42E0);
PlayerScript.IsHitValid = (bool(*)(void*, int, void *, void *, Vector3, Vector3))PlayerScript.IsHitValidOffset;

PlayerScript.AcknowledgeDamageDoneOffset = getRealOffset(0x4E4A8C);
PlayerScript.AcknowledgeDamageDone = (void(*)(void*, int, float, int))PlayerScript.AcknowledgeDamageDoneOffset;

PlayerScript.AcknowledgeDamageDoneRPCOffset = getRealOffset(0x4E4CD0);
PlayerScript.AcknowledgeDamageDoneRPC = (void(*)(void*, monoString*, float, int))PlayerScript.AcknowledgeDamageDoneRPCOffset;

PlayerScript.GotKillAssistOffset = getRealOffset(0x4E6E60);
PlayerScript.GotKillAssist = (void(*)(void*, float, int))PlayerScript.GotKillAssistOffset;

PlayerScript.damagePlayerOffset = getRealOffset(0x4E2B30);
PlayerScript.damagePlayer = (void(*)(void*, float, void *, Vector3, bool, int))PlayerScript.damagePlayerOffset;

PlayerScript.getInsideVehicleOffset = getRealOffset(0x4E7334);
PlayerScript.getInsideVehicle = (void(*)(void*))PlayerScript.getInsideVehicleOffset;

PlayerScript.getOutOfVehicleOffset = getRealOffset(0x4E75BC);
PlayerScript.getOutOfVehicle = (void(*)(void*))PlayerScript.getOutOfVehicleOffset;

PlayerScript.ResetStatsOffset = getRealOffset(0x4E75F8);
PlayerScript.ResetStats = (void(*)(void*))PlayerScript.ResetStatsOffset;

PlayerScript.ReloadAllRoundsOffset = getRealOffset(0x4E77D0);
PlayerScript.ReloadAllRounds = (void(*)(void*))PlayerScript.ReloadAllRoundsOffset;

PlayerScript.get_gunReloadingOffset = getRealOffset(0x4E7A7C);
PlayerScript.get_gunReloading = (bool(*)(void*))PlayerScript.get_gunReloadingOffset;

PlayerScript.set_gunReloadingOffset = getRealOffset(0x4D4B34);
PlayerScript.set_gunReloading = (void(*)(void*, bool))PlayerScript.set_gunReloadingOffset;

PlayerScript.get_healthOffset = getRealOffset(0x4E7A84);
PlayerScript.get_health = (float(*)(void*))PlayerScript.get_healthOffset;

PlayerScript.set_healthOffset = getRealOffset(0x4CF794);
PlayerScript.set_health = (void(*)(void*, float))PlayerScript.set_healthOffset;

PlayerScript.SetScopeBlacknessTextureEnabledOffset = getRealOffset(0x4E7B84);
PlayerScript.SetScopeBlacknessTextureEnabled = (void(*)(void*, bool))PlayerScript.SetScopeBlacknessTextureEnabledOffset;

PlayerScript.DisableAllRenderersOffset = getRealOffset(0x4C25BC);
PlayerScript.DisableAllRenderers = (void(*)(void*))PlayerScript.DisableAllRenderersOffset;

PlayerScript.GetAngleOffset = getRealOffset(0x4E7CEC);
PlayerScript.GetAngle = (float(*)(void*, Vector2, Vector2))PlayerScript.GetAngleOffset;

PlayerScript.shakeCameraOffset = getRealOffset(0x4E7DF8);
PlayerScript.shakeCamera = (void(*)(void*, float))PlayerScript.shakeCameraOffset;

PlayerScript.ChangeCrouchStateOffset = getRealOffset(0x4E7E88);
PlayerScript.ChangeCrouchState = (void(*)(void*, bool))PlayerScript.ChangeCrouchStateOffset;

PlayerScript.UpdateTabItemColorForHealthOffset = getRealOffset(0x4D1B6C);
PlayerScript.UpdateTabItemColorForHealth = (void(*)(void*, float))PlayerScript.UpdateTabItemColorForHealthOffset;

PlayerScript.IsIndoorOffset = getRealOffset(0x4DF010);
PlayerScript.IsIndoor = (bool(*)(void*))PlayerScript.IsIndoorOffset;

PlayerScript.HealthUpdatedOffset = getRealOffset(0x4C2304);
PlayerScript.HealthUpdated = (void(*)(void*, float, int))PlayerScript.HealthUpdatedOffset;

PlayerScript.ForcePositionOffset = getRealOffset(0x4E7FDC);
PlayerScript.ForcePosition = (void(*)(void*, Vector3, bool))PlayerScript.ForcePositionOffset;

PlayerScript.HasSpawnedForFirstTimeOffset = getRealOffset(0x4E808C);
PlayerScript.HasSpawnedForFirstTime = (bool(*)(void*, bool))PlayerScript.HasSpawnedForFirstTimeOffset;

PlayerScript.GetBestSpawnPointForPlayerOffset = getRealOffset(0x4D1578);
PlayerScript.GetBestSpawnPointForPlayer = (void(*)(void*, int, int))PlayerScript.GetBestSpawnPointForPlayerOffset;

PlayerScript.SetSpawnPointOffset = getRealOffset(0x4E81D0);
PlayerScript.SetSpawnPoint = (void(*)(void*, Vector3))PlayerScript.SetSpawnPointOffset;

PlayerScript.MapVotedForOffset = getRealOffset(0x4E81F4);
PlayerScript.MapVotedFor = (void(*)(void*, monoString*))PlayerScript.MapVotedForOffset;

PlayerScript.VoteForMapOffset = getRealOffset(0x4E82BC);
PlayerScript.VoteForMap = (void(*)(void*, monoString*))PlayerScript.VoteForMapOffset;

PlayerScript.toggleCrouchOffset = getRealOffset(0x4E8550);
PlayerScript.toggleCrouch = (bool(*)(void*, bool))PlayerScript.toggleCrouchOffset;

PlayerScript.aimToEnemyWithLookRotationOffset = getRealOffset(0x4E8A1C);
PlayerScript.aimToEnemyWithLookRotation = (void(*)(void*, int))PlayerScript.aimToEnemyWithLookRotationOffset;

PlayerScript.fixAngleOffset = getRealOffset(0x4E8A7C);
PlayerScript.fixAngle = (float(*)(void*, float))PlayerScript.fixAngleOffset;

PlayerScript.handleDesiredCameraRotationOffset = getRealOffset(0x4E8AA8);
PlayerScript.handleDesiredCameraRotation = (void(*)(void*))PlayerScript.handleDesiredCameraRotationOffset;

PlayerScript.localPlayerOffset = getRealOffset(0x4C6B20);
PlayerScript.localPlayer = (bool(*)(void*))PlayerScript.localPlayerOffset;

PlayerScript.ClearChamberOffset = getRealOffset(0x4E9410);
PlayerScript.ClearChamber = (void(*)(void*))PlayerScript.ClearChamberOffset;

PlayerScript.spawnShellOffset = getRealOffset(0x4E9A24);
PlayerScript.spawnShell = (void(*)(void*))PlayerScript.spawnShellOffset;

PlayerScript.ShowKillerOffset = getRealOffset(0x4DE058);
PlayerScript.ShowKiller = (void(*)(void*))PlayerScript.ShowKillerOffset;

PlayerScript.SpectateNextPlayerOnTeamOffset = getRealOffset(0x4DF400);
PlayerScript.SpectateNextPlayerOnTeam = (void(*)(void*))PlayerScript.SpectateNextPlayerOnTeamOffset;

PlayerScript.stopClearingChamberOffset = getRealOffset(0x4E9E04);
PlayerScript.stopClearingChamber = (void(*)(void*))PlayerScript.stopClearingChamberOffset;

PlayerScript.OnControllerColliderHitOffset = getRealOffset(0x4E9E70);
PlayerScript.OnControllerColliderHit = (void(*)(void*, void *))PlayerScript.OnControllerColliderHitOffset;

PlayerScript.CanJumpOffset = getRealOffset(0x4E9F1C);
PlayerScript.CanJump = (bool(*)(void*))PlayerScript.CanJumpOffset;

PlayerScript.IsGroundedOffset = getRealOffset(0x4EA1E4);
PlayerScript.IsGrounded = (bool(*)(void*))PlayerScript.IsGroundedOffset;

PlayerScript.JumpOffset = getRealOffset(0x4EA4A4);
PlayerScript.Jump = (void(*)(void*))PlayerScript.JumpOffset;

PlayerScript.CheckForMPAimAssistOffset = getRealOffset(0x4EA510);
PlayerScript.CheckForMPAimAssist = (void(*)(void*))PlayerScript.CheckForMPAimAssistOffset;

PlayerScript.HandleAimAssistAndSpreadOffset = getRealOffset(0x4EAF20);
PlayerScript.HandleAimAssistAndSpread = (void(*)(void*))PlayerScript.HandleAimAssistAndSpreadOffset;

PlayerScript.SetOriginalFOVOffset = getRealOffset(0x4EBD04);
PlayerScript.SetOriginalFOV = (void(*)(void*, float))PlayerScript.SetOriginalFOVOffset;

PlayerScript.GetGunADSAnglesOffset = getRealOffset(0x4EBD0C);
PlayerScript.GetGunADSAngles = (Vector3 (*)(void*))PlayerScript.GetGunADSAnglesOffset;

PlayerScript.getGunAnglesOffset = getRealOffset(0x4EBD60);
PlayerScript.getGunAngles = (Vector3 (*)(void*))PlayerScript.getGunAnglesOffset;

PlayerScript.ShowShootingEffectsOffset = getRealOffset(0x4EBDC4);
PlayerScript.ShowShootingEffects = (void(*)(void*))PlayerScript.ShowShootingEffectsOffset;

PlayerScript.isExplosiveOffset = getRealOffset(0x4EC40C);
PlayerScript.isExplosive = (bool(*)(void*, int))PlayerScript.isExplosiveOffset;

PlayerScript.CheckForExplosiveSpamOffset = getRealOffset(0x4EC95C);
PlayerScript.CheckForExplosiveSpam = (bool(*)(void*))PlayerScript.CheckForExplosiveSpamOffset;

PlayerScript.mpPlayShootSoundOffset = getRealOffset(0x4EC3C8);
PlayerScript.mpPlayShootSound = (void(*)(void*))PlayerScript.mpPlayShootSoundOffset;

PlayerScript.SemiAutoShootOffset = getRealOffset(0x4ECE5C);
PlayerScript.SemiAutoShoot = (void(*)(void*))PlayerScript.SemiAutoShootOffset;

PlayerScript.CanShootOffset = getRealOffset(0x4ED460);
PlayerScript.CanShoot = (bool(*)(void*, bool))PlayerScript.CanShootOffset;

PlayerScript.ShowSmokeEffectsOffset = getRealOffset(0x4EDBE0);
PlayerScript.ShowSmokeEffects = (void(*)(void*))PlayerScript.ShowSmokeEffectsOffset;

PlayerScript.PlayGunSoundOffset = getRealOffset(0x4EE07C);
PlayerScript.PlayGunSound = (void(*)(void*))PlayerScript.PlayGunSoundOffset;

PlayerScript.IncreaseGunRecoilOffset = getRealOffset(0x4EE584);
PlayerScript.IncreaseGunRecoil = (void(*)(void*))PlayerScript.IncreaseGunRecoilOffset;

PlayerScript.IncreaseCameraRecoilOffset = getRealOffset(0x4EEBD4);
PlayerScript.IncreaseCameraRecoil = (void(*)(void*))PlayerScript.IncreaseCameraRecoilOffset;

PlayerScript.ProcessMuzzleFlashOffset = getRealOffset(0x4EEE78);
PlayerScript.ProcessMuzzleFlash = (void(*)(void*))PlayerScript.ProcessMuzzleFlashOffset;

PlayerScript.ProcessBulletFiredOffset = getRealOffset(0x4EF02C);
PlayerScript.ProcessBulletFired = (void(*)(void*))PlayerScript.ProcessBulletFiredOffset;

PlayerScript.ShowAnnouncementOffset = getRealOffset(0x4EF8C4);
PlayerScript.ShowAnnouncement = (void(*)(void*, monoString*, float))PlayerScript.ShowAnnouncementOffset;

PlayerScript.HideAnnouncementOffset = getRealOffset(0x4E7A8C);
PlayerScript.HideAnnouncement = (void(*)(void*))PlayerScript.HideAnnouncementOffset;

PlayerScript.WeaponStabOffset = getRealOffset(0x4EFA20);
PlayerScript.WeaponStab = (void(*)(void*))PlayerScript.WeaponStabOffset;

PlayerScript.DamageFromWeaponStabOffset = getRealOffset(0x4F0014);
PlayerScript.DamageFromWeaponStab = (void(*)(void*))PlayerScript.DamageFromWeaponStabOffset;

PlayerScript.ShootOffset = getRealOffset(0x4ECED4);
PlayerScript.Shoot = (void(*)(void*))PlayerScript.ShootOffset;

PlayerScript.StartSprintingOffset = getRealOffset(0x4F0C60);
PlayerScript.StartSprinting = (void(*)(void*))PlayerScript.StartSprintingOffset;

PlayerScript.StopSprintingOffset = getRealOffset(0x4EDBCC);
PlayerScript.StopSprinting = (void(*)(void*))PlayerScript.StopSprintingOffset;

PlayerScript.handleGunRotationOffset = getRealOffset(0x4F0C6C);
PlayerScript.handleGunRotation = (void(*)(void*))PlayerScript.handleGunRotationOffset;

PlayerScript.handleMovementOffset = getRealOffset(0x4F1CF0);
PlayerScript.handleMovement = (void(*)(void*))PlayerScript.handleMovementOffset;

PlayerScript.FlashOffset = getRealOffset(0x4F36D0);
PlayerScript.Flash = (void(*)(void*, float))PlayerScript.FlashOffset;

PlayerScript.KnifeOffset = getRealOffset(0x4F3748);
PlayerScript.Knife = (void(*)(void*))PlayerScript.KnifeOffset;

PlayerScript.DamageWithKnifeOffset = getRealOffset(0x4F3B3C);
PlayerScript.DamageWithKnife = (void(*)(void*))PlayerScript.DamageWithKnifeOffset;

PlayerScript.disableKnifeArmsOffset = getRealOffset(0x4C8F6C);
PlayerScript.disableKnifeArms = (void(*)(void*))PlayerScript.disableKnifeArmsOffset;

PlayerScript.SpawnThrowingWeaponOffset = getRealOffset(0x4F460C);
PlayerScript.SpawnThrowingWeapon = (void(*)(void*, void *, int))PlayerScript.SpawnThrowingWeaponOffset;

PlayerScript.ThrowWeaponOffset = getRealOffset(0x4F4C80);
PlayerScript.ThrowWeapon = (void(*)(void*, int))PlayerScript.ThrowWeaponOffset;

PlayerScript.throwGrenadeOffset = getRealOffset(0x4F4D98);
PlayerScript.throwGrenade = (void(*)(void*))PlayerScript.throwGrenadeOffset;

PlayerScript.createGrenadeOffset = getRealOffset(0x4F53E4);
PlayerScript.createGrenade = (void(*)(void*))PlayerScript.createGrenadeOffset;

PlayerScript.CreateGrenadeAtPosOffset = getRealOffset(0x4F5698);
PlayerScript.CreateGrenadeAtPos = (void(*)(void*, Vector3, float, Vector3, int, int))PlayerScript.CreateGrenadeAtPosOffset;

PlayerScript.RpcShowHitmarkerOffset = getRealOffset(0x4F59B0);
PlayerScript.RpcShowHitmarker = (void(*)(void*, int))PlayerScript.RpcShowHitmarkerOffset;

PlayerScript.ShowUpperBodyAnimationWithNameAndLayerOffset = getRealOffset(0x4E1C70);
PlayerScript.ShowUpperBodyAnimationWithNameAndLayer = (void(*)(void*, monoString*, int, float))PlayerScript.ShowUpperBodyAnimationWithNameAndLayerOffset;

PlayerScript.ShowUpperBodyAnimationOffset = getRealOffset(0x4E1854);
PlayerScript.ShowUpperBodyAnimation = (void(*)(void*, int, float))PlayerScript.ShowUpperBodyAnimationOffset;

PlayerScript.mpThrowGrenadeAnimationOffset = getRealOffset(0x4F5D98);
PlayerScript.mpThrowGrenadeAnimation = (void(*)(void*))PlayerScript.mpThrowGrenadeAnimationOffset;

PlayerScript.mpMeleeAnimationOffset = getRealOffset(0x4F5F04);
PlayerScript.mpMeleeAnimation = (void(*)(void*))PlayerScript.mpMeleeAnimationOffset;

PlayerScript.disableGrenadeArmsOffset = getRealOffset(0x4C8B20);
PlayerScript.disableGrenadeArms = (void(*)(void*))PlayerScript.disableGrenadeArmsOffset;

PlayerScript.HideExtraArmsOffset = getRealOffset(0x4F60A0);
PlayerScript.HideExtraArms = (void(*)(void*))PlayerScript.HideExtraArmsOffset;

PlayerScript.HandleShootingCheckOffset = getRealOffset(0x4F6534);
PlayerScript.HandleShootingCheck = (void(*)(void*))PlayerScript.HandleShootingCheckOffset;

PlayerScript.disableGunRenderersOffset = getRealOffset(0x4E7370);
PlayerScript.disableGunRenderers = (void(*)(void*, bool))PlayerScript.disableGunRenderersOffset;

PlayerScript.CR_StartKnifeCooldownOffset = getRealOffset(0x4F67FC);
PlayerScript.CR_StartKnifeCooldown = (void *(*)(void*))PlayerScript.CR_StartKnifeCooldownOffset;

PlayerScript.isInTheCorrectRangeToKnifeOffset = getRealOffset(0x4F6878);
PlayerScript.isInTheCorrectRangeToKnife = (bool(*)(void*))PlayerScript.isInTheCorrectRangeToKnifeOffset;

PlayerScript.handleMouseMovementOffset = getRealOffset(0x4F7374);
PlayerScript.handleMouseMovement = (void(*)(void*))PlayerScript.handleMouseMovementOffset;

PlayerScript.handlePCControllersOffset = getRealOffset(0x4F824C);
PlayerScript.handlePCControllers = (void(*)(void*))PlayerScript.handlePCControllersOffset;

PlayerScript.handleHurtMarkerOffset = getRealOffset(0x4F8250);
PlayerScript.handleHurtMarker = (void(*)(void*))PlayerScript.handleHurtMarkerOffset;

PlayerScript.handleIncrementsOffset = getRealOffset(0x4F887C);
PlayerScript.handleIncrements = (void(*)(void*))PlayerScript.handleIncrementsOffset;

PlayerScript.OnPhotonSerializeViewOffset = getRealOffset(0x4F8D6C);
PlayerScript.OnPhotonSerializeView = (void(*)(void*, void *, int))PlayerScript.OnPhotonSerializeViewOffset;

PlayerScript.UpdateVitalityOffset = getRealOffset(0x4FA9DC);
PlayerScript.UpdateVitality = (void(*)(void*, Vector3, float))PlayerScript.UpdateVitalityOffset;

PlayerScript.IsAliveAndVitalOffset = getRealOffset(0x4FAFEC);
PlayerScript.IsAliveAndVital = (bool(*)(void*))PlayerScript.IsAliveAndVitalOffset;

PlayerScript.ForceHumanMeshVisibleOffset = getRealOffset(0x4FB008);
PlayerScript.ForceHumanMeshVisible = (void(*)(void*))PlayerScript.ForceHumanMeshVisibleOffset;

PlayerScript.CheckIfWeaponIsValidOffset = getRealOffset(0x4FB058);
PlayerScript.CheckIfWeaponIsValid = (void(*)(void*))PlayerScript.CheckIfWeaponIsValidOffset;

PlayerScript.CheckDisallowedWeaponOffset = getRealOffset(0x4FB6CC);
PlayerScript.CheckDisallowedWeapon = (bool(*)(void*, bool))PlayerScript.CheckDisallowedWeaponOffset;

PlayerScript.CheckDisallowedWeapon1Offset = getRealOffset(0x4E63E0);
PlayerScript.CheckDisallowedWeapon1 = (bool(*)(void*, int, bool))PlayerScript.CheckDisallowedWeapon1Offset;

PlayerScript.MakeHumanMeshVisibleDelayedOffset = getRealOffset(0x4FAF70);
PlayerScript.CalculateHorizontalVelocityMagnitudeOffset = getRealOffset(0x4F1820);
PlayerScript.CalculateHorizontalVelocityMagnitude = (float(*)(void*))PlayerScript.CalculateHorizontalVelocityMagnitudeOffset;

PlayerScript.normalizeAngleOffset = getRealOffset(0x4FB760);
PlayerScript.normalizeAngle = (float(*)(void*, float))PlayerScript.normalizeAngleOffset;

PlayerScript.UpdateServerVarsOffset = getRealOffset(0x4FAB28);
PlayerScript.UpdateServerVars = (void(*)(void*, Vector2, float, float, Vector3))PlayerScript.UpdateServerVarsOffset;

PlayerScript.CalculateHumanMeshRotationOffset = getRealOffset(0x4FB79C);
PlayerScript.CalculateHumanMeshRotation = (int (*)(void*))PlayerScript.CalculateHumanMeshRotationOffset;

PlayerScript.FinishedTurningOffset = getRealOffset(0x4FB8C4);
PlayerScript.FinishedTurning = (void(*)(void*))PlayerScript.FinishedTurningOffset;

PlayerScript.PhysicsLerpServerVariablesOffset = getRealOffset(0x4FB938);
PlayerScript.PhysicsLerpServerVariables = (void(*)(void*))PlayerScript.PhysicsLerpServerVariablesOffset;

PlayerScript.CalculateAimDirXOffset = getRealOffset(0x4FBEE0);
PlayerScript.CalculateAimDirX = (float(*)(void*))PlayerScript.CalculateAimDirXOffset;

PlayerScript.LerpServerVariablesOffset = getRealOffset(0x4FC090);
PlayerScript.LerpServerVariables = (void(*)(void*))PlayerScript.LerpServerVariablesOffset;

PlayerScript.ChamberScopeTextureOffset = getRealOffset(0x4FC99C);
PlayerScript.ChamberScopeTexture = (void(*)(void*))PlayerScript.ChamberScopeTextureOffset;

PlayerScript.ResetScopeTextureTransformOffset = getRealOffset(0x4FCB40);
PlayerScript.ResetScopeTextureTransform = (void(*)(void*))PlayerScript.ResetScopeTextureTransformOffset;

PlayerScript.BalanceTeamsOffset = getRealOffset(0x4FCBE8);
PlayerScript.BalanceTeams = (void(*)(void*))PlayerScript.BalanceTeamsOffset;

PlayerScript.HasPerkOffset = getRealOffset(0x4D72A4);
PlayerScript.HasPerk = (bool(*)(void*, int))PlayerScript.HasPerkOffset;

PlayerScript.SwitchTeamsOffset = getRealOffset(0x4FD324);
PlayerScript.SwitchTeams = (void(*)(void*))PlayerScript.SwitchTeamsOffset;

PlayerScript.SpawnFailedOffset = getRealOffset(0x4FD9BC);
PlayerScript.SpawnFailed = (void(*)(void*))PlayerScript.SpawnFailedOffset;

PlayerScript.GetSpawnIfQueuedOffset = getRealOffset(0x4FDAD8);
PlayerScript.GetSpawnIfQueued = (void(*)(void*))PlayerScript.GetSpawnIfQueuedOffset;

PlayerScript.OnMasterClientSwitchedOffset = getRealOffset(0x4FDB90);
PlayerScript.OnMasterClientSwitched = (void(*)(void*, void *))PlayerScript.OnMasterClientSwitchedOffset;

PlayerScript.BuildNameWithTagsOffset = getRealOffset(0x4C267C);
PlayerScript.BuildNameWithTags = (monoString *(*)(void*))PlayerScript.BuildNameWithTagsOffset;

PlayerScript.SetAllGunsVisibilityOffset = getRealOffset(0x4FE500);
PlayerScript.SetAllGunsVisibility = (void(*)(void*, bool))PlayerScript.SetAllGunsVisibilityOffset;

PlayerScript.DisconnectFromMultiplayerOffset = getRealOffset(0x4FE76C);
PlayerScript.DisconnectFromMultiplayer = (void(*)(void*))PlayerScript.DisconnectFromMultiplayerOffset;

PlayerScript.ProcessFirstUpdateOffset = getRealOffset(0x4FE7E0);
PlayerScript.ProcessFirstUpdate = (void(*)(void*))PlayerScript.ProcessFirstUpdateOffset;

PlayerScript.IsVisibleOffset = getRealOffset(0x4E2CD4);
PlayerScript.IsVisible = (bool(*)(void*))PlayerScript.IsVisibleOffset;

PlayerScript.HandleAnimatorSpeedOffset = getRealOffset(0x4FEC44);
PlayerScript.HandleAnimatorSpeed = (void(*)(void*))PlayerScript.HandleAnimatorSpeedOffset;

PlayerScript.FixSwitchWeaponScreenGlitchOffset = getRealOffset(0x4FEFD4);
PlayerScript.FixSwitchWeaponScreenGlitch = (void(*)(void*))PlayerScript.FixSwitchWeaponScreenGlitchOffset;

PlayerScript.RefreshMPPerksOffset = getRealOffset(0x4D014C);
PlayerScript.RefreshMPPerks = (void(*)(void*, void *))PlayerScript.RefreshMPPerksOffset;

PlayerScript.AnnounceKillstreakOffset = getRealOffset(0x4FF964);
PlayerScript.AnnounceKillstreak = (void(*)(void*, int, bool, void *))PlayerScript.AnnounceKillstreakOffset;

PlayerScript.ShowNukeOverlayOffset = getRealOffset(0x4FFB34);
PlayerScript.ShowNukeOverlay = (void(*)(void*))PlayerScript.ShowNukeOverlayOffset;

PlayerScript.KillstreakFinishedOffset = getRealOffset(0x4C47A8);
PlayerScript.KillstreakFinished = (void(*)(void*, int, bool))PlayerScript.KillstreakFinishedOffset;

PlayerScript.UpdatekillstreakOffset = getRealOffset(0x4FFD1C);
PlayerScript.Updatekillstreak = (void(*)(void*, int))PlayerScript.UpdatekillstreakOffset;

PlayerScript.ProcessMPPlayerCustomPropertiesOffset = getRealOffset(0x4FF1C8);
PlayerScript.ProcessMPPlayerCustomProperties = (void(*)(void*, void *))PlayerScript.ProcessMPPlayerCustomPropertiesOffset;

PlayerScript.UpdateCumulativeMovingAveragePingOffset = getRealOffset(0x4FFFA8);
PlayerScript.UpdateCumulativeMovingAveragePing = (float(*)(void*, float))PlayerScript.UpdateCumulativeMovingAveragePingOffset;

PlayerScript.FindNewMasterClientOffset = getRealOffset(0x4C4A30);
PlayerScript.FindNewMasterClient = (void(*)(void*))PlayerScript.FindNewMasterClientOffset;

PlayerScript.BecomeMasterClientOffset = getRealOffset(0x4FFFE8);
PlayerScript.BecomeMasterClient = (void(*)(void*))PlayerScript.BecomeMasterClientOffset;

PlayerScript.GetNearestEnemyOffset = getRealOffset(0x5000C0);
PlayerScript.GetNearestEnemy = (void *(*)(void*))PlayerScript.GetNearestEnemyOffset;

PlayerScript.SetPingOffset = getRealOffset(0x4FAEA8);
PlayerScript.SetPing = (void(*)(void*, byte))PlayerScript.SetPingOffset;

PlayerScript.ProcessLocalPingOffset = getRealOffset(0x5003F4);
PlayerScript.ProcessLocalPing = (void(*)(void*))PlayerScript.ProcessLocalPingOffset;

PlayerScript.PlayerKickedForPingOffset = getRealOffset(0x500890);
PlayerScript.PlayerKickedForPing = (void(*)(void*, byte))PlayerScript.PlayerKickedForPingOffset;

PlayerScript.GetPingKickedOffset = getRealOffset(0x5007DC);
PlayerScript.GetPingKicked = (void *(*)(void*, float, byte, byte))PlayerScript.GetPingKickedOffset;

PlayerScript.IncrementNonLocalMPPlayerVariablesOffset = getRealOffset(0x500BA4);
PlayerScript.IncrementNonLocalMPPlayerVariables = (void(*)(void*))PlayerScript.IncrementNonLocalMPPlayerVariablesOffset;

PlayerScript.ProcessNonLocalMPShootingEffectsOffset = getRealOffset(0x500C58);
PlayerScript.ProcessNonLocalMPShootingEffects = (void(*)(void*))PlayerScript.ProcessNonLocalMPShootingEffectsOffset;

PlayerScript.SetCorrectTeamNumbersForAllPlayersOffset = getRealOffset(0x4FE1D0);
PlayerScript.SetCorrectTeamNumbersForAllPlayers = (void(*)(void*))PlayerScript.SetCorrectTeamNumbersForAllPlayersOffset;

PlayerScript.ProcessMPTeamBalancingOffset = getRealOffset(0x500E08);
PlayerScript.ProcessMPTeamBalancing = (void(*)(void*))PlayerScript.ProcessMPTeamBalancingOffset;

PlayerScript.SetCorrectGunGameGunOffset = getRealOffset(0x4D2954);
PlayerScript.SetCorrectGunGameGun = (int(*)(void*, bool))PlayerScript.SetCorrectGunGameGunOffset;

PlayerScript.SetCorrectADSPositionOffset = getRealOffset(0x500F98);
PlayerScript.SetCorrectADSPosition = (void(*)(void*, int))PlayerScript.SetCorrectADSPositionOffset;

PlayerScript.LoadGunResourcesOffset = getRealOffset(0x5013D8);
PlayerScript.LoadGunResources = (void(*)(void*, int))PlayerScript.LoadGunResourcesOffset;

PlayerScript.SetCharacterCamoAfterEndOfFrameOffset = getRealOffset(0x501B18);
PlayerScript.SetCharacterCamoAfterEndOfFrame = (void *(*)(void*, int))PlayerScript.SetCharacterCamoAfterEndOfFrameOffset;

PlayerScript.CR_SetBulletTracerColorAtEndOfFrameOffset = getRealOffset(0x501BAC);
PlayerScript.CR_SetBulletTracerColorAtEndOfFrame = (void *(*)(void*, int))PlayerScript.CR_SetBulletTracerColorAtEndOfFrameOffset;

PlayerScript.UnloadGunResourcesOffset = getRealOffset(0x501C40);
PlayerScript.UnloadGunResources = (void(*)(void*, int))PlayerScript.UnloadGunResourcesOffset;

PlayerScript.UnloadAllUnusedGunResourcesOffset = getRealOffset(0x501F78);
PlayerScript.UnloadAllUnusedGunResources = (void(*)(void*))PlayerScript.UnloadAllUnusedGunResourcesOffset;

PlayerScript.LoadCorrectWeaponsOffset = getRealOffset(0x4CE5F4);
PlayerScript.LoadCorrectWeapons = (void(*)(void*))PlayerScript.LoadCorrectWeaponsOffset;

PlayerScript.GetPrimaryOffset = getRealOffset(0x4DC678);
PlayerScript.GetPrimary = (int (*)(void*))PlayerScript.GetPrimaryOffset;

PlayerScript.GetSecondaryOffset = getRealOffset(0x5021FC);
PlayerScript.GetSecondary = (int (*)(void*))PlayerScript.GetSecondaryOffset;

PlayerScript.GetThrowableOffset = getRealOffset(0x502304);
PlayerScript.GetThrowable = (int (*)(void*))PlayerScript.GetThrowableOffset;

PlayerScript.HandleHealthRegenOffset = getRealOffset(0x5023C8);
PlayerScript.HandleHealthRegen = (void(*)(void*))PlayerScript.HandleHealthRegenOffset;

PlayerScript.RaycastHitPlayerOffset = getRealOffset(0x5027B4);
PlayerScript.RaycastHitPlayer = (void *(*)(void*, Vector3, Vector3, float))PlayerScript.RaycastHitPlayerOffset;

PlayerScript.GetPlayerAimingAtOffset = getRealOffset(0x5029C0);
PlayerScript.GetPlayerAimingAt = (void *(*)(void*))PlayerScript.GetPlayerAimingAtOffset;

PlayerScript.IsLookingAtPlayerOffset = getRealOffset(0x4D6DDC);
PlayerScript.IsLookingAtPlayer = (bool(*)(void*, void *))PlayerScript.IsLookingAtPlayerOffset;

PlayerScript.ApplyFinalPositionsOffset = getRealOffset(0x502AD8);
PlayerScript.ApplyFinalPositions = (void(*)(void*))PlayerScript.ApplyFinalPositionsOffset;

PlayerScript.ClientTickOffset = getRealOffset(0x4E348C);
PlayerScript.ClientTick = (void(*)(void*))PlayerScript.ClientTickOffset;

PlayerScript.SetBulletTracerColorOffset = getRealOffset(0x502B9C);
PlayerScript.SetBulletTracerColor = (void(*)(void*, int))PlayerScript.SetBulletTracerColorOffset;

PlayerScript.SetCharacterCamoOffset = getRealOffset(0x4CC984);
PlayerScript.SetCharacterCamo = (void(*)(void*, int))PlayerScript.SetCharacterCamoOffset;

PlayerScript.HandleCustomPropertiesCheckOffset = getRealOffset(0x502BA4);
PlayerScript.HandleCustomPropertiesCheck = (void(*)(void*))PlayerScript.HandleCustomPropertiesCheckOffset;

PlayerScript.HandleMultiplayerErrorChecksOffset = getRealOffset(0x503290);
PlayerScript.HandleMultiplayerErrorChecks = (void(*)(void*))PlayerScript.HandleMultiplayerErrorChecksOffset;

PlayerScript.HasBeenVisibleOffset = getRealOffset(0x4D5F20);
PlayerScript.HasBeenVisible = (bool(*)(void*))PlayerScript.HasBeenVisibleOffset;

PlayerScript.OnLevelWasLoadedOffset = getRealOffset(0x503FF0);
PlayerScript.OnLevelWasLoaded = (void(*)(void*))PlayerScript.OnLevelWasLoadedOffset;

PlayerScript.isConquestTDMorVIPOffset = getRealOffset(0x50400C);
PlayerScript.isConquestTDMorVIP = (bool(*)(void*))PlayerScript.isConquestTDMorVIPOffset;

PlayerScript.HandleNameTagShowingOffset = getRealOffset(0x5041A8);
PlayerScript.HandleNameTagShowing = (void(*)(void*))PlayerScript.HandleNameTagShowingOffset;

PlayerScript.HandleUpperBodyWeightOffset = getRealOffset(0x504804);
PlayerScript.HandleUpperBodyWeight = (void(*)(void*))PlayerScript.HandleUpperBodyWeightOffset;

PlayerScript.ShowDebugCapsuleOffset = getRealOffset(0x50493C);
PlayerScript.ShowDebugCapsule = (void(*)(void*, Vector3))PlayerScript.ShowDebugCapsuleOffset;

PlayerScript.SetFullLocalHumanMeshAnimatorParamsOffset = getRealOffset(0x504A6C);
PlayerScript.SetFullLocalHumanMeshAnimatorParams = (void(*)(void*))PlayerScript.SetFullLocalHumanMeshAnimatorParamsOffset;

PlayerScript.ReliabilityMessageSentOffset = getRealOffset(0x504B60);
PlayerScript.ReliabilityMessageSent = (void(*)(void*, int))PlayerScript.ReliabilityMessageSentOffset;

PlayerScript.ReliabilityMessageReceivedOffset = getRealOffset(0x504CC4);
PlayerScript.ReliabilityMessageReceived = (void(*)(void*))PlayerScript.ReliabilityMessageReceivedOffset;

PlayerScript.HandleMatchStartingTextOffset = getRealOffset(0x504CD0);
PlayerScript.HandleMatchStartingText = (void(*)(void*))PlayerScript.HandleMatchStartingTextOffset;

PlayerScript.HandleReliabilityCheckOffset = getRealOffset(0x505AA8);
PlayerScript.HandleReliabilityCheck = (void(*)(void*))PlayerScript.HandleReliabilityCheckOffset;

PlayerScript.HandleSendRateOffset = getRealOffset(0x505EC4);
PlayerScript.HandleSendRate = (void(*)(void*))PlayerScript.HandleSendRateOffset;

PlayerScript.HandleBloodOverlayOffset = getRealOffset(0x506070);
PlayerScript.HandleBloodOverlay = (void(*)(void*))PlayerScript.HandleBloodOverlayOffset;

PlayerScript.HandleScopeTextureOffset = getRealOffset(0x5064A8);
PlayerScript.HandleScopeTexture = (void(*)(void*))PlayerScript.HandleScopeTextureOffset;

PlayerScript.HandleLocalRespawningOffset = getRealOffset(0x506A24);
PlayerScript.HandleLocalRespawning = (void(*)(void*))PlayerScript.HandleLocalRespawningOffset;

PlayerScript.UpdateFastOffset = getRealOffset(0x507AE8);
PlayerScript.UpdateFast = (void(*)(void*))PlayerScript.UpdateFastOffset;

PlayerScript.get_damageDebuggerOffset = getRealOffset(0x50B99C);
PlayerScript.get_damageDebugger = (void *(*)(void*))PlayerScript.get_damageDebuggerOffset;

PlayerScript.PlayerAliveOffset = getRealOffset(0x50BC20);
PlayerScript.PlayerAlive = (bool(*)(void*, bool))PlayerScript.PlayerAliveOffset;

PlayerScript.GetTabItemOffset = getRealOffset(0x50BC64);
PlayerScript.GetTabItem = (void *(*)(void*))PlayerScript.GetTabItemOffset;

PlayerScript.ResetReportedDamageOffset = getRealOffset(0x50BC6C);
PlayerScript.ResetReportedDamage = (void(*)(void*))PlayerScript.ResetReportedDamageOffset;

PlayerScript.DisplayReportedDamageOffset = getRealOffset(0x50BC70);
PlayerScript.DisplayReportedDamage = (void(*)(void*, float))PlayerScript.DisplayReportedDamageOffset;

PlayerScript.DisplayAcknowledgedDamageOffset = getRealOffset(0x4E4DA0);
PlayerScript.DisplayAcknowledgedDamage = (void(*)(void*, monoString*, float))PlayerScript.DisplayAcknowledgedDamageOffset;

PlayerScript.DetectWallhackCheatOffset = getRealOffset(0x4ECB98);
PlayerScript.DetectWallhackCheat = (void(*)(void*, void *, Vector3))PlayerScript.DetectWallhackCheatOffset;

PlayerScript.LogOffset = getRealOffset(0x50BC74);
PlayerScript.Log = (void(*)(void*, monoString*))PlayerScript.LogOffset;

PlayerScript.GetGunStatsOffset = getRealOffset(0x50BC78);
PlayerScript.GetGunStats = (int (*)(void*, int))PlayerScript.GetGunStatsOffset;

AnalyticsHelper.LogSectionLoadedOffset = getRealOffset(0x834B80);
AnalyticsHelper.LogSectionLoaded = (void(*)(monoString*))AnalyticsHelper.LogSectionLoadedOffset;

AnalyticsHelper.LogSectionLoadedRevampedOffset = getRealOffset(0x834F2C);
AnalyticsHelper.LogSectionLoadedRevamped = (void(*)(monoString*))AnalyticsHelper.LogSectionLoadedRevampedOffset;

AnalyticsHelper.LogBuyCaseOffset = getRealOffset(0x835130);
AnalyticsHelper.LogBuyCase = (void(*)(monoString*, int))AnalyticsHelper.LogBuyCaseOffset;

AnalyticsHelper.LogBuyCreditsOffset = getRealOffset(0x835504);
AnalyticsHelper.LogBuyCredits = (void(*)(monoString*, int))AnalyticsHelper.LogBuyCreditsOffset;

AnalyticsHelper.LogSpentCreditsEventOffset = getRealOffset(0x835990);
AnalyticsHelper.LogSpentCreditsEvent = (void(*)(monoString*, monoString*, monoString*, float))AnalyticsHelper.LogSpentCreditsEventOffset;

AnalyticsHelper.LogSpentGoldEventOffset = getRealOffset(0x835BF0);
AnalyticsHelper.LogSpentGoldEvent = (void(*)(monoString*, monoString*, float))AnalyticsHelper.LogSpentGoldEventOffset;

AnalyticsHelper.LogPurchaseOffset = getRealOffset(0x835E20);
AnalyticsHelper.LogPurchase = (void(*)(float, monoString*, monoString*, monoString*))AnalyticsHelper.LogPurchaseOffset;

AnalyticsHelper.LogShopEventOffset = getRealOffset(0x836068);
AnalyticsHelper.LogShopEvent = (void(*)(monoString*))AnalyticsHelper.LogShopEventOffset;

AnalyticsHelper.LogCompletedRegistrationEventOffset = getRealOffset(0x8361F0);
AnalyticsHelper.LogCompletedRegistrationEvent = (void(*)(monoString*))AnalyticsHelper.LogCompletedRegistrationEventOffset;

AnalyticsStandardParams.CreateFTUEParametersOffset = getRealOffset(0x836434);
AnalyticsStandardParams.CreateFTUEParameters = (void(*)())AnalyticsStandardParams.CreateFTUEParametersOffset;

AnalyticsStandardParams.InitializeStandardParametersOffset = getRealOffset(0x83651C);
AnalyticsStandardParams.InitializeStandardParameters = (void(*)())AnalyticsStandardParams.InitializeStandardParametersOffset;

LeaderboardMemberJson.GetUsernameOffset = getRealOffset(0x660F14);
LeaderboardMemberJson.GetUsername = (monoString *(*)(void*))LeaderboardMemberJson.GetUsernameOffset;

LeaderboardMemberJson.GetRankOffset = getRealOffset(0x660D64);
LeaderboardMemberJson.GetRank = (int(*)(void*))LeaderboardMemberJson.GetRankOffset;

LeaderboardMemberJson.GetTotalKillsOffset = getRealOffset(0x660F1C);
LeaderboardMemberJson.GetTotalKills = (int(*)(void*))LeaderboardMemberJson.GetTotalKillsOffset;

LeaderboardMemberJson.GetBadgeNumberOffset = getRealOffset(0x660F24);
LeaderboardMemberJson.GetBadgeNumber = (int(*)(void*))LeaderboardMemberJson.GetBadgeNumberOffset;

LeaderboardMemberJson.GetWeaponGroupStringOffset = getRealOffset(0x660F2C);
LeaderboardMemberJson.GetWeaponGroupString = (monoString *(*)(void*))LeaderboardMemberJson.GetWeaponGroupStringOffset;

LeaderboardMemberJson.GetRegionOffset = getRealOffset(0x660F34);
LeaderboardMemberJson.GetRegion = (monoString *(*)(void*))LeaderboardMemberJson.GetRegionOffset;

LeaderboardMemberJson.GetFavoriteWeaponOffset = getRealOffset(0x660DE0);
LeaderboardMemberJson.GetFavoriteWeapon = (int (*)(void*))LeaderboardMemberJson.GetFavoriteWeaponOffset;

LeaderboardModel.OnSuccessOffset = getRealOffset(0x66113C);
LeaderboardModel.OnSuccess = (void(*)(void*, monoString*))LeaderboardModel.OnSuccessOffset;

LeaderboardModel.GetLeaderboardOffset = getRealOffset(0x661248);
PauseMenuToggleAnalyticsTrigger.AwakeOffset = getRealOffset(0x55BAE8);
PauseMenuToggleAnalyticsTrigger.Awake = (void(*)(void*))PauseMenuToggleAnalyticsTrigger.AwakeOffset;

PauseMenuToggleAnalyticsTrigger.OnPointerUpOffset = getRealOffset(0x55BB64);
PauseMenuToggleAnalyticsTrigger.OnPointerUp = (void(*)(void*, void *))PauseMenuToggleAnalyticsTrigger.OnPointerUpOffset;

SingleInteraction.get_ItemOffset = getRealOffset(0x572A20);
SingleInteraction.get_Item = (int(*)(void*, int))SingleInteraction.get_ItemOffset;

SingleInteraction.set_ItemOffset = getRealOffset(0x572A98);
SingleInteraction.set_Item = (void(*)(void*, int, int))SingleInteraction.set_ItemOffset;

PlayerStatsHelper.LogInteractionOffset = getRealOffset(0x7019A0);
PlayerStatsHelper.LogInteraction = (void(*)(int, monoString*, monoString*))PlayerStatsHelper.LogInteractionOffset;

PlayerStatsHelper.LogCreditsOffset = getRealOffset(0x702268);
PlayerStatsHelper.LogCredits = (void(*)(int))PlayerStatsHelper.LogCreditsOffset;

PlayerStatsHelper.LogXPOffset = getRealOffset(0x7022EC);
PlayerStatsHelper.LogXP = (void(*)(int))PlayerStatsHelper.LogXPOffset;

PlayerStatsHelper.LeftGameOffset = getRealOffset(0x702370);
PlayerStatsHelper.LeftGame = (void(*)())PlayerStatsHelper.LeftGameOffset;

PlayerStatsHelper.OnLeftSentOffset = getRealOffset(0x702FA4);
PlayerStatsHelper.OnLeftSent = (void(*)(monoString*))PlayerStatsHelper.OnLeftSentOffset;

PlayerStatsHelper.RandomNumbersOffset = getRealOffset(0x702EBC);
PlayerStatsHelper.RandomNumbers = (monoString *(*)(int))PlayerStatsHelper.RandomNumbersOffset;

PlayerStatsHelper.BuildGameIDOffset = getRealOffset(0x7030E0);
PlayerStatsHelper.BuildGameID = (monoString *(*)())PlayerStatsHelper.BuildGameIDOffset;

PlayerStatsMaps.ConvertRegionID2UIOffset = getRealOffset(0x70324C);
PlayerStatsMaps.ConvertRegionID2UI = (monoString *(*)(monoString*))PlayerStatsMaps.ConvertRegionID2UIOffset;

PlayerStatsMaps.ConvertRegionUI2IDOffset = getRealOffset(0x703360);
PlayerStatsMaps.ConvertRegionUI2ID = (monoString *(*)(monoString*))PlayerStatsMaps.ConvertRegionUI2IDOffset;

PlayerStatsMaps.ConvertWeaponGroupID2ENOffset = getRealOffset(0x703474);
PlayerStatsMaps.ConvertWeaponGroupID2EN = (int (*)(monoString*))PlayerStatsMaps.ConvertWeaponGroupID2ENOffset;

PlayerStatsMaps.ConvertWeaponGroupEN2IDOffset = getRealOffset(0x70357C);
PlayerStatsMaps.ConvertWeaponGroupEN2ID = (monoString *(*)(int))PlayerStatsMaps.ConvertWeaponGroupEN2IDOffset;

PlayerStatsMaps.ConvertWeaponGroupUI2IDOffset = getRealOffset(0x703690);
PlayerStatsMaps.ConvertWeaponGroupUI2ID = (monoString *(*)(monoString*))PlayerStatsMaps.ConvertWeaponGroupUI2IDOffset;

PlayerStatsMaps.ConvertWeaponGroupID2UIOffset = getRealOffset(0x7037A4);
PlayerStatsMaps.ConvertWeaponGroupID2UI = (monoString *(*)(monoString*))PlayerStatsMaps.ConvertWeaponGroupID2UIOffset;

SectionLoadedAnalyticsTrigger.OnEnableOffset = getRealOffset(0x61C2C0);
SectionLoadedAnalyticsTrigger.OnEnable = (void(*)(void*))SectionLoadedAnalyticsTrigger.OnEnableOffset;

UIEventTrigger.AwakeOffset = getRealOffset(0x5E0280);
UIEventTrigger.Awake = (void(*)(void*))UIEventTrigger.AwakeOffset;

UIEventTrigger.OnClickOffset = getRealOffset(0x5E0390);
UIEventTrigger.OnClick = (void(*)(void*))UIEventTrigger.OnClickOffset;

WeaponStatsModel.OnSuccessOffset = getRealOffset(0x8B5B7C);
WeaponStatsModel.OnSuccess = (void(*)(void*, monoString*))WeaponStatsModel.OnSuccessOffset;

WeaponStatsModel.GetWeaponStatsOffset = getRealOffset(0x8B5E84);
WeaponStatsModel.GetRewardsOffset = getRealOffset(0x8B5E8C);
WeaponStatsModel.DeleteRewardOffset = getRealOffset(0x8B5E94);
WeaponStatsModel.DeleteReward = (void(*)(void*, int))WeaponStatsModel.DeleteRewardOffset;

PlayerUtils.IsPlayerOnTeamOffset = getRealOffset(0x704B18);
PlayerUtils.IsPlayerOnTeam = (bool(*)(void *, void *))PlayerUtils.IsPlayerOnTeamOffset;

PlayerUtils.IsVisibleWithRaycastsOffset = getRealOffset(0x704D6C);
PlayerUtils.IsVisibleWithRaycasts = (bool(*)(int, Vector3, Vector3))PlayerUtils.IsVisibleWithRaycastsOffset;

PlayersRestrictor.OnPlayerKickedOffset = getRealOffset(0x6F9610);
PlayersRestrictor.OnPlayerKicked = (void(*)(monoString*))PlayersRestrictor.OnPlayerKickedOffset;

PlayersRestrictor.AcceptPlayerOffset = getRealOffset(0x70572C);
PlayersRestrictor.AcceptPlayer = (bool(*)(void *, monoString*))PlayersRestrictor.AcceptPlayerOffset;

PlayerscriptReference.StartOffset = getRealOffset(0x706B98);
PlayerscriptReference.Start = (void(*)(void*))PlayerscriptReference.StartOffset;

Points.AwakeOffset = getRealOffset(0x707100);
Points.Awake = (void(*)(void*))Points.AwakeOffset;

Points.StartOffset = getRealOffset(0x70715C);
Points.Start = (void(*)(void*))Points.StartOffset;

Points.SetFreeForAllOffset = getRealOffset(0x707900);
Points.SetFreeForAll = (void(*)(void*, int))Points.SetFreeForAllOffset;

Points.SetTimerOffset = getRealOffset(0x707D40);
Points.SetTimer = (void(*)(void*, monoString*))Points.SetTimerOffset;

Points.RefreshMyKillsFFAOffset = getRealOffset(0x707DA4);
Points.RefreshMyKillsFFA = (void(*)(void*))Points.RefreshMyKillsFFAOffset;

Points.RefreshEnemyKillsFFAOffset = getRealOffset(0x7080D0);
Points.RefreshEnemyKillsFFA = (void(*)(void*))Points.RefreshEnemyKillsFFAOffset;

Points.UpdateUSPointsOffset = getRealOffset(0x7087E4);
Points.UpdateUSPoints = (void(*)(void*, int))Points.UpdateUSPointsOffset;

Points.UpdateRUPointsOffset = getRealOffset(0x708920);
Points.UpdateRUPoints = (void(*)(void*, int))Points.UpdateRUPointsOffset;

Points.GetUSPointsOffset = getRealOffset(0x708A5C);
Points.GetUSPoints = (int(*)(void*))Points.GetUSPointsOffset;

Points.GetRUPointsOffset = getRealOffset(0x708A94);
Points.GetRUPoints = (int(*)(void*))Points.GetRUPointsOffset;

Points.OnDestroyOffset = getRealOffset(0x708ACC);
Points.OnDestroy = (void(*)(void*))Points.OnDestroyOffset;

PokiUnitySDK.get_InstanceOffset = getRealOffset(0x708FB0);
PokiUnitySDK.get_Instance = (void *(*)())PokiUnitySDK.get_InstanceOffset;

PokiUnitySDK.get_isShowingAdOffset = getRealOffset(0x70C064);
PokiUnitySDK.get_isShowingAd = (bool(*)(void*))PokiUnitySDK.get_isShowingAdOffset;

PokiUnitySDK.set_isShowingAdOffset = getRealOffset(0x70C06C);
PokiUnitySDK.set_isShowingAd = (void(*)(void*, bool))PokiUnitySDK.set_isShowingAdOffset;

PokiUnitySDK.initOffset = getRealOffset(0x70BC04);
PokiUnitySDK.init = (void(*)(void*))PokiUnitySDK.initOffset;

PokiUnitySDK.isInitializedOffset = getRealOffset(0x70C074);
PokiUnitySDK.isInitialized = (bool(*)(void*))PokiUnitySDK.isInitializedOffset;

PokiUnitySDK.adsBlockedOffset = getRealOffset(0x70C07C);
PokiUnitySDK.adsBlocked = (bool(*)(void*))PokiUnitySDK.adsBlockedOffset;

PokiUnitySDK.gameLoadingStartOffset = getRealOffset(0x70C084);
PokiUnitySDK.gameLoadingStart = (void(*)(void*))PokiUnitySDK.gameLoadingStartOffset;

PokiUnitySDK.gameLoadingFinishedOffset = getRealOffset(0x70C108);
PokiUnitySDK.gameLoadingFinished = (void(*)(void*))PokiUnitySDK.gameLoadingFinishedOffset;

PokiUnitySDK.roundStartOffset = getRealOffset(0x70C18C);
PokiUnitySDK.roundStart = (void(*)(void*, monoString*))PokiUnitySDK.roundStartOffset;

PokiUnitySDK.roundEndOffset = getRealOffset(0x70C210);
PokiUnitySDK.roundEnd = (void(*)(void*, monoString*))PokiUnitySDK.roundEndOffset;

PokiUnitySDK.gameInteractiveOffset = getRealOffset(0x70C294);
PokiUnitySDK.gameInteractive = (void(*)(void*))PokiUnitySDK.gameInteractiveOffset;

PokiUnitySDK.customEventOffset = getRealOffset(0x70C318);
PokiUnitySDK.customEvent = (void(*)(void*, monoString*, monoString*, void *))PokiUnitySDK.customEventOffset;

PokiUnitySDK.setPlayerAgeOffset = getRealOffset(0x70C39C);
PokiUnitySDK.setPlayerAge = (void(*)(void*, int))PokiUnitySDK.setPlayerAgeOffset;

PokiUnitySDK.togglePlayerAdvertisingConsentOffset = getRealOffset(0x70C44C);
PokiUnitySDK.togglePlayerAdvertisingConsent = (void(*)(void*, bool))PokiUnitySDK.togglePlayerAdvertisingConsentOffset;

PokiUnitySDK.gameLoadingProgressOffset = getRealOffset(0x70C4FC);
PokiUnitySDK.gameLoadingProgress = (void(*)(void*, void *))PokiUnitySDK.gameLoadingProgressOffset;

PokiUnitySDK.gameplayStartOffset = getRealOffset(0x70BD3C);
PokiUnitySDK.gameplayStart = (void(*)(void*))PokiUnitySDK.gameplayStartOffset;

PokiUnitySDK.gameplayStopOffset = getRealOffset(0x70BE74);
PokiUnitySDK.gameplayStop = (void(*)(void*))PokiUnitySDK.gameplayStopOffset;

PokiUnitySDK.commercialBreakOffset = getRealOffset(0x70A1B8);
PokiUnitySDK.commercialBreak = (void(*)(void*))PokiUnitySDK.commercialBreakOffset;

PokiUnitySDK.rewardedBreakOffset = getRealOffset(0x709910);
PokiUnitySDK.rewardedBreak = (void(*)(void*))PokiUnitySDK.rewardedBreakOffset;

PokiUnitySDK.happyTimeOffset = getRealOffset(0x70BF20);
PokiUnitySDK.happyTime = (void(*)(void*, float))PokiUnitySDK.happyTimeOffset;

PokiUnitySDK.displayAdOffset = getRealOffset(0x70B2A4);
PokiUnitySDK.displayAd = (void(*)(void*, monoString*, monoString*, monoString*, monoString*))PokiUnitySDK.displayAdOffset;

PokiUnitySDK.destroyAdOffset = getRealOffset(0x70ABB8);
PokiUnitySDK.destroyAd = (void(*)(void*, monoString*))PokiUnitySDK.destroyAdOffset;

PokiUnitySDK.readyOffset = getRealOffset(0x70C6B8);
PokiUnitySDK.ready = (void(*)(void*))PokiUnitySDK.readyOffset;

PokiUnitySDK.adblockOffset = getRealOffset(0x70C6C4);
PokiUnitySDK.adblock = (void(*)(void*))PokiUnitySDK.adblockOffset;

PokiUnitySDK.commercialBreakCompletedOffset = getRealOffset(0x70C580);
PokiUnitySDK.commercialBreakCompleted = (void(*)(void*))PokiUnitySDK.commercialBreakCompletedOffset;

PokiUnitySDK.rewardedBreakCompletedOffset = getRealOffset(0x70C610);
PokiUnitySDK.rewardedBreakCompleted = (void(*)(void*, monoString*))PokiUnitySDK.rewardedBreakCompletedOffset;

PopulateAndTranslateLongText.StartOffset = getRealOffset(0x70D500);
PopulateAndTranslateLongText.Start = (void(*)(void*))PopulateAndTranslateLongText.StartOffset;

PopupMenuItem.AwakeOffset = getRealOffset(0x70E11C);
PopupMenuItem.Awake = (void(*)(void*))PopupMenuItem.AwakeOffset;

PopupMenuItem.StartOffset = getRealOffset(0x70E288);
PopupMenuItem.Start = (void(*)(void*))PopupMenuItem.StartOffset;

PopupMenuItem.OnDestroyOffset = getRealOffset(0x70E338);
PopupMenuItem.OnDestroy = (void(*)(void*))PopupMenuItem.OnDestroyOffset;

PopupMenuItem.SetPointsOffset = getRealOffset(0x70E49C);
PopupMenuItem.SetPoints = (void(*)(void*, int))PopupMenuItem.SetPointsOffset;

PopupMenuItem.SetFirstPhaseTextOffset = getRealOffset(0x70E610);
PopupMenuItem.SetFirstPhaseText = (void(*)(void*, monoString*))PopupMenuItem.SetFirstPhaseTextOffset;

PopupMenuItem.SetSecondPhaseNameOffset = getRealOffset(0x70E618);
PopupMenuItem.SetSecondPhaseName = (void(*)(void*, monoString*))PopupMenuItem.SetSecondPhaseNameOffset;

PopupMenuItem.SetSecondPhaseWeaponNameOffset = getRealOffset(0x70E620);
PopupMenuItem.SetSecondPhaseWeaponName = (void(*)(void*, monoString*))PopupMenuItem.SetSecondPhaseWeaponNameOffset;

PopupMenuItem.SetSizeOffset = getRealOffset(0x70E698);
PopupMenuItem.SetSize = (void(*)(void*, float))PopupMenuItem.SetSizeOffset;

PopupMenuItem.PlayOffset = getRealOffset(0x70E8E4);
PopupMenuItem.Play = (void(*)(void*, bool))PopupMenuItem.PlayOffset;

PopupMenuItem.UpdateFastOffset = getRealOffset(0x70EE88);
PopupMenuItem.UpdateFast = (void(*)(void*))PopupMenuItem.UpdateFastOffset;

PopupMenuScript.AwakeOffset = getRealOffset(0x70F7B0);
PopupMenuScript.Awake = (void(*)(void*))PopupMenuScript.AwakeOffset;

PopupMenuScript.StartOffset = getRealOffset(0x70F83C);
PopupMenuScript.Start = (void(*)(void*))PopupMenuScript.StartOffset;

PopupMenuScript.OnDestroyOffset = getRealOffset(0x70F8EC);
PopupMenuScript.OnDestroy = (void(*)(void*))PopupMenuScript.OnDestroyOffset;

PopupMenuScript.UpdateFastOffset = getRealOffset(0x70FAB0);
PopupMenuScript.UpdateFast = (void(*)(void*))PopupMenuScript.UpdateFastOffset;

PopupMenuScript.MakePopupOffset = getRealOffset(0x70FB54);
PopupMenuScript.MakePopup = (void *(*)(void*, float, monoString*, monoString*, int, int, float))PopupMenuScript.MakePopupOffset;

PopupMenuScript.showPopupOffset = getRealOffset(0x70FC84);
PopupMenuScript.showPopup = (void(*)(void*, monoString*, monoString*, int, int, float))PopupMenuScript.showPopupOffset;

SpecialOfferForPopup.get_SpecialOffersOffset = getRealOffset(0x57C65C);
SpecialOfferForPopup.HasValidOffersOffset = getRealOffset(0x57C664);
SpecialOfferForPopup.HasValidOffers = (bool(*)(void*))SpecialOfferForPopup.HasValidOffersOffset;

SpecialOfferForPopup.OnDisableOffset = getRealOffset(0x57C748);
SpecialOfferForPopup.OnDisable = (void(*)(void*))SpecialOfferForPopup.OnDisableOffset;

SpecialOfferForPopup.ClearOffersOffset = getRealOffset(0x57C754);
SpecialOfferForPopup.ClearOffers = (void(*)(void*))SpecialOfferForPopup.ClearOffersOffset;

PrefabManager.getGunPrefabOffset = getRealOffset(0x710328);
PrefabManager.getGunPrefab = (void *(*)(void*, int))PrefabManager.getGunPrefabOffset;

PrefabManager.getPlayerGunPrefabOffset = getRealOffset(0x7103C0);
PrefabManager.getPlayerGunPrefab = (void *(*)(void*, int))PrefabManager.getPlayerGunPrefabOffset;

PrefabManager.AwakeOffset = getRealOffset(0x7104A4);
PrefabManager.Awake = (void(*)(void*))PrefabManager.AwakeOffset;

PrefabManager.OnDestroyOffset = getRealOffset(0x710500);
PrefabManager.OnDestroy = (void(*)(void*))PrefabManager.OnDestroyOffset;

RaycastBulletScript.AwakeOffset = getRealOffset(0x633800);
RaycastBulletScript.Awake = (void(*)(void*))RaycastBulletScript.AwakeOffset;

RaycastBulletScript.StartOffset = getRealOffset(0x633E04);
RaycastBulletScript.Start = (void(*)(void*))RaycastBulletScript.StartOffset;

RaycastBulletScript.shouldHaveBigBulletOffset = getRealOffset(0x635268);
RaycastBulletScript.shouldHaveBigBullet = (bool(*)(void*, int))RaycastBulletScript.shouldHaveBigBulletOffset;

RaycastBulletScript.SetDefaultTrailColorOffset = getRealOffset(0x635190);
RaycastBulletScript.SetDefaultTrailColor = (void(*)(void*))RaycastBulletScript.SetDefaultTrailColorOffset;

RaycastBulletScript.SetSniperTrailOffset = getRealOffset(0x6352B8);
RaycastBulletScript.SetSniperTrail = (void(*)(void*))RaycastBulletScript.SetSniperTrailOffset;

RaycastBulletScript.SetBlueColorOffset = getRealOffset(0x6354C0);
RaycastBulletScript.SetBlueColor = (void(*)(void*))RaycastBulletScript.SetBlueColorOffset;

RaycastBulletScript.SetSelectedCustomColorOffset = getRealOffset(0x6356CC);
RaycastBulletScript.SetSelectedCustomColor = (void(*)(void*, int))RaycastBulletScript.SetSelectedCustomColorOffset;

RaycastBulletScript.OnDestroyOffset = getRealOffset(0x6361E4);
RaycastBulletScript.OnDestroy = (void(*)(void*))RaycastBulletScript.OnDestroyOffset;

RaycastBulletScript.CheckForSuppressionOffset = getRealOffset(0x636348);
RaycastBulletScript.CheckForSuppression = (void(*)(void*))RaycastBulletScript.CheckForSuppressionOffset;

RaycastBulletScript.CheckIfHitPlayerOffset = getRealOffset(0x636594);
RaycastBulletScript.CheckIfHitPlayer = (bool(*)(void*, int, bool))RaycastBulletScript.CheckIfHitPlayerOffset;

RaycastBulletScript.UpdateFastOffset = getRealOffset(0x63740C);
RaycastBulletScript.UpdateFast = (void(*)(void*))RaycastBulletScript.UpdateFastOffset;

RaycastBulletScript.explodeOffset = getRealOffset(0x639688);
RaycastBulletScript.explode = (void(*)(void*, Vector3, float))RaycastBulletScript.explodeOffset;

RaycastBulletScript.playAudioClipOffset = getRealOffset(0x639BB8);
RaycastBulletScript.playAudioClip = (void(*)(void*, void *, float))RaycastBulletScript.playAudioClipOffset;

RaycastBulletScript.resetBulletOffset = getRealOffset(0x639E08);
RaycastBulletScript.resetBullet = (void(*)(void*))RaycastBulletScript.resetBulletOffset;

RaycastBulletScript.IsLayerSolidOffset = getRealOffset(0x639FE0);
RaycastBulletScript.IsLayerSolid = (bool(*)(void*, int))RaycastBulletScript.IsLayerSolidOffset;

RaycastBulletScript.RaycastBloodSplatterOffset = getRealOffset(0x637214);
RaycastBulletScript.RaycastBloodSplatter = (void(*)(void*, int))RaycastBulletScript.RaycastBloodSplatterOffset;

RaycastBulletScript.OnHitOffset = getRealOffset(0x637C44);
RaycastBulletScript.OnHit = (void(*)(void*, int, Vector3))RaycastBulletScript.OnHitOffset;

RaycastBulletScript.KillBulletOffset = getRealOffset(0x63A0B0);
RaycastBulletScript.KillBullet = (void(*)(void*))RaycastBulletScript.KillBulletOffset;

RaycastBulletScript.shouldResetTimeOffset = getRealOffset(0x63A1A8);
RaycastBulletScript.shouldResetTime = (bool(*)(void*, int))RaycastBulletScript.shouldResetTimeOffset;

BulletMesh.GetBulletMeshWithTypeAndColorOffset = getRealOffset(0x6CB6C4);
BulletMesh.GetBulletMeshWithTypeAndColor = (void *(*)(void *, Color))BulletMesh.GetBulletMeshWithTypeAndColorOffset;

RenderType.set_scaleOffset = getRealOffset(0x635E2C);
RenderType.set_scale = (void(*)(void*, float))RenderType.set_scaleOffset;

RenderType.get_colorOffset = getRealOffset(0x63F20C);
RenderType.get_color = (Color (*)(void*))RenderType.get_colorOffset;

RenderType.set_colorOffset = getRealOffset(0x635C68);
RenderType.set_color = (void(*)(void*, Color))RenderType.set_colorOffset;

RenderType.InitializeOffset = getRealOffset(0x633CA8);
RenderType.Initialize = (void(*)(void*))RenderType.InitializeOffset;

RenderType.ShowOffset = getRealOffset(0x635F60);
RenderType.Show = (void(*)(void*))RenderType.ShowOffset;

RenderType.HideOffset = getRealOffset(0x635360);
RenderType.Hide = (void(*)(void*))RenderType.HideOffset;

Recoil.SetMassOffset = getRealOffset(0x63A3E0);
Recoil.SetMass = (void(*)(void*, float))Recoil.SetMassOffset;

Recoil.ImpulseOffset = getRealOffset(0x63A3E8);
Recoil.Impulse = (void(*)(void*, Vector3))Recoil.ImpulseOffset;

Recoil.UpdateOffset = getRealOffset(0x63A4AC);
Recoil.Update = (void(*)(void*))Recoil.UpdateOffset;

RecolorImage.AwakeOffset = getRealOffset(0x63A9A8);
RecolorImage.Awake = (void(*)(void*))RecolorImage.AwakeOffset;

RecolorImage.SetOriginalColorOffset = getRealOffset(0x63AA08);
RecolorImage.SetOriginalColor = (void(*)(void*))RecolorImage.SetOriginalColorOffset;

RecolorImage.SetColorOffset = getRealOffset(0x63AA5C);
RecolorImage.SetColor = (void(*)(void*, Color))RecolorImage.SetColorOffset;

RecolorImage.StartOffset = getRealOffset(0x63AAB0);
RecolorImage.Start = (void(*)(void*))RecolorImage.StartOffset;

RegisterManager.AwakeOffset = getRealOffset(0x63B900);
RegisterManager.Awake = (void(*)(void*))RegisterManager.AwakeOffset;

RegisterManager.ManageGuestAccountOffset = getRealOffset(0x63BA78);
RegisterManager.ManageGuestAccount = (void *(*)(void*))RegisterManager.ManageGuestAccountOffset;

RegisterManager.GoToLoginOffset = getRealOffset(0x63BB04);
RegisterManager.GoToLogin = (void(*)(void*))RegisterManager.GoToLoginOffset;

RegisterManager.GoToSettingsOffset = getRealOffset(0x63BB94);
RegisterManager.GoToSettings = (void(*)(void*))RegisterManager.GoToSettingsOffset;

RegisterManager.GoToOpenCasesOffset = getRealOffset(0x63BC94);
RegisterManager.GoToOpenCases = (void(*)(void*))RegisterManager.GoToOpenCasesOffset;

RegisterManager.GoToMultiplayerOffset = getRealOffset(0x63BD94);
RegisterManager.GoToMultiplayer = (void(*)(void*))RegisterManager.GoToMultiplayerOffset;

RegisterManager.ShowAskForAccountPopupOffset = getRealOffset(0x63BE94);
RegisterManager.ShowAskForAccountPopup = (void(*)(void*))RegisterManager.ShowAskForAccountPopupOffset;

RegisterManager.ShowNewUserPopupOffset = getRealOffset(0x63BEC0);
RegisterManager.ShowNewUserPopup = (void(*)(void*))RegisterManager.ShowNewUserPopupOffset;

RegisterManager.CheckIfUsernameIsUniqueOffset = getRealOffset(0x63BEEC);
RegisterManager.CheckIfUsernameIsUnique = (void(*)(void*))RegisterManager.CheckIfUsernameIsUniqueOffset;

RegisterManager.CheckIfUsernameIsUnique1Offset = getRealOffset(0x63BFAC);
RegisterManager.CheckIfUsernameIsUnique1 = (void(*)(void*, monoString*))RegisterManager.CheckIfUsernameIsUnique1Offset;

RegisterManager.onSuccess_IsUsernameUniqueOffset = getRealOffset(0x63C24C);
RegisterManager.onSuccess_IsUsernameUnique = (void(*)(void*, monoString*))RegisterManager.onSuccess_IsUsernameUniqueOffset;

RegisterManager.onErrorOffset = getRealOffset(0x63C6C0);
RegisterManager.onError = (void(*)(void*, monoString*))RegisterManager.onErrorOffset;

RegisterManager.ShowOneTimePasswordReminderOffset = getRealOffset(0x63C75C);
RegisterManager.ShowOneTimePasswordReminder = (void(*)(void*))RegisterManager.ShowOneTimePasswordReminderOffset;

RegisterManager.ShowOneTimePasswordReminder1Offset = getRealOffset(0x63C8C8);
RegisterManager.ShowOneTimePasswordReminder1 = (void(*)(void*, monoString*))RegisterManager.ShowOneTimePasswordReminder1Offset;

RegisterManager.GenerateRandomPasswordOffset = getRealOffset(0x63C524);
RegisterManager.GenerateRandomPassword = (void(*)(void*))RegisterManager.GenerateRandomPasswordOffset;

RegisterManager.CloseOneTimePasswordReminderOffset = getRealOffset(0x63C924);
RegisterManager.CloseOneTimePasswordReminder = (void(*)(void*))RegisterManager.CloseOneTimePasswordReminderOffset;

RegisterManager.RegisterNewUserOffset = getRealOffset(0x63C950);
RegisterManager.RegisterNewUser = (void(*)(void*, int, int))RegisterManager.RegisterNewUserOffset;

RegisterManager.CR_RegisterNewUserOffset = getRealOffset(0x63CA9C);
RegisterManager.CR_RegisterNewUser = (void *(*)(void*))RegisterManager.CR_RegisterNewUserOffset;

RegisterManager.LoginOnFinishedTheRegisterOffset = getRealOffset(0x63CB3C);
RegisterManager.LoginOnFinishedTheRegister = (void(*)(void*))RegisterManager.LoginOnFinishedTheRegisterOffset;

RegisterManager.ShowAfterPurchasePopupOffset = getRealOffset(0x63CD00);
RegisterManager.ShowAfterPurchasePopup = (void(*)(void*))RegisterManager.ShowAfterPurchasePopupOffset;

RegisterManager.ShowAccountCompletePopupOffset = getRealOffset(0x63CD48);
RegisterManager.ShowAccountCompletePopup = (void(*)(void*))RegisterManager.ShowAccountCompletePopupOffset;

UpdateAccountController.OnEnableOffset = getRealOffset(0x89092C);
UpdateAccountController.OnEnable = (void(*)(void*))UpdateAccountController.OnEnableOffset;

UpdateAccountController.UpdateAccountDataOffset = getRealOffset(0x890D08);
UpdateAccountController.UpdateAccountData = (void(*)(void*))UpdateAccountController.UpdateAccountDataOffset;

UpdateAccountController.Call_UpdateAccountDataOffset = getRealOffset(0x890F74);
UpdateAccountController.Call_UpdateAccountData = (void *(*)(void*))UpdateAccountController.Call_UpdateAccountDataOffset;

UpdateAccountController.onSuccess_UpdateAccountOffset = getRealOffset(0x891014);
UpdateAccountController.onSuccess_UpdateAccount = (void(*)(void*, monoString*))UpdateAccountController.onSuccess_UpdateAccountOffset;

UpdateAccountController.onErrorOffset = getRealOffset(0x8915C0);
UpdateAccountController.onError = (void(*)(void*, monoString*))UpdateAccountController.onErrorOffset;

UpdateAccountController.CheckFieldsOffset = getRealOffset(0x890D8C);
UpdateAccountController.CheckFields = (bool(*)(void*))UpdateAccountController.CheckFieldsOffset;

UpdateAccountController.ShowTempPasswordOffset = getRealOffset(0x89168C);
UpdateAccountController.ShowTempPassword = (void(*)(void*))UpdateAccountController.ShowTempPasswordOffset;

ReloadAddAmmo.AddOneAmmoOffset = getRealOffset(0x63D8AC);
ReloadAddAmmo.AddOneAmmo = (void(*)(void*))ReloadAddAmmo.AddOneAmmoOffset;

ReloadWeapon.OnPointerUpOffset = getRealOffset(0x63D9E4);
ReloadWeapon.OnPointerUp = (void(*)(void*, void *))ReloadWeapon.OnPointerUpOffset;

RemoteValidator.AwakeOffset = getRealOffset(0x63DACC);
RemoteValidator.Awake = (void(*)(void*))RemoteValidator.AwakeOffset;

RemoteValidator.StartOffset = getRealOffset(0x63DB28);
RemoteValidator.Start = (void(*)(void*))RemoteValidator.StartOffset;

RemoteValidator.OnDestroyOffset = getRealOffset(0x63DD74);
RemoteValidator.OnDestroy = (void(*)(void*))RemoteValidator.OnDestroyOffset;

RemoteValidator.StartPostOffset = getRealOffset(0x63DFC0);
RemoteValidator.StartPost = (void(*)(void*, void *, monoString*, float))RemoteValidator.StartPostOffset;

RemoteValidator.PostAfterSecondsElapseOffset = getRealOffset(0x63E2E0);
RemoteValidator.PostAfterSecondsElapse = (void *(*)(void*, void *, monoString*, float))RemoteValidator.PostAfterSecondsElapseOffset;

RemoteValidator.HandleResponseOffset = getRealOffset(0x63E3CC);
RemoteValidator.HandleResponse = (void(*)(void*, void *, monoString*))RemoteValidator.HandleResponseOffset;

RemoteValidator.PostOffset = getRealOffset(0x63EB4C);
RemoteValidator.Post = (void *(*)(void*, void *, monoString*))RemoteValidator.PostOffset;

RemoteValidator.isIAPmanagerInitializedOffset = getRealOffset(0x63EC18);
RemoteValidator.isIAPmanagerInitialized = (bool(*)(void*))RemoteValidator.isIAPmanagerInitializedOffset;

RemoteValidator.ConfirmPendingPurchaseOffset = getRealOffset(0x63E968);
RemoteValidator.ConfirmPendingPurchase = (void(*)(void*, monoString*))RemoteValidator.ConfirmPendingPurchaseOffset;

Replay.StartOffset = getRealOffset(0x63F224);
Replay.Start = (void(*)(void*))Replay.StartOffset;

Replay.OnPointerUpOffset = getRealOffset(0x63F2E4);
Replay.OnPointerUp = (void(*)(void*, void *))Replay.OnPointerUpOffset;

HandleVoteManager.SetVoteDataOffset = getRealOffset(0x7EFE2C);
HandleVoteManager.SetVoteData = (void(*)(void*, monoString*, monoString*, monoString*))HandleVoteManager.SetVoteDataOffset;

HandleVoteManager.HandleVoteOffset = getRealOffset(0x7EFE38);
HandleVoteManager.HandleVote = (void(*)(void*))HandleVoteManager.HandleVoteOffset;

HandleVoteManager.SendVoteOffset = getRealOffset(0x7EFE5C);
HandleVoteManager.SendVote = (void *(*)(void*))HandleVoteManager.SendVoteOffset;

HandleVoteResult.QueueVoteResultHandlingOffset = getRealOffset(0x7F0748);
HandleVoteResult.QueueVoteResultHandling = (void(*)(void*, monoString*, float))HandleVoteResult.QueueVoteResultHandlingOffset;

HandleVoteResult.HandleVoteResultImplOffset = getRealOffset(0x7F0774);
HandleVoteResult.HandleVoteResultImpl = (void *(*)(void*))HandleVoteResult.HandleVoteResultImplOffset;

HandleVoteResult.getHumanReadableYesReasonOffset = getRealOffset(0x7F0814);
HandleVoteResult.getHumanReadableYesReason = (monoString *(*)(void*, monoString*))HandleVoteResult.getHumanReadableYesReasonOffset;

HandleVoteResult.getHumanReadableNoReasonOffset = getRealOffset(0x7F08E4);
HandleVoteResult.getHumanReadableNoReason = (monoString *(*)(void*, monoString*))HandleVoteResult.getHumanReadableNoReasonOffset;

NotifyOfVoteManager.AddLocalPollIdOffset = getRealOffset(0x5484BC);
NotifyOfVoteManager.AddLocalPollId = (void(*)(void*, monoString*))NotifyOfVoteManager.AddLocalPollIdOffset;

NotifyOfVoteManager.SetPollIdOffset = getRealOffset(0x548530);
NotifyOfVoteManager.SetPollId = (void(*)(void*, monoString*))NotifyOfVoteManager.SetPollIdOffset;

NotifyOfVoteManager.StartNotificationOffset = getRealOffset(0x548538);
NotifyOfVoteManager.StartNotification = (void(*)(void*))NotifyOfVoteManager.StartNotificationOffset;

NotifyOfVoteManager.GetVoteDataOffset = getRealOffset(0x54855C);
NotifyOfVoteManager.GetVoteData = (void *(*)(void*))NotifyOfVoteManager.GetVoteDataOffset;

NotifyOfVoteManager.GetPollIdOffset = getRealOffset(0x5485FC);
NotifyOfVoteManager.GetPollId = (monoString *(*)(void*))NotifyOfVoteManager.GetPollIdOffset;

NotifyOfVoteManager.GetInitiatorOffset = getRealOffset(0x548604);
NotifyOfVoteManager.GetInitiator = (monoString *(*)(void*))NotifyOfVoteManager.GetInitiatorOffset;

NotifyOfVoteManager.GetAccussedOffset = getRealOffset(0x54860C);
NotifyOfVoteManager.GetAccussed = (monoString *(*)(void*))NotifyOfVoteManager.GetAccussedOffset;

NotifyOfVoteManager.GetReasonOffset = getRealOffset(0x548614);
NotifyOfVoteManager.GetReason = (monoString *(*)(void*))NotifyOfVoteManager.GetReasonOffset;

NotifyOfVoteManager.GetDetailsOffset = getRealOffset(0x54861C);
NotifyOfVoteManager.GetDetails = (monoString *(*)(void*))NotifyOfVoteManager.GetDetailsOffset;

NotifyOfVoteManager.GetVotingTimeLeftOffset = getRealOffset(0x548624);
NotifyOfVoteManager.GetVotingTimeLeft = (int(*)(void*))NotifyOfVoteManager.GetVotingTimeLeftOffset;

NotifyOfVoteManager.GetImageUrlOffset = getRealOffset(0x54862C);
NotifyOfVoteManager.GetImageUrl = (monoString *(*)(void*))NotifyOfVoteManager.GetImageUrlOffset;

PerformVoteManager.SetVoteDataOffset = getRealOffset(0x55D690);
PerformVoteManager.SetVoteData = (void(*)(void*, monoString*, monoString*, monoString*, monoString*, monoString*, monoString*))PerformVoteManager.SetVoteDataOffset;

PerformVoteManager.OnEnableOffset = getRealOffset(0x55D6AC);
PerformVoteManager.OnEnable = (void(*)(void*))PerformVoteManager.OnEnableOffset;

PerformVoteManager.GetImageOffset = getRealOffset(0x55D6D0);
PerformVoteManager.GetImage = (void *(*)(void*))PerformVoteManager.GetImageOffset;

PerformVoteManager.OnYesOffset = getRealOffset(0x55D770);
PerformVoteManager.OnYes = (void(*)(void*))PerformVoteManager.OnYesOffset;

PerformVoteManager.OnNoOffset = getRealOffset(0x55D854);
PerformVoteManager.OnNo = (void(*)(void*))PerformVoteManager.OnNoOffset;

PerformVoteManager.HideOffset = getRealOffset(0x55D820);
PerformVoteManager.Hide = (void(*)(void*))PerformVoteManager.HideOffset;

PerformVoteManager.UpdateVotesOffset = getRealOffset(0x55D904);
PerformVoteManager.UpdateVotes = (void(*)(void*, int, int))PerformVoteManager.UpdateVotesOffset;

PerformVoteManager.DisplayTimeLeftOffset = getRealOffset(0x55D994);
PerformVoteManager.DisplayTimeLeft = (void(*)(void*, float))PerformVoteManager.DisplayTimeLeftOffset;

PunishAPlayerManager.SetPunishedPlayerOffset = getRealOffset(0x62AD10);
PunishAPlayerManager.SetPunishedPlayer = (void(*)(void*, monoString*))PunishAPlayerManager.SetPunishedPlayerOffset;

PunishAPlayerManager.AwakeOffset = getRealOffset(0x62AD18);
PunishAPlayerManager.Awake = (void(*)(void*))PunishAPlayerManager.AwakeOffset;

PunishAPlayerManager.LoadPeriodDropdownOffset = getRealOffset(0x62AD1C);
PunishAPlayerManager.LoadPeriodDropdown = (void(*)(void*))PunishAPlayerManager.LoadPeriodDropdownOffset;

PunishAPlayerManager.OnDisableOffset = getRealOffset(0x62B2A8);
PunishAPlayerManager.OnDisable = (void(*)(void*))PunishAPlayerManager.OnDisableOffset;

PunishAPlayerManager.OnEnableOffset = getRealOffset(0x62B3FC);
PunishAPlayerManager.OnEnable = (void(*)(void*))PunishAPlayerManager.OnEnableOffset;

PunishAPlayerManager.OnBanMuteToggleValueChangedOffset = getRealOffset(0x62B7EC);
PunishAPlayerManager.OnBanMuteToggleValueChanged = (void(*)(void*, bool))PunishAPlayerManager.OnBanMuteToggleValueChangedOffset;

PunishAPlayerManager.GetPunishmentReasonsOffset = getRealOffset(0x62B76C);
PunishAPlayerManager.GetPunishmentReasons = (void *(*)(void*))PunishAPlayerManager.GetPunishmentReasonsOffset;

PunishAPlayerManager.SetPunishmentAPIFinishedOffset = getRealOffset(0x62BB48);
PunishAPlayerManager.SetPunishmentAPIFinished = (void(*)(void*, monoString*, int))PunishAPlayerManager.SetPunishmentAPIFinishedOffset;

PunishAPlayerManager.UploadScreenshotOffset = getRealOffset(0x62BE34);
PunishAPlayerManager.UploadScreenshot = (void *(*)(void*, int))PunishAPlayerManager.UploadScreenshotOffset;

PunishAPlayerManager.OnScreenshotCallbackSuccessOffset = getRealOffset(0x62BEEC);
PunishAPlayerManager.OnScreenshotCallbackSuccess = (void(*)(void*, bool))PunishAPlayerManager.OnScreenshotCallbackSuccessOffset;

PunishAPlayerManager.CheckUploadssStuckedOffset = getRealOffset(0x62C078);
PunishAPlayerManager.CheckUploadssStucked = (void *(*)(void*, float))PunishAPlayerManager.CheckUploadssStuckedOffset;

PunishAPlayerManager.OnBrowseButtonPressedOffset = getRealOffset(0x62C21C);
PunishAPlayerManager.OnBrowseButtonPressed = (void(*)(void*))PunishAPlayerManager.OnBrowseButtonPressedOffset;

PunishAPlayerManager.OnKickButtonPressedOffset = getRealOffset(0x62C29C);
PunishAPlayerManager.OnKickButtonPressed = (void(*)(void*))PunishAPlayerManager.OnKickButtonPressedOffset;

PunishAPlayerManager.OnPunishButtonPressedOffset = getRealOffset(0x62C49C);
PunishAPlayerManager.OnPunishButtonPressed = (void(*)(void*))PunishAPlayerManager.OnPunishButtonPressedOffset;

PunishAPlayerManager.OnImageSelectOffset = getRealOffset(0x62C938);
PunishAPlayerManager.OnImageSelect = (void(*)(void*, monoString*, int))PunishAPlayerManager.OnImageSelectOffset;

PunishAPlayerManager.OnImageLoadOffset = getRealOffset(0x62CA18);
PunishAPlayerManager.OnImageLoad = (void(*)(void*, monoString*, void *, int))PunishAPlayerManager.OnImageLoadOffset;

PunishAPlayerManager.OnErrorOffset = getRealOffset(0x62CAF8);
PunishAPlayerManager.OnError = (void(*)(void*, monoString*))PunishAPlayerManager.OnErrorOffset;

PunishAPlayerManager.OnCancelOffset = getRealOffset(0x62CBE8);
PunishAPlayerManager.OnCancel = (void(*)(void*))PunishAPlayerManager.OnCancelOffset;

ReportAPlayerManager.SetReportedPlayerOffset = getRealOffset(0x63F3AC);
ReportAPlayerManager.SetReportedPlayer = (void(*)(void*, monoString*))ReportAPlayerManager.SetReportedPlayerOffset;

ReportAPlayerManager.OnDisableOffset = getRealOffset(0x63F3B4);
ReportAPlayerManager.OnDisable = (void(*)(void*))ReportAPlayerManager.OnDisableOffset;

ReportAPlayerManager.OnEnableOffset = getRealOffset(0x63F508);
ReportAPlayerManager.OnEnable = (void(*)(void*))ReportAPlayerManager.OnEnableOffset;

ReportAPlayerManager.GetPunishmentReasonsOffset = getRealOffset(0x63F858);
ReportAPlayerManager.GetPunishmentReasons = (void *(*)(void*))ReportAPlayerManager.GetPunishmentReasonsOffset;

ReportAPlayerManager.ReportCheaterOffset = getRealOffset(0x63F8F8);
ReportAPlayerManager.ReportCheater = (void *(*)(void*))ReportAPlayerManager.ReportCheaterOffset;

ReportAPlayerManager.OnScreenshotCallbackSuccessOffset = getRealOffset(0x63F998);
ReportAPlayerManager.OnScreenshotCallbackSuccess = (void(*)(void*, bool))ReportAPlayerManager.OnScreenshotCallbackSuccessOffset;

ReportAPlayerManager.CheckUploadssStuckedOffset = getRealOffset(0x63FB24);
ReportAPlayerManager.CheckUploadssStucked = (void *(*)(void*, float))ReportAPlayerManager.CheckUploadssStuckedOffset;

ReportAPlayerManager.FillReasonDropdownOffset = getRealOffset(0x63FBE8);
ReportAPlayerManager.FillReasonDropdown = (void(*)(void*))ReportAPlayerManager.FillReasonDropdownOffset;

ReportAPlayerManager.OnBrowseButtonPressedOffset = getRealOffset(0x63FEF0);
ReportAPlayerManager.OnBrowseButtonPressed = (void(*)(void*))ReportAPlayerManager.OnBrowseButtonPressedOffset;

ReportAPlayerManager.OnSubmitOffset = getRealOffset(0x63FF70);
ReportAPlayerManager.OnSubmit = (void(*)(void*))ReportAPlayerManager.OnSubmitOffset;

ReportAPlayerManager.OnImageSelectOffset = getRealOffset(0x64010C);
ReportAPlayerManager.OnImageSelect = (void(*)(void*, monoString*, int))ReportAPlayerManager.OnImageSelectOffset;

ReportAPlayerManager.OnImageLoadOffset = getRealOffset(0x6401EC);
ReportAPlayerManager.OnImageLoad = (void(*)(void*, monoString*, void *, int))ReportAPlayerManager.OnImageLoadOffset;

ReportAPlayerManager.OnErrorOffset = getRealOffset(0x6402CC);
ReportAPlayerManager.OnError = (void(*)(void*, monoString*))ReportAPlayerManager.OnErrorOffset;

ReportAPlayerManager.OnCancelOffset = getRealOffset(0x6403BC);
ReportAPlayerManager.OnCancel = (void(*)(void*))ReportAPlayerManager.OnCancelOffset;

VoteToKickManager.getGameIdOffset = getRealOffset(0x89CC6C);
VoteToKickManager.getGameId = (monoString *(*)())VoteToKickManager.getGameIdOffset;

VoteToKickManager.SetReportedPlayerDataOffset = getRealOffset(0x89CDE0);
VoteToKickManager.SetReportedPlayerData = (void(*)(void*, monoString*, int))VoteToKickManager.SetReportedPlayerDataOffset;

VoteToKickManager.OnDisableOffset = getRealOffset(0x89CDEC);
VoteToKickManager.OnDisable = (void(*)(void*))VoteToKickManager.OnDisableOffset;

VoteToKickManager.OnEnableOffset = getRealOffset(0x89CF40);
VoteToKickManager.OnEnable = (void(*)(void*))VoteToKickManager.OnEnableOffset;

VoteToKickManager.GetPunishmentReasonsOffset = getRealOffset(0x89D2BC);
VoteToKickManager.GetPunishmentReasons = (void *(*)(void*))VoteToKickManager.GetPunishmentReasonsOffset;

VoteToKickManager.ReportCheaterOffset = getRealOffset(0x89D35C);
VoteToKickManager.ReportCheater = (void *(*)(void*))VoteToKickManager.ReportCheaterOffset;

VoteToKickManager.OnScreenshotCallbackSuccessOffset = getRealOffset(0x89D3FC);
VoteToKickManager.OnScreenshotCallbackSuccess = (void(*)(void*, bool))VoteToKickManager.OnScreenshotCallbackSuccessOffset;

VoteToKickManager.CheckUploadssStuckedOffset = getRealOffset(0x89D68C);
VoteToKickManager.CheckUploadssStucked = (void *(*)(void*, float))VoteToKickManager.CheckUploadssStuckedOffset;

VoteToKickManager.FillRasonDropdownOffset = getRealOffset(0x89D750);
VoteToKickManager.FillRasonDropdown = (void(*)(void*))VoteToKickManager.FillRasonDropdownOffset;

VoteToKickManager.OnBrowseButtonPressedOffset = getRealOffset(0x89D8E0);
VoteToKickManager.OnBrowseButtonPressed = (void(*)(void*))VoteToKickManager.OnBrowseButtonPressedOffset;

VoteToKickManager.OnSubmitOffset = getRealOffset(0x89D960);
VoteToKickManager.OnSubmit = (void(*)(void*))VoteToKickManager.OnSubmitOffset;

VoteToKickManager.OnImageSelectOffset = getRealOffset(0x89DB2C);
VoteToKickManager.OnImageSelect = (void(*)(void*, monoString*, int))VoteToKickManager.OnImageSelectOffset;

VoteToKickManager.OnImageLoadOffset = getRealOffset(0x89DC0C);
VoteToKickManager.OnImageLoad = (void(*)(void*, monoString*, void *, int))VoteToKickManager.OnImageLoadOffset;

VoteToKickManager.OnErrorOffset = getRealOffset(0x89DCEC);
VoteToKickManager.OnError = (void(*)(void*, monoString*))VoteToKickManager.OnErrorOffset;

VoteToKickManager.OnCancelOffset = getRealOffset(0x89DDDC);
VoteToKickManager.OnCancel = (void(*)(void*))VoteToKickManager.OnCancelOffset;

CheckStatusAndVersion.IsAdblockEnabledOffset = getRealOffset(0x78415C);
CheckStatusAndVersion.IsAdblockEnabled = (bool(*)())CheckStatusAndVersion.IsAdblockEnabledOffset;

CheckStatusAndVersion.OnVersionCheckedOffset = getRealOffset(0x784164);
CheckStatusAndVersion.OnVersionChecked = (void(*)(monoString*))CheckStatusAndVersion.OnVersionCheckedOffset;

RequestProcessor.get_keepWaitingOffset = getRealOffset(0x64150C);
RequestProcessor.get_keepWaiting = (bool(*)(void*))RequestProcessor.get_keepWaitingOffset;

RequestProcessor.OnSuccessOffset = getRealOffset(0x641688);
RequestProcessor.OnSuccess = (void(*)(void*, monoString*))RequestProcessor.OnSuccessOffset;

RequestProcessor.OnErrorOffset = getRealOffset(0x6416B8);
RequestProcessor.OnError = (void(*)(void*, monoString*))RequestProcessor.OnErrorOffset;

RequestsCreator.AwakeOffset = getRealOffset(0x642954);
RequestsCreator.Awake = (void(*)(void*))RequestsCreator.AwakeOffset;

RequestsCreator.OfflineModeDetectedOffset = getRealOffset(0x642C7C);
RequestsCreator.OfflineModeDetected = (void(*)())RequestsCreator.OfflineModeDetectedOffset;

RequestsCreator.GetWWWFormOffset = getRealOffset(0x642E2C);
RequestsCreator.GetWWWForm = (void *(*)(void*, void *, bool, bool))RequestsCreator.GetWWWFormOffset;

RequestsCreator.LogOffset = getRealOffset(0x642A90);
RequestsCreator.Log = (void(*)(void*, monoString*))RequestsCreator.LogOffset;

RequestsHelper.BuildRequestWithScriptNameOffset = getRealOffset(0x643A88);
RequestsHelper.BuildRequestWithScriptName = (void *(*)(monoString*, void *))RequestsHelper.BuildRequestWithScriptNameOffset;

RequestsHelper.BuildRequestWithScriptName1Offset = getRealOffset(0x643A90);
RequestsHelper.BuildRequestWithScriptName1 = (void *(*)(monoString*, void *, bool))RequestsHelper.BuildRequestWithScriptName1Offset;

RequestsHelper.BuildUnityWebRequestOffset = getRealOffset(0x643B78);
RequestsHelper.BuildUnityWebRequest = (void *(*)(monoString*, void *))RequestsHelper.BuildUnityWebRequestOffset;

RequestsHelper.BuildUnityWebRequest1Offset = getRealOffset(0x643B4C);
RequestsHelper.BuildUnityWebRequest1 = (void *(*)(monoString*, void *, bool))RequestsHelper.BuildUnityWebRequest1Offset;

RequestsHelper.GetWWWFormOffset = getRealOffset(0x643BA4);
RequestsHelper.GetWWWForm = (void *(*)(void *, bool))RequestsHelper.GetWWWFormOffset;

ResizeObjects.AwakeOffset = getRealOffset(0x644010);
ResizeObjects.Awake = (void(*)(void*))ResizeObjects.AwakeOffset;

ResizeObjects.calculateSizeOffset = getRealOffset(0x644190);
ResizeObjects.calculateSize = (void(*)(void*))ResizeObjects.calculateSizeOffset;

RespawnScreen.AwakeOffset = getRealOffset(0x644464);
RespawnScreen.Awake = (void(*)(void*))RespawnScreen.AwakeOffset;

RespawnScreen.LoadImagesAndTextsOffset = getRealOffset(0x645344);
RespawnScreen.LoadImagesAndTexts = (void(*)(void*))RespawnScreen.LoadImagesAndTextsOffset;

RespawnScreen.ShowOffset = getRealOffset(0x6464E4);
RespawnScreen.Show = (void(*)(void*))RespawnScreen.ShowOffset;

RespawnScreen.RefreshConquestCurrentLoadoutTextOffset = getRealOffset(0x647700);
RespawnScreen.RefreshConquestCurrentLoadoutText = (void(*)(void*))RespawnScreen.RefreshConquestCurrentLoadoutTextOffset;

RespawnScreen.ShowLoadoutsOffset = getRealOffset(0x647910);
RespawnScreen.ShowLoadouts = (void(*)(void*))RespawnScreen.ShowLoadoutsOffset;

RespawnScreen.ShowTopCameraOffset = getRealOffset(0x647A28);
RespawnScreen.ShowTopCamera = (void(*)(void*))RespawnScreen.ShowTopCameraOffset;

RespawnScreen.HideOffset = getRealOffset(0x647B08);
RespawnScreen.Hide = (void(*)(void*))RespawnScreen.HideOffset;

RespawnScreen.SetActiveLoadoutOffset = getRealOffset(0x647430);
RespawnScreen.SetActiveLoadout = (void(*)(void*, int))RespawnScreen.SetActiveLoadoutOffset;

RespawnScreen.SetActiveLoadout1Offset = getRealOffset(0x6480A4);
RespawnScreen.SetActiveLoadout1 = (void(*)(void*, void *))RespawnScreen.SetActiveLoadout1Offset;

RespawnScreen.StartOffset = getRealOffset(0x6480DC);
RespawnScreen.Start = (void(*)(void*))RespawnScreen.StartOffset;

RespawnScreen.DeployOffset = getRealOffset(0x648174);
RespawnScreen.Deploy = (void(*)(void*))RespawnScreen.DeployOffset;

RespawnScreen.SelectFlagOffset = getRealOffset(0x6493E8);
RespawnScreen.SelectFlag = (void(*)(void*, monoString*))RespawnScreen.SelectFlagOffset;

RespawnScreen.IsFlagValidToSpawnOnOffset = getRealOffset(0x648DCC);
RespawnScreen.IsFlagValidToSpawnOn = (bool(*)(void*, int))RespawnScreen.IsFlagValidToSpawnOnOffset;

RespawnScreen.UpdateOffset = getRealOffset(0x649DFC);
RespawnScreen.Update = (void(*)(void*))RespawnScreen.UpdateOffset;

RespawnScreen.OnDestroyOffset = getRealOffset(0x64A128);
RespawnScreen.OnDestroy = (void(*)(void*))RespawnScreen.OnDestroyOffset;

RespawnScreen.UpdatePlayerCountIfShowingOffset = getRealOffset(0x64A1D4);
RespawnScreen.UpdatePlayerCountIfShowing = (void(*)(void*))RespawnScreen.UpdatePlayerCountIfShowingOffset;

ReviewGame.AwakeOffset = getRealOffset(0x64AB84);
ReviewGame.Awake = (void(*)(void*))ReviewGame.AwakeOffset;

ReviewGame.CanReviewGameOffset = getRealOffset(0x64ABE0);
ReviewGame.CanReviewGame = (bool(*)(void*))ReviewGame.CanReviewGameOffset;

ReviewGame.TryShowReviewGameAfterTimeOffset = getRealOffset(0x64ACB0);
ReviewGame.TryShowReviewGameAfterTime = (void(*)(void*, float))ReviewGame.TryShowReviewGameAfterTimeOffset;

ReviewGame.ShowPopupOffset = getRealOffset(0x64AD28);
ReviewGame.ShowPopup = (void(*)(void*))ReviewGame.ShowPopupOffset;

ReviewGame.ReviewOffset = getRealOffset(0x64ADD4);
ReviewGame.Review = (void(*)(void*))ReviewGame.ReviewOffset;

ReviewGame.OnApplicationPauseOffset = getRealOffset(0x64AE7C);
ReviewGame.OnApplicationPause = (void(*)(void*, bool))ReviewGame.OnApplicationPauseOffset;

ReviewGame.RewardPlayerOffset = getRealOffset(0x64AF5C);
ReviewGame.RewardPlayer = (void(*)(void*))ReviewGame.RewardPlayerOffset;

Rotate.StartOffset = getRealOffset(0x6123A4);
Rotate.Start = (void(*)(void*))Rotate.StartOffset;

Rotate.UpdateOffset = getRealOffset(0x612404);
Rotate.Update = (void(*)(void*))Rotate.UpdateOffset;

RoundOverStats.AwakeOffset = getRealOffset(0x612904);
RoundOverStats.Awake = (void(*)(void*))RoundOverStats.AwakeOffset;

RoundOverStats.SetWinLoseTextOffset = getRealOffset(0x612D28);
RoundOverStats.SetWinLoseText = (void(*)(void*, monoString*))RoundOverStats.SetWinLoseTextOffset;

RoundOverStats.PrepareToShowVoteMapScreenOffset = getRealOffset(0x612D60);
RoundOverStats.PrepareToShowVoteMapScreen = (void(*)(void*))RoundOverStats.PrepareToShowVoteMapScreenOffset;

RoundOverStats.LoadDamMapAgainOffset = getRealOffset(0x612EDC);
RoundOverStats.LoadDamMapAgain = (void(*)(void*))RoundOverStats.LoadDamMapAgainOffset;

RoundOverStats.ShowVoteMapScreenOffset = getRealOffset(0x612F6C);
RoundOverStats.ShowVoteMapScreen = (void(*)(void*))RoundOverStats.ShowVoteMapScreenOffset;

RoundOverStats.ShowMapVotedForOffset = getRealOffset(0x613690);
RoundOverStats.ShowMapVotedFor = (void(*)(void*, monoString*))RoundOverStats.ShowMapVotedForOffset;

RoundOverStats.GetHighestVotedMapOffset = getRealOffset(0x61377C);
RoundOverStats.GetHighestVotedMap = (monoString *(*)(void*))RoundOverStats.GetHighestVotedMapOffset;

RoundOverStats.VoteForMapOffset = getRealOffset(0x6139D8);
RoundOverStats.VoteForMap = (void(*)(void*, int))RoundOverStats.VoteForMapOffset;

RoundOverStats.ShowAdPopupOffset = getRealOffset(0x613BE4);
RoundOverStats.ShowAdPopup = (void(*)(void*))RoundOverStats.ShowAdPopupOffset;

RoundOverStats.WatchAdNowOffset = getRealOffset(0x613CB8);
RoundOverStats.WatchAdNow = (void(*)(void*))RoundOverStats.WatchAdNowOffset;

RoundOverStats.OnDestroyOffset = getRealOffset(0x613D50);
RoundOverStats.OnDestroy = (void(*)(void*))RoundOverStats.OnDestroyOffset;

AvailableMapsSO.VerifyMapsControllerOffset = getRealOffset(0x6BDF90);
AvailableMapsSO.VerifyMapsController = (void(*)(void*))AvailableMapsSO.VerifyMapsControllerOffset;

AvailableMapsSO.GetAvailableMapsOffset = getRealOffset(0x6BE008);
AvailableMapsSO.GetAvailableMapNamesOffset = getRealOffset(0x6BE030);
AvailableMapsSO.GetMapDisplayNameOffset = getRealOffset(0x6BE160);
AvailableMapsSO.GetMapDisplayName = (monoString *(*)(void*, int))AvailableMapsSO.GetMapDisplayNameOffset;

AvailableMapsSO.GetMapFileNameOffset = getRealOffset(0x6BE200);
AvailableMapsSO.GetMapFileName = (monoString *(*)(void*, int))AvailableMapsSO.GetMapFileNameOffset;

AvailableMapsSO.GetMapCountOffset = getRealOffset(0x6BE2A0);
AvailableMapsSO.GetMapCount = (int(*)(void*))AvailableMapsSO.GetMapCountOffset;

AvailableMapsController.get_MapsOffset = getRealOffset(0x6BDE00);
MapInfo.get_DiplayNameOffset = getRealOffset(0x9F8A9C);
MapInfo.get_DiplayName = (monoString *(*)(void*))MapInfo.get_DiplayNameOffset;

MapInfo.get_FileNameOffset = getRealOffset(0x9F8AA4);
MapInfo.get_FileName = (monoString *(*)(void*))MapInfo.get_FileNameOffset;

MapInfo.get_MapSpriteOffset = getRealOffset(0x9F8AAC);
MapInfo.get_MapSprite = (void *(*)(void*))MapInfo.get_MapSpriteOffset;

MapInfo.Equals1Offset = getRealOffset(0x9F8B88);
MapInfo.Equals1 = (bool(*)(void*, monoString*))MapInfo.Equals1Offset;

CategoryBar.get_CurrentWeaponCategoryOffset = getRealOffset(0x77E384);
CategoryBar.get_CurrentWeaponCategory = (int (*)(void*))CategoryBar.get_CurrentWeaponCategoryOffset;

CategoryBar.StartOffset = getRealOffset(0x77E38C);
CategoryBar.Start = (void(*)(void*))CategoryBar.StartOffset;

CategoryBar.OnCategoryClickedOffset = getRealOffset(0x77E40C);
CategoryBar.OnCategoryClicked = (void(*)(void*, void *))CategoryBar.OnCategoryClickedOffset;

CategoryBar.UpdateViewToSelectedCategoryOffset = getRealOffset(0x77E4F4);
CategoryBar.UpdateViewToSelectedCategory = (void(*)(void*, int))CategoryBar.UpdateViewToSelectedCategoryOffset;

CategoryBar.SetToCategoryOffset = getRealOffset(0x77E5D0);
CategoryBar.SetToCategory = (void(*)(void*, int))CategoryBar.SetToCategoryOffset;

CategoryBar.SetActiveOffset = getRealOffset(0x77E5D8);
CategoryBar.SetActive = (void(*)(void*))CategoryBar.SetActiveOffset;

CategoryBar.SetInactiveOffset = getRealOffset(0x77E60C);
CategoryBar.SetInactive = (void(*)(void*))CategoryBar.SetInactiveOffset;

FriendListScriptableObject.UpdateFriendsOffset = getRealOffset(0x7280F4);
FriendListScriptableObject.UpdateFriends = (void(*)(void*))FriendListScriptableObject.UpdateFriendsOffset;

FriendListScriptableObject.OnCompleteOffset = getRealOffset(0x7282EC);
FriendListScriptableObject.OnComplete = (void(*)(void*))FriendListScriptableObject.OnCompleteOffset;

FriendListScriptableObject.OnFinishOffset = getRealOffset(0x728314);
FriendListScriptableObject.OnFinish = (void(*)(void*, monoString*))FriendListScriptableObject.OnFinishOffset;

GameModesScriptableObject.get_GameModesOffset = getRealOffset(0x5FA7E4);
GameModesScriptableObject.get_CurrentIndexOffset = getRealOffset(0x5FA7EC);
GameModesScriptableObject.get_CurrentIndex = (int(*)(void*))GameModesScriptableObject.get_CurrentIndexOffset;

GameModesScriptableObject.GetSelectedModeOffset = getRealOffset(0x5FA6AC);
GameModesScriptableObject.GetSelectedMode = (monoString *(*)(void*))GameModesScriptableObject.GetSelectedModeOffset;

GameModesScriptableObject.GetModeOffset = getRealOffset(0x5FA7F4);
GameModesScriptableObject.GetMode = (monoString *(*)(void*, int))GameModesScriptableObject.GetModeOffset;

GameModesScriptableObject.GetCountOffset = getRealOffset(0x5FA86C);
GameModesScriptableObject.GetCount = (int(*)(void*))GameModesScriptableObject.GetCountOffset;

GameModesScriptableObject.ClickNextOffset = getRealOffset(0x5FA624);
GameModesScriptableObject.ClickNext = (void(*)(void*))GameModesScriptableObject.ClickNextOffset;

GameModesScriptableObject.ClickPrevOffset = getRealOffset(0x5FA654);
GameModesScriptableObject.ClickPrev = (void(*)(void*))GameModesScriptableObject.ClickPrevOffset;

GameModesScriptableObject.ChangeIndexOffset = getRealOffset(0x5FA8C4);
GameModesScriptableObject.ChangeIndex = (void(*)(void*, int))GameModesScriptableObject.ChangeIndexOffset;

ImageStateInfoScriptableObject.SetImageAsSelectedOffset = getRealOffset(0x80A428);
ImageStateInfoScriptableObject.SetImageAsSelected = (void(*)(void*, void *, bool))ImageStateInfoScriptableObject.SetImageAsSelectedOffset;

ImageStateInfoScriptableObject.SetImageAsDeselectedOffset = getRealOffset(0x80A4E0);
ImageStateInfoScriptableObject.SetImageAsDeselected = (void(*)(void*, void *, bool))ImageStateInfoScriptableObject.SetImageAsDeselectedOffset;

OpenCaseDataScriptableObject.get_ResultOffset = getRealOffset(0x553D54);
OpenCaseDataScriptableObject.get_Result = (void *(*)(void*))OpenCaseDataScriptableObject.get_ResultOffset;

OpenCaseDataScriptableObject.FeedOffset = getRealOffset(0x54C07C);
OpenCaseDataScriptableObject.Feed = (void(*)(void*, monoString*))OpenCaseDataScriptableObject.FeedOffset;

OpenCaseDataScriptableObject.Feed1Offset = getRealOffset(0x553D5C);
OpenCaseDataScriptableObject.Feed1 = (void(*)(void*, void *))OpenCaseDataScriptableObject.Feed1Offset;

OpenCaseDataScriptableObject.ClearOffset = getRealOffset(0x553D64);
OpenCaseDataScriptableObject.Clear = (void(*)(void*))OpenCaseDataScriptableObject.ClearOffset;

OpenCaseDataScriptableObject.OnEnableOffset = getRealOffset(0x553D70);
OpenCaseDataScriptableObject.OnEnable = (void(*)(void*))OpenCaseDataScriptableObject.OnEnableOffset;

PingColorInfoScriptableObject.GetColorOffset = getRealOffset(0x7EAC84);
PingColorInfoScriptableObject.GetColor = (Color (*)(void*, int))PingColorInfoScriptableObject.GetColorOffset;

PingColorInfoScriptableObject.GetColorCodeOffset = getRealOffset(0x7EAD94);
PingColorInfoScriptableObject.GetColorCode = (monoString *(*)(void*, int))PingColorInfoScriptableObject.GetColorCodeOffset;

PlayerLoadoutContainer.get_PrimaryWeaponOffset = getRealOffset(0x4BE60C);
PlayerLoadoutContainer.get_PrimaryWeapon = (int (*)(void*))PlayerLoadoutContainer.get_PrimaryWeaponOffset;

PlayerLoadoutContainer.get_SecondaryWeaponOffset = getRealOffset(0x4BE614);
PlayerLoadoutContainer.get_SecondaryWeapon = (int (*)(void*))PlayerLoadoutContainer.get_SecondaryWeaponOffset;

PlayerLoadoutContainer.get_ThrowableWeaponOffset = getRealOffset(0x4BE61C);
PlayerLoadoutContainer.get_ThrowableWeapon = (int (*)(void*))PlayerLoadoutContainer.get_ThrowableWeaponOffset;

PlayerLoadoutContainer.get_CharacterCamoOffset = getRealOffset(0x4BE624);
PlayerLoadoutContainer.get_CharacterCamo = (int (*)(void*))PlayerLoadoutContainer.get_CharacterCamoOffset;

PlayerLoadoutContainer.get_PrimaryWeaponCamoOffset = getRealOffset(0x4BE62C);
PlayerLoadoutContainer.get_PrimaryWeaponCamo = (int (*)(void*))PlayerLoadoutContainer.get_PrimaryWeaponCamoOffset;

PlayerLoadoutContainer.get_BulletTracerColorOffset = getRealOffset(0x4BE634);
PlayerLoadoutContainer.get_BulletTracerColor = (int (*)(void*))PlayerLoadoutContainer.get_BulletTracerColorOffset;

PlayerLoadoutContainer.FeedOffset = getRealOffset(0x4BE63C);
PlayerLoadoutContainer.Feed = (void(*)(void*, int, int, int, int, int, int))PlayerLoadoutContainer.FeedOffset;

PlayerLoadoutContainer.DebugLoadoutContainerOffset = getRealOffset(0x4BE730);
PlayerLoadoutContainer.DebugLoadoutContainer = (void(*)(void*))PlayerLoadoutContainer.DebugLoadoutContainerOffset;

RankTierColorPairSO.GetColorOffset = getRealOffset(0x6336C0);
RankTierColorPairSO.GetColor = (Color (*)(void*, int))RankTierColorPairSO.GetColorOffset;

ColorRankPair.GetTierOffset = getRealOffset(0x81A8FC);
ColorRankPair.GetTier = (int (*)(void*))ColorRankPair.GetTierOffset;

ColorRankPair.GetColorOffset = getRealOffset(0x81A904);
ColorRankPair.GetColor = (Color (*)(void*))ColorRankPair.GetColorOffset;

RegionDataCollection.GetRegionByShortNameOffset = getRealOffset(0x63B2A8);
RegionDataCollection.GetRegionByShortName = (void *(*)(void*, monoString*))RegionDataCollection.GetRegionByShortNameOffset;

RegionDataCollection.GetRegionByCodeOffset = getRealOffset(0x63B398);
RegionDataCollection.GetRegionByCode = (void *(*)(void*, int))RegionDataCollection.GetRegionByCodeOffset;

RegionDataCollection.GetRegionByServerOffset = getRealOffset(0x63B488);
RegionDataCollection.GetRegionByServer = (void *(*)(void*, int))RegionDataCollection.GetRegionByServerOffset;

RegionDataCollection.GetRegionByLongNameOffset = getRealOffset(0x63B578);
RegionDataCollection.GetRegionByLongName = (void *(*)(void*, monoString*))RegionDataCollection.GetRegionByLongNameOffset;

RegionDataCollection.GetRegionByServerIPOffset = getRealOffset(0x63B668);
RegionDataCollection.GetRegionByServerIP = (void *(*)(void*, monoString*))RegionDataCollection.GetRegionByServerIPOffset;

RegionInfoScriptableObject.get_RegionLongNameOffset = getRealOffset(0x63B8D0);
RegionInfoScriptableObject.get_RegionLongName = (monoString *(*)(void*))RegionInfoScriptableObject.get_RegionLongNameOffset;

RegionInfoScriptableObject.get_RegionShortNameOffset = getRealOffset(0x63B8D8);
RegionInfoScriptableObject.get_RegionShortName = (monoString *(*)(void*))RegionInfoScriptableObject.get_RegionShortNameOffset;

RegionInfoScriptableObject.get_RegionCodeOffset = getRealOffset(0x63B8E0);
RegionInfoScriptableObject.get_RegionCode = (int (*)(void*))RegionInfoScriptableObject.get_RegionCodeOffset;

RegionInfoScriptableObject.get_GameServerOffset = getRealOffset(0x63B8E8);
RegionInfoScriptableObject.get_GameServer = (int (*)(void*))RegionInfoScriptableObject.get_GameServerOffset;

RegionInfoScriptableObject.get_ServerIPOffset = getRealOffset(0x63B8F0);
RegionInfoScriptableObject.get_ServerIP = (monoString *(*)(void*))RegionInfoScriptableObject.get_ServerIPOffset;

SpecialOfferContainer.get_SpecialOffferOffset = getRealOffset(0x57C620);
SpecialOfferContainer.get_SpecialOfffer = (void *(*)(void*))SpecialOfferContainer.get_SpecialOffferOffset;

SpecialOfferContainer.FeedSpecialOfferOffset = getRealOffset(0x57C628);
SpecialOfferContainer.FeedSpecialOffer = (void(*)(void*, void *))SpecialOfferContainer.FeedSpecialOfferOffset;

TextStateInfoScriptableObject.SetTextAsSelectedOffset = getRealOffset(0x5CB8E4);
TextStateInfoScriptableObject.SetTextAsSelected = (void(*)(void*, void *, bool))TextStateInfoScriptableObject.SetTextAsSelectedOffset;

TextStateInfoScriptableObject.SetTextAsDeselectedOffset = getRealOffset(0x5CB99C);
TextStateInfoScriptableObject.SetTextAsDeselected = (void(*)(void*, void *, bool))TextStateInfoScriptableObject.SetTextAsDeselectedOffset;

UnlockedPlayerCamosScriptableObject.get_UnlockedCamosOffset = getRealOffset(0x88ED38);
UnlockedPlayerCamosScriptableObject.get_UnlockedWeaponSkinsOffset = getRealOffset(0x88ED40);
UnlockedPlayerCamosScriptableObject.ReturnNewlyUnlockedCamosOffset = getRealOffset(0x88ED58);
UnlockedPlayerCamosScriptableObject.ReturnNewlyUnlockedWeaponSkinsOffset = getRealOffset(0x88EEFC);
WeaponCategoryInfo.get_WeaponCategoryOffset = getRealOffset(0x8B3378);
WeaponCategoryInfo.get_WeaponCategory = (int (*)(void*))WeaponCategoryInfo.get_WeaponCategoryOffset;

WeaponCategoryInfo.SetTextTitleOffset = getRealOffset(0x8B30A8);
WeaponCategoryInfo.SetTextTitle = (void(*)(void*, void *, int, int))WeaponCategoryInfo.SetTextTitleOffset;

WeaponCategoryInfo.GetNumberStringsOffset = getRealOffset(0x8B3380);
WeaponCategoryInfo.GetNumberStrings = (monoString *(*)(void*, int, int))WeaponCategoryInfo.GetNumberStringsOffset;

WeaponCategoryInfo.SetWeaponSpriteOffset = getRealOffset(0x8B3260);
WeaponCategoryInfo.SetWeaponSprite = (void(*)(void*, void *))WeaponCategoryInfo.SetWeaponSpriteOffset;

SeasonCaseReward.SetRewardOffset = getRealOffset(0x617C78);
SeasonCaseReward.SetReward = (void(*)(void*, void *))SeasonCaseReward.SetRewardOffset;

SeasonCaseReward.ToggleImageOffset = getRealOffset(0x617CB0);
SeasonCaseReward.ToggleImage = (void(*)(void*, int))SeasonCaseReward.ToggleImageOffset;

SeasonCaseReward.GetTitleOffset = getRealOffset(0x617D5C);
SeasonCaseReward.GetTitle = (monoString *(*)(void*, void *))SeasonCaseReward.GetTitleOffset;

SeasonCurrencyReward.SetRewardOffset = getRealOffset(0x618024);
SeasonCurrencyReward.SetReward = (void(*)(void*, void *))SeasonCurrencyReward.SetRewardOffset;

SeasonCurrencyReward.ToggleImagesOffset = getRealOffset(0x618054);
SeasonCurrencyReward.ToggleImages = (void(*)(void*, int))SeasonCurrencyReward.ToggleImagesOffset;

SeasonCurrencyReward.GetTitleOffset = getRealOffset(0x6180B8);
SeasonCurrencyReward.GetTitle = (monoString *(*)(void*, void *))SeasonCurrencyReward.GetTitleOffset;

SeasonRewardAbstract.SetTitleOffset = getRealOffset(0x617D14);
SeasonRewardAbstract.SetTitle = (void(*)(void*, void *))SeasonRewardAbstract.SetTitleOffset;

SeasonSkinReward.SetRewardOffset = getRealOffset(0x61A170);
SeasonSkinReward.SetReward = (void(*)(void*, void *))SeasonSkinReward.SetRewardOffset;

SeasonSkinReward.SetCamoOffset = getRealOffset(0x61A194);
SeasonSkinReward.SetCamo = (void(*)(void*, void *))SeasonSkinReward.SetCamoOffset;

SeasonSkinReward.GetTitleOffset = getRealOffset(0x61A21C);
SeasonSkinReward.GetTitle = (monoString *(*)(void*, void *))SeasonSkinReward.GetTitleOffset;

SeasonWeaponReward.SetRewardOffset = getRealOffset(0x61A4A8);
SeasonWeaponReward.SetReward = (void(*)(void*, void *))SeasonWeaponReward.SetRewardOffset;

SeasonWeaponReward.SetWeaponOffset = getRealOffset(0x61A4CC);
SeasonWeaponReward.SetWeapon = (void(*)(void*, void *))SeasonWeaponReward.SetWeaponOffset;

SeasonWeaponReward.GetTitleOffset = getRealOffset(0x61A58C);
SeasonWeaponReward.GetTitle = (monoString *(*)(void*, void *))SeasonWeaponReward.GetTitleOffset;

DisplaySeasonRewards.StartOffset = getRealOffset(0x67B018);
DisplaySeasonRewards.Start = (void(*)(void*))DisplaySeasonRewards.StartOffset;

DisplaySeasonRewards.InstantiateRewardsOffset = getRealOffset(0x67B024);
DisplaySeasonRewards.InstantiateRewards = (void(*)(void*, void *))DisplaySeasonRewards.InstantiateRewardsOffset;

RewardTierController.SetUpOffset = getRealOffset(0x64B438);
RewardTierController.SetUp = (void(*)(void*, void *, bool))RewardTierController.SetUpOffset;

SeasonRewardInfoController.FetchRewardAvailabilityOffset = getRealOffset(0x619618);
SeasonRewardInfoController.FetchRewardAvailability = (void(*)(void*))SeasonRewardInfoController.FetchRewardAvailabilityOffset;

SeasonRewardInfoController.LoadRewardsOffset = getRealOffset(0x61979C);
SeasonRewardInfoController.LoadRewards = (void(*)(void*))SeasonRewardInfoController.LoadRewardsOffset;

SeasonRewardInfoController.OnLoadingSuccessOffset = getRealOffset(0x6198CC);
SeasonRewardInfoController.OnLoadingSuccess = (void(*)(void*))SeasonRewardInfoController.OnLoadingSuccessOffset;

SeasonRewardInfoController.OnLoadingErrorOffset = getRealOffset(0x619938);
SeasonRewardInfoController.OnLoadingError = (void(*)(void*, monoString*))SeasonRewardInfoController.OnLoadingErrorOffset;

SeasonRewardInfoController.OnEnableOffset = getRealOffset(0x619944);
SeasonRewardInfoController.OnEnable = (void(*)(void*))SeasonRewardInfoController.OnEnableOffset;

BFSeasonRewardsPrefabContainerSO.GetRewardPrefabOffset = getRealOffset(0x6BE80C);
BFSeasonRewardsPrefabContainerSO.GetRewardPrefab = (void *(*)(void*, int))BFSeasonRewardsPrefabContainerSO.GetRewardPrefabOffset;

WS_AvailableSeasonsSO.DebugJsonOffset = getRealOffset(0x8A5F10);
WS_AvailableSeasonsSO.DebugJson = (void(*)(void*))WS_AvailableSeasonsSO.DebugJsonOffset;

WS_CheckForRewardSO.DebugJsonOffset = getRealOffset(0x8A62CC);
WS_CheckForRewardSO.DebugJson = (void(*)(void*))WS_CheckForRewardSO.DebugJsonOffset;

WS_CurrentSeasonInfoSO.DebugJsonOffset = getRealOffset(0x8A6860);
WS_CurrentSeasonInfoSO.DebugJson = (void(*)(void*))WS_CurrentSeasonInfoSO.DebugJsonOffset;

WS_CurrentSeasonInfoSO.GetEventNameOffset = getRealOffset(0x8A68F0);
WS_CurrentSeasonInfoSO.GetEventName = (monoString *(*)(void*))WS_CurrentSeasonInfoSO.GetEventNameOffset;

WS_CurrentSeasonInfoSO.GetGameModeOffset = getRealOffset(0x8A6910);
WS_CurrentSeasonInfoSO.GetGameMode = (monoString *(*)(void*))WS_CurrentSeasonInfoSO.GetGameModeOffset;

WS_CurrentSeasonInfoSO.GetEventCodeOffset = getRealOffset(0x8A6930);
WS_CurrentSeasonInfoSO.GetEventCode = (int(*)(void*))WS_CurrentSeasonInfoSO.GetEventCodeOffset;

WS_CurrentSeasonInfoSO.GetKilledTextOffset = getRealOffset(0x8A6950);
WS_CurrentSeasonInfoSO.GetKilledText = (monoString *(*)(void*))WS_CurrentSeasonInfoSO.GetKilledTextOffset;

WS_CurrentSeasonInfoSO.GetAllowedWeaponsOffset = getRealOffset(0x8A6970);
WS_EventLeaderboardSO.DebugJsonOffset = getRealOffset(0x8A71CC);
WS_EventLeaderboardSO.DebugJson = (void(*)(void*))WS_EventLeaderboardSO.DebugJsonOffset;

WS_SeasonRewardCasesSO.FeedOffset = getRealOffset(0x8A7E10);
WS_SeasonRewardCasesSO.Feed = (void(*)(void*, void *))WS_SeasonRewardCasesSO.FeedOffset;

WS_SeasonRewardCasesSO.GetCountOffset = getRealOffset(0x8A7E18);
WS_SeasonRewardCasesSO.GetCount = (int(*)(void*))WS_SeasonRewardCasesSO.GetCountOffset;

WS_SeasonRewardCasesSO.PopCaseOffset = getRealOffset(0x8A7E48);
WS_SeasonRewardCasesSO.PopCase = (void *(*)(void*))WS_SeasonRewardCasesSO.PopCaseOffset;

WS_SeasonRewardCasesSO.RemoveOneCaseOffset = getRealOffset(0x8A7EBC);
WS_SeasonRewardCasesSO.RemoveOneCase = (void(*)(void*))WS_SeasonRewardCasesSO.RemoveOneCaseOffset;

WS_SeasonRewardCasesSO.GetRewardOffset = getRealOffset(0x8A7E98);
WS_SeasonRewardCasesSO.GetReward = (void *(*)(void*))WS_SeasonRewardCasesSO.GetRewardOffset;

WS_SeasonRewardCasesSO.SaveOffset = getRealOffset(0x8A7EE0);
WS_SeasonRewardCasesSO.Save = (void(*)(void*))WS_SeasonRewardCasesSO.SaveOffset;

WS_SeasonRewardCasesSO.LoadOffset = getRealOffset(0x8A7F84);
WS_SeasonRewardCasesSO.Load = (void(*)(void*))WS_SeasonRewardCasesSO.LoadOffset;

WS_SeasonRewardCasesSO.DebugJsonOffset = getRealOffset(0x8A8028);
WS_SeasonRewardCasesSO.DebugJson = (void(*)(void*))WS_SeasonRewardCasesSO.DebugJsonOffset;

WS_SeasonRewardsSO.get_RewardInfoOffset = getRealOffset(0x8A855C);
WS_SeasonRewardsSO.get_RewardInfo = (void *(*)(void*))WS_SeasonRewardsSO.get_RewardInfoOffset;

WS_SeasonRewardsSO.DebugJsonOffset = getRealOffset(0x8A8564);
WS_SeasonRewardsSO.DebugJson = (void(*)(void*))WS_SeasonRewardsSO.DebugJsonOffset;

SeasonRewardChecker.CheckForRewardOffset = getRealOffset(0x619070);
SeasonRewardChecker.CheckForReward = (void(*)(void*))SeasonRewardChecker.CheckForRewardOffset;

SeasonRewardChecker.FetchRewardAvailabilityOffset = getRealOffset(0x6190A4);
SeasonRewardChecker.FetchRewardAvailability = (void(*)(void*))SeasonRewardChecker.FetchRewardAvailabilityOffset;

SeasonRewardChecker.OnCheckRewardSuccessfulOffset = getRealOffset(0x619228);
SeasonRewardChecker.OnCheckRewardSuccessful = (void(*)(void*))SeasonRewardChecker.OnCheckRewardSuccessfulOffset;

SeasonRewardChecker.OnCheckRewardFailedOffset = getRealOffset(0x6193B0);
SeasonRewardChecker.OnCheckRewardFailed = (void(*)(void*, monoString*))SeasonRewardChecker.OnCheckRewardFailedOffset;

SeasonRewardChecker.OnFetchRewardsSuccessOffset = getRealOffset(0x6193B4);
SeasonRewardChecker.OnFetchRewardsSuccess = (void(*)(void*))SeasonRewardChecker.OnFetchRewardsSuccessOffset;

SeasonRewardChecker.OnFetchRewardsFailedOffset = getRealOffset(0x6195C0);
SeasonRewardChecker.OnFetchRewardsFailed = (void(*)(void*, monoString*))SeasonRewardChecker.OnFetchRewardsFailedOffset;

SeasonsContainerController.LoadSeasonInfoOffset = getRealOffset(0x61A79C);
SeasonsContainerController.LoadSeasonInfo = (void(*)(void*, void *))SeasonsContainerController.LoadSeasonInfoOffset;

SeasonsContainerController.UpdateOffset = getRealOffset(0x61A914);
SeasonsContainerController.Update = (void(*)(void*))SeasonsContainerController.UpdateOffset;

SeasonsContainerController.GetCurrentDateOffset = getRealOffset(0x61AA20);
SeasonsContainerController.SwitchViewToStateOffset = getRealOffset(0x61AFAC);
SeasonsContainerController.SwitchViewToState = (void(*)(void*, int))SeasonsContainerController.SwitchViewToStateOffset;

SeasonsContainerController.SetPreComingSoonViewOffset = getRealOffset(0x61B0B0);
SeasonsContainerController.SetPreComingSoonView = (void(*)(void*))SeasonsContainerController.SetPreComingSoonViewOffset;

SeasonsContainerController.ActivateInfoButtonsOffset = getRealOffset(0x61B674);
SeasonsContainerController.ActivateInfoButtons = (void(*)(void*))SeasonsContainerController.ActivateInfoButtonsOffset;

SeasonsContainerController.GetNextEventLabelOffset = getRealOffset(0x61AAC8);
SeasonsContainerController.GetNextEventLabel = (monoString *(*)(void*, void *, int))SeasonsContainerController.GetNextEventLabelOffset;

SeasonsContainerController.SetInProgressViewOffset = getRealOffset(0x61B190);
SeasonsContainerController.SetInProgressView = (void(*)(void*))SeasonsContainerController.SetInProgressViewOffset;

SeasonsContainerController.SetPostComingSoonViewOffset = getRealOffset(0x61B2A8);
SeasonsContainerController.SetPostComingSoonView = (void(*)(void*))SeasonsContainerController.SetPostComingSoonViewOffset;

SeasonsContainerController.SetExpiredComingSoonOffset = getRealOffset(0x61B53C);
SeasonsContainerController.SetExpiredComingSoon = (void(*)(void*))SeasonsContainerController.SetExpiredComingSoonOffset;

SeasonsContainerController.SetInvalidOffset = getRealOffset(0x61B3E8);
SeasonsContainerController.SetInvalid = (void(*)(void*))SeasonsContainerController.SetInvalidOffset;

SeasonsContainerController.OpenEventOffset = getRealOffset(0x61BA08);
SeasonsContainerController.OpenEvent = (void(*)(void*))SeasonsContainerController.OpenEventOffset;

SeasonsContainerController.OpenInfoOffset = getRealOffset(0x61BA88);
SeasonsContainerController.OpenInfo = (void(*)(void*))SeasonsContainerController.OpenInfoOffset;

SeasonsContainerController.OpenComingSoonOffset = getRealOffset(0x61BB30);
SeasonsContainerController.OpenComingSoon = (void(*)(void*))SeasonsContainerController.OpenComingSoonOffset;

SeasonsContainerController.OnSuccessSeasonInfoRequestOffset = getRealOffset(0x61BC3C);
SeasonsContainerController.OnSuccessSeasonInfoRequest = (void(*)(void*))SeasonsContainerController.OnSuccessSeasonInfoRequestOffset;

SeasonsContainerController.OnErrorSeasonInfoRequestOffset = getRealOffset(0x61BE04);
SeasonsContainerController.OnErrorSeasonInfoRequest = (void(*)(void*, monoString*))SeasonsContainerController.OnErrorSeasonInfoRequestOffset;

SeasonsContainerController.SetTitleLabelOffset = getRealOffset(0x61B6E0);
SeasonsContainerController.SetTitleLabel = (void(*)(void*, void *))SeasonsContainerController.SetTitleLabelOffset;

SeasonsContainerController.SetGameModeLabelOffset = getRealOffset(0x61B8A0);
SeasonsContainerController.SetGameModeLabel = (void(*)(void*, void *))SeasonsContainerController.SetGameModeLabelOffset;

SeasonsContainerController.LoadEventImageOffset = getRealOffset(0x61BD6C);
SeasonsContainerController.LoadEventImage = (void *(*)(void*, monoString*))SeasonsContainerController.LoadEventImageOffset;

SeasonsContainerController.OnEnableOffset = getRealOffset(0x61BF14);
SeasonsContainerController.OnEnable = (void(*)(void*))SeasonsContainerController.OnEnableOffset;

SeasonsContainerController.OnDisableOffset = getRealOffset(0x61BF98);
SeasonsContainerController.OnDisable = (void(*)(void*))SeasonsContainerController.OnDisableOffset;

WS_CurrentSeasonInfo.get_StartDateOffset = getRealOffset(0x8A6364);
WS_CurrentSeasonInfo.get_EndDateOffset = getRealOffset(0x8A6370);
WS_CurrentSeasonInfo.get_NextStartOffset = getRealOffset(0x8A637C);
WS_CurrentSeasonInfo.get_NumberOffset = getRealOffset(0x8A6384);
WS_CurrentSeasonInfo.get_Number = (int(*)(void*))WS_CurrentSeasonInfo.get_NumberOffset;

WS_CurrentSeasonInfo.get_IDOffset = getRealOffset(0x8A638C);
WS_CurrentSeasonInfo.get_ID = (int(*)(void*))WS_CurrentSeasonInfo.get_IDOffset;

WS_CurrentSeasonInfo.get_EventCodeOffset = getRealOffset(0x8A6394);
WS_CurrentSeasonInfo.get_EventCode = (int(*)(void*))WS_CurrentSeasonInfo.get_EventCodeOffset;

WS_CurrentSeasonInfo.get_EventNameOffset = getRealOffset(0x8A639C);
WS_CurrentSeasonInfo.get_EventName = (monoString *(*)(void*))WS_CurrentSeasonInfo.get_EventNameOffset;

WS_CurrentSeasonInfo.get_GameModeOffset = getRealOffset(0x8A63A4);
WS_CurrentSeasonInfo.get_GameMode = (monoString *(*)(void*))WS_CurrentSeasonInfo.get_GameModeOffset;

WS_CurrentSeasonInfo.get_KilledTextOffset = getRealOffset(0x8A63AC);
WS_CurrentSeasonInfo.get_KilledText = (monoString *(*)(void*))WS_CurrentSeasonInfo.get_KilledTextOffset;

WS_CurrentSeasonInfo.get_ImageURLOffset = getRealOffset(0x8A63B4);
WS_CurrentSeasonInfo.get_ImageURL = (monoString *(*)(void*))WS_CurrentSeasonInfo.get_ImageURLOffset;

WS_CurrentSeasonInfo.CanUserPlaySeasonOffset = getRealOffset(0x8A63BC);
WS_CurrentSeasonInfo.CanUserPlaySeason = (bool(*)(void*))WS_CurrentSeasonInfo.CanUserPlaySeasonOffset;

WS_CurrentSeasonInfo.GetEventInfoOffset = getRealOffset(0x8A63CC);
WS_CurrentSeasonInfo.GetEventInfo = (void *(*)(void*))WS_CurrentSeasonInfo.GetEventInfoOffset;

WS_CurrentSeasonInfo.GetAllowedWeaponsOffset = getRealOffset(0x8A6478);
WS_CurrentSeasonInfo.GetTimeStampOffset = getRealOffset(0x8A66B8);
WS_CurrentSeasonInfo.GetTimeStamp = (int (*)(void*, int))WS_CurrentSeasonInfo.GetTimeStampOffset;

WS_CurrentSeasonModel.GetDebugDataOffset = getRealOffset(0x8A6BD4);
WS_CurrentSeasonModel.GetDebugData = (monoString *(*)(void*))WS_CurrentSeasonModel.GetDebugDataOffset;

WS_CurrentSeasonModel.onSuccessGetRequestsOffset = getRealOffset(0x8A6C24);
WS_CurrentSeasonModel.onSuccessGetRequests = (void(*)(void*, monoString*))WS_CurrentSeasonModel.onSuccessGetRequestsOffset;

WS_CurrentSeasonModel.GetSeasonInfoOffset = getRealOffset(0x8A6D04);
WS_CurrentSeasonModel.GetSeasonInfo = (void *(*)(void*))WS_CurrentSeasonModel.GetSeasonInfoOffset;

WS_CheckForReward.IsRewardAvailableOffset = getRealOffset(0x8A5FB8);
WS_CheckForReward.IsRewardAvailable = (bool(*)(void*))WS_CheckForReward.IsRewardAvailableOffset;

WS_CheckForReward.GetRewardTierOffset = getRealOffset(0x8A5FC0);
WS_CheckForReward.GetRewardTier = (int (*)(void*))WS_CheckForReward.GetRewardTierOffset;

WS_CheckForReward.GetSeasonIdOffset = getRealOffset(0x8A5FC8);
WS_CheckForReward.GetSeasonId = (int(*)(void*))WS_CheckForReward.GetSeasonIdOffset;

WS_CheckForRewardModel.GetDebugDataOffset = getRealOffset(0x8A618C);
WS_CheckForRewardModel.GetDebugData = (monoString *(*)(void*))WS_CheckForRewardModel.GetDebugDataOffset;

WS_CheckForRewardModel.onSuccessGetRequestsOffset = getRealOffset(0x8A61DC);
WS_CheckForRewardModel.onSuccessGetRequests = (void(*)(void*, monoString*))WS_CheckForRewardModel.onSuccessGetRequestsOffset;

WS_CheckForRewardModel.GetResponseOffset = getRealOffset(0x8A62BC);
WS_CheckForRewardModel.GetResponse = (void *(*)(void*))WS_CheckForRewardModel.GetResponseOffset;

WS_EventLeaderboard.GetUsersOffset = getRealOffset(0x8A6DA0);
WS_EventLeaderboard.GetTotalPlayersOffset = getRealOffset(0x8A6DA8);
WS_EventLeaderboard.GetTotalPlayers = (int(*)(void*))WS_EventLeaderboard.GetTotalPlayersOffset;

WS_EventLeaderboardModel.GetDebugDataOffset = getRealOffset(0x8A6FBC);
WS_EventLeaderboardModel.GetDebugData = (monoString *(*)(void*))WS_EventLeaderboardModel.GetDebugDataOffset;

WS_EventLeaderboardModel.onSuccessGetRequestsOffset = getRealOffset(0x8A700C);
WS_EventLeaderboardModel.onSuccessGetRequests = (void(*)(void*, monoString*))WS_EventLeaderboardModel.onSuccessGetRequestsOffset;

WS_EventLeaderboardModel.GetLeaderboardOffset = getRealOffset(0x8A7150);
WS_EventLeaderboardModel.GetLeaderboard = (void *(*)(void*))WS_EventLeaderboardModel.GetLeaderboardOffset;

WS_GetAvailableSeason.GetAvailableSeasonsOffset = getRealOffset(0x8A7264);
WS_GetAvailableSeason.GetSeasonNamesOffset = getRealOffset(0x8A73E0);
ShortSeasonInfo.get_IDOffset = getRealOffset(0x61E79C);
ShortSeasonInfo.get_ID = (int(*)(void*))ShortSeasonInfo.get_IDOffset;

ShortSeasonInfo.GetDropdownNameOffset = getRealOffset(0x61E7A4);
ShortSeasonInfo.GetDropdownName = (monoString *(*)(void*))ShortSeasonInfo.GetDropdownNameOffset;

ShortSeasonInfo.GetIsActiveOffset = getRealOffset(0x61E918);
ShortSeasonInfo.GetIsActive = (bool(*)(void*))ShortSeasonInfo.GetIsActiveOffset;

WS_GetAvailableSeasonModel.GetDebugDataOffset = getRealOffset(0x8A7748);
WS_GetAvailableSeasonModel.GetDebugData = (monoString *(*)(void*))WS_GetAvailableSeasonModel.GetDebugDataOffset;

WS_GetAvailableSeasonModel.onSuccessGetRequestsOffset = getRealOffset(0x8A7798);
WS_GetAvailableSeasonModel.onSuccessGetRequests = (void(*)(void*, monoString*))WS_GetAvailableSeasonModel.onSuccessGetRequestsOffset;

WS_GetAvailableSeasonModel.GetAvailableSeasonsOffset = getRealOffset(0x8A78E0);
WS_GetAvailableSeasonModel.GetAvailableSeasons = (void *(*)(void*))WS_GetAvailableSeasonModel.GetAvailableSeasonsOffset;

WS_SeasonRewardCases.GetCountOffset = getRealOffset(0x8A7908);
WS_SeasonRewardCases.GetCount = (int(*)(void*))WS_SeasonRewardCases.GetCountOffset;

WS_SeasonRewardCases.GetRewardOffset = getRealOffset(0x8A7928);
WS_SeasonRewardCases.GetReward = (void *(*)(void*))WS_SeasonRewardCases.GetRewardOffset;

WS_SeasonRewardCases.RemoveOneRewardOffset = getRealOffset(0x8A7960);
WS_SeasonRewardCases.RemoveOneReward = (void(*)(void*))WS_SeasonRewardCases.RemoveOneRewardOffset;

WS_SeasonRewardCases.GetStatusOffset = getRealOffset(0x8A7A20);
WS_SeasonRewardCases.GetStatus = (int(*)(void*))WS_SeasonRewardCases.GetStatusOffset;

WS_SeasonRewardCases.GetMessageOffset = getRealOffset(0x8A7A28);
WS_SeasonRewardCases.GetMessage = (monoString *(*)(void*))WS_SeasonRewardCases.GetMessageOffset;

WS_SeasonRewardCases.RemoveOneRewardb__5_0Offset = getRealOffset(0x8A7A38);
WS_SeasonRewardCases.RemoveOneRewardb__5_0 = (bool(*)(void*, void *))WS_SeasonRewardCases.RemoveOneRewardb__5_0Offset;

WS_CaseReward.GetJsonOffset = getRealOffset(0x8A5FA8);
WS_CaseReward.GetJson = (monoString *(*)(void*))WS_CaseReward.GetJsonOffset;

WS_SeasonRewardCasesModel.GetDebugDataOffset = getRealOffset(0x8A7C78);
WS_SeasonRewardCasesModel.GetDebugData = (monoString *(*)(void*))WS_SeasonRewardCasesModel.GetDebugDataOffset;

WS_SeasonRewardCasesModel.onSuccessGetRequestsOffset = getRealOffset(0x8A7CC8);
WS_SeasonRewardCasesModel.onSuccessGetRequests = (void(*)(void*, monoString*))WS_SeasonRewardCasesModel.onSuccessGetRequestsOffset;

WS_SeasonRewardCasesModel.GetResponseOffset = getRealOffset(0x8A7E00);
WS_SeasonRewardCasesModel.GetResponse = (void *(*)(void*))WS_SeasonRewardCasesModel.GetResponseOffset;

SeasonRewardInfo.GetRewardsTiersOffset = getRealOffset(0x6195CC);
SeasonRewardInfo.GetTierOffset = getRealOffset(0x619484);
SeasonRewardInfo.GetTier = (void *(*)(void*, int))SeasonRewardInfo.GetTierOffset;

SeasonRewardTier.GetTierOffset = getRealOffset(0x619964);
SeasonRewardTier.GetTier = (int (*)(void*))SeasonRewardTier.GetTierOffset;

SeasonRewardTier.GetTitleOffset = getRealOffset(0x61996C);
SeasonRewardTier.GetTitle = (monoString *(*)(void*))SeasonRewardTier.GetTitleOffset;

SeasonRewardTier.GetSeasonRewardsOffset = getRealOffset(0x619974);
WS_SeasonReward.GetRewardTypeOffset = getRealOffset(0x8A78F0);
WS_SeasonReward.GetRewardType = (int (*)(void*))WS_SeasonReward.GetRewardTypeOffset;

WS_SeasonReward.GetRewardCodeOffset = getRealOffset(0x8A78F8);
WS_SeasonReward.GetRewardCode = (int(*)(void*))WS_SeasonReward.GetRewardCodeOffset;

WS_SeasonRewardsModel.GetDebugDataOffset = getRealOffset(0x8A83C4);
WS_SeasonRewardsModel.GetDebugData = (monoString *(*)(void*))WS_SeasonRewardsModel.GetDebugDataOffset;

WS_SeasonRewardsModel.onSuccessGetRequestsOffset = getRealOffset(0x8A8414);
WS_SeasonRewardsModel.onSuccessGetRequests = (void(*)(void*, monoString*))WS_SeasonRewardsModel.onSuccessGetRequestsOffset;

WS_SeasonRewardsModel.GetSeasonInfoOffset = getRealOffset(0x8A854C);
WS_SeasonRewardsModel.GetSeasonInfo = (void *(*)(void*))WS_SeasonRewardsModel.GetSeasonInfoOffset;

SensitivityScript.StartOffset = getRealOffset(0x61C384);
SensitivityScript.Start = (void(*)(void*))SensitivityScript.StartOffset;

SensitivityScript.setSensitivityOffset = getRealOffset(0x61C4C0);
SensitivityScript.setSensitivity = (void(*)(void*, float))SensitivityScript.setSensitivityOffset;

SensitivityScript.setAimingSensitivityOffset = getRealOffset(0x61C66C);
SensitivityScript.setAimingSensitivity = (void(*)(void*, float))SensitivityScript.setAimingSensitivityOffset;

SetOtherGameObjectActive.SetGameObjectActiveOffset = getRealOffset(0x61CF00);
SetOtherGameObjectActive.SetGameObjectActive = (void(*)(void*, bool))SetOtherGameObjectActive.SetGameObjectActiveOffset;

SetPlayerPrefs.SetIntValueOffset = getRealOffset(0x61CF44);
SetPlayerPrefs.SetIntValue = (void(*)(void*, monoString*, int))SetPlayerPrefs.SetIntValueOffset;

SetPlayerPrefs.SetFloatValueOffset = getRealOffset(0x61CF54);
SetPlayerPrefs.SetFloatValue = (void(*)(void*, monoString*, float))SetPlayerPrefs.SetFloatValueOffset;

SetRenderQueueForMaterial.AwakeOffset = getRealOffset(0x61CF6C);
SetRenderQueueForMaterial.Awake = (void(*)(void*))SetRenderQueueForMaterial.AwakeOffset;

ChangeUsernamePopup.OnEnableOffset = getRealOffset(0x77F204);
ChangeUsernamePopup.OnEnable = (void(*)(void*))ChangeUsernamePopup.OnEnableOffset;

ChangeUsernamePopup.OnCancelClickedOffset = getRealOffset(0x77F36C);
ChangeUsernamePopup.OnCancelClicked = (void(*)(void*))ChangeUsernamePopup.OnCancelClickedOffset;

ChangeUsernamePopup.ShowErrorOffset = getRealOffset(0x77F3A0);
ChangeUsernamePopup.ShowError = (void(*)(void*, monoString*))ChangeUsernamePopup.ShowErrorOffset;

ChangeUsernamePopup.OnSaveClickedOffset = getRealOffset(0x77F45C);
ChangeUsernamePopup.OnSaveClicked = (void(*)(void*))ChangeUsernamePopup.OnSaveClickedOffset;

ChangeUsernamePopup.RequestNameChangeOffset = getRealOffset(0x77F7C8);
ChangeUsernamePopup.RequestNameChange = (void *(*)(void*, monoString*))ChangeUsernamePopup.RequestNameChangeOffset;

ChangeUsernameTextInputController.SetValidOffset = getRealOffset(0x77F340);
ChangeUsernameTextInputController.SetValid = (void(*)(void*))ChangeUsernameTextInputController.SetValidOffset;

ChangeUsernameTextInputController.SetInvalidOffset = getRealOffset(0x77F430);
ChangeUsernameTextInputController.SetInvalid = (void(*)(void*))ChangeUsernameTextInputController.SetInvalidOffset;

InitClanTagOnEnable.OnEnableOffset = getRealOffset(0x80B114);
InitClanTagOnEnable.OnEnable = (void(*)(void*))InitClanTagOnEnable.OnEnableOffset;

ShakeCamera.StartOffset = getRealOffset(0x61D294);
ShakeCamera.Start = (void(*)(void*))ShakeCamera.StartOffset;

ShakeCamera.UpdateOffset = getRealOffset(0x61D2A0);
ShakeCamera.Update = (void(*)(void*))ShakeCamera.UpdateOffset;

ShakeCamera.DoShakeOffset = getRealOffset(0x61D4B8);
ShakeCamera.DoShake = (void(*)(void*, float))ShakeCamera.DoShakeOffset;

ShootScript.IsPlayerOnTeamOffset = getRealOffset(0x61DCCC);
ShootScript.IsPlayerOnTeam = (bool(*)(void*, void *))ShootScript.IsPlayerOnTeamOffset;

ShootScript.AwakeOffset = getRealOffset(0x61DE10);
ShootScript.Awake = (void(*)(void*))ShootScript.AwakeOffset;

ShootScript.StartOffset = getRealOffset(0x61DE88);
ShootScript.Start = (void(*)(void*))ShootScript.StartOffset;

ShootScript.UpdateFastOffset = getRealOffset(0x61DF38);
ShootScript.UpdateFast = (void(*)(void*))ShootScript.UpdateFastOffset;

ShootScript.OnDestroyOffset = getRealOffset(0x61E024);
ShootScript.OnDestroy = (void(*)(void*))ShootScript.OnDestroyOffset;

ShootScript.OnEnableOffset = getRealOffset(0x61E1E8);
ShootScript.OnEnable = (void(*)(void*))ShootScript.OnEnableOffset;

ShootScript.OnDisableOffset = getRealOffset(0x61E1F8);
ShootScript.OnDisable = (void(*)(void*))ShootScript.OnDisableOffset;

ShootScript.OnPointerDownOffset = getRealOffset(0x61E208);
ShootScript.OnPointerDown = (void(*)(void*, void *))ShootScript.OnPointerDownOffset;

ShootScript.OnPointerUpOffset = getRealOffset(0x61E53C);
ShootScript.OnPointerUp = (void(*)(void*, void *))ShootScript.OnPointerUpOffset;

Sidebar.AwakeOffset = getRealOffset(0x620B4C);
Sidebar.Awake = (void(*)(void*))Sidebar.AwakeOffset;

Sidebar.StartOffset = getRealOffset(0x620BC8);
Sidebar.Start = (void(*)(void*))Sidebar.StartOffset;

Sidebar.HideAllSelectionsOffset = getRealOffset(0x6227E8);
Sidebar.HideAllSelections = (void(*)(void*))Sidebar.HideAllSelectionsOffset;

Sidebar.ClearSpecialOfferNotificationsOffset = getRealOffset(0x6229DC);
Sidebar.ClearSpecialOfferNotifications = (void(*)(void*))Sidebar.ClearSpecialOfferNotificationsOffset;

Sidebar.SpecialOfferAvailableOnIndexOffset = getRealOffset(0x622B94);
Sidebar.SpecialOfferAvailableOnIndex = (void(*)(void*, int))Sidebar.SpecialOfferAvailableOnIndexOffset;

Sidebar.LoadSceneOffset = getRealOffset(0x622CF0);
Sidebar.LoadScene = (void *(*)(void*, monoString*))Sidebar.LoadSceneOffset;

Sidebar.LoadLoginOffset = getRealOffset(0x6203E8);
Sidebar.LoadLogin = (void(*)(void*))Sidebar.LoadLoginOffset;

Sidebar.SetErrorMessageOnSceneLoadOffset = getRealOffset(0x622DA8);
Sidebar.SetErrorMessageOnSceneLoad = (void(*)(void*, monoString*))Sidebar.SetErrorMessageOnSceneLoadOffset;

Sidebar.LoadRegisterOffset = getRealOffset(0x621D94);
Sidebar.LoadRegister = (void(*)(void*))Sidebar.LoadRegisterOffset;

Sidebar.LoadMultiplayerOffset = getRealOffset(0x622EEC);
Sidebar.LoadMultiplayer = (void(*)(void*))Sidebar.LoadMultiplayerOffset;

Sidebar.LoadSingleplayerOffset = getRealOffset(0x621B9C);
Sidebar.LoadSingleplayer = (void(*)(void*))Sidebar.LoadSingleplayerOffset;

Sidebar.TutorialButtonPressedOffset = getRealOffset(0x6231B0);
Sidebar.TutorialButtonPressed = (void(*)(void*))Sidebar.TutorialButtonPressedOffset;

Sidebar.LoadLinksOffset = getRealOffset(0x6223C8);
Sidebar.LoadLinks = (void(*)(void*))Sidebar.LoadLinksOffset;

Sidebar.LoadSettingsOffset = getRealOffset(0x621FD0);
Sidebar.LoadSettings = (void(*)(void*))Sidebar.LoadSettingsOffset;

Sidebar.LoadProfileOffset = getRealOffset(0x6221C8);
Sidebar.LoadProfile = (void(*)(void*))Sidebar.LoadProfileOffset;

Sidebar.LoadCustomizeOffset = getRealOffset(0x61F894);
Sidebar.LoadCustomize = (void(*)(void*))Sidebar.LoadCustomizeOffset;

Sidebar.LoadShopOffset = getRealOffset(0x62077C);
Sidebar.LoadShop = (void(*)(void*))Sidebar.LoadShopOffset;

Sidebar.LoadGoldShopOffset = getRealOffset(0x6216BC);
Sidebar.LoadGoldShop = (void(*)(void*))Sidebar.LoadGoldShopOffset;

Sidebar.LoadCreditsShopOffset = getRealOffset(0x6217DC);
Sidebar.LoadCreditsShop = (void(*)(void*))Sidebar.LoadCreditsShopOffset;

Sidebar.LoadDealsShopOffset = getRealOffset(0x6219BC);
Sidebar.LoadDealsShop = (void(*)(void*))Sidebar.LoadDealsShopOffset;

Sidebar.LoadCaseShopOffset = getRealOffset(0x621394);
Sidebar.LoadCaseShop = (void(*)(void*))Sidebar.LoadCaseShopOffset;

Sidebar.LoadOpenCaseOffset = getRealOffset(0x619F44);
Sidebar.LoadOpenCase = (void(*)(void*))Sidebar.LoadOpenCaseOffset;

Sidebar.LoadMainMenuOffset = getRealOffset(0x6200D8);
Sidebar.LoadMainMenu = (void(*)(void*))Sidebar.LoadMainMenuOffset;

Sidebar.SetButtonsDisabledOffset = getRealOffset(0x623208);
Sidebar.SetButtonsDisabled = (void(*)(void*, bool))Sidebar.SetButtonsDisabledOffset;

Sidebar.SetGoldOffset = getRealOffset(0x6225C0);
Sidebar.SetGold = (void(*)(void*, int))Sidebar.SetGoldOffset;

Sidebar.SetCreditsOffset = getRealOffset(0x623210);
Sidebar.SetCredits = (void(*)(void*, int))Sidebar.SetCreditsOffset;

Sidebar.SetUsernameOffset = getRealOffset(0x622740);
Sidebar.SetUsername = (void(*)(void*, monoString*))Sidebar.SetUsernameOffset;

Sidebar.RefreshCreditsOffset = getRealOffset(0x6226AC);
Sidebar.RefreshCredits = (void(*)(void*))Sidebar.RefreshCreditsOffset;

Sidebar.OnDestroyOffset = getRealOffset(0x6232C4);
Sidebar.OnDestroy = (void(*)(void*))Sidebar.OnDestroyOffset;

SimpleUIElementsManager.AwakeOffset = getRealOffset(0x572910);
SimpleUIElementsManager.Awake = (void(*)(void*))SimpleUIElementsManager.AwakeOffset;

SimpleUIElementsManager.OnDestroyOffset = getRealOffset(0x57296C);
SimpleUIElementsManager.OnDestroy = (void(*)(void*))SimpleUIElementsManager.OnDestroyOffset;

SingleplayerMenu.StartOffset = getRealOffset(0x572B24);
SingleplayerMenu.Start = (void(*)(void*))SingleplayerMenu.StartOffset;

SingleplayerMenu.NextOffset = getRealOffset(0x572D48);
SingleplayerMenu.Next = (void(*)(void*))SingleplayerMenu.NextOffset;

SingleplayerMenu.PreviousOffset = getRealOffset(0x572DC4);
SingleplayerMenu.Previous = (void(*)(void*))SingleplayerMenu.PreviousOffset;

SingleplayerMenu.MoveToIndexOffset = getRealOffset(0x572B60);
SingleplayerMenu.MoveToIndex = (void(*)(void*, int))SingleplayerMenu.MoveToIndexOffset;

SingleplayerMenu.StartPracticeOffset = getRealOffset(0x572E40);
SingleplayerMenu.StartPractice = (void(*)(void*))SingleplayerMenu.StartPracticeOffset;

SingleplayerMenu.StartPracticeAfterTimeOffset = getRealOffset(0x572F08);
SingleplayerMenu.StartPracticeAfterTime = (void *(*)(void*, float))SingleplayerMenu.StartPracticeAfterTimeOffset;

SingleplayerMenu.OnRunTutorialOffset = getRealOffset(0x572FCC);
SingleplayerMenu.OnRunTutorial = (void(*)(void*))SingleplayerMenu.OnRunTutorialOffset;

SingleplayerMenu.DisconectOffset = getRealOffset(0x572FFC);
SingleplayerMenu.Disconect = (void(*)(void*))SingleplayerMenu.DisconectOffset;

SkinnedMeshCombiner.StartOffset = getRealOffset(0x57458C);
SkinnedMeshCombiner.Start = (void(*)(void*))SkinnedMeshCombiner.StartOffset;

SkirmishMenu.StartOffset = getRealOffset(0x575878);
SkirmishMenu.Start = (void(*)(void*))SkirmishMenu.StartOffset;

SkirmishMenu.SetKillsToWinOffset = getRealOffset(0x5758A4);
SkirmishMenu.SetKillsToWin = (void(*)(void*, float))SkirmishMenu.SetKillsToWinOffset;

SkirmishMenu.SetEnemiesOffset = getRealOffset(0x575980);
SkirmishMenu.SetEnemies = (void(*)(void*, float))SkirmishMenu.SetEnemiesOffset;

SkirmishMenu.SetMapToLoadWithIndexOffset = getRealOffset(0x575A88);
SkirmishMenu.SetMapToLoadWithIndex = (void(*)(void*, int))SkirmishMenu.SetMapToLoadWithIndexOffset;

SkirmishMenu.LoadMapOffset = getRealOffset(0x575B30);
SkirmishMenu.LoadMap = (void(*)(void*))SkirmishMenu.LoadMapOffset;

FacebookShareButton.AwakeOffset = getRealOffset(0x715E7C);
FacebookShareButton.Awake = (void(*)(void*))FacebookShareButton.AwakeOffset;

FacebookShareButton.FailSafeOffset = getRealOffset(0x715F10);
FacebookShareButton.FailSafe = (void(*)(void*))FacebookShareButton.FailSafeOffset;

FacebookShareButton.ShareScreenshotWithUserNameOffset = getRealOffset(0x716008);
FacebookShareButton.ShareScreenshotWithUserName = (void(*)(void*))FacebookShareButton.ShareScreenshotWithUserNameOffset;

FacebookShareButton.TakeScreenshotOffset = getRealOffset(0x716210);
FacebookShareButton.TakeScreenshot = (void *(*)(void*))FacebookShareButton.TakeScreenshotOffset;

FacebookShareButton.ShareOnFacebookOffset = getRealOffset(0x7162B0);
FacebookShareButton.ShareOnFacebook = (void *(*)(void*, monoString*, monoString*))FacebookShareButton.ShareOnFacebookOffset;

HtmlHelper.BuildHtmlOffset = getRealOffset(0x7FA93C);
SoundOptions.AwakeOffset = getRealOffset(0x578B20);
SoundOptions.Awake = (void(*)(void*))SoundOptions.AwakeOffset;

SoundOptions.InitVolumeOffset = getRealOffset(0x578B9C);
SoundOptions.InitVolume = (void(*)())SoundOptions.InitVolumeOffset;

SoundOptions.StartOffset = getRealOffset(0x578D5C);
SoundOptions.Start = (void(*)(void*))SoundOptions.StartOffset;

SoundOptions.SetVolumeOffset = getRealOffset(0x578DF4);
SoundOptions.SetVolume = (void(*)(void*, float))SoundOptions.SetVolumeOffset;

SoundOptions.SetVolumeStaticOffset = getRealOffset(0x578C30);
SoundOptions.SetVolumeStatic = (void(*)(float))SoundOptions.SetVolumeStaticOffset;

SoundOptions.get_MusicVolumeOffset = getRealOffset(0x578E98);
SoundOptions.get_MusicVolume = (float(*)())SoundOptions.get_MusicVolumeOffset;

SpecialBatch.AwakeOffset = getRealOffset(0x578FA4);
SpecialBatch.Awake = (void(*)(void*))SpecialBatch.AwakeOffset;

SpecialBatchBatcher.CombineOffset = getRealOffset(0x5791C8);
SpecialBatchBatcher.Combine = (void(*)(void*, bool, bool))SpecialBatchBatcher.CombineOffset;

SpecialBatchBatcher.AwakeOffset = getRealOffset(0x57B2D8);
SpecialBatchBatcher.Awake = (void(*)(void*))SpecialBatchBatcher.AwakeOffset;

SpecialBatchBatcher.CombineMeshesDontBatchOffset = getRealOffset(0x57B334);
SpecialBatchBatcher.CombineMeshesDontBatch = (void(*)(void*))SpecialBatchBatcher.CombineMeshesDontBatchOffset;

SpecialBatchBatcher.StartOffset = getRealOffset(0x57BB28);
SpecialBatchBatcher.Start = (void(*)(void*))SpecialBatchBatcher.StartOffset;

SpecialBatchBatcher.OnDestroyOffset = getRealOffset(0x57BC00);
SpecialBatchBatcher.OnDestroy = (void(*)(void*))SpecialBatchBatcher.OnDestroyOffset;

SpecialOfferButton.PurchaseOffset = getRealOffset(0x57BE24);
SpecialOfferButton.Purchase = (void(*)(void*))SpecialOfferButton.PurchaseOffset;

SpecialOfferButton.StartOffset = getRealOffset(0x57C3A4);
SpecialOfferButton.Start = (void(*)(void*))SpecialOfferButton.StartOffset;

SpecialOfferButton.RefreshPriceTextOffset = getRealOffset(0x57C3A8);
SpecialOfferButton.RefreshPriceText = (void(*)(void*))SpecialOfferButton.RefreshPriceTextOffset;

FlyingSpectateMode.OnEnterOffset = getRealOffset(0x726C7C);
FlyingSpectateMode.OnEnter = (void(*)(void*))FlyingSpectateMode.OnEnterOffset;

PlayersSpectateMode.OnEnterOffset = getRealOffset(0x705A38);
PlayersSpectateMode.OnEnter = (void(*)(void*))PlayersSpectateMode.OnEnterOffset;

PlayersSpectateMode.AddPlayerOffset = getRealOffset(0x705B7C);
PlayersSpectateMode.AddPlayer = (void(*)(void*, void *))PlayersSpectateMode.AddPlayerOffset;

PlayersSpectateMode.RemovePlayerOffset = getRealOffset(0x705C48);
PlayersSpectateMode.RemovePlayer = (void(*)(void*, void *))PlayersSpectateMode.RemovePlayerOffset;

PlayersSpectateMode.OnLeftArrowPressedOffset = getRealOffset(0x705DA4);
PlayersSpectateMode.OnLeftArrowPressed = (void(*)(void*))PlayersSpectateMode.OnLeftArrowPressedOffset;

PlayersSpectateMode.swapSpectatedOffset = getRealOffset(0x705DAC);
PlayersSpectateMode.swapSpectated = (void(*)(void*, bool))PlayersSpectateMode.swapSpectatedOffset;

PlayersSpectateMode.OnRightArrowPressedOffset = getRealOffset(0x705D9C);
PlayersSpectateMode.OnRightArrowPressed = (void(*)(void*))PlayersSpectateMode.OnRightArrowPressedOffset;

PlayersSpectateMode.UpdateOffset = getRealOffset(0x7060F8);
PlayersSpectateMode.Update = (void(*)(void*))PlayersSpectateMode.UpdateOffset;

PlayersSpectateMode.getTeamColorOffset = getRealOffset(0x7066FC);
PlayersSpectateMode.getTeamColor = (int (*)(void*))PlayersSpectateMode.getTeamColorOffset;

PlayersSpectateMode.UpdateEveryFrameDataOffset = getRealOffset(0x706820);
PlayersSpectateMode.UpdateEveryFrameData = (void(*)(void*, int))PlayersSpectateMode.UpdateEveryFrameDataOffset;

SpectateInfoDisplayer.get_UserLabelOffset = getRealOffset(0x57DA50);
SpectateInfoDisplayer.get_UserLabel = (void *(*)(void*))SpectateInfoDisplayer.get_UserLabelOffset;

SpectateInfoDisplayer.get_UserRankOffset = getRealOffset(0x57DA58);
SpectateInfoDisplayer.get_UserRank = (void *(*)(void*))SpectateInfoDisplayer.get_UserRankOffset;

SpectateInfoDisplayer.get_KillCountOffset = getRealOffset(0x57DA60);
SpectateInfoDisplayer.get_KillCount = (void *(*)(void*))SpectateInfoDisplayer.get_KillCountOffset;

SpectateInfoDisplayer.get_DeadCountOffset = getRealOffset(0x57DA68);
SpectateInfoDisplayer.get_DeadCount = (void *(*)(void*))SpectateInfoDisplayer.get_DeadCountOffset;

SpectateInfoDisplayer.get_KDcountOffset = getRealOffset(0x57DA70);
SpectateInfoDisplayer.get_KDcount = (void *(*)(void*))SpectateInfoDisplayer.get_KDcountOffset;

SpectateInfoDisplayer.get_RankLabelOffset = getRealOffset(0x57DA78);
SpectateInfoDisplayer.get_RankLabel = (void *(*)(void*))SpectateInfoDisplayer.get_RankLabelOffset;

SpectateInfoDisplayer.get_HealthLabelOffset = getRealOffset(0x57DA80);
SpectateInfoDisplayer.get_HealthLabel = (void *(*)(void*))SpectateInfoDisplayer.get_HealthLabelOffset;

SpectateInfoDisplayer.get_WeaponInfoOffset = getRealOffset(0x57DA88);
SpectateInfoDisplayer.get_WeaponInfo = (void *(*)(void*))SpectateInfoDisplayer.get_WeaponInfoOffset;

SpectateInfoDisplayer.SetupActiveOffset = getRealOffset(0x57DA90);
SpectateInfoDisplayer.SetupActive = (void(*)(void*))SpectateInfoDisplayer.SetupActiveOffset;

SpectateInfoDisplayer.SetupInactiveOffset = getRealOffset(0x57DC18);
SpectateInfoDisplayer.SetupInactive = (void(*)(void*))SpectateInfoDisplayer.SetupInactiveOffset;

SpectateManager.get_PlayersSpectateModeOffset = getRealOffset(0x57DE60);
SpectateManager.get_PlayersSpectateMode = (void *(*)(void*))SpectateManager.get_PlayersSpectateModeOffset;

SpectateManager.AwakeOffset = getRealOffset(0x57DE68);
SpectateManager.Awake = (void(*)(void*))SpectateManager.AwakeOffset;

SpectateManager.EnableSpectateForModsOnlyOffset = getRealOffset(0x57DFAC);
SpectateManager.EnableSpectateForModsOnly = (void(*)(void*))SpectateManager.EnableSpectateForModsOnlyOffset;

SpectateManager.OnSpectateStartOffset = getRealOffset(0x57DFB8);
SpectateManager.OnSpectateStart = (void(*)(void*))SpectateManager.OnSpectateStartOffset;

SpectateManager.OnSpectateEndOffset = getRealOffset(0x57E7AC);
SpectateManager.OnSpectateEnd = (void(*)(void*))SpectateManager.OnSpectateEndOffset;

SpectateManager.EnableSpectateForPlayerOffset = getRealOffset(0x57E9C4);
SpectateManager.EnableSpectateForPlayer = (bool(*)(void*))SpectateManager.EnableSpectateForPlayerOffset;

SpectateManager.DisableHUDOffset = getRealOffset(0x57E59C);
SpectateManager.DisableHUD = (void(*)(void*))SpectateManager.DisableHUDOffset;

SpectateManager.OnPauseEnabledOffset = getRealOffset(0x57E9E0);
SpectateManager.OnPauseEnabled = (void(*)(void*))SpectateManager.OnPauseEnabledOffset;

SpectateManager.OnPauseDisabledOffset = getRealOffset(0x57EA60);
SpectateManager.OnPauseDisabled = (void(*)(void*))SpectateManager.OnPauseDisabledOffset;

SpectateManager.OnSpectateModeToggleOffset = getRealOffset(0x57EAB4);
SpectateManager.OnSpectateModeToggle = (void(*)(void*))SpectateManager.OnSpectateModeToggleOffset;

SpectateManager.DisableSpectateWidgetsOffset = getRealOffset(0x57E93C);
SpectateManager.DisableSpectateWidgets = (void(*)(void*))SpectateManager.DisableSpectateWidgetsOffset;

SpectateManager.OnLeftArrowPressedOffset = getRealOffset(0x57EB0C);
SpectateManager.OnLeftArrowPressed = (void(*)(void*))SpectateManager.OnLeftArrowPressedOffset;

SpectateManager.OnRightArrowPressedOffset = getRealOffset(0x57EB4C);
SpectateManager.OnRightArrowPressed = (void(*)(void*))SpectateManager.OnRightArrowPressedOffset;

SpectateManager.UpdateOffset = getRealOffset(0x57EB8C);
SpectateManager.Update = (void(*)(void*))SpectateManager.UpdateOffset;

SpectateManager.IsSpectatingOffset = getRealOffset(0x57EBC0);
SpectateManager.IsSpectating = (bool(*)(void*))SpectateManager.IsSpectatingOffset;

Spectator.AwakeOffset = getRealOffset(0x57EBF8);
Spectator.Awake = (void(*)(void*))Spectator.AwakeOffset;

Spectator.StartOffset = getRealOffset(0x57ECF4);
Spectator.Start = (void(*)(void*))Spectator.StartOffset;

Spectator.OnDestroyOffset = getRealOffset(0x57EDD4);
Spectator.OnDestroy = (void(*)(void*))Spectator.OnDestroyOffset;

Spectator.UpdateFastOffset = getRealOffset(0x57EF98);
Spectator.UpdateFast = (void(*)(void*))Spectator.UpdateFastOffset;

Spectator.UpdatePlayerOffset = getRealOffset(0x57F0AC);
Spectator.UpdatePlayer = (void(*)(void*))Spectator.UpdatePlayerOffset;

Spectator.UpdateLevelOffset = getRealOffset(0x57F3C8);
Spectator.UpdateLevel = (void(*)(void*))Spectator.UpdateLevelOffset;

Spectator.HandleMouseMovementOffset = getRealOffset(0x57FD68);
Spectator.HandleMouseMovement = (void(*)(void*))Spectator.HandleMouseMovementOffset;

SprintButton.AwakeOffset = getRealOffset(0x580948);
SprintButton.Awake = (void(*)(void*))SprintButton.AwakeOffset;

SprintButton.StartOffset = getRealOffset(0x5809A4);
SprintButton.Start = (void(*)(void*))SprintButton.StartOffset;

SprintButton.OnDestroyOffset = getRealOffset(0x580AF4);
SprintButton.OnDestroy = (void(*)(void*))SprintButton.OnDestroyOffset;

SprintButton.UpdateFastOffset = getRealOffset(0x580CB8);
SprintButton.UpdateFast = (void(*)(void*))SprintButton.UpdateFastOffset;

SprintButton.OnPointerDownOffset = getRealOffset(0x580E8C);
SprintButton.OnPointerDown = (void(*)(void*, void *))SprintButton.OnPointerDownOffset;

SprintButton.StopSprintingOffset = getRealOffset(0x580F78);
SprintButton.StopSprinting = (void(*)(void*))SprintButton.StopSprintingOffset;

SprintButton.OnPointerUpOffset = getRealOffset(0x581014);
SprintButton.OnPointerUp = (void(*)(void*, void *))SprintButton.OnPointerUpOffset;

SprintButton.ChangeToggleStateOffset = getRealOffset(0x581018);
SprintButton.ChangeToggleState = (void(*)(void*, bool))SprintButton.ChangeToggleStateOffset;

SprintButtonToggle.AwakeOffset = getRealOffset(0x5810D8);
SprintButtonToggle.Awake = (void(*)(void*))SprintButtonToggle.AwakeOffset;

SprintButtonToggle.StartOffset = getRealOffset(0x581150);
SprintButtonToggle.Start = (void(*)(void*))SprintButtonToggle.StartOffset;

SprintButtonToggle.SetEnabledOffset = getRealOffset(0x58121C);
SprintButtonToggle.SetEnabled = (void(*)(void*, bool))SprintButtonToggle.SetEnabledOffset;

SprintButtonToggle.ToggleChangedOffset = getRealOffset(0x581328);
SprintButtonToggle.ToggleChanged = (void(*)(void*, bool))SprintButtonToggle.ToggleChangedOffset;

SprintButtonToggle.OnDestroyOffset = getRealOffset(0x58132C);
SprintButtonToggle.OnDestroy = (void(*)(void*))SprintButtonToggle.OnDestroyOffset;

MeshColliderSignatureGetter.GetSignatureOffset = getRealOffset(0x51F3E8);
MeshColliderSignatureGetter.GetSignature = (int(*)(void*, void *))MeshColliderSignatureGetter.GetSignatureOffset;

MeshColliderSignatureGetter.GetStateOffset = getRealOffset(0x51F788);
MeshColliderSignatureGetter.GetState = (monoString *(*)(void*, void *))MeshColliderSignatureGetter.GetStateOffset;

MeshColliderSignatureGetter.GetSignatureTypeOffset = getRealOffset(0x5211E4);
MeshColliderSignatureGetter.GetSignatureType = (void *(*)(void*))MeshColliderSignatureGetter.GetSignatureTypeOffset;

StateEnforcer.InitOffset = getRealOffset(0x58165C);
StateEnforcer.Init = (void(*)(void*))StateEnforcer.InitOffset;

StateEnforcer.EnforceStateOffset = getRealOffset(0x581870);
StateEnforcer.EnforceState = (void *(*)(void*))StateEnforcer.EnforceStateOffset;

StateUtils.GetSignatureOffset = getRealOffset(0x582550);
StateUtils.GetSignature = (int(*)(float))StateUtils.GetSignatureOffset;

StateUtils.GetSignature1Offset = getRealOffset(0x58256C);
StateUtils.GetSignature1 = (int(*)(int))StateUtils.GetSignature1Offset;

StateUtils.GetSignature2Offset = getRealOffset(0x582678);
StateUtils.GetSignature2 = (int(*)(bool))StateUtils.GetSignature2Offset;

StateUtils.GetSignature3Offset = getRealOffset(0x582694);
StateUtils.GetSignature3 = (int(*)(monoString*))StateUtils.GetSignature3Offset;

StateUtils.GetSignature4Offset = getRealOffset(0x582714);
StateUtils.GetSignature4 = (int(*)(void *))StateUtils.GetSignature4Offset;

StateUtils.GetSignature5Offset = getRealOffset(0x582980);
StateUtils.GetSignature5 = (int(*)(void *))StateUtils.GetSignature5Offset;

StatsPage.GetKDOffset = getRealOffset(0x582A30);
StatsPage.GetKD = (float(*)())StatsPage.GetKDOffset;

StatsPage.OnEnableOffset = getRealOffset(0x582C20);
StatsPage.OnEnable = (void(*)(void*))StatsPage.OnEnableOffset;

StatsPage.OnCopyPlayerIDOffset = getRealOffset(0x583D78);
StatsPage.OnCopyPlayerID = (void(*)(void*))StatsPage.OnCopyPlayerIDOffset;

StatsPage.SetTabOffset = getRealOffset(0x583DA0);
StatsPage.SetTab = (void(*)(void*, int))StatsPage.SetTabOffset;

StatsPage.CallGetUserBadgeOffset = getRealOffset(0x583C48);
StatsPage.CallGetUserBadge = (void(*)(void*))StatsPage.CallGetUserBadgeOffset;

StatsPage.OnSuccessGetUserBadgeOffset = getRealOffset(0x583DD0);
StatsPage.OnSuccessGetUserBadge = (void(*)(void*, monoString*))StatsPage.OnSuccessGetUserBadgeOffset;

StatsPage.OnErrorOffset = getRealOffset(0x583EDC);
StatsPage.OnError = (void(*)(void*, monoString*))StatsPage.OnErrorOffset;

StoreAntiHack.GetRoomPrefixOffset = getRealOffset(0x584868);
StoreAntiHack.GetRoomPrefix = (monoString *(*)(void*, void *))StoreAntiHack.GetRoomPrefixOffset;

StoreAntiHack.RegisterPlayerInStoreMatchOffset = getRealOffset(0x5849D0);
StoreAntiHack.RegisterPlayerInStoreMatch = (void *(*)(void*, monoString*, monoString*, int))StoreAntiHack.RegisterPlayerInStoreMatchOffset;

StoreAntiHack.OnPlayerJoinedOffset = getRealOffset(0x585000);
StoreAntiHack.OnPlayerJoined = (void(*)(void*, void *))StoreAntiHack.OnPlayerJoinedOffset;

StoreAntiHack.OnPlayerLeftOffset = getRealOffset(0x585164);
StoreAntiHack.OnPlayerLeft = (void(*)(void*, void *))StoreAntiHack.OnPlayerLeftOffset;

StoreAntiHack.CheckHackersOffset = getRealOffset(0x5852A8);
StoreAntiHack.CheckHackers = (void *(*)(void*))StoreAntiHack.CheckHackersOffset;

StoreAntiHack.LogOffset = getRealOffset(0x584FFC);
StoreAntiHack.Log = (void(*)(void*, monoString*))StoreAntiHack.LogOffset;

StoreAntiHack.GetInstanceOffset = getRealOffset(0x585348);
StoreAntiHack.GetInstance = (void *(*)())StoreAntiHack.GetInstanceOffset;

StoreConfig.get_CurrentStoreOffset = getRealOffset(0x58441C);
StoreConfig.get_CurrentStore = (int (*)())StoreConfig.get_CurrentStoreOffset;

StoreConfig.InitOffset = getRealOffset(0x5876A8);
StoreConfig.Init = (void(*)())StoreConfig.InitOffset;

Suppression.AwakeOffset = getRealOffset(0x58B1C0);
Suppression.Awake = (void(*)(void*))Suppression.AwakeOffset;

Suppression.StartOffset = getRealOffset(0x58B240);
Suppression.Start = (void(*)(void*))Suppression.StartOffset;

Suppression.SuppressOffset = getRealOffset(0x58B2F0);
Suppression.Suppress = (void(*)(void*))Suppression.SuppressOffset;

Suppression.OnDestroyOffset = getRealOffset(0x58B4EC);
Suppression.OnDestroy = (void(*)(void*))Suppression.OnDestroyOffset;

Suppression.UpdateFastOffset = getRealOffset(0x58B6B0);
Suppression.UpdateFast = (void(*)(void*))Suppression.UpdateFastOffset;

SwitchServerDynamicallyManager.AwakeOffset = getRealOffset(0x58BC80);
SwitchServerDynamicallyManager.Awake = (void(*)(void*))SwitchServerDynamicallyManager.AwakeOffset;

SwitchServerDynamicallyManager.ChangeToProdOffset = getRealOffset(0x58BD24);
SwitchServerDynamicallyManager.ChangeToProd = (void(*)(void*))SwitchServerDynamicallyManager.ChangeToProdOffset;

SwitchServerDynamicallyManager.ChangeToDevOffset = getRealOffset(0x58BE00);
SwitchServerDynamicallyManager.ChangeToDev = (void(*)(void*))SwitchServerDynamicallyManager.ChangeToDevOffset;

SwitchServerDynamicallyManager.ChangeServerOffset = getRealOffset(0x58BD30);
SwitchServerDynamicallyManager.ChangeServer = (void(*)(void*, bool, bool))SwitchServerDynamicallyManager.ChangeServerOffset;

SwitchWeapon.AwakeOffset = getRealOffset(0x58BE14);
SwitchWeapon.Awake = (void(*)(void*))SwitchWeapon.AwakeOffset;

SwitchWeapon.PopulateWeaponSpritesOffset = getRealOffset(0x58BF00);
SwitchWeapon.PopulateWeaponSprites = (void(*)(void*))SwitchWeapon.PopulateWeaponSpritesOffset;

SwitchWeapon.GetWeaponSpriteOffset = getRealOffset(0x58C020);
SwitchWeapon.GetWeaponSprite = (void *(*)(void*, int))SwitchWeapon.GetWeaponSpriteOffset;

SwitchWeapon.GetWeaponSprite1Offset = getRealOffset(0x58C024);
SwitchWeapon.GetWeaponSprite1 = (void *(*)(void*, int))SwitchWeapon.GetWeaponSprite1Offset;

SwitchWeapon.IsPointInsideOffset = getRealOffset(0x580694);
SwitchWeapon.IsPointInside = (bool(*)(void*, Vector2))SwitchWeapon.IsPointInsideOffset;

SwitchWeapon.refreshSpriteOffset = getRealOffset(0x58C0CC);
SwitchWeapon.refreshSprite = (void(*)(void*))SwitchWeapon.refreshSpriteOffset;

SwitchWeapon.SetCorrectSizesOffset = getRealOffset(0x58C20C);
SwitchWeapon.SetCorrectSizes = (void(*)(void*))SwitchWeapon.SetCorrectSizesOffset;

SwitchWeapon.UIScaleChangedOffset = getRealOffset(0x58C430);
SwitchWeapon.UIScaleChanged = (void(*)(void*, float))SwitchWeapon.UIScaleChangedOffset;

SwitchWeapon.OnPointerUpOffset = getRealOffset(0x58C434);
SwitchWeapon.OnPointerUp = (void(*)(void*, void *))SwitchWeapon.OnPointerUpOffset;

SwitchWeapon.OnBeginDragOffset = getRealOffset(0x58C514);
SwitchWeapon.OnBeginDrag = (void(*)(void*, void *))SwitchWeapon.OnBeginDragOffset;

SwitchWeapon.OnDestroyOffset = getRealOffset(0x58C658);
SwitchWeapon.OnDestroy = (void(*)(void*))SwitchWeapon.OnDestroyOffset;

SwitchWeaponSprites.GetWeaponSpriteInfoOffset = getRealOffset(0x58C790);
SwitchWeaponSprites.GetWeaponSpriteInfo = (void *(*)(void*, int))SwitchWeaponSprites.GetWeaponSpriteInfoOffset;

SwitchWeaponSprites.GetWeaponSpriteInfo1Offset = getRealOffset(0x58C794);
SwitchWeaponSprites.GetWeaponSpriteInfo1 = (void *(*)(void*, int))SwitchWeaponSprites.GetWeaponSpriteInfo1Offset;

SwitchWeaponSprites.AwakeOffset = getRealOffset(0x58C8D8);
SwitchWeaponSprites.Awake = (void(*)(void*))SwitchWeaponSprites.AwakeOffset;

TabList.AwakeOffset = getRealOffset(0x5C2AFC);
TabList.Awake = (void(*)(void*))TabList.AwakeOffset;

TabList.StartOffset = getRealOffset(0x5C3110);
TabList.Start = (void(*)(void*))TabList.StartOffset;

TabList.SetFreeForAllOffset = getRealOffset(0x5C31C0);
TabList.SetFreeForAll = (void(*)(void*))TabList.SetFreeForAllOffset;

TabList.addItemOffset = getRealOffset(0x5C3508);
TabList.addItem = (void *(*)(void*, monoString*, int, int, int, void *))TabList.addItemOffset;

TabList.removeItemOffset = getRealOffset(0x5C3E14);
TabList.removeItem = (void(*)(void*, void *))TabList.removeItemOffset;

TabList.ResortDataForSideOffset = getRealOffset(0x5C3EE8);
TabList.ResortDataForSide = (void(*)(void*, bool))TabList.ResortDataForSideOffset;

TabList.ResortFFADataOffset = getRealOffset(0x5C43EC);
TabList.ResortFFAData = (void(*)(void*))TabList.ResortFFADataOffset;

TabList.ResortDataOnSideWithTransformOffset = getRealOffset(0x5C3EF8);
TabList.ResortDataOnSideWithTransform = (void(*)(void*, void *))TabList.ResortDataOnSideWithTransformOffset;

TabList.resortDataOffset = getRealOffset(0x5C4444);
TabList.resortData = (void(*)(void*))TabList.resortDataOffset;

TabList.GetTopPlayerOffset = getRealOffset(0x5C451C);
TabList.GetTopPlayer = (void *(*)(void*))TabList.GetTopPlayerOffset;

TabList.showOffset = getRealOffset(0x5C2C14);
TabList.show = (void(*)(void*, bool))TabList.showOffset;

TabList.OnDestroyOffset = getRealOffset(0x5C4650);
TabList.OnDestroy = (void(*)(void*))TabList.OnDestroyOffset;

TabList.ToggleShownOffset = getRealOffset(0x5C4814);
TabList.ToggleShown = (void(*)(void*))TabList.ToggleShownOffset;

TabList.UpdateFastOffset = getRealOffset(0x5C4828);
TabList.UpdateFast = (void(*)(void*))TabList.UpdateFastOffset;

TabListButton.AwakeOffset = getRealOffset(0x5C49D0);
TabListButton.Awake = (void(*)(void*))TabListButton.AwakeOffset;

TabListButton.OnDestroyOffset = getRealOffset(0x5C4A2C);
TabListButton.OnDestroy = (void(*)(void*))TabListButton.OnDestroyOffset;

TabListButton.OnPointerDownOffset = getRealOffset(0x5C4AD8);
TabListButton.OnPointerDown = (void(*)(void*, void *))TabListButton.OnPointerDownOffset;

TabListButton.OnPointerUpOffset = getRealOffset(0x5C4B68);
TabListButton.OnPointerUp = (void(*)(void*, void *))TabListButton.OnPointerUpOffset;

TabListItem.AwakeOffset = getRealOffset(0x5C4C0C);
TabListItem.Awake = (void(*)(void*))TabListItem.AwakeOffset;

TabListItem.UpdateRankOffset = getRealOffset(0x5C4D74);
TabListItem.UpdateRank = (void(*)(void*, int))TabListItem.UpdateRankOffset;

TabListItem.get_isLocalPlayerOffset = getRealOffset(0x5C5158);
TabListItem.get_isLocalPlayer = (bool(*)(void*))TabListItem.get_isLocalPlayerOffset;

TabListItem.set_isLocalPlayerOffset = getRealOffset(0x5C5160);
TabListItem.set_isLocalPlayer = (void(*)(void*, bool))TabListItem.set_isLocalPlayerOffset;

TabListItem.UpdateLivingStatusOffset = getRealOffset(0x5C531C);
TabListItem.UpdateLivingStatus = (void(*)(void*, bool))TabListItem.UpdateLivingStatusOffset;

TabListItem.SetRankOnScoreboardOffset = getRealOffset(0x5C43F4);
TabListItem.SetRankOnScoreboard = (void(*)(void*, int))TabListItem.SetRankOnScoreboardOffset;

TabListItem.UpdateIsOnTeamOffset = getRealOffset(0x5C569C);
TabListItem.UpdateIsOnTeam = (void(*)(void*, bool))TabListItem.UpdateIsOnTeamOffset;

TabListItem.StartOffset = getRealOffset(0x5C59B4);
TabListItem.Start = (void(*)(void*))TabListItem.StartOffset;

TabListItem.UpdateOffset = getRealOffset(0x5C5A74);
TabListItem.Update = (void(*)(void*))TabListItem.UpdateOffset;

TabListItem.UpdatePingOffset = getRealOffset(0x5C5C18);
TabListItem.UpdatePing = (void(*)(void*, int))TabListItem.UpdatePingOffset;

TabListItem.updateUsernameOffset = getRealOffset(0x5C38F8);
TabListItem.updateUsername = (void(*)(void*, monoString*))TabListItem.updateUsernameOffset;

TabListItem.updateNumberOfKillsOffset = getRealOffset(0x5C3930);
TabListItem.updateNumberOfKills = (void(*)(void*, int))TabListItem.updateNumberOfKillsOffset;

TabListItem.updateNumberOfDeathsOffset = getRealOffset(0x5C3984);
TabListItem.updateNumberOfDeaths = (void(*)(void*, int))TabListItem.updateNumberOfDeathsOffset;

TabListItem.updateNumberOfRoundsOffset = getRealOffset(0x5C39D8);
TabListItem.updateNumberOfRounds = (void(*)(void*, int))TabListItem.updateNumberOfRoundsOffset;

TabListItem.AddSelectionListenerOffset = getRealOffset(0x5C4C64);
TabListItem.AddSelectionListener = (void(*)(void*, void *))TabListItem.AddSelectionListenerOffset;

TabListItem.OnItemSelectedOffset = getRealOffset(0x5C5C68);
TabListItem.OnItemSelected = (void(*)(void*, void *))TabListItem.OnItemSelectedOffset;

TabListItem.SearchIfFriendOffset = getRealOffset(0x5C3B24);
TabListItem.SearchIfFriend = (void(*)(void*, monoString*))TabListItem.SearchIfFriendOffset;

TabListItem.onCompleteSearchPeopleOffset = getRealOffset(0x5C6048);
TabListItem.onCompleteSearchPeople = (void(*)(void*))TabListItem.onCompleteSearchPeopleOffset;

TabListItem.onErrorOffset = getRealOffset(0x5C6184);
TabListItem.onError = (void(*)(void*, monoString*))TabListItem.onErrorOffset;

TapResearchController.OnTapResearchInitializedOffset = getRealOffset(0x5C7AE8);
TapResearchController.OnTapResearchInitialized = (void(*)())TapResearchController.OnTapResearchInitializedOffset;

TapResearchController.IsTapResearchInitializedOffset = getRealOffset(0x5C7BDC);
TapResearchController.IsTapResearchInitialized = (bool(*)())TapResearchController.IsTapResearchInitializedOffset;

TapResearchController.get_tapResearchPlacementIdentifierOffset = getRealOffset(0x5C7C78);
TapResearchController.get_tapResearchPlacementIdentifier = (monoString *(*)(void*))TapResearchController.get_tapResearchPlacementIdentifierOffset;

TapResearchController.StartOffset = getRealOffset(0x5C7C80);
TapResearchController.Start = (void(*)(void*))TapResearchController.StartOffset;

TapResearchController.InitializeSurveyOffset = getRealOffset(0x5C7C84);
TapResearchController.InitializeSurvey = (void(*)(void*))TapResearchController.InitializeSurveyOffset;

TapResearchController.OnTapResearchPlacementReadyOffset = getRealOffset(0x5C82E0);
TapResearchController.OnTapResearchPlacementReady = (void(*)(void*, void *))TapResearchController.OnTapResearchPlacementReadyOffset;

TapResearchController.OnTapResearchReceiveRewardOffset = getRealOffset(0x5C8468);
TapResearchController.OnTapResearchReceiveReward = (void(*)(void*, void *))TapResearchController.OnTapResearchReceiveRewardOffset;

TapResearchController.OnTapResearchSurveyWallOpenedOffset = getRealOffset(0x5C84EC);
TapResearchController.OnTapResearchSurveyWallOpened = (void(*)(void*, void *))TapResearchController.OnTapResearchSurveyWallOpenedOffset;

TapResearchController.OnTapResearchSurveyWallDismissedOffset = getRealOffset(0x5C8570);
TapResearchController.OnTapResearchSurveyWallDismissed = (void(*)(void*, void *))TapResearchController.OnTapResearchSurveyWallDismissedOffset;

TapResearchController.SurveyCompleteOffset = getRealOffset(0x5C8600);
TapResearchController.SurveyComplete = (void(*)(void*))TapResearchController.SurveyCompleteOffset;

TapResearchController.TapResearchButtonPressedOffset = getRealOffset(0x5C8774);
TapResearchController.TapResearchButtonPressed = (void(*)(void*))TapResearchController.TapResearchButtonPressedOffset;

TeamSpawnArea.AwakeOffset = getRealOffset(0x5C9CA8);
TeamSpawnArea.Awake = (void(*)(void*))TeamSpawnArea.AwakeOffset;

TeamSpawnArea.IsInsideOffset = getRealOffset(0x5C9DF8);
TeamSpawnArea.IsInside = (bool(*)(void*, void *, Vector3))TeamSpawnArea.IsInsideOffset;

TeamSpawnArea.IsInsideSpawnOffset = getRealOffset(0x5C9FE4);
TeamSpawnArea.IsInsideSpawn = (bool(*)(void*, Vector3))TeamSpawnArea.IsInsideSpawnOffset;

TeamSpawnArea.UpdateOffset = getRealOffset(0x5CA07C);
TeamSpawnArea.Update = (void(*)(void*))TeamSpawnArea.UpdateOffset;

TextScaleDown.AwakeOffset = getRealOffset(0x5CB640);
TextScaleDown.Awake = (void(*)(void*))TextScaleDown.AwakeOffset;

TextScaleDown.PlayOffset = getRealOffset(0x5CB6E0);
TextScaleDown.Play = (void(*)(void*))TextScaleDown.PlayOffset;

TextScaleDown.UpdateOffset = getRealOffset(0x5CB754);
TextScaleDown.Update = (void(*)(void*))TextScaleDown.UpdateOffset;

ThirtyFPSMode.AwakeOffset = getRealOffset(0x5CC724);
ThirtyFPSMode.Awake = (void(*)(void*))ThirtyFPSMode.AwakeOffset;

ThirtyFPSMode.StartOffset = getRealOffset(0x5CC7A0);
ThirtyFPSMode.Start = (void(*)(void*))ThirtyFPSMode.StartOffset;

ThirtyFPSMode.IsEnabledOffset = getRealOffset(0x5CCABC);
ThirtyFPSMode.IsEnabled = (bool(*)())ThirtyFPSMode.IsEnabledOffset;

ThirtyFPSMode.SetEnabledOffset = getRealOffset(0x5CCB24);
ThirtyFPSMode.SetEnabled = (void(*)(bool))ThirtyFPSMode.SetEnabledOffset;

ThirtyFPSMode.SetDropdownOffset = getRealOffset(0x5CCC3C);
ThirtyFPSMode.SetDropdown = (void(*)(void*, int))ThirtyFPSMode.SetDropdownOffset;

ThrownWeapon.AwakeOffset = getRealOffset(0x5CDFA4);
ThrownWeapon.Awake = (void(*)(void*))ThrownWeapon.AwakeOffset;

ThrownWeapon.StartOffset = getRealOffset(0x5CE0F0);
ThrownWeapon.Start = (void(*)(void*))ThrownWeapon.StartOffset;

ThrownWeapon.ThrowOffset = getRealOffset(0x5CE1A0);
ThrownWeapon.Throw = (void(*)(void*, Vector3, Vector3, int))ThrownWeapon.ThrowOffset;

ThrownWeapon.OnCollisionEnterOffset = getRealOffset(0x5CE3F0);
ThrownWeapon.OnCollisionEnter = (void(*)(void*, void *))ThrownWeapon.OnCollisionEnterOffset;

ThrownWeapon.FixedUpdateOffset = getRealOffset(0x5CEC04);
ThrownWeapon.FixedUpdate = (void(*)(void*))ThrownWeapon.FixedUpdateOffset;

ThrownWeapon.OnDestroyOffset = getRealOffset(0x5CFF08);
ThrownWeapon.OnDestroy = (void(*)(void*))ThrownWeapon.OnDestroyOffset;

ThrownWeapon.UpdateFastOffset = getRealOffset(0x5D006C);
ThrownWeapon.UpdateFast = (void(*)(void*))ThrownWeapon.UpdateFastOffset;

ThrownWeapon.DisableSelfOffset = getRealOffset(0x5CFD88);
ThrownWeapon.DisableSelf = (void(*)(void*))ThrownWeapon.DisableSelfOffset;

ToggleActivity.OnPointerUpOffset = getRealOffset(0x5D0514);
ToggleActivity.OnPointerUp = (void(*)(void*, void *))ToggleActivity.OnPointerUpOffset;

TopCamera.AwakeOffset = getRealOffset(0x5D6E94);
TopCamera.Awake = (void(*)(void*))TopCamera.AwakeOffset;

TopCamera.StartOffset = getRealOffset(0x5D70E0);
TopCamera.Start = (void(*)(void*))TopCamera.StartOffset;

TopCamera.ShowOffset = getRealOffset(0x5D701C);
TopCamera.Show = (void(*)(void*, bool))TopCamera.ShowOffset;

TopCamera.ShowFlagsOffset = getRealOffset(0x5D768C);
TopCamera.ShowFlags = (void(*)(void*, bool))TopCamera.ShowFlagsOffset;

TopCamera.UpdateOffset = getRealOffset(0x5D7E54);
TopCamera.Update = (void(*)(void*))TopCamera.UpdateOffset;

TopCamera.OnDestroyOffset = getRealOffset(0x5D8E88);
TopCamera.OnDestroy = (void(*)(void*))TopCamera.OnDestroyOffset;

TouchDeltaManager.AwakeOffset = getRealOffset(0x5D8FC0);
TouchDeltaManager.Awake = (void(*)(void*))TouchDeltaManager.AwakeOffset;

TouchDeltaManager.GetTouchWithIDOffset = getRealOffset(0x5D9190);
TouchDeltaManager.GetTouchWithID = (int (*)(void*, int))TouchDeltaManager.GetTouchWithIDOffset;

TouchDeltaManager.FillTouchesListOffset = getRealOffset(0x5D9024);
TouchDeltaManager.FillTouchesList = (void(*)(void*))TouchDeltaManager.FillTouchesListOffset;

TouchDeltaManager.UpdateOffset = getRealOffset(0x5D9290);
TouchDeltaManager.Update = (void(*)(void*))TouchDeltaManager.UpdateOffset;

TouchDeltaManager.OnDestroyOffset = getRealOffset(0x5D9700);
TouchDeltaManager.OnDestroy = (void(*)(void*))TouchDeltaManager.OnDestroyOffset;

TrackObject.StartOffset = getRealOffset(0x5D9830);
TrackObject.Start = (void(*)(void*))TrackObject.StartOffset;

TrackObject.UpdateOffset = getRealOffset(0x5D9834);
TrackObject.Update = (void(*)(void*))TrackObject.UpdateOffset;

TrailRendererHelper.AwakeOffset = getRealOffset(0x5D9840);
TrailRendererHelper.Awake = (void(*)(void*))TrailRendererHelper.AwakeOffset;

TrailRendererHelper.get_TrailEnabledOffset = getRealOffset(0x5D996C);
TrailRendererHelper.get_TrailEnabled = (bool(*)(void*))TrailRendererHelper.get_TrailEnabledOffset;

TrailRendererHelper.set_TrailEnabledOffset = getRealOffset(0x5D9974);
TrailRendererHelper.set_TrailEnabled = (void(*)(void*, bool))TrailRendererHelper.set_TrailEnabledOffset;

TrailRendererHelper.OnEnableOffset = getRealOffset(0x5D9AA4);
TrailRendererHelper.OnEnable = (void(*)(void*))TrailRendererHelper.OnEnableOffset;

TrailRendererHelper.ResetTrailsOffset = getRealOffset(0x5D9A24);
TrailRendererHelper.ResetTrails = (void *(*)(void*))TrailRendererHelper.ResetTrailsOffset;

TranslateDropdownOptions.AwakeOffset = getRealOffset(0x5DA21C);
TranslateDropdownOptions.Awake = (void(*)(void*))TranslateDropdownOptions.AwakeOffset;

OutOfBoundController.AwakeOffset = getRealOffset(0x553F00);
OutOfBoundController.Awake = (void(*)(void*))OutOfBoundController.AwakeOffset;

OutOfBoundController.IsInsideOffset = getRealOffset(0x553FC8);
OutOfBoundController.IsInside = (bool(*)(void*, void *, Vector3))OutOfBoundController.IsInsideOffset;

OutOfBoundController.IsInsideSpawnOffset = getRealOffset(0x5541B4);
OutOfBoundController.IsInsideSpawn = (bool(*)(void*, Vector3))OutOfBoundController.IsInsideSpawnOffset;

OutOfBoundController.UpdateOffset = getRealOffset(0x55424C);
OutOfBoundController.Update = (void(*)(void*))OutOfBoundController.UpdateOffset;

PlaceToReach.AwakeOffset = getRealOffset(0x4BB780);
PlaceToReach.Awake = (void(*)(void*))PlaceToReach.AwakeOffset;

PlaceToReach.UpdateOffset = getRealOffset(0x4BB84C);
PlaceToReach.Update = (void(*)(void*))PlaceToReach.UpdateOffset;

TutorialButton.get_expandRetractOffset = getRealOffset(0x5DB4A0);
TutorialButton.get_expandRetract = (bool(*)(void*))TutorialButton.get_expandRetractOffset;

TutorialButton.set_expandRetractOffset = getRealOffset(0x5DB4A8);
TutorialButton.set_expandRetract = (void(*)(void*, bool))TutorialButton.set_expandRetractOffset;

TutorialButton.AwakeOffset = getRealOffset(0x5DB514);
TutorialButton.Awake = (void(*)(void*))TutorialButton.AwakeOffset;

TutorialButton.StartOffset = getRealOffset(0x5DB5F0);
TutorialButton.Start = (void(*)(void*))TutorialButton.StartOffset;

TutorialButton.UpdateOffset = getRealOffset(0x5DB634);
TutorialButton.Update = (void(*)(void*))TutorialButton.UpdateOffset;

TutorialController.get_botsDownOffset = getRealOffset(0x5DB77C);
TutorialController.get_botsDown = (int(*)(void*))TutorialController.get_botsDownOffset;

TutorialController.set_botsDownOffset = getRealOffset(0x5DB784);
TutorialController.set_botsDown = (void(*)(void*, int))TutorialController.set_botsDownOffset;

TutorialController.get_CounterForSpecificTasksOffset = getRealOffset(0x5DB78C);
TutorialController.get_CounterForSpecificTasks = (int(*)(void*))TutorialController.get_CounterForSpecificTasksOffset;

TutorialController.set_CounterForSpecificTasksOffset = getRealOffset(0x5DB794);
TutorialController.set_CounterForSpecificTasks = (void(*)(void*, int))TutorialController.set_CounterForSpecificTasksOffset;

TutorialController.AwakeOffset = getRealOffset(0x5DB79C);
TutorialController.Awake = (void(*)(void*))TutorialController.AwakeOffset;

TutorialController.StartOffset = getRealOffset(0x5DB958);
TutorialController.Start = (void(*)(void*))TutorialController.StartOffset;

TutorialController.DoTutorialOffset = getRealOffset(0x5DBBA4);
TutorialController.DoTutorial = (void *(*)(void*))TutorialController.DoTutorialOffset;

TutorialController.OnExecutePhaseTwoOffset = getRealOffset(0x5DBC44);
TutorialController.OnExecutePhaseTwo = (void(*)(void*))TutorialController.OnExecutePhaseTwoOffset;

TutorialController.OnBotDownOffset = getRealOffset(0x5DC5C4);
TutorialController.OnBotDown = (void(*)(void*))TutorialController.OnBotDownOffset;

TutorialController.GoToMainMenuOffset = getRealOffset(0x5DCA60);
TutorialController.GoToMainMenu = (void(*)(void*))TutorialController.GoToMainMenuOffset;

TutorialController.InstantiateBotOffset = getRealOffset(0x5DCB58);
TutorialController.InstantiateBot = (void(*)(void*))TutorialController.InstantiateBotOffset;

TutorialController.UpdateAmmoOffset = getRealOffset(0x5DCCAC);
TutorialController.UpdateAmmo = (void(*)(void*))TutorialController.UpdateAmmoOffset;

TutorialController.TaskDoneOffset = getRealOffset(0x5DCD58);
TutorialController.TaskDone = (void(*)(int))TutorialController.TaskDoneOffset;

TutorialController.OnSkipTutorialButtonPressedOffset = getRealOffset(0x5DCEE4);
TutorialController.OnSkipTutorialButtonPressed = (void(*)(void*))TutorialController.OnSkipTutorialButtonPressedOffset;

TutorialController.DisableMoveToObjOffset = getRealOffset(0x5DBF10);
TutorialController.DisableMoveToObj = (void(*)(void*))TutorialController.DisableMoveToObjOffset;

TutorialUIController.AwakeOffset = getRealOffset(0x5DE5CC);
TutorialUIController.Awake = (void(*)(void*))TutorialUIController.AwakeOffset;

TutorialUIController.StartOffset = getRealOffset(0x5DE680);
TutorialUIController.Start = (void(*)(void*))TutorialUIController.StartOffset;

TutorialUIController.SetOverlayTextOffset = getRealOffset(0x5DE3B4);
TutorialUIController.SetOverlayText = (void(*)(void*, monoString*, bool))TutorialUIController.SetOverlayTextOffset;

TutorialUIController.HideDescAfterTimeOffset = getRealOffset(0x5DE9B0);
TutorialUIController.HideDescAfterTime = (void *(*)(void*, float))TutorialUIController.HideDescAfterTimeOffset;

TutorialUIController.ShowAfterRespawnPopupOffset = getRealOffset(0x5DEA74);
TutorialUIController.ShowAfterRespawnPopup = (void(*)(void*))TutorialUIController.ShowAfterRespawnPopupOffset;

TutorialUIController.OnPhaseOneEndedOffset = getRealOffset(0x5DBF3C);
TutorialUIController.OnPhaseOneEnded = (void(*)(void*))TutorialUIController.OnPhaseOneEndedOffset;

TutorialUIController.SetUIForTutorialTaskOffset = getRealOffset(0x5DDCC8);
TutorialUIController.SetUIForTutorialTask = (void(*)(void*, int, monoString*, monoString*, monoString*, monoString*, void *))TutorialUIController.SetUIForTutorialTaskOffset;

TutorialUIController.ShowAnimatedImageOffset = getRealOffset(0x5DEF34);
TutorialUIController.ShowAnimatedImage = (void(*)(void*))TutorialUIController.ShowAnimatedImageOffset;

TutorialUIController.RestoreHighlightedButtonOffset = getRealOffset(0x5DEE14);
TutorialUIController.RestoreHighlightedButton = (void(*)(void*))TutorialUIController.RestoreHighlightedButtonOffset;

AdButtonsInitializer.StartOffset = getRealOffset(0x6B0904);
AdButtonsInitializer.Start = (void(*)(void*))AdButtonsInitializer.StartOffset;

AdButtonsInitializer.WatchAdButtonPressedOffset = getRealOffset(0x6B0F60);
AdButtonsInitializer.WatchAdButtonPressed = (void(*)(void*))AdButtonsInitializer.WatchAdButtonPressedOffset;

AdButtonsInitializer.OpenOfferWallButtonPressedOffset = getRealOffset(0x6B1014);
AdButtonsInitializer.OpenOfferWallButtonPressed = (void(*)(void*))AdButtonsInitializer.OpenOfferWallButtonPressedOffset;

AdButtonsInitializer.InitOffset = getRealOffset(0x6B0BF0);
AdButtonsInitializer.Init = (void(*)(void*))AdButtonsInitializer.InitOffset;

AdButtonsInitializer.WatchedAdOffset = getRealOffset(0x6B1438);
AdButtonsInitializer.WatchedAd = (void(*)())AdButtonsInitializer.WatchedAdOffset;

AdButtonsInitializer.CheckTimeSinceLastAdOffset = getRealOffset(0x6B12B8);
AdButtonsInitializer.GetWatchAdButtonTextOffset = getRealOffset(0x6B10AC);
AdButtonsInitializer.GetWatchAdButtonText = (monoString *(*)(void*))AdButtonsInitializer.GetWatchAdButtonTextOffset;

AdButtonsInitializer.GetPopupToShowOffset = getRealOffset(0x6B153C);
AdButtonsInitializer.GetPopupToShow = (int(*)())AdButtonsInitializer.GetPopupToShowOffset;

AdButtonsInitializer.get_MatchesWithoutPopupsOffset = getRealOffset(0x6B16D4);
AdButtonsInitializer.get_MatchesWithoutPopups = (int(*)())AdButtonsInitializer.get_MatchesWithoutPopupsOffset;

AdButtonsInitializer.set_MatchesWithoutPopupsOffset = getRealOffset(0x6B175C);
AdButtonsInitializer.set_MatchesWithoutPopups = (void(*)(int))AdButtonsInitializer.set_MatchesWithoutPopupsOffset;

AdButtonsInitializer.UpdateOffset = getRealOffset(0x6B17E8);
AdButtonsInitializer.Update = (void(*)(void*))AdButtonsInitializer.UpdateOffset;

BadgesManager.add_RewardsUpdatedOffset = getRealOffset(0x6BE4C4);
BadgesManager.add_RewardsUpdated = (void(*)(void*, void *))BadgesManager.add_RewardsUpdatedOffset;

BadgesManager.remove_RewardsUpdatedOffset = getRealOffset(0x6BE744);
BadgesManager.remove_RewardsUpdated = (void(*)(void*, void *))BadgesManager.remove_RewardsUpdatedOffset;

BadgesManager.StartOffset = getRealOffset(0x6BF650);
BadgesManager.Start = (void(*)(void*))BadgesManager.StartOffset;

BadgesManager.InitBadgesRequiredKillsOffset = getRealOffset(0x6BF718);
BadgesManager.InitBadgesRequiredKills = (void(*)(void*))BadgesManager.InitBadgesRequiredKillsOffset;

BadgesManager.ParseBadgeKillsStringOffset = getRealOffset(0x6BF8AC);
BadgesManager.ParseBadgeKillsString = (void(*)(void*, monoString*))BadgesManager.ParseBadgeKillsStringOffset;

BadgesManager.InitStatsAndCurrentBadgeOffset = getRealOffset(0x6BFB50);
BadgesManager.InitStatsAndCurrentBadge = (void(*)(void*))BadgesManager.InitStatsAndCurrentBadgeOffset;

BadgesManager.WeaponStatsModelDataCompleteOffset = getRealOffset(0x6BFFA0);
BadgesManager.WeaponStatsModelDataComplete = (void(*)(void*))BadgesManager.WeaponStatsModelDataCompleteOffset;

BadgesManager.WeaponStatsModelDataErrorOffset = getRealOffset(0x6C02A4);
BadgesManager.WeaponStatsModelDataError = (void(*)(void*, monoString*))BadgesManager.WeaponStatsModelDataErrorOffset;

BadgesManager.ConsumeRewardOffset = getRealOffset(0x6C0370);
BadgesManager.ConsumeReward = (void(*)(void*, void *))BadgesManager.ConsumeRewardOffset;

BadgesManager.GetBadgeNameAndSpriteOffset = getRealOffset(0x6C04A0);
BadgesManager.GetBadgeNameAndSprite = (void *(*)(void*, int, int))BadgesManager.GetBadgeNameAndSpriteOffset;

BadgesManager.GetBadgeByKillsOffset = getRealOffset(0x6C058C);
BadgesManager.GetBadgeByKills = (int(*)(void*, int))BadgesManager.GetBadgeByKillsOffset;

BadgesManager.GetKillsByBadgeOffset = getRealOffset(0x6C05E4);
BadgesManager.GetKillsByBadge = (int(*)(void*, int))BadgesManager.GetKillsByBadgeOffset;

BadgesManager.SetCurrentWeaponGroupToDisplayOffset = getRealOffset(0x6C0660);
BadgesManager.SetCurrentWeaponGroupToDisplay = (void(*)(void*, int))BadgesManager.SetCurrentWeaponGroupToDisplayOffset;

BadgesManager.SetWeaponGroupServerOffset = getRealOffset(0x6C06EC);
BadgesManager.SetWeaponGroupServer = (void(*)(void*, monoString*))BadgesManager.SetWeaponGroupServerOffset;

BadgesManager.UpdateOffset = getRealOffset(0x6C0A00);
BadgesManager.Update = (void(*)(void*))BadgesManager.UpdateOffset;

BadgesManager.GetCurrentWeaponGroupToDisplay1Offset = getRealOffset(0x6C0800);
BadgesManager.GetCurrentWeaponGroupToDisplay1 = (void(*)(void*))BadgesManager.GetCurrentWeaponGroupToDisplay1Offset;

BadgesManager.OnCurrentWeaponGroupToDisplaySuccessOffset = getRealOffset(0x6C0AA4);
BadgesManager.OnCurrentWeaponGroupToDisplaySuccess = (void(*)(void*, monoString*))BadgesManager.OnCurrentWeaponGroupToDisplaySuccessOffset;

CustomizeBarController.ShowCustomizationOffset = getRealOffset(0x5A3714);
CustomizeBarController.ShowCustomization = (void(*)(void*))CustomizeBarController.ShowCustomizationOffset;

CustomizeBarController.HideCustomizationOffset = getRealOffset(0x5A3740);
CustomizeBarController.HideCustomization = (void(*)(void*))CustomizeBarController.HideCustomizationOffset;

CustomizeNavigationTabsController.SwitchToTabOffset = getRealOffset(0x5A6A38);
CustomizeNavigationTabsController.SwitchToTab = (void(*)(void*, int))CustomizeNavigationTabsController.SwitchToTabOffset;

CustomizeToggleButton.DisplaySelectedOffset = getRealOffset(0x5A6C98);
CustomizeToggleButton.DisplaySelected = (void(*)(void*))CustomizeToggleButton.DisplaySelectedOffset;

CustomizeToggleButton.DisplayDeselectedOffset = getRealOffset(0x5A6CF0);
CustomizeToggleButton.DisplayDeselected = (void(*)(void*))CustomizeToggleButton.DisplayDeselectedOffset;

CustomizeToggleController.ProcessClickOffset = getRealOffset(0x5A6DEC);
CustomizeToggleController.ProcessClick = (void(*)(void*, int))CustomizeToggleController.ProcessClickOffset;

LoadoutsDropdownController.OnDropdownSelectedOffset = getRealOffset(0x6F43A8);
LoadoutsDropdownController.OnDropdownSelected = (void(*)(void*))LoadoutsDropdownController.OnDropdownSelectedOffset;

LoadoutsDropdownController.OnDropdownClickedOffset = getRealOffset(0x6F4520);
LoadoutsDropdownController.OnDropdownClicked = (void(*)(void*))LoadoutsDropdownController.OnDropdownClickedOffset;

LoadoutsDropdownController.SetDropdownLocksOffset = getRealOffset(0x6F445C);
LoadoutsDropdownController.SetDropdownLocks = (void(*)(void*, int))LoadoutsDropdownController.SetDropdownLocksOffset;

LoadoutsDropdownController.CountAvailableLoadoutsOffset = getRealOffset(0x6F43C8);
LoadoutsDropdownController.CountAvailableLoadouts = (int(*)(void*))LoadoutsDropdownController.CountAvailableLoadoutsOffset;

LoadoutsDropdownController.GetTogglesOffset = getRealOffset(0x6F454C);
LoadoutsDropdownController.ForceToValueOffset = getRealOffset(0x6EA18C);
LoadoutsDropdownController.ForceToValue = (void(*)(void*, int))LoadoutsDropdownController.ForceToValueOffset;

NavigationDividersController.SetActiveIndexOffset = getRealOffset(0x52BCCC);
NavigationDividersController.SetActiveIndex = (void(*)(void*, int))NavigationDividersController.SetActiveIndexOffset;

NavigationDividersController.ShowAllOffset = getRealOffset(0x52BDC4);
NavigationDividersController.ShowAll = (void(*)(void*))NavigationDividersController.ShowAllOffset;

WeaponCategoryButton.UpdateWeaponInfoOffset = getRealOffset(0x8B2F74);
WeaponCategoryButton.UpdateWeaponInfo = (void(*)(void*))WeaponCategoryButton.UpdateWeaponInfoOffset;

WeaponCategoryButton.GetWeaponCategoryOffset = getRealOffset(0x8B3290);
WeaponCategoryButton.GetWeaponCategory = (int (*)(void*))WeaponCategoryButton.GetWeaponCategoryOffset;

WeaponCategoryButton.VisuallySetActiveOffset = getRealOffset(0x8B32B0);
WeaponCategoryButton.VisuallySetActive = (void(*)(void*))WeaponCategoryButton.VisuallySetActiveOffset;

WeaponCategoryButton.VisuallySetInactiveOffset = getRealOffset(0x8B3310);
WeaponCategoryButton.VisuallySetInactive = (void(*)(void*))WeaponCategoryButton.VisuallySetInactiveOffset;

DisplayOfferwallProgress.DisplayOfferwallPopupOffset = getRealOffset(0x67A764);
DisplayOfferwallProgress.DisplayOfferwallPopup = (void(*)(void*))DisplayOfferwallProgress.DisplayOfferwallPopupOffset;

AddFriendTabList.ActivateOffset = getRealOffset(0x6B1CEC);
AddFriendTabList.Activate = (void(*)(void*))AddFriendTabList.ActivateOffset;

AddFriendTabList.DeactivateOffset = getRealOffset(0x6B1DAC);
AddFriendTabList.Deactivate = (void(*)(void*))AddFriendTabList.DeactivateOffset;

AddFriendTabList.SetPlayerNameOffset = getRealOffset(0x6B1E6C);
AddFriendTabList.SetPlayerName = (void(*)(void*, monoString*))AddFriendTabList.SetPlayerNameOffset;

AddFriendTabList.SetPlayerIdOffset = getRealOffset(0x6B1E74);
AddFriendTabList.SetPlayerId = (void(*)(void*, int))AddFriendTabList.SetPlayerIdOffset;

AddFriendTabList.AddFriendClickedOffset = getRealOffset(0x6B1E7C);
AddFriendTabList.AddFriendClicked = (void(*)(void*))AddFriendTabList.AddFriendClickedOffset;

AddFriendTabList.OnConfirmAddFriendOffset = getRealOffset(0x6B22FC);
AddFriendTabList.OnConfirmAddFriend = (void(*)(void*))AddFriendTabList.OnConfirmAddFriendOffset;

AddFriendTabList.OnAddFriendSuccessfulOffset = getRealOffset(0x6B23F4);
AddFriendTabList.OnAddFriendSuccessful = (void(*)(void*))AddFriendTabList.OnAddFriendSuccessfulOffset;

AddFriendTabList.OnFailedAddingFriendOffset = getRealOffset(0x6B25FC);
AddFriendTabList.OnFailedAddingFriend = (void(*)(void*, monoString*))AddFriendTabList.OnFailedAddingFriendOffset;

GlowForTime.ResetOffset = getRealOffset(0x602520);
GlowForTime.Reset = (void(*)(void*))GlowForTime.ResetOffset;

GlowForTime.PlayOffset = getRealOffset(0x602530);
GlowForTime.Play = (void(*)(void*, float))GlowForTime.PlayOffset;

GlowForTime.UpdateOffset = getRealOffset(0x602548);
GlowForTime.Update = (void(*)(void*))GlowForTime.UpdateOffset;

GyroscopeSensitivity.AwakeOffset = getRealOffset(0x7EDC80);
GyroscopeSensitivity.Awake = (void(*)(void*))GyroscopeSensitivity.AwakeOffset;

GyroscopeSensitivity.StartOffset = getRealOffset(0x7EDD40);
GyroscopeSensitivity.Start = (void(*)(void*))GyroscopeSensitivity.StartOffset;

GyroscopeSensitivity.SetValueOffset = getRealOffset(0x7EDDFC);
GyroscopeSensitivity.SetValue = (void(*)(void*, float))GyroscopeSensitivity.SetValueOffset;

GyroscopeSensitivity.get_ValueOffset = getRealOffset(0x7EDEC0);
GyroscopeSensitivity.get_Value = (float(*)())GyroscopeSensitivity.get_ValueOffset;

DisplayKillerRank.ShowKillerRankOffset = getRealOffset(0x67A6D0);
DisplayKillerRank.ShowKillerRank = (void(*)(void*, monoString*))DisplayKillerRank.ShowKillerRankOffset;

DisplaySpectateHolo.StartOffset = getRealOffset(0x67B1D0);
DisplaySpectateHolo.Start = (void(*)(void*))DisplaySpectateHolo.StartOffset;

DisplaySpectateHolo.UpdateOffset = getRealOffset(0x67B1D4);
DisplaySpectateHolo.Update = (void(*)(void*))DisplaySpectateHolo.UpdateOffset;

DisplaySpectateInfo.DisplayPlayerHealthOffset = getRealOffset(0x67B1E0);
DisplaySpectateInfo.DisplayPlayerHealth = (void(*)(void*, monoString*, Color))DisplaySpectateInfo.DisplayPlayerHealthOffset;

DisplaySpectateWeapon.DisplayWeaponOffset = getRealOffset(0x67B214);
DisplaySpectateWeapon.DisplayWeapon = (void(*)(void*, int, int))DisplaySpectateWeapon.DisplayWeaponOffset;

DisplaySpectateWeapon.DisplayWeaponNameOffset = getRealOffset(0x67B2AC);
DisplaySpectateWeapon.DisplayWeaponName = (void(*)(void*, monoString*, int))DisplaySpectateWeapon.DisplayWeaponNameOffset;

DisplaySpectateWeapon.DisplayWeaponImageOffset = getRealOffset(0x67B40C);
DisplaySpectateWeapon.DisplayWeaponImage = (void(*)(void*, int))DisplaySpectateWeapon.DisplayWeaponImageOffset;

DisplayTeamColoredLabel.DisplayInfoOffset = getRealOffset(0x67B534);
DisplayTeamColoredLabel.DisplayInfo = (void(*)(void*, monoString*, int))DisplayTeamColoredLabel.DisplayInfoOffset;

TeamColorUtil.GetColorOffset = getRealOffset(0x5C9718);
TeamColorUtil.GetColor = (Color (*)(int))TeamColorUtil.GetColorOffset;

SpectateLabel.ChangeColoredLabelOffset = getRealOffset(0x57DDCC);
SpectateLabel.ChangeColoredLabel = (void(*)(void*, monoString*, Color))SpectateLabel.ChangeColoredLabelOffset;

SpectateLabel.DisableLabelOffset = getRealOffset(0x57DCA4);
SpectateLabel.DisableLabel = (void(*)(void*))SpectateLabel.DisableLabelOffset;

SpectateLabel.EnableLabelOffset = getRealOffset(0x57DB00);
SpectateLabel.EnableLabel = (void(*)(void*))SpectateLabel.EnableLabelOffset;

UIDisplayKDCounts.DisplayOffset = getRealOffset(0x5DF9F8);
UIDisplayKDCounts.Display = (void(*)(void*, monoString*))UIDisplayKDCounts.DisplayOffset;

UIDisplayRank.DisplayRankOffset = getRealOffset(0x5DFA8C);
UIDisplayRank.DisplayRank = (void(*)(void*, int, int))UIDisplayRank.DisplayRankOffset;

UIDisplayRank.HideRankOffset = getRealOffset(0x5DFED0);
UIDisplayRank.HideRank = (void(*)(void*))UIDisplayRank.HideRankOffset;

UIDisplayRank.ResetRankOffset = getRealOffset(0x5DFD80);
UIDisplayRank.ResetRank = (void(*)(void*))UIDisplayRank.ResetRankOffset;

UIDisplayUserLabel.DisplayUserInfoOffset = getRealOffset(0x5DFF44);
UIDisplayUserLabel.DisplayUserInfo = (void(*)(void*, monoString*, monoString*, int))UIDisplayUserLabel.DisplayUserInfoOffset;

HardcorePoints.StartOffset = getRealOffset(0x7F19D8);
HardcorePoints.Start = (void(*)(void*))HardcorePoints.StartOffset;

HardcorePoints.UpdateAlivePlayersOffset = getRealOffset(0x7F1A78);
HardcorePoints.UpdateAlivePlayers = (void(*)(void*, int, int))HardcorePoints.UpdateAlivePlayersOffset;

CasePriceSetter.StartOffset = getRealOffset(0x77DE30);
CasePriceSetter.Start = (void(*)(void*))CasePriceSetter.StartOffset;

ControlGoldCaseState.OnValueChangedOffset = getRealOffset(0x81C8F0);
ControlGoldCaseState.OnValueChanged = (void(*)(void*, Vector2))ControlGoldCaseState.OnValueChangedOffset;

ControlGoldCaseState.GetNormalizedPosOffset = getRealOffset(0x81C950);
ControlGoldCaseState.GetNormalizedPos = (float(*)(void*))ControlGoldCaseState.GetNormalizedPosOffset;

ControlMoreOffers.RefreshScreenOffset = getRealOffset(0x81CA4C);
ControlMoreOffers.RefreshScreen = (void(*)(void*))ControlMoreOffers.RefreshScreenOffset;

ControlMoreOffers.ScrollToIndexAfterAFrameOffset = getRealOffset(0x81CAD0);
ControlMoreOffers.ScrollToIndexAfterAFrame = (void *(*)(void*))ControlMoreOffers.ScrollToIndexAfterAFrameOffset;

ControlMoreOffers.OnEnableOffset = getRealOffset(0x81CB70);
ControlMoreOffers.OnEnable = (void(*)(void*))ControlMoreOffers.OnEnableOffset;

LockedLoadoutScreen.ShowOffset = getRealOffset(0x6E9F8C);
LockedLoadoutScreen.Show = (void(*)(void*))LockedLoadoutScreen.ShowOffset;

LockedLoadoutScreen.HideOffset = getRealOffset(0x6EA118);
LockedLoadoutScreen.Hide = (void(*)(void*))LockedLoadoutScreen.HideOffset;

LockedLoadoutScreen.ResetTitleTextOffset = getRealOffset(0x6E9FC0);
LockedLoadoutScreen.ResetTitleText = (void(*)(void*))LockedLoadoutScreen.ResetTitleTextOffset;

LockedLoadoutScreen.DisplayPurchasingTextOffset = getRealOffset(0x6EBE50);
LockedLoadoutScreen.DisplayPurchasingText = (void(*)(void*))LockedLoadoutScreen.DisplayPurchasingTextOffset;

LockedForBeginnerController.StartOffset = getRealOffset(0x6F55B8);
LockedForBeginnerController.Start = (void(*)(void*))LockedForBeginnerController.StartOffset;

LiveStreamEventController.ShowOffset = getRealOffset(0x6DDD78);
LiveStreamEventController.Show = (void(*)(void*, void *))LiveStreamEventController.ShowOffset;

LiveStreamEventController.HideOffset = getRealOffset(0x6DDE84);
LiveStreamEventController.Hide = (void(*)(void*))LiveStreamEventController.HideOffset;

LivestreamBarController.AwakeOffset = getRealOffset(0x6DDF4C);
LivestreamBarController.Awake = (void(*)(void*))LivestreamBarController.AwakeOffset;

LivestreamBarController.OnEnableOffset = getRealOffset(0x6DE064);
LivestreamBarController.OnEnable = (void(*)(void*))LivestreamBarController.OnEnableOffset;

LivestreamBarController.RequestEventOffset = getRealOffset(0x6DE094);
LivestreamBarController.RequestEvent = (void *(*)(void*))LivestreamBarController.RequestEventOffset;

LivestreamBarController.OnLiveServiceCompletedOffset = getRealOffset(0x6DE134);
LivestreamBarController.OnLiveServiceCompleted = (void(*)(void*, monoString*))LivestreamBarController.OnLiveServiceCompletedOffset;

LivestreamBarController.OnLiveServiceFailedOffset = getRealOffset(0x6DE1B4);
LivestreamBarController.OnLiveServiceFailed = (void(*)(void*, monoString*))LivestreamBarController.OnLiveServiceFailedOffset;

LivestreamBarController.DisplayBottomBarOffset = getRealOffset(0x6DE038);
LivestreamBarController.DisplayBottomBar = (void(*)(void*, void *))LivestreamBarController.DisplayBottomBarOffset;

UpdateMainLoadoutWeaponLabel.UpdateLabelsOffset = getRealOffset(0x891B40);
UpdateMainLoadoutWeaponLabel.UpdateLabels = (void(*)(void*))UpdateMainLoadoutWeaponLabel.UpdateLabelsOffset;

MainMenuCharacterDresser.StartOffset = getRealOffset(0x9F7F04);
MainMenuCharacterDresser.Start = (void(*)(void*))MainMenuCharacterDresser.StartOffset;

MainMenuCharacterDresser.UpdateCharacterOffset = getRealOffset(0x9F7F08);
MainMenuCharacterDresser.UpdateCharacter = (void(*)(void*))MainMenuCharacterDresser.UpdateCharacterOffset;

MainMenuCharacterDresser.DressCharacterOffset = getRealOffset(0x9F7FE4);
MainMenuCharacterDresser.DressCharacter = (void(*)(void*))MainMenuCharacterDresser.DressCharacterOffset;

MainMenuCharacterDresser.AddWeaponOffset = getRealOffset(0x9F8118);
MainMenuCharacterDresser.AddWeapon = (void *(*)(void*))MainMenuCharacterDresser.AddWeaponOffset;

MainMenuCharacterDresser.AddWeaponCamoOffset = getRealOffset(0x9F8314);
MainMenuCharacterDresser.AddWeaponCamo = (void(*)(void*, void *))MainMenuCharacterDresser.AddWeaponCamoOffset;

Move3DtoRectTransform.StartOffset = getRealOffset(0x528B64);
Move3DtoRectTransform.Start = (void(*)(void*))Move3DtoRectTransform.StartOffset;

Move3DtoRectTransform.TranslateObjectOffset = getRealOffset(0x528B68);
Move3DtoRectTransform.TranslateObject = (void(*)(void*))Move3DtoRectTransform.TranslateObjectOffset;

CheckOnlineStatus.AwakeOffset = getRealOffset(0x783DB4);
CheckOnlineStatus.Awake = (void(*)(void*))CheckOnlineStatus.AwakeOffset;

GameModeBarController.ClickNextOffset = getRealOffset(0x5FA5FC);
GameModeBarController.ClickNext = (void(*)(void*))GameModeBarController.ClickNextOffset;

GameModeBarController.ClickPreviousOffset = getRealOffset(0x5FA62C);
GameModeBarController.ClickPrevious = (void(*)(void*))GameModeBarController.ClickPreviousOffset;

GameModeBarController.RefreshViewOffset = getRealOffset(0x5FA65C);
GameModeBarController.RefreshView = (void(*)(void*))GameModeBarController.RefreshViewOffset;

GameModeBarController.OnEnableOffset = getRealOffset(0x5FA724);
GameModeBarController.OnEnable = (void(*)(void*))GameModeBarController.OnEnableOffset;

MPMapSelectionController.OnEnableOffset = getRealOffset(0x9F6CA8);
MPMapSelectionController.OnEnable = (void(*)(void*))MPMapSelectionController.OnEnableOffset;

MPMapSelectionController.ClickNextOffset = getRealOffset(0x9F6D20);
MPMapSelectionController.ClickNext = (void(*)(void*))MPMapSelectionController.ClickNextOffset;

MPMapSelectionController.ClickPreviousOffset = getRealOffset(0x9F6DB8);
MPMapSelectionController.ClickPrevious = (void(*)(void*))MPMapSelectionController.ClickPreviousOffset;

MPMapSelectionController.ChangeIndexOffset = getRealOffset(0x9F6D40);
MPMapSelectionController.ChangeIndex = (void(*)(void*, int))MPMapSelectionController.ChangeIndexOffset;

MPMapSelectionController.ApplyChangesOffset = getRealOffset(0x9F6CAC);
MPMapSelectionController.ApplyChanges = (void(*)(void*))MPMapSelectionController.ApplyChangesOffset;

MapImageDisplay.SetMapOffset = getRealOffset(0x9F6DD8);
MapImageDisplay.SetMap = (void(*)(void*, int))MapImageDisplay.SetMapOffset;

MapNameDisplay.SetMapOffset = getRealOffset(0x9F6E78);
MapNameDisplay.SetMap = (void(*)(void*, int))MapNameDisplay.SetMapOffset;

MenuToggleButton.SetSelectedOffset = getRealOffset(0x51F060);
MenuToggleButton.SetSelected = (void(*)(void*))MenuToggleButton.SetSelectedOffset;

MenuToggleButton.SetVisualSelectedOffset = getRealOffset(0x51F070);
MenuToggleButton.SetVisualSelected = (void(*)(void*))MenuToggleButton.SetVisualSelectedOffset;

MenuToggleButton.SetDeselectedOffset = getRealOffset(0x51F0B8);
MenuToggleButton.SetDeselected = (void(*)(void*))MenuToggleButton.SetDeselectedOffset;

MenuToggleButton.SetVisualDeselectedOffset = getRealOffset(0x51F0C8);
MenuToggleButton.SetVisualDeselected = (void(*)(void*))MenuToggleButton.SetVisualDeselectedOffset;

MenuToggleButton.DisableButtonOffset = getRealOffset(0x51F110);
MenuToggleButton.DisableButton = (void(*)(void*))MenuToggleButton.DisableButtonOffset;

MenuToggleButton.EnableButtonOffset = getRealOffset(0x51F13C);
MenuToggleButton.EnableButton = (void(*)(void*))MenuToggleButton.EnableButtonOffset;

PopulateGameModesDropdown.OnEnableOffset = getRealOffset(0x70D70C);
PopulateGameModesDropdown.OnEnable = (void(*)(void*))PopulateGameModesDropdown.OnEnableOffset;

PopulateMapsDropdown.OnEnableOffset = getRealOffset(0x70DA48);
PopulateMapsDropdown.OnEnable = (void(*)(void*))PopulateMapsDropdown.OnEnableOffset;

ToggleBarController.OnIndexSelectedOffset = getRealOffset(0x5D0570);
ToggleBarController.OnIndexSelected = (void(*)(void*, int))ToggleBarController.OnIndexSelectedOffset;

ToggleBarController.EnableAllOffset = getRealOffset(0x5D0700);
ToggleBarController.EnableAll = (void(*)(void*))ToggleBarController.EnableAllOffset;

ToggleBarController.DisableAllOffset = getRealOffset(0x5D07B8);
ToggleBarController.DisableAll = (void(*)(void*))ToggleBarController.DisableAllOffset;

NotificationPanelController.get_InstanceOffset = getRealOffset(0x547DA8);
NotificationPanelController.get_Instance = (void *(*)())NotificationPanelController.get_InstanceOffset;

NotificationPanelController.OnEnableOffset = getRealOffset(0x547E00);
NotificationPanelController.OnEnable = (void(*)(void*))NotificationPanelController.OnEnableOffset;

NotificationPanelController.SetInstanceOffset = getRealOffset(0x547E04);
NotificationPanelController.SetInstance = (void(*)(void*))NotificationPanelController.SetInstanceOffset;

NotificationPanelController.SetupNotificationOffset = getRealOffset(0x547F24);
NotificationPanelController.SetupNotification = (void(*)(void*, monoString*, float))NotificationPanelController.SetupNotificationOffset;

NotificationPanelController.SetupNotification1Offset = getRealOffset(0x548214);
NotificationPanelController.SetupNotification1 = (void(*)(void*, monoString*, float, monoString*, void *))NotificationPanelController.SetupNotification1Offset;

NotificationPanelController.SetupNotification2Offset = getRealOffset(0x547FA4);
NotificationPanelController.SetupNotification2 = (void(*)(void*, monoString*, float, monoString*, void *, monoString*, void *))NotificationPanelController.SetupNotification2Offset;

NotificationPanelController.ResetAllButtonsOffset = getRealOffset(0x5482A0);
NotificationPanelController.ResetAllButtons = (void(*)(void*))NotificationPanelController.ResetAllButtonsOffset;

PlaceUIElementAtWorldPosition.UpdateOffset = getRealOffset(0x4BBACC);
PlaceUIElementAtWorldPosition.Update = (void(*)(void*))PlaceUIElementAtWorldPosition.UpdateOffset;

PlaceUIElementAtWorldPosition.MoveRectTransformOffset = getRealOffset(0x4BBAD0);
PlaceUIElementAtWorldPosition.MoveRectTransform = (void(*)(void*))PlaceUIElementAtWorldPosition.MoveRectTransformOffset;

AvailableRewards.UpdateOffset = getRealOffset(0x6BE394);
AvailableRewards.Update = (void(*)(void*))AvailableRewards.UpdateOffset;

AvailableRewards.OnRewardsUpdatedOffset = getRealOffset(0x6BE574);
AvailableRewards.OnRewardsUpdated = (void(*)(void*))AvailableRewards.OnRewardsUpdatedOffset;

AvailableRewards.OnDestroyOffset = getRealOffset(0x6BE698);
AvailableRewards.OnDestroy = (void(*)(void*))AvailableRewards.OnDestroyOffset;

CurrentBadgeDropdown.SetCurrentBadgeOffset = getRealOffset(0x5914C0);
CurrentBadgeDropdown.SetCurrentBadge = (void(*)(void*, int))CurrentBadgeDropdown.SetCurrentBadgeOffset;

CurrentBadgeDropdown.OnEnableOffset = getRealOffset(0x5915DC);
CurrentBadgeDropdown.OnEnable = (void(*)(void*))CurrentBadgeDropdown.OnEnableOffset;

DisplaySeasonLeaderboard.DisplayOffset = getRealOffset(0x67AC34);
DisplaySeasonLeaderboard.Display = (void(*)(void*, void *))DisplaySeasonLeaderboard.DisplayOffset;

DisplaySeasonLeaderboard.PopulateUIOffset = getRealOffset(0x67AC40);
DisplaySeasonLeaderboard.PopulateUI = (void(*)(void*, void *))DisplaySeasonLeaderboard.PopulateUIOffset;

LeaderboardEntry.GetUsernameLabelOffset = getRealOffset(0x6605E4);
LeaderboardEntry.GetUsernameLabel = (void *(*)(void*))LeaderboardEntry.GetUsernameLabelOffset;

LeaderboardEntry.SetupEntryOffset = getRealOffset(0x6605EC);
LeaderboardEntry.SetupEntry = (void(*)(void*, void *))LeaderboardEntry.SetupEntryOffset;

LeaderboardEntry.SetUsernameOffset = getRealOffset(0x660B70);
LeaderboardEntry.SetUsername = (void(*)(void*, void *))LeaderboardEntry.SetUsernameOffset;

LeaderboardEntry.IsMatchingUserOffset = getRealOffset(0x660BB8);
LeaderboardEntry.IsMatchingUser = (bool(*)(void*, void *, monoString*))LeaderboardEntry.IsMatchingUserOffset;

LeaderboardEntry.ProcessIfUsernameOffset = getRealOffset(0x660BE8);
LeaderboardEntry.ProcessIfUsername = (bool(*)(void*, void *, monoString*))LeaderboardEntry.ProcessIfUsernameOffset;

LeaderboardEntry.SetRankOffset = getRealOffset(0x660650);
LeaderboardEntry.SetRank = (void(*)(void*, void *))LeaderboardEntry.SetRankOffset;

LeaderboardEntry.SetKillsOffset = getRealOffset(0x6606C0);
LeaderboardEntry.SetKills = (void(*)(void*, void *))LeaderboardEntry.SetKillsOffset;

LeaderboardEntry.SetBadgeOffset = getRealOffset(0x66072C);
LeaderboardEntry.SetBadge = (void(*)(void*, void *))LeaderboardEntry.SetBadgeOffset;

LeaderboardEntry.SetRegionOffset = getRealOffset(0x66081C);
LeaderboardEntry.SetRegion = (void(*)(void*, void *))LeaderboardEntry.SetRegionOffset;

LeaderboardEntry.SetFavoriteWeaponOffset = getRealOffset(0x660864);
LeaderboardEntry.SetFavoriteWeapon = (void(*)(void*, void *))LeaderboardEntry.SetFavoriteWeaponOffset;

LeaderboardEntry.SetRankColorOffset = getRealOffset(0x660F00);
LeaderboardEntry.SetRankColor = (void(*)(void*, void *, int))LeaderboardEntry.SetRankColorOffset;

ProfileRemoteDataProvider.add_OnWeaponStatsReadyOffset = getRealOffset(0x71077C);
ProfileRemoteDataProvider.add_OnWeaponStatsReady = (void(*)(void*, void *))ProfileRemoteDataProvider.add_OnWeaponStatsReadyOffset;

ProfileRemoteDataProvider.remove_OnWeaponStatsReadyOffset = getRealOffset(0x71082C);
ProfileRemoteDataProvider.remove_OnWeaponStatsReady = (void(*)(void*, void *))ProfileRemoteDataProvider.remove_OnWeaponStatsReadyOffset;

ProfileRemoteDataProvider.add_OnLeaderboardReadyOffset = getRealOffset(0x7108DC);
ProfileRemoteDataProvider.add_OnLeaderboardReady = (void(*)(void*, void *))ProfileRemoteDataProvider.add_OnLeaderboardReadyOffset;

ProfileRemoteDataProvider.remove_OnLeaderboardReadyOffset = getRealOffset(0x71098C);
ProfileRemoteDataProvider.remove_OnLeaderboardReady = (void(*)(void*, void *))ProfileRemoteDataProvider.remove_OnLeaderboardReadyOffset;

ProfileRemoteDataProvider.OnEnableOffset = getRealOffset(0x710A3C);
ProfileRemoteDataProvider.OnEnable = (void(*)(void*))ProfileRemoteDataProvider.OnEnableOffset;

ProfileRemoteDataProvider.BuildModelsOffset = getRealOffset(0x710A40);
ProfileRemoteDataProvider.BuildModels = (void(*)(void*))ProfileRemoteDataProvider.BuildModelsOffset;

ProfileRemoteDataProvider.FetchDataOffset = getRealOffset(0x710AB0);
ProfileRemoteDataProvider.FetchData = (void(*)(void*))ProfileRemoteDataProvider.FetchDataOffset;

ProfileRemoteDataProvider.FetchDataWithFiltersOffset = getRealOffset(0x710C54);
ProfileRemoteDataProvider.FetchDataWithFilters = (void(*)(void*, monoString*, monoString*, monoString*))ProfileRemoteDataProvider.FetchDataWithFiltersOffset;

ProfileRemoteDataProvider.WeaponStatsModelDataCompleteOffset = getRealOffset(0x710D58);
ProfileRemoteDataProvider.WeaponStatsModelDataComplete = (void(*)(void*))ProfileRemoteDataProvider.WeaponStatsModelDataCompleteOffset;

ProfileRemoteDataProvider.WeaponStatsModelDataErrorOffset = getRealOffset(0x711064);
ProfileRemoteDataProvider.WeaponStatsModelDataError = (void(*)(void*, monoString*))ProfileRemoteDataProvider.WeaponStatsModelDataErrorOffset;

ProfileRemoteDataProvider.LeaderboardModelDataCompleteOffset = getRealOffset(0x711130);
ProfileRemoteDataProvider.LeaderboardModelDataComplete = (void(*)(void*))ProfileRemoteDataProvider.LeaderboardModelDataCompleteOffset;

ProfileRemoteDataProvider.LeaderboardModelDataErrorOffset = getRealOffset(0x71143C);
ProfileRemoteDataProvider.LeaderboardModelDataError = (void(*)(void*, monoString*))ProfileRemoteDataProvider.LeaderboardModelDataErrorOffset;

RewardsDisplay.AwakeOffset = getRealOffset(0x64B628);
RewardsDisplay.Awake = (void(*)(void*))RewardsDisplay.AwakeOffset;

RewardsDisplay.UpdateOffset = getRealOffset(0x64B684);
RewardsDisplay.Update = (void(*)(void*))RewardsDisplay.UpdateOffset;

RewardsDisplay.OpenCaseOffset = getRealOffset(0x64B8D0);
RewardsDisplay.OpenCase = (void(*)(void*, int, int, bool))RewardsDisplay.OpenCaseOffset;

RewardsDisplay.ChangeCamoOffset = getRealOffset(0x64C164);
RewardsDisplay.ChangeCamo = (void(*)(void*))RewardsDisplay.ChangeCamoOffset;

RewardsDisplay.OpenCaseAnimationOffset = getRealOffset(0x64C6C8);
RewardsDisplay.OpenCaseAnimation = (void(*)(void*))RewardsDisplay.OpenCaseAnimationOffset;

RewardsDisplay.FadeInNamesOffset = getRealOffset(0x64C74C);
RewardsDisplay.FadeInNames = (void(*)(void*))RewardsDisplay.FadeInNamesOffset;

RewardsDisplay.FinishOpeningCaseOffset = getRealOffset(0x64C770);
RewardsDisplay.FinishOpeningCase = (void(*)(void*))RewardsDisplay.FinishOpeningCaseOffset;

SeasonLeaderboard.RequestSeasonsOffset = getRealOffset(0x618378);
SeasonLeaderboard.RequestSeasons = (void(*)(void*))SeasonLeaderboard.RequestSeasonsOffset;

SeasonLeaderboard.ChangeStateOffset = getRealOffset(0x6184C8);
SeasonLeaderboard.ChangeState = (void(*)(void*, int))SeasonLeaderboard.ChangeStateOffset;

SeasonLeaderboard.OnAvailableSeasonsSucceedOffset = getRealOffset(0x6185EC);
SeasonLeaderboard.OnAvailableSeasonsSucceed = (void(*)(void*))SeasonLeaderboard.OnAvailableSeasonsSucceedOffset;

SeasonLeaderboard.RequestFilteredLeaderboardOffset = getRealOffset(0x6188EC);
SeasonLeaderboard.RequestFilteredLeaderboard = (void(*)(void*))SeasonLeaderboard.RequestFilteredLeaderboardOffset;

SeasonLeaderboard.RequestLeaderboardOffset = getRealOffset(0x618784);
SeasonLeaderboard.RequestLeaderboard = (void(*)(void*, int, monoString*, monoString*))SeasonLeaderboard.RequestLeaderboardOffset;

SeasonLeaderboard.OnSuccessfulLeaderboardOffset = getRealOffset(0x618AE0);
SeasonLeaderboard.OnSuccessfulLeaderboard = (void(*)(void*))SeasonLeaderboard.OnSuccessfulLeaderboardOffset;

SeasonLeaderboard.OnFailedLeaderboardOffset = getRealOffset(0x618B34);
SeasonLeaderboard.OnFailedLeaderboard = (void(*)(void*, monoString*))SeasonLeaderboard.OnFailedLeaderboardOffset;

SeasonLeaderboard.OnAvailableSeasonsFailureOffset = getRealOffset(0x618B38);
SeasonLeaderboard.OnAvailableSeasonsFailure = (void(*)(void*, monoString*))SeasonLeaderboard.OnAvailableSeasonsFailureOffset;

SeasonLeaderboard.SetNotInitOffset = getRealOffset(0x6184E4);
SeasonLeaderboard.SetNotInit = (void(*)(void*))SeasonLeaderboard.SetNotInitOffset;

SeasonLeaderboard.SetLoadingOffset = getRealOffset(0x61853C);
SeasonLeaderboard.SetLoading = (void(*)(void*))SeasonLeaderboard.SetLoadingOffset;

SeasonLeaderboard.SetLoadedOffset = getRealOffset(0x618594);
SeasonLeaderboard.SetLoaded = (void(*)(void*))SeasonLeaderboard.SetLoadedOffset;

SeasonLeaderboard.OnEnableOffset = getRealOffset(0x618B3C);
SeasonLeaderboard.OnEnable = (void(*)(void*))SeasonLeaderboard.OnEnableOffset;

SeasonLeaderboardEntry.SetupEntryOffset = getRealOffset(0x618E68);
SeasonLeaderboardEntry.SetupEntry = (void(*)(void*, void *))SeasonLeaderboardEntry.SetupEntryOffset;

SeasonLeaderboardEntry.SetRankColorOffset = getRealOffset(0x618E70);
SeasonLeaderboardEntry.SetRankColor = (void(*)(void*, void *, int))SeasonLeaderboardEntry.SetRankColorOffset;

SeasonLeaderboardEntry.GetRewardTierOffset = getRealOffset(0x618F1C);
SeasonLeaderboardEntry.GetRewardTier = (int (*)(void*, int, int))SeasonLeaderboardEntry.GetRewardTierOffset;

SeasonLeaderboardEntry.GetPercentageIntOffset = getRealOffset(0x618FD0);
SeasonLeaderboardEntry.GetPercentageInt = (int(*)(void*, int, float))SeasonLeaderboardEntry.GetPercentageIntOffset;

TabLeaderboard.OnEnableOffset = getRealOffset(0x5C21E0);
TabLeaderboard.OnEnable = (void(*)(void*))TabLeaderboard.OnEnableOffset;

TabLeaderboard.PopulateUIOffset = getRealOffset(0x5C22E4);
TabLeaderboard.PopulateUI = (void(*)(void*))TabLeaderboard.PopulateUIOffset;

TabLeaderboard.FetchDataWithFiltersOffset = getRealOffset(0x5C286C);
TabLeaderboard.FetchDataWithFilters = (void(*)(void*))TabLeaderboard.FetchDataWithFiltersOffset;

TabRewards.OnEnableOffset = getRealOffset(0x5C6228);
TabRewards.OnEnable = (void(*)(void*))TabRewards.OnEnableOffset;

TabRewards.PopulateUIOffset = getRealOffset(0x5C632C);
TabRewards.PopulateUI = (void(*)(void*))TabRewards.PopulateUIOffset;

TabRewards.OnClaimClickedOffset = getRealOffset(0x5C6850);
TabRewards.OnClaimClicked = (void(*)(void*, void *, void *))TabRewards.OnClaimClickedOffset;

TabRewards.OnRewardRetrievedOffset = getRealOffset(0x5C6B24);
TabRewards.OnRewardRetrieved = (void(*)(void*, monoString*))TabRewards.OnRewardRetrievedOffset;

TabWeaponStats.OnEnableOffset = getRealOffset(0x5C6C7C);
TabWeaponStats.OnEnable = (void(*)(void*))TabWeaponStats.OnEnableOffset;

TabWeaponStats.PopulateUIOffset = getRealOffset(0x5C6D80);
TabWeaponStats.PopulateUI = (void(*)(void*))TabWeaponStats.PopulateUIOffset;

TabWeaponStats.OnEntryClickedOffset = getRealOffset(0x5C78DC);
TabWeaponStats.OnEntryClicked = (void(*)(void*, bool))TabWeaponStats.OnEntryClickedOffset;

IntroScriptProxy.EditClanTagOffset = getRealOffset(0xC9ED50);
IntroScriptProxy.EditClanTag = (void(*)(void*, monoString*))IntroScriptProxy.EditClanTagOffset;

IntroScriptProxy.ChangeUsernameClickedOffset = getRealOffset(0xC9EEA0);
IntroScriptProxy.ChangeUsernameClicked = (void(*)(void*))IntroScriptProxy.ChangeUsernameClickedOffset;

IntroScriptProxy.LogoutOffset = getRealOffset(0xC9EFE8);
IntroScriptProxy.Logout = (void(*)(void*))IntroScriptProxy.LogoutOffset;

SideBarProxy.LoadCustomizeOffset = getRealOffset(0x61F750);
SideBarProxy.LoadCustomize = (void(*)(void*))SideBarProxy.LoadCustomizeOffset;

SideBarProxy.LoadMainMenuOffset = getRealOffset(0x61FF94);
SideBarProxy.LoadMainMenu = (void(*)(void*))SideBarProxy.LoadMainMenuOffset;

SideBarProxy.LoadLoginOffset = getRealOffset(0x6202A4);
SideBarProxy.LoadLogin = (void(*)(void*))SideBarProxy.LoadLoginOffset;

SideBarProxy.LoadRegisterOffset = getRealOffset(0x620534);
SideBarProxy.LoadRegister = (void(*)(void*))SideBarProxy.LoadRegisterOffset;

SideBarProxy.LoadShopOffset = getRealOffset(0x620638);
SideBarProxy.LoadShop = (void(*)(void*))SideBarProxy.LoadShopOffset;

SalesBannerContainer.OnEnableOffset = getRealOffset(0x614C08);
SalesBannerContainer.OnEnable = (void(*)(void*))SalesBannerContainer.OnEnableOffset;

SalesBannerContainer.UpdateOffset = getRealOffset(0x614D6C);
SalesBannerContainer.Update = (void(*)(void*))SalesBannerContainer.UpdateOffset;

SalesBannerContainer.DeactivateOffset = getRealOffset(0x614D40);
SalesBannerContainer.Deactivate = (void(*)(void*))SalesBannerContainer.DeactivateOffset;

SalesPopup.set_IsInitializedOffset = getRealOffset(0x614E68);
SalesPopup.set_IsInitialized = (void(*)(void*, bool))SalesPopup.set_IsInitializedOffset;

SalesPopup.get_IsInitializedOffset = getRealOffset(0x614E70);
SalesPopup.get_IsInitialized = (bool(*)(void*))SalesPopup.get_IsInitializedOffset;

SalesPopup.SetInitialValuesOffset = getRealOffset(0x614E78);
SalesPopup.SetInitialValues = (void(*)(void*, monoString*, monoString*))SalesPopup.SetInitialValuesOffset;

SalesPopup.OnDisplayOffset = getRealOffset(0x614EE8);
SalesPopup.OnDisplay = (void(*)(void*))SalesPopup.OnDisplayOffset;

SalesPopup.OnHideOffset = getRealOffset(0x614F90);
SalesPopup.OnHide = (void(*)(void*))SalesPopup.OnHideOffset;

SalesPopupInitializer.OnEnableOffset = getRealOffset(0x614F9C);
SalesPopupInitializer.OnEnable = (void(*)(void*))SalesPopupInitializer.OnEnableOffset;

SalesPopupInitializer.CR_InitOffset = getRealOffset(0x614FC0);
SalesPopupInitializer.CR_Init = (void *(*)(void*))SalesPopupInitializer.CR_InitOffset;

ScrollPositionReset.AwakeOffset = getRealOffset(0x616BA4);
ScrollPositionReset.Awake = (void(*)(void*))ScrollPositionReset.AwakeOffset;

ScrollPositionReset.OnEnableOffset = getRealOffset(0x616C04);
ScrollPositionReset.OnEnable = (void(*)(void*))ScrollPositionReset.OnEnableOffset;

ScrollPositionReset.UpdateOffset = getRealOffset(0x616C10);
ScrollPositionReset.Update = (void(*)(void*))ScrollPositionReset.UpdateOffset;

SetTextToSliderValue.DisplayNumberOffset = getRealOffset(0x61D1F4);
SetTextToSliderValue.DisplayNumber = (void(*)(void*, float))SetTextToSliderValue.DisplayNumberOffset;

ShakeEffect.AwakeOffset = getRealOffset(0x61D580);
ShakeEffect.Awake = (void(*)(void*))ShakeEffect.AwakeOffset;

ShakeEffect.UpdateOffset = getRealOffset(0x61D690);
ShakeEffect.Update = (void(*)(void*))ShakeEffect.UpdateOffset;

ShakeEffect.ChangeStatusOffset = getRealOffset(0x61D838);
ShakeEffect.ChangeStatus = (void(*)(void*))ShakeEffect.ChangeStatusOffset;

ImageStateChanger.SetSelectedOffset = getRealOffset(0x80A3F8);
ImageStateChanger.SetSelected = (void(*)(void*))ImageStateChanger.SetSelectedOffset;

ImageStateChanger.SetDeselectedOffset = getRealOffset(0x80A4B0);
ImageStateChanger.SetDeselected = (void(*)(void*))ImageStateChanger.SetDeselectedOffset;

ScollTabSelector.SelectTabOffset = getRealOffset(0x615664);
ScollTabSelector.SelectTab = (void(*)(void*, int))ScollTabSelector.SelectTabOffset;

ScollTabSelector.SelectTabBasedOnNormalizedValueOffset = getRealOffset(0x615844);
ScollTabSelector.SelectTabBasedOnNormalizedValue = (void(*)(void*, Vector2))ScollTabSelector.SelectTabBasedOnNormalizedValueOffset;

ScollTabSelector.SelectTabBasedOnIndexOffset = getRealOffset(0x6157C4);
ScollTabSelector.SelectTabBasedOnIndex = (void(*)(void*, int))ScollTabSelector.SelectTabBasedOnIndexOffset;

ScollTabSelector.DeselectAllOtherTabsOffset = getRealOffset(0x6159B8);
ScollTabSelector.DeselectAllOtherTabs = (void(*)(void*, int))ScollTabSelector.DeselectAllOtherTabsOffset;

ScollTabSelector.RecalculateAllFloorCeilsOffset = getRealOffset(0x615A8C);
ScollTabSelector.RecalculateAllFloorCeils = (void(*)(void*))ScollTabSelector.RecalculateAllFloorCeilsOffset;

ScollTabSelector.RecaulculateFloorCeilsAfterAFrameOffset = getRealOffset(0x615AB0);
ScollTabSelector.RecaulculateFloorCeilsAfterAFrame = (void *(*)(void*))ScollTabSelector.RecaulculateFloorCeilsAfterAFrameOffset;

ScollTabSelector.OnEnableOffset = getRealOffset(0x615B50);
ScollTabSelector.OnEnable = (void(*)(void*))ScollTabSelector.OnEnableOffset;

ScrollToElement.ScrollToIndexOffset = getRealOffset(0x616E20);
ScrollToElement.ScrollToIndex = (void(*)(void*, int))ScrollToElement.ScrollToIndexOffset;

ScrollToElement.ScrollToPositionAfterAFrameOffset = getRealOffset(0x6170FC);
ScrollToElement.ScrollToPositionAfterAFrame = (void(*)(void*, int))ScrollToElement.ScrollToPositionAfterAFrameOffset;

ScrollToElement.ScrollToPostCoroutineOffset = getRealOffset(0x617120);
ScrollToElement.ScrollToPostCoroutine = (void *(*)(void*, int))ScrollToElement.ScrollToPostCoroutineOffset;

ScrollToElement.GetNormalizedPosOffset = getRealOffset(0x616F80);
ScrollToElement.GetNormalizedPos = (float(*)(void*, void *))ScrollToElement.GetNormalizedPosOffset;

ScrollToElement.OnValueChangedOffset = getRealOffset(0x6171D8);
ScrollToElement.OnValueChanged = (void(*)(void*, Vector2))ScrollToElement.OnValueChangedOffset;

ScrollToElement.OnPositionsUpdatedOffset = getRealOffset(0x6173A4);
ScrollToElement.OnPositionsUpdated = (void(*)(void*))ScrollToElement.OnPositionsUpdatedOffset;

ScrollToElement.UpdateNormalizedPositionsOffset = getRealOffset(0x61728C);
ScrollToElement.UpdateNormalizedPositions = (void(*)(void*))ScrollToElement.UpdateNormalizedPositionsOffset;

ScrollToElement.OnEnableOffset = getRealOffset(0x6173A8);
ScrollToElement.OnEnable = (void(*)(void*))ScrollToElement.OnEnableOffset;

ShopButton.SetSelectedOffset = getRealOffset(0x61E554);
ShopButton.SetSelected = (void(*)(void*))ShopButton.SetSelectedOffset;

ShopButton.SetVisualSelectedOffset = getRealOffset(0x61E664);
ShopButton.SetVisualSelected = (void(*)(void*))ShopButton.SetVisualSelectedOffset;

ShopButton.SetDeselectedOffset = getRealOffset(0x61E6A8);
ShopButton.SetDeselected = (void(*)(void*))ShopButton.SetDeselectedOffset;

ShopButton.SetVisualDeselectedOffset = getRealOffset(0x61E774);
ShopButton.SetVisualDeselected = (void(*)(void*))ShopButton.SetVisualDeselectedOffset;

ShopButton.ActivateGOOffset = getRealOffset(0x61E5B8);
ShopButton.ActivateGO = (void(*)(void*))ShopButton.ActivateGOOffset;

ShopButton.DeactivateGOOffset = getRealOffset(0x61E6C8);
ShopButton.DeactivateGO = (void(*)(void*))ShopButton.DeactivateGOOffset;

TextStateChanger.SetSelectedOffset = getRealOffset(0x5CB8B4);
TextStateChanger.SetSelected = (void(*)(void*))TextStateChanger.SetSelectedOffset;

TextStateChanger.SetDeselectedOffset = getRealOffset(0x5CB96C);
TextStateChanger.SetDeselected = (void(*)(void*))TextStateChanger.SetDeselectedOffset;

TextStateChanger.ToggleSelectionOffset = getRealOffset(0x5CBA24);
TextStateChanger.ToggleSelection = (void(*)(void*, bool))TextStateChanger.ToggleSelectionOffset;

ShowOfferOnMain.ShowOfferOffset = getRealOffset(0x61EA28);
ShowOfferOnMain.ShowOffer = (void(*)(void*))ShowOfferOnMain.ShowOfferOffset;

ShowOfferOnMain.ReaccomodateChildrenOffset = getRealOffset(0x61EE6C);
ShowOfferOnMain.ReaccomodateChildren = (void(*)(void*, void *))ShowOfferOnMain.ReaccomodateChildrenOffset;

ShowOfferOnMain.ReaccomodateCoroutineOffset = getRealOffset(0x61EE90);
ShowOfferOnMain.ReaccomodateCoroutine = (void *(*)(void*, void *))ShowOfferOnMain.ReaccomodateCoroutineOffset;

SkinnedUIComponent.SetSkinOffset = getRealOffset(0x5756D8);
SkinnedUIComponent.SetSkin = (void(*)(void*, int))SkinnedUIComponent.SetSkinOffset;

TweenImageTransparency.AwakeOffset = getRealOffset(0x5DF1E0);
TweenImageTransparency.Awake = (void(*)(void*))TweenImageTransparency.AwakeOffset;

TweenImageTransparency.CalculateSecondsPerTransitionOffset = getRealOffset(0x5DF244);
TweenImageTransparency.CalculateSecondsPerTransition = (void(*)(void*))TweenImageTransparency.CalculateSecondsPerTransitionOffset;

TweenImageTransparency.UpdateOffset = getRealOffset(0x5DF258);
TweenImageTransparency.Update = (void(*)(void*))TweenImageTransparency.UpdateOffset;

UIAudioManager.AwakeOffset = getRealOffset(0x5DF844);
UIAudioManager.Awake = (void(*)(void*))UIAudioManager.AwakeOffset;

UIAudioManager.PlayClipOffset = getRealOffset(0x5DF8BC);
UIAudioManager.PlayClip = (void(*)(void*, void *, bool))UIAudioManager.PlayClipOffset;

UIAudioManager.OnDestroyOffset = getRealOffset(0x5DF93C);
UIAudioManager.OnDestroy = (void(*)(void*))UIAudioManager.OnDestroyOffset;

UIFadeInScript.AwakeOffset = getRealOffset(0x5E03F0);
UIFadeInScript.Awake = (void(*)(void*))UIFadeInScript.AwakeOffset;

UIFadeInScript.PlayOffset = getRealOffset(0x5E04CC);
UIFadeInScript.Play = (void(*)(void*))UIFadeInScript.PlayOffset;

UIFadeInScript.UpdateOffset = getRealOffset(0x5E0540);
UIFadeInScript.Update = (void(*)(void*))UIFadeInScript.UpdateOffset;

UIInitialColorScript.StartOffset = getRealOffset(0x5E070C);
UIInitialColorScript.Start = (void(*)(void*))UIInitialColorScript.StartOffset;

UIPositionScript.AwakeOffset = getRealOffset(0x5E0824);
UIPositionScript.Awake = (void(*)(void*))UIPositionScript.AwakeOffset;

UIPositionScript.StartOffset = getRealOffset(0x5E0A00);
UIPositionScript.Start = (void(*)(void*))UIPositionScript.StartOffset;

UIPositionScript.UpdateFastOffset = getRealOffset(0x5E14D0);
UIPositionScript.UpdateFast = (void(*)(void*))UIPositionScript.UpdateFastOffset;

UIPositionScript.OnDestroyOffset = getRealOffset(0x5E15CC);
UIPositionScript.OnDestroy = (void(*)(void*))UIPositionScript.OnDestroyOffset;

UIPositionScript.GetScaleOffset = getRealOffset(0x5E1730);
UIPositionScript.GetScale = (float(*)(void*))UIPositionScript.GetScaleOffset;

UIPositionScript.SetScaleOffset = getRealOffset(0x5E0FD8);
UIPositionScript.SetScale = (void(*)(void*, float))UIPositionScript.SetScaleOffset;

UIPositionScript.SetOriginalGraphicColorOffset = getRealOffset(0x5E1738);
UIPositionScript.SetOriginalGraphicColor = (void(*)(void*))UIPositionScript.SetOriginalGraphicColorOffset;

UIPositionScript.ResetToDefaultOffset = getRealOffset(0x5E178C);
UIPositionScript.ResetToDefault = (void(*)(void*))UIPositionScript.ResetToDefaultOffset;

UIPositionScript.OnPointerDownOffset = getRealOffset(0x5E1838);
UIPositionScript.OnPointerDown = (void(*)(void*, void *))UIPositionScript.OnPointerDownOffset;

UIPositionScript.OnPointerUpOffset = getRealOffset(0x5E18E8);
UIPositionScript.OnPointerUp = (void(*)(void*, void *))UIPositionScript.OnPointerUpOffset;

UIPositionScript.OnDragOffset = getRealOffset(0x5E1960);
UIPositionScript.OnDrag = (void(*)(void*, void *))UIPositionScript.OnDragOffset;

UIPositionScript.LoadPositionOffset = getRealOffset(0x5E1AC8);
UIPositionScript.LoadPosition = (void(*)(void*, float, float))UIPositionScript.LoadPositionOffset;

UIPositionScript.LoadScaleOffset = getRealOffset(0x5E1C4C);
UIPositionScript.LoadScale = (void(*)(void*, float))UIPositionScript.LoadScaleOffset;

UIPositionScript.GetPositionOffset = getRealOffset(0x5E1DCC);
UIPositionScript.GetPosition = (Vector2 (*)(void*))UIPositionScript.GetPositionOffset;

UIRotateZ.AwakeOffset = getRealOffset(0x5E1E08);
UIRotateZ.Awake = (void(*)(void*))UIRotateZ.AwakeOffset;

UIRotateZ.UpdateOffset = getRealOffset(0x5E1E68);
UIRotateZ.Update = (void(*)(void*))UIRotateZ.UpdateOffset;

Uploader.UploadFileOffset = getRealOffset(0x891C88);
Uploader.UploadFile = (void(*)(void*))Uploader.UploadFileOffset;

Uploader.StartOffset = getRealOffset(0x892070);
Uploader.Start = (void(*)(void*))Uploader.StartOffset;

ActivationLoger.OnEnableOffset = getRealOffset(0x6B06D4);
ActivationLoger.OnEnable = (void(*)(void*))ActivationLoger.OnEnableOffset;

ActivationLoger.OnDisableOffset = getRealOffset(0x6B0794);
ActivationLoger.OnDisable = (void(*)(void*))ActivationLoger.OnDisableOffset;

ToggleData.DisablePersistentListenersOffset = getRealOffset(0x5D09D8);
ToggleData.DisablePersistentListeners = (void(*)(void*))ToggleData.DisablePersistentListenersOffset;

ToggleData.EnablePersistentListenersOffset = getRealOffset(0x5D0A5C);
ToggleData.EnablePersistentListeners = (void(*)(void*))ToggleData.EnablePersistentListenersOffset;

BlayzeToggleGroup.AwakeOffset = getRealOffset(0x6C9BEC);
BlayzeToggleGroup.Awake = (void(*)(void*))BlayzeToggleGroup.AwakeOffset;

BlayzeToggleGroup.PopListenersOffset = getRealOffset(0x6C9F10);
BlayzeToggleGroup.PopListeners = (void(*)(void*))BlayzeToggleGroup.PopListenersOffset;

BlayzeToggleGroup.PushListenersOffset = getRealOffset(0x6C9D78);
BlayzeToggleGroup.PushListeners = (void(*)(void*))BlayzeToggleGroup.PushListenersOffset;

BlayzeToggleGroup.OnEnableOffset = getRealOffset(0x6C9FEC);
BlayzeToggleGroup.OnEnable = (void(*)(void*))BlayzeToggleGroup.OnEnableOffset;

BlayzeToggleGroup.OnToggleValueChangedOffset = getRealOffset(0x6CA114);
BlayzeToggleGroup.OnToggleValueChanged = (void(*)(void*, void *))BlayzeToggleGroup.OnToggleValueChangedOffset;

ClickAction.OnPointerClickOffset = getRealOffset(0x784654);
ClickAction.OnPointerClick = (void(*)(void*, void *))ClickAction.OnPointerClickOffset;

CursorHelper.LockCursorOffset = getRealOffset(0x59176C);
CursorHelper.LockCursor = (void(*)())CursorHelper.LockCursorOffset;

DebugLogFromEvent.LogOffset = getRealOffset(0x5A6F10);
DebugLogFromEvent.Log = (void(*)(void*, monoString*))DebugLogFromEvent.LogOffset;

DebugLogFromEvent.LogFloatOffset = getRealOffset(0x5A6FBC);
DebugLogFromEvent.LogFloat = (void(*)(void*, float))DebugLogFromEvent.LogFloatOffset;

DebugLogFromEvent.LogFloat1Offset = getRealOffset(0x5A707C);
DebugLogFromEvent.LogFloat1 = (void(*)(void*, Vector2))DebugLogFromEvent.LogFloat1Offset;

DontDestroyOnLoadSetter.AwakeOffset = getRealOffset(0x67B9C8);
DontDestroyOnLoadSetter.Awake = (void(*)(void*))DontDestroyOnLoadSetter.AwakeOffset;

FindRenderersByMaterial.OnGUIOffset = getRealOffset(0x71DAE0);
FindRenderersByMaterial.OnGUI = (void(*)(void*))FindRenderersByMaterial.OnGUIOffset;

GlobalDetectionManager.OnInjectionDetectedOffset = getRealOffset(0x5FFD04);
GlobalDetectionManager.OnInjectionDetected = (void(*)(void*))GlobalDetectionManager.OnInjectionDetectedOffset;

GlobalDetectionManager.OnObscuredDetectedOffset = getRealOffset(0x5FFDAC);
GlobalDetectionManager.OnObscuredDetected = (void(*)(void*))GlobalDetectionManager.OnObscuredDetectedOffset;

GlobalDetectionManager.OnSpeedDetectedOffset = getRealOffset(0x5FFDD4);
GlobalDetectionManager.OnSpeedDetected = (void(*)(void*))GlobalDetectionManager.OnSpeedDetectedOffset;

GlobalDetectionManager.OnTimeDetectedOffset = getRealOffset(0x5FFDFC);
GlobalDetectionManager.OnTimeDetected = (void(*)(void*))GlobalDetectionManager.OnTimeDetectedOffset;

GlobalDetectionManager.OnWallDetectedOffset = getRealOffset(0x5FFE24);
GlobalDetectionManager.OnWallDetected = (void(*)(void*))GlobalDetectionManager.OnWallDetectedOffset;

GlobalDetectionManager.LogCheatOffset = getRealOffset(0x5FFD2C);
GlobalDetectionManager.LogCheat = (void *(*)(void*, int))GlobalDetectionManager.LogCheatOffset;

MainMenuMessage.StartOffset = getRealOffset(0x9F84D8);
MainMenuMessage.Start = (void(*)(void*))MainMenuMessage.StartOffset;

MainMenuMessage.UpdateOffset = getRealOffset(0x9F84E4);
MainMenuMessage.Update = (void(*)(void*))MainMenuMessage.UpdateOffset;

NativeLogs.PrintNativeLogOffset = getRealOffset(0x52B984);
NativeLogs.PrintNativeLog = (void(*)(monoString*))NativeLogs.PrintNativeLogOffset;

NativeLogs.AwakeOffset = getRealOffset(0x52B988);
NativeLogs.Awake = (void(*)(void*))NativeLogs.AwakeOffset;

PlayerPrefsRemover.StartOffset = getRealOffset(0x4BECA4);
PlayerPrefsRemover.Start = (void(*)(void*))PlayerPrefsRemover.StartOffset;

HashablePrimitive.GetRepresentationOffset = getRealOffset(0x7F2138);
HashablePrimitive.GetRepresentation = (int(*)(void *))HashablePrimitive.GetRepresentationOffset;

HashFloat.op_ImplicitOffset = getRealOffset(0x7F1DD4);
HashFloat.op_Implicit = (void *(*)(float))HashFloat.op_ImplicitOffset;

HashFloat.op_Implicit1Offset = getRealOffset(0x7F1E74);
HashFloat.op_Implicit1 = (float(*)(void *))HashFloat.op_Implicit1Offset;

HashFloat.GetRepresentationOffset = getRealOffset(0x7F1E58);
HashFloat.GetRepresentation = (int(*)(float))HashFloat.GetRepresentationOffset;

HashFloat.ToStringOffset = getRealOffset(0x7F1EA4);
HashFloat.ToString = (monoString *(*)(void*))HashFloat.ToStringOffset;

HashFloat.SetAsCheatOffset = getRealOffset(0x7F1EF8);
HashFloat.SetAsCheat = (void(*)(void*, float))HashFloat.SetAsCheatOffset;

HashBool.op_ImplicitOffset = getRealOffset(0x7F1CD0);
HashBool.op_Implicit = (void *(*)(bool))HashBool.op_ImplicitOffset;

HashBool.op_Implicit1Offset = getRealOffset(0x7EB750);
HashBool.op_Implicit1 = (bool(*)(void *))HashBool.op_Implicit1Offset;

HashBool.GetRepresentationOffset = getRealOffset(0x7F1D50);
HashBool.GetRepresentation = (int(*)(bool))HashBool.GetRepresentationOffset;

HashBool.ToStringOffset = getRealOffset(0x7F1D6C);
HashBool.ToString = (monoString *(*)(void*))HashBool.ToStringOffset;

HashInt.op_ImplicitOffset = getRealOffset(0x7F1FEC);
HashInt.op_Implicit = (void *(*)(int))HashInt.op_ImplicitOffset;

HashInt.op_Implicit1Offset = getRealOffset(0x7F2058);
HashInt.op_Implicit1 = (int(*)(void *))HashInt.op_Implicit1Offset;

HashInt.ToStringOffset = getRealOffset(0x7F2068);
HashInt.ToString = (monoString *(*)(void*))HashInt.ToStringOffset;

SceneManagementUtil.NameFromIndexOffset = getRealOffset(0x6153CC);
SceneManagementUtil.NameFromIndex = (monoString *(*)(int))SceneManagementUtil.NameFromIndexOffset;

SceneManagementUtil.SceneIndexFromNameOffset = getRealOffset(0x615484);
SceneManagementUtil.SceneIndexFromName = (int(*)(monoString*))SceneManagementUtil.SceneIndexFromNameOffset;

ScreenLogger.LogOffset = getRealOffset(0x6163C0);
ScreenLogger.Log = (void(*)(void*, monoString*, monoString*, float))ScreenLogger.LogOffset;

ScreenLogger.UpdateOffset = getRealOffset(0x6165C0);
ScreenLogger.Update = (void(*)(void*))ScreenLogger.UpdateOffset;

ScreenLogger.OnGUIOffset = getRealOffset(0x6166C0);
ScreenLogger.OnGUI = (void(*)(void*))ScreenLogger.OnGUIOffset;

ScreenLogger.GetConsoleOffset = getRealOffset(0x6169E8);
ScreenLogger.GetConsole = (void *(*)())ScreenLogger.GetConsoleOffset;

ScrollRectExtensions.GetSnapToPositionToBringChildIntoViewOffset = getRealOffset(0x616CD4);
ScrollRectExtensions.GetSnapToPositionToBringChildIntoView = (Vector2 (*)(void *, void *))ScrollRectExtensions.GetSnapToPositionToBringChildIntoViewOffset;

StoreIDGameObjectDisabler.AwakeOffset = getRealOffset(0x587A9C);
StoreIDGameObjectDisabler.Awake = (void(*)(void*))StoreIDGameObjectDisabler.AwakeOffset;

StoreIDGameObjectDisabler.UpdateOffset = getRealOffset(0x587C5C);
StoreIDGameObjectDisabler.Update = (void(*)(void*))StoreIDGameObjectDisabler.UpdateOffset;

StoreIDPriceModifier.AwakeOffset = getRealOffset(0x587D9C);
StoreIDPriceModifier.Awake = (void(*)(void*))StoreIDPriceModifier.AwakeOffset;

FindWordInPhraseScore.GetScoreOffset = getRealOffset(0x71DDB4);
FindWordInPhraseScore.GetScore = (int(*)(monoString*, monoString*))FindWordInPhraseScore.GetScoreOffset;

GameModes.GetShortFormOffset = getRealOffset(0x5FA730);
GameModes.GetShortForm = (monoString *(*)(monoString*))GameModes.GetShortFormOffset;

StringExtensionMethods.ReplaceFirstOffset = getRealOffset(0x588214);
StringExtensionMethods.ReplaceFirst = (monoString *(*)(monoString*, monoString*, monoString*))StringExtensionMethods.ReplaceFirstOffset;

RoleHandler.GetRoleOffset = getRealOffset(0x609624);
RoleHandler.GetRole = (monoString *(*)(int))RoleHandler.GetRoleOffset;

RoleHandler.GetRoleTagOffset = getRealOffset(0x6096CC);
RoleHandler.GetRoleTag = (monoString *(*)(int))RoleHandler.GetRoleTagOffset;

RoleHandler.GetCreatorTagOffset = getRealOffset(0x609774);
RoleHandler.GetCreatorTag = (monoString *(*)(int))RoleHandler.GetCreatorTagOffset;

RoleHandler.IsModOffset = getRealOffset(0x60981C);
RoleHandler.IsMod = (bool(*)(int))RoleHandler.IsModOffset;

RoleHandler.IsRestarterOffset = getRealOffset(0x609840);
RoleHandler.IsRestarter = (bool(*)(int))RoleHandler.IsRestarterOffset;

SwipeDetector.AwakeOffset = getRealOffset(0x58B8C8);
SwipeDetector.Awake = (void(*)(void*))SwipeDetector.AwakeOffset;

SwipeDetector.SwipeOffset = getRealOffset(0x58B8CC);
SwipeDetector.Swipe = (void(*)(void*))SwipeDetector.SwipeOffset;

SwipeDetector.UpdateOffset = getRealOffset(0x58BC5C);
SwipeDetector.Update = (void(*)(void*))SwipeDetector.UpdateOffset;

TextureScale.PointOffset = getRealOffset(0x5CBA44);
TextureScale.Point = (void(*)(void *, int, int))TextureScale.PointOffset;

TextureScale.BilinearOffset = getRealOffset(0x5CBF2C);
TextureScale.Bilinear = (void(*)(void *, int, int))TextureScale.BilinearOffset;

TextureScale.ThreadedScaleOffset = getRealOffset(0x5CBA60);
TextureScale.ThreadedScale = (void(*)(void *, int, int, bool))TextureScale.ThreadedScaleOffset;

TextureScale.ColorLerpUnclampedOffset = getRealOffset(0x5CC6A0);
TextureScale.ColorLerpUnclamped = (Color (*)(Color, Color, float))TextureScale.ColorLerpUnclampedOffset;

TransformExtension.DeleteAllChildrenOffset = getRealOffset(0x5DA134);
TransformExtension.DeleteAllChildren = (void(*)(void *))TransformExtension.DeleteAllChildrenOffset;

VIPModeKillsOnTitleAdapter.AwakeOffset = getRealOffset(0x893444);
VIPModeKillsOnTitleAdapter.Awake = (void(*)(void*))VIPModeKillsOnTitleAdapter.AwakeOffset;

VIPModeKillsOnTitleAdapter.UpdateTextOffset = getRealOffset(0x893448);
VIPModeKillsOnTitleAdapter.UpdateText = (void(*)(void*))VIPModeKillsOnTitleAdapter.UpdateTextOffset;

WallhackSingleCheatReport.OnDrawGizmosOffset = getRealOffset(0x8AA548);
WallhackSingleCheatReport.OnDrawGizmos = (void(*)(void*))WallhackSingleCheatReport.OnDrawGizmosOffset;

WebGLLink.OpenLinkJSPluginOffset = getRealOffset(0x8B7834);
WebGLLink.OpenLinkJSPlugin = (void(*)(void*, monoString*))WebGLLink.OpenLinkJSPluginOffset;

WebGLVersionGameObjectDisabler.AwakeOffset = getRealOffset(0x8B7840);
WebGLVersionGameObjectDisabler.Awake = (void(*)(void*))WebGLVersionGameObjectDisabler.AwakeOffset;

WebGLVersionGameObjectDisabler.UpdateOffset = getRealOffset(0x8B7844);
WebGLVersionGameObjectDisabler.Update = (void(*)(void*))WebGLVersionGameObjectDisabler.UpdateOffset;

YouAreTheVIPMessageHelper.UpdateLocalPlayerAsRegularOffset = getRealOffset(0x93501C);
YouAreTheVIPMessageHelper.UpdateLocalPlayerAsRegular = (void(*)(void*))YouAreTheVIPMessageHelper.UpdateLocalPlayerAsRegularOffset;

VIPModeOrganizer.UpdateOnMasterClientOffset = getRealOffset(0x8936EC);
VIPModeOrganizer.UpdateOnMasterClient = (bool(*)(void*))VIPModeOrganizer.UpdateOnMasterClientOffset;

VIPModeOrganizer.UpdateOnSubordinateClientOffset = getRealOffset(0x89448C);
VIPModeOrganizer.UpdateOnSubordinateClient = (bool(*)(void*))VIPModeOrganizer.UpdateOnSubordinateClientOffset;

VIPModeOrganizer.UpdateMinimapOffset = getRealOffset(0x893C14);
VIPModeOrganizer.UpdateMinimap = (void(*)(void*))VIPModeOrganizer.UpdateMinimapOffset;

VIPModeOrganizer.GetRegularKillScoreOffset = getRealOffset(0x894B20);
VIPModeOrganizer.GetRegularKillScore = (int(*)(void*))VIPModeOrganizer.GetRegularKillScoreOffset;

VIPModeOrganizer.GetVIPKillScoreOffset = getRealOffset(0x894BEC);
VIPModeOrganizer.GetVIPKillScore = (int(*)(void*))VIPModeOrganizer.GetVIPKillScoreOffset;

VIPModeOrganizer.GetWinScoreOffset = getRealOffset(0x894CB8);
VIPModeOrganizer.GetWinScore = (int(*)())VIPModeOrganizer.GetWinScoreOffset;

VIPModeOrganizer.GetGameLenghtOffset = getRealOffset(0x894CC0);
VIPModeOrganizer.GetGameLenght = (int(*)())VIPModeOrganizer.GetGameLenghtOffset;

VIPModeOrganizer.IsVIPOffset = getRealOffset(0x894CC8);
VIPModeOrganizer.IsVIP = (bool(*)(void*, int))VIPModeOrganizer.IsVIPOffset;

TeamBasedVipGameType.GetRegularKillScoreOffset = getRealOffset(0x5C88F8);
TeamBasedVipGameType.GetRegularKillScore = (int(*)(void*))TeamBasedVipGameType.GetRegularKillScoreOffset;

TeamBasedVipGameType.GetVIPKillScoreOffset = getRealOffset(0x5C8900);
TeamBasedVipGameType.GetVIPKillScore = (int(*)(void*))TeamBasedVipGameType.GetVIPKillScoreOffset;

TeamBasedVipGameType.ScoreVIPKillOffset = getRealOffset(0x5C8908);
TeamBasedVipGameType.ScoreVIPKill = (void(*)(void*, void *))TeamBasedVipGameType.ScoreVIPKillOffset;

TeamBasedVipGameType.CreateVIPDataOffset = getRealOffset(0x5C9424);
TeamBasedVipGameType.CreateVIPData = (void *(*)(void*, void *))TeamBasedVipGameType.CreateVIPDataOffset;

TeamBasedVipGameType.GetVIPColorOffset = getRealOffset(0x5C94F8);
TeamBasedVipGameType.GetVIPColor = (Color (*)(void*, void *))TeamBasedVipGameType.GetVIPColorOffset;

VehicleFlyby.AwakeOffset = getRealOffset(0x895F88);
VehicleFlyby.Awake = (void(*)(void*))VehicleFlyby.AwakeOffset;

VehicleFlyby.StartOffset = getRealOffset(0x896020);
VehicleFlyby.Start = (void(*)(void*))VehicleFlyby.StartOffset;

VehicleFlyby.OnDestroyOffset = getRealOffset(0x8960D0);
VehicleFlyby.OnDestroy = (void(*)(void*))VehicleFlyby.OnDestroyOffset;

VehicleFlyby.UpdateFastOffset = getRealOffset(0x896234);
VehicleFlyby.UpdateFast = (void(*)(void*))VehicleFlyby.UpdateFastOffset;

VelocityTracker.StartOffset = getRealOffset(0x896B10);
VelocityTracker.Start = (void(*)(void*))VelocityTracker.StartOffset;

VelocityTracker.UpdateCumulativeMovingAverageVelOffset = getRealOffset(0x896B5C);
VelocityTracker.UpdateCumulativeMovingAverageVel = (float(*)(void*, float))VelocityTracker.UpdateCumulativeMovingAverageVelOffset;

VelocityTracker.UpdateOffset = getRealOffset(0x896B94);
VelocityTracker.Update = (void(*)(void*))VelocityTracker.UpdateOffset;

VersionDisplay.AwakeOffset = getRealOffset(0x896E24);
VersionDisplay.Awake = (void(*)(void*))VersionDisplay.AwakeOffset;

VersionHandler.get_BuildVersionOffset = getRealOffset(0x89718C);
VersionHandler.get_BuildVersion = (monoString *(*)(void*))VersionHandler.get_BuildVersionOffset;

VersionHandler.get_phpSecretKeyOffset = getRealOffset(0x8971C0);
VersionHandler.get_phpSecretKey = (monoString *(*)())VersionHandler.get_phpSecretKeyOffset;

VersionHandler.get_phpSecretOffset = getRealOffset(0x8972FC);
VersionHandler.get_phpSecret = (monoString *(*)())VersionHandler.get_phpSecretOffset;

VersionHandler.get_InstanceOffset = getRealOffset(0x896F5C);
VersionHandler.get_Instance = (void *(*)())VersionHandler.get_InstanceOffset;

VersionHandler.get_betaOffset = getRealOffset(0x8976BC);
VersionHandler.get_beta = (bool(*)())VersionHandler.get_betaOffset;

VersionHandler.set_betaOffset = getRealOffset(0x8977A0);
VersionHandler.set_beta = (void(*)(bool))VersionHandler.set_betaOffset;

VersionHandler.SetDefaultsOffset = getRealOffset(0x897438);
VersionHandler.SetDefaults = (void(*)(void*))VersionHandler.SetDefaultsOffset;

VersionHandler.AwakeOffset = getRealOffset(0x89781C);
VersionHandler.Awake = (void(*)(void*))VersionHandler.AwakeOffset;

VersionHandler.OnLevelWasLoadedOffset = getRealOffset(0x8978FC);
VersionHandler.OnLevelWasLoaded = (void(*)(void*))VersionHandler.OnLevelWasLoadedOffset;

VersionHandler.OnDestroyOffset = getRealOffset(0x89797C);
VersionHandler.OnDestroy = (void(*)(void*))VersionHandler.OnDestroyOffset;

VirtualJoystickRegion.DisableJoystickOffset = getRealOffset(0x899D34);
VirtualJoystickRegion.DisableJoystick = (void(*)(void*))VirtualJoystickRegion.DisableJoystickOffset;

VirtualJoystickRegion.EnableJoystickOffset = getRealOffset(0x899E5C);
VirtualJoystickRegion.EnableJoystick = (void(*)(void*))VirtualJoystickRegion.EnableJoystickOffset;

VirtualJoystickRegion.ResetJoystickOffset = getRealOffset(0x899D40);
VirtualJoystickRegion.ResetJoystick = (void(*)(void*))VirtualJoystickRegion.ResetJoystickOffset;

VirtualJoystickRegion.GetRadiusOffset = getRealOffset(0x899E68);
VirtualJoystickRegion.GetRadius = (Vector2 (*)(void*, Vector2, Vector2, float))VirtualJoystickRegion.GetRadiusOffset;

VirtualJoystickRegion.GetPositionOffset = getRealOffset(0x899FC4);
VirtualJoystickRegion.GetPosition = (void(*)(void*))VirtualJoystickRegion.GetPositionOffset;

VirtualJoystickRegion.GetConstraintsOffset = getRealOffset(0x89A34C);
VirtualJoystickRegion.GetConstraints = (void(*)(void*))VirtualJoystickRegion.GetConstraintsOffset;

VirtualJoystickRegion.GetControlsOffset = getRealOffset(0x89A5A8);
VirtualJoystickRegion.GetControls = (Vector2 (*)(void*, Vector2, Vector2))VirtualJoystickRegion.GetControlsOffset;

VirtualJoystickRegion.AwakeOffset = getRealOffset(0x89A6A4);
VirtualJoystickRegion.Awake = (void(*)(void*))VirtualJoystickRegion.AwakeOffset;

VirtualJoystickRegion.UpdateOffset = getRealOffset(0x89AAF0);
VirtualJoystickRegion.Update = (void(*)(void*))VirtualJoystickRegion.UpdateOffset;

KillVolume.OnTriggerEnterOffset = getRealOffset(0x652EF0);
KillVolume.OnTriggerEnter = (void(*)(void*, void *))KillVolume.OnTriggerEnterOffset;

VoteToKickButton.AwakeOffset = getRealOffset(0x89C10C);
VoteToKickButton.Awake = (void(*)(void*))VoteToKickButton.AwakeOffset;

VoteToKickButton.StartOffset = getRealOffset(0x89C1A0);
VoteToKickButton.Start = (void(*)(void*))VoteToKickButton.StartOffset;

VoteToKickButton.RefreshVisibleOffset = getRealOffset(0x89C288);
VoteToKickButton.RefreshVisible = (void(*)(void*, bool))VoteToKickButton.RefreshVisibleOffset;

VoteToKickButton.DisplayVoteWidgetOffset = getRealOffset(0x89C290);
VoteToKickButton.DisplayVoteWidget = (void(*)(void*, float, bool))VoteToKickButton.DisplayVoteWidgetOffset;

VoteToKickButton.UpdateFastOffset = getRealOffset(0x89C500);
VoteToKickButton.UpdateFast = (void(*)(void*))VoteToKickButton.UpdateFastOffset;

VoteToKickButton.UpdateVotesOffset = getRealOffset(0x89CA78);
VoteToKickButton.UpdateVotes = (void(*)(void*, int, int))VoteToKickButton.UpdateVotesOffset;

VoteToKickButton.UpdateVotes1Offset = getRealOffset(0x89C2FC);
VoteToKickButton.UpdateVotes1 = (void(*)(void*, int, int, bool))VoteToKickButton.UpdateVotes1Offset;

VoteToKickButton.OnPointerUpOffset = getRealOffset(0x89CA94);
VoteToKickButton.OnPointerUp = (void(*)(void*, void *))VoteToKickButton.OnPointerUpOffset;

VoteToKickButton.OnDestroyOffset = getRealOffset(0x89CBAC);
VoteToKickButton.OnDestroy = (void(*)(void*))VoteToKickButton.OnDestroyOffset;

VoteToKickButton.FormatTimeOffset = getRealOffset(0x89C438);
VoteToKickButton.FormatTime = (monoString *(*)(void*, float))VoteToKickButton.FormatTimeOffset;

WeaponBalanceControl.AwakeOffset = getRealOffset(0x8AAD9C);
WeaponBalanceControl.Awake = (void(*)(void*))WeaponBalanceControl.AwakeOffset;

WeaponBalanceControl.OnSceneLoadedOffset = getRealOffset(0x8AAEA4);
WeaponBalanceControl.OnSceneLoaded = (void(*)(void*, int, int))WeaponBalanceControl.OnSceneLoadedOffset;

WeaponBalanceControl.OnBalancedStatsObtainedOffset = getRealOffset(0x8AAEA8);
WeaponBalanceControl.OnBalancedStatsObtained = (void(*)(void*))WeaponBalanceControl.OnBalancedStatsObtainedOffset;

WeaponBalanceControl.OnBalancedStatsProgressOffset = getRealOffset(0x8AAF74);
WeaponBalanceControl.OnBalancedStatsProgress = (void(*)(void*, monoString*))WeaponBalanceControl.OnBalancedStatsProgressOffset;

WeaponBalanceControl.OnBalancedStatsErrorOffset = getRealOffset(0x8AB024);
WeaponBalanceControl.OnBalancedStatsError = (void(*)(void*, monoString*))WeaponBalanceControl.OnBalancedStatsErrorOffset;

WeaponBalanceControl.GetFloatValueOffset = getRealOffset(0x8AC300);
WeaponBalanceControl.GetFloatValue = (float(*)(monoString*))WeaponBalanceControl.GetFloatValueOffset;

WeaponBalanceControl.GetControlOffset = getRealOffset(0x8AC3B8);
WeaponBalanceControl.GetControl = (void *(*)())WeaponBalanceControl.GetControlOffset;

WeaponBalancer.GetBalancerOffset = getRealOffset(0x8AC6AC);
WeaponBalancer.GetBalancer = (void *(*)())WeaponBalancer.GetBalancerOffset;

WeaponBalancer.OnEnableOffset = getRealOffset(0x8ACD3C);
WeaponBalancer.OnEnable = (void(*)(void*))WeaponBalancer.OnEnableOffset;

WeaponBalancer.OnDisableOffset = getRealOffset(0x8ACE9C);
WeaponBalancer.OnDisable = (void(*)(void*))WeaponBalancer.OnDisableOffset;

WeaponBalancer.DefaultValueOffset = getRealOffset(0x8AD01C);
WeaponBalancer.DefaultValueStrOffset = getRealOffset(0x8AD1A4);
WeaponBalancer.DefaultValueStr = (monoString *(*)(void*, void *))WeaponBalancer.DefaultValueStrOffset;

WeaponBalancer.OnRawResponseOffset = getRealOffset(0x8AE174);
WeaponBalancer.OnRawResponse = (void(*)(void*, monoString*))WeaponBalancer.OnRawResponseOffset;

WeaponResourceHandler.AwakeOffset = getRealOffset(0x8B3FF0);
WeaponResourceHandler.Awake = (void(*)(void*))WeaponResourceHandler.AwakeOffset;

WeaponResourceHandler.ApplyTexturesOffset = getRealOffset(0x8B40EC);
WeaponResourceHandler.ApplyTextures = (void(*)(void*, monoString*, void *))WeaponResourceHandler.ApplyTexturesOffset;

WeaponResourceHandler.LoadResourcesOffset = getRealOffset(0x8B4288);
WeaponResourceHandler.LoadResources = (void(*)(void*))WeaponResourceHandler.LoadResourcesOffset;

WeaponResourceHandler.UnloadResourcesOffset = getRealOffset(0x8B44DC);
WeaponResourceHandler.UnloadResources = (void(*)(void*))WeaponResourceHandler.UnloadResourcesOffset;

WeaponStatsUI.AwakeOffset = getRealOffset(0x8B5F10);
WeaponStatsUI.Awake = (void(*)(void*))WeaponStatsUI.AwakeOffset;

WeaponStatsUI.SetPriceOffset = getRealOffset(0x8B5F74);
WeaponStatsUI.SetPrice = (void(*)(void*, int))WeaponStatsUI.SetPriceOffset;

WeaponStatsUI.SetDamageOffset = getRealOffset(0x8B5FC4);
WeaponStatsUI.SetDamage = (void(*)(void*, float))WeaponStatsUI.SetDamageOffset;

WeaponStatsUI.SetAccuracyOffset = getRealOffset(0x8B60D0);
WeaponStatsUI.SetAccuracy = (void(*)(void*, float, float))WeaponStatsUI.SetAccuracyOffset;

WeaponStatsUI.SetRangeOffset = getRealOffset(0x8B61E4);
WeaponStatsUI.SetRange = (void(*)(void*, float))WeaponStatsUI.SetRangeOffset;

WeaponStatsUI.SetStabilityOffset = getRealOffset(0x8B62F0);
WeaponStatsUI.SetStability = (void(*)(void*, Vector2, float))WeaponStatsUI.SetStabilityOffset;

WeaponStatsUI.SetHipFireOffset = getRealOffset(0x8B6418);
WeaponStatsUI.SetHipFire = (void(*)(void*, float, float))WeaponStatsUI.SetHipFireOffset;

WeaponStatsUI.SetRateOfFireOffset = getRealOffset(0x8B652C);
WeaponStatsUI.SetRateOfFire = (void(*)(void*, int))WeaponStatsUI.SetRateOfFireOffset;

WeaponStatsUI.OnDestroyOffset = getRealOffset(0x8B65C4);
WeaponStatsUI.OnDestroy = (void(*)(void*))WeaponStatsUI.OnDestroyOffset;

CrazyEventsController.AwakeOffset = getRealOffset(0x823BA8);
CrazyEventsController.Awake = (void(*)(void*))CrazyEventsController.AwakeOffset;

CrazyEventsController.InitOffset = getRealOffset(0x823C24);
CrazyEventsController.Init = (void(*)(void*))CrazyEventsController.InitOffset;

CrazyEventsController.GameplayStartOffset = getRealOffset(0x823CC8);
CrazyEventsController.GameplayStart = (void(*)(void*))CrazyEventsController.GameplayStartOffset;

CrazyEventsController.GameplayStopOffset = getRealOffset(0x823DAC);
CrazyEventsController.GameplayStop = (void(*)(void*))CrazyEventsController.GameplayStopOffset;

CrazyEventsController.HappyTimeOffset = getRealOffset(0x823E90);
CrazyEventsController.HappyTime = (void(*)(void*, float))CrazyEventsController.HappyTimeOffset;

GenericWebGLEvents.set_IsGameplayStartedOffset = getRealOffset(0x5FF9B0);
GenericWebGLEvents.set_IsGameplayStarted = (void(*)(void*, bool))GenericWebGLEvents.set_IsGameplayStartedOffset;

GenericWebGLEvents.get_IsGameplayStartedOffset = getRealOffset(0x5FF9B8);
GenericWebGLEvents.get_IsGameplayStarted = (bool(*)(void*))GenericWebGLEvents.get_IsGameplayStartedOffset;

GenericWebGLEvents.AwakeOffset = getRealOffset(0x5FF9C0);
GenericWebGLEvents.Awake = (void(*)(void*))GenericWebGLEvents.AwakeOffset;

PokiEventsController.AwakeOffset = getRealOffset(0x70BAE0);
PokiEventsController.Awake = (void(*)(void*))PokiEventsController.AwakeOffset;

PokiEventsController.InitOffset = getRealOffset(0x70BB5C);
PokiEventsController.Init = (void(*)(void*))PokiEventsController.InitOffset;

PokiEventsController.GameplayStartOffset = getRealOffset(0x70BC88);
PokiEventsController.GameplayStart = (void(*)(void*))PokiEventsController.GameplayStartOffset;

PokiEventsController.GameplayStopOffset = getRealOffset(0x70BDC0);
PokiEventsController.GameplayStop = (void(*)(void*))PokiEventsController.GameplayStopOffset;

PokiEventsController.HappyTimeOffset = getRealOffset(0x70BEF8);
PokiEventsController.HappyTime = (void(*)(void*, float))PokiEventsController.HappyTimeOffset;

XsollaPaystationController.OpenPayStationOffset = getRealOffset(0x933934);
XsollaPaystationController.OpenPayStation = (void(*)(void*, int))XsollaPaystationController.OpenPayStationOffset;

XsollaPaystationController.OnTokenSuccessOffset = getRealOffset(0x933C40);
XsollaPaystationController.OnTokenSuccess = (void(*)(void*, monoString*))XsollaPaystationController.OnTokenSuccessOffset;

XsollaPaystationController.OnTokenErrorOffset = getRealOffset(0x933C44);
XsollaPaystationController.OnTokenError = (void(*)(void*, monoString*))XsollaPaystationController.OnTokenErrorOffset;

XsollaPaystationController.PurchaseTier1CreditsOffset = getRealOffset(0x933CE0);
XsollaPaystationController.PurchaseTier1Credits = (void(*)(void*))XsollaPaystationController.PurchaseTier1CreditsOffset;

XsollaPaystationController.PurchaseTier2CreditsOffset = getRealOffset(0x933CEC);
XsollaPaystationController.PurchaseTier2Credits = (void(*)(void*))XsollaPaystationController.PurchaseTier2CreditsOffset;

XsollaPaystationController.PurchaseTier3CreditsOffset = getRealOffset(0x933CF8);
XsollaPaystationController.PurchaseTier3Credits = (void(*)(void*))XsollaPaystationController.PurchaseTier3CreditsOffset;

XsollaPurchaseVerifier.get_InstanceOffset = getRealOffset(0x933D1C);
XsollaPurchaseVerifier.get_Instance = (void *(*)())XsollaPurchaseVerifier.get_InstanceOffset;

XsollaPurchaseVerifier.CR_VerifyPurchaseOffset = getRealOffset(0x933EE4);
XsollaPurchaseVerifier.CR_VerifyPurchase = (void *(*)(void*, float))XsollaPurchaseVerifier.CR_VerifyPurchaseOffset;

XsollaPurchaseVerifier.VerifyPurchaseStatusOffset = getRealOffset(0x933FA8);
XsollaPurchaseVerifier.VerifyPurchaseStatus = (void(*)(void*))XsollaPurchaseVerifier.VerifyPurchaseStatusOffset;

XsollaPurchaseVerifier.OnChangedSceneOffset = getRealOffset(0x9340EC);
XsollaPurchaseVerifier.OnChangedScene = (void(*)(void*, int, int))XsollaPurchaseVerifier.OnChangedSceneOffset;

XsollaPurchaseVerifier.OnSuccessOffset = getRealOffset(0x934344);
XsollaPurchaseVerifier.OnSuccess = (void(*)(void*, monoString*))XsollaPurchaseVerifier.OnSuccessOffset;

XsollaPurchaseVerifier.OnErrorOffset = getRealOffset(0x934630);
XsollaPurchaseVerifier.OnError = (void(*)(void*, monoString*))XsollaPurchaseVerifier.OnErrorOffset;

XPManager.AwakeOffset = getRealOffset(0x8B7E78);
XPManager.Awake = (void(*)(void*))XPManager.AwakeOffset;

XPManager.FillRanksAndMoneyForRanksOffset = getRealOffset(0x8B7D2C);
XPManager.FillRanksAndMoneyForRanks = (void(*)())XPManager.FillRanksAndMoneyForRanksOffset;

XPManager.IsHighestRankOffset = getRealOffset(0x8B8304);
XPManager.IsHighestRank = (bool(*)(int))XPManager.IsHighestRankOffset;

XPManager.StartOffset = getRealOffset(0x8B839C);
XPManager.Start = (void(*)(void*))XPManager.StartOffset;

XPManager.ShowIncreaseOffset = getRealOffset(0x8B91BC);
XPManager.ShowIncrease = (void(*)(void*))XPManager.ShowIncreaseOffset;

XPManager.UpdateOffset = getRealOffset(0x8B9308);
XPManager.Update = (void(*)(void*))XPManager.UpdateOffset;

XPManager.FinishShowingMovingXPOffset = getRealOffset(0x8B9A5C);
XPManager.FinishShowingMovingXP = (void(*)(void*))XPManager.FinishShowingMovingXPOffset;

XPManager.ShowContinueButtonOffset = getRealOffset(0x8B9AC8);
XPManager.ShowContinueButton = (void(*)(void*))XPManager.ShowContinueButtonOffset;

XPManager.ShowPerkUnlockedOffset = getRealOffset(0x8B98B8);
XPManager.ShowPerkUnlocked = (void(*)(void*, int))XPManager.ShowPerkUnlockedOffset;

XPManager.FinishScalingMoneyTextOffset = getRealOffset(0x8B9B10);
XPManager.FinishScalingMoneyText = (void(*)(void*))XPManager.FinishScalingMoneyTextOffset;

XPManager.FinishShowingUnlockedPerkOffset = getRealOffset(0x8B9B74);
XPManager.FinishShowingUnlockedPerk = (void(*)(void*))XPManager.FinishShowingUnlockedPerkOffset;

XPManager.HideMoneyAndPerkTextOffset = getRealOffset(0x8B9BD8);
XPManager.HideMoneyAndPerkText = (void(*)(void*))XPManager.HideMoneyAndPerkTextOffset;

XPManager.GetMoneyForEarningRankOffset = getRealOffset(0x8B9CF0);
XPManager.GetMoneyForEarningRank = (int(*)(void*, int))XPManager.GetMoneyForEarningRankOffset;

XPManager.GetRankXPLengthOffset = getRealOffset(0x8B97EC);
XPManager.GetRankXPLength = (int(*)(int))XPManager.GetRankXPLengthOffset;

XPManager.GetXPInRankOffset = getRealOffset(0x8B9D34);
XPManager.GetXPInRank = (int(*)(int))XPManager.GetXPInRankOffset;

XPManager.GetPastXPOffset = getRealOffset(0x8B8C48);
XPManager.GetPastXP = (int(*)(void*))XPManager.GetPastXPOffset;

XPManager.GetRankOffset = getRealOffset(0x8B8CCC);
XPManager.GetRank = (int(*)(int))XPManager.GetRankOffset;

XPManager.GetRankFloorCeilOffset = getRealOffset(0x8B8EDC);
XPManager.GetXPOffset = getRealOffset(0x8B9108);
XPManager.GetXP = (int(*)())XPManager.GetXPOffset;

XPManager.addXPOffset = getRealOffset(0x8B9DE0);
XPManager.addXP = (void(*)(void*, int))XPManager.addXPOffset;

XPManager.OnDestroyOffset = getRealOffset(0x8B9EB4);
XPManager.OnDestroy = (void(*)(void*))XPManager.OnDestroyOffset;

XPManager.GetRankTierOffset = getRealOffset(0x8B9FA8);
XPManager.GetRankTier = (int (*)(int))XPManager.GetRankTierOffset;

XPManager.GetAndSaveCurrentRankTierOffset = getRealOffset(0x8BA040);
XPManager.GetAndSaveCurrentRankTier = (void(*)(void*))XPManager.GetAndSaveCurrentRankTierOffset;

XPManager.HasRankTierChangedOffset = getRealOffset(0x8BA138);
XPManager.HasRankTierChanged = (bool(*)(void*))XPManager.HasRankTierChangedOffset;

XPManager.GetCurrentRankTierOffset = getRealOffset(0x8BA0B8);
XPManager.GetCurrentRankTier = (int (*)())XPManager.GetCurrentRankTierOffset;

mainMenuButton.ExitToMainMenuOffset = getRealOffset(0x938840);
mainMenuButton.ExitToMainMenu = (void(*)(void*))mainMenuButton.ExitToMainMenuOffset;

mainMenuButton.OnPointerUpOffset = getRealOffset(0x938844);
mainMenuButton.OnPointerUp = (void(*)(void*, void *))mainMenuButton.OnPointerUpOffset;

openLink.AwakeOffset = getRealOffset(0x157097C);
openLink.Awake = (void(*)(void*))openLink.AwakeOffset;

openLink.OnPointerUpOffset = getRealOffset(0x15709DC);
openLink.OnPointerUp = (void(*)(void*, void *))openLink.OnPointerUpOffset;

openLink.SetURLOffset = getRealOffset(0x1570AF0);
openLink.SetURL = (void(*)(void*, monoString*, monoString*, monoString*))openLink.SetURLOffset;

openLink.OnPointerDownOffset = getRealOffset(0x1570B3C);
openLink.OnPointerDown = (void(*)(void*, void *))openLink.OnPointerDownOffset;

openLink.OpenLinkJSPluginOffset = getRealOffset(0x1570BC0);
openLink.OpenLinkJSPlugin = (void(*)(void*, monoString*))openLink.OpenLinkJSPluginOffset;

openLink.openWindowOffset = getRealOffset(0x1570BC4);
openLink.openWindow = (void(*)(void*, monoString*))openLink.openWindowOffset;

CameraFollow.LateUpdateOffset = getRealOffset(0x6CFA18);
CameraFollow.LateUpdate = (void(*)(void*))CameraFollow.LateUpdateOffset;

DemoUI.StartOffset = getRealOffset(0x5A83EC);
DemoUI.Start = (void(*)(void*))DemoUI.StartOffset;

DemoUI.UpdateOffset = getRealOffset(0x5A844C);
DemoUI.Update = (void(*)(void*))DemoUI.UpdateOffset;

DemoUI.LoadFPSOffset = getRealOffset(0x5A85F4);
DemoUI.LoadFPS = (void(*)(void*))DemoUI.LoadFPSOffset;

DemoUI.LoadTPSOffset = getRealOffset(0x5A864C);
DemoUI.LoadTPS = (void(*)(void*))DemoUI.LoadTPSOffset;

DemoUI.OnTerrainOffset = getRealOffset(0x5A8500);
DemoUI.OnTerrain = (monoString *(*)(void*))DemoUI.OnTerrainOffset;

DemoUI.CurrentTextureOffset = getRealOffset(0x5A8528);
DemoUI.CurrentTexture = (monoString *(*)(void*))DemoUI.CurrentTextureOffset;

SimpleFirstPersonController.StartOffset = getRealOffset(0x624C44);
SimpleFirstPersonController.Start = (void(*)(void*))SimpleFirstPersonController.StartOffset;

SimpleFirstPersonController.UpdateOffset = getRealOffset(0x624D1C);
SimpleFirstPersonController.Update = (void(*)(void*))SimpleFirstPersonController.UpdateOffset;

SimpleFirstPersonController.GroundedOffset = getRealOffset(0x624ED4);
SimpleFirstPersonController.Grounded = (bool(*)(void*))SimpleFirstPersonController.GroundedOffset;

SimpleThirdPersonController.StartOffset = getRealOffset(0x5726D8);
SimpleThirdPersonController.Start = (void(*)(void*))SimpleThirdPersonController.StartOffset;

SimpleThirdPersonController.UpdateOffset = getRealOffset(0x572774);
SimpleThirdPersonController.Update = (void(*)(void*))SimpleThirdPersonController.UpdateOffset;

SimpleThirdPersonController.UpdateAnimatorValuesOffset = getRealOffset(0x572848);
SimpleThirdPersonController.UpdateAnimatorValues = (void(*)(void*))SimpleThirdPersonController.UpdateAnimatorValuesOffset;

SmartFootstepSystem.StartOffset = getRealOffset(0x575C58);
SmartFootstepSystem.Start = (void(*)(void*))SmartFootstepSystem.StartOffset;

SmartFootstepSystem.GetTerrainInfoOffset = getRealOffset(0x575C5C);
SmartFootstepSystem.GetTerrainInfo = (void(*)(void*))SmartFootstepSystem.GetTerrainInfoOffset;

SmartFootstepSystem.UpdateOffset = getRealOffset(0x575D54);
SmartFootstepSystem.Update = (void(*)(void*))SmartFootstepSystem.UpdateOffset;

SmartFootstepSystem.FootstepOffset = getRealOffset(0x5765E4);
SmartFootstepSystem.Footstep = (void(*)(void*))SmartFootstepSystem.FootstepOffset;

SmartFootstepSystem.GetTextureMixOffset = getRealOffset(0x57685C);
SmartFootstepSystem.GetMainTextureOffset = getRealOffset(0x576054);
SmartFootstepSystem.GetMainTexture = (int(*)(void*, Vector3))SmartFootstepSystem.GetMainTextureOffset;

SmartFootstepSystem.GetRendererTextureOffset = getRealOffset(0x576100);
SmartFootstepSystem.GetRendererTexture = (void *(*)(void*))SmartFootstepSystem.GetRendererTextureOffset;

UniClipboard.get_boardOffset = getRealOffset(0x5E20D0);
UniClipboard.get_board = (void *(*)())UniClipboard.get_boardOffset;

UniClipboard.SetTextOffset = getRealOffset(0x5E2168);
UniClipboard.SetText = (void(*)(monoString*))UniClipboard.SetTextOffset;

UniClipboard.GetTextOffset = getRealOffset(0x5E2280);
UniClipboard.GetText = (monoString *(*)())UniClipboard.GetTextOffset;

EditorBoard.SetTextOffset = getRealOffset(0x67DCA4);
EditorBoard.SetText = (void(*)(void*, monoString*))EditorBoard.SetTextOffset;

EditorBoard.GetTextOffset = getRealOffset(0x67DCB0);
EditorBoard.GetText = (monoString *(*)(void*))EditorBoard.GetTextOffset;

AndroidBoard.SetTextOffset = getRealOffset(0x83A5CC);
AndroidBoard.SetText = (void(*)(void*, monoString*))AndroidBoard.SetTextOffset;

AndroidBoard.GetTextOffset = getRealOffset(0x83A70C);
AndroidBoard.GetText = (monoString *(*)(void*))AndroidBoard.GetTextOffset;

UniWebViewInterface.SetLogLevelOffset = getRealOffset(0xB31368);
UniWebViewInterface.SetLogLevel = (void(*)(int))UniWebViewInterface.SetLogLevelOffset;

UniWebViewInterface.InitOffset = getRealOffset(0xB314AC);
UniWebViewInterface.Init = (void(*)(monoString*, int, int, int, int))UniWebViewInterface.InitOffset;

UniWebViewInterface.DestroyOffset = getRealOffset(0xB3175C);
UniWebViewInterface.Destroy = (void(*)(monoString*))UniWebViewInterface.DestroyOffset;

UniWebViewInterface.LoadOffset = getRealOffset(0xB31878);
UniWebViewInterface.Load = (void(*)(monoString*, monoString*, bool))UniWebViewInterface.LoadOffset;

UniWebViewInterface.LoadHTMLStringOffset = getRealOffset(0xB319E0);
UniWebViewInterface.LoadHTMLString = (void(*)(monoString*, monoString*, monoString*, bool))UniWebViewInterface.LoadHTMLStringOffset;

UniWebViewInterface.ReloadOffset = getRealOffset(0xB31B94);
UniWebViewInterface.Reload = (void(*)(monoString*))UniWebViewInterface.ReloadOffset;

UniWebViewInterface.StopOffset = getRealOffset(0xB31CB0);
UniWebViewInterface.Stop = (void(*)(monoString*))UniWebViewInterface.StopOffset;

UniWebViewInterface.GetUrlOffset = getRealOffset(0xB31DCC);
UniWebViewInterface.GetUrl = (monoString *(*)(monoString*))UniWebViewInterface.GetUrlOffset;

UniWebViewInterface.SetFrameOffset = getRealOffset(0xB31EF4);
UniWebViewInterface.SetFrame = (void(*)(monoString*, int, int, int, int))UniWebViewInterface.SetFrameOffset;

UniWebViewInterface.SetPositionOffset = getRealOffset(0xB321A4);
UniWebViewInterface.SetPosition = (void(*)(monoString*, int, int))UniWebViewInterface.SetPositionOffset;

UniWebViewInterface.SetSizeOffset = getRealOffset(0xB32394);
UniWebViewInterface.SetSize = (void(*)(monoString*, int, int))UniWebViewInterface.SetSizeOffset;

UniWebViewInterface.ShowOffset = getRealOffset(0xB32584);
UniWebViewInterface.Show = (bool(*)(monoString*, bool, int, float, monoString*))UniWebViewInterface.ShowOffset;

UniWebViewInterface.HideOffset = getRealOffset(0xB32850);
UniWebViewInterface.Hide = (bool(*)(monoString*, bool, int, float, monoString*))UniWebViewInterface.HideOffset;

UniWebViewInterface.AnimateToOffset = getRealOffset(0xB32B1C);
UniWebViewInterface.AnimateTo = (bool(*)(monoString*, int, int, int, int, float, float, monoString*))UniWebViewInterface.AnimateToOffset;

UniWebViewInterface.AddJavaScriptOffset = getRealOffset(0xB32EF8);
UniWebViewInterface.AddJavaScript = (void(*)(monoString*, monoString*, monoString*))UniWebViewInterface.AddJavaScriptOffset;

UniWebViewInterface.EvaluateJavaScriptOffset = getRealOffset(0xB330AC);
UniWebViewInterface.EvaluateJavaScript = (void(*)(monoString*, monoString*, monoString*))UniWebViewInterface.EvaluateJavaScriptOffset;

UniWebViewInterface.AddUrlSchemeOffset = getRealOffset(0xB33260);
UniWebViewInterface.AddUrlScheme = (void(*)(monoString*, monoString*))UniWebViewInterface.AddUrlSchemeOffset;

UniWebViewInterface.RemoveUrlSchemeOffset = getRealOffset(0xB333C8);
UniWebViewInterface.RemoveUrlScheme = (void(*)(monoString*, monoString*))UniWebViewInterface.RemoveUrlSchemeOffset;

UniWebViewInterface.AddSslExceptionDomainOffset = getRealOffset(0xB33530);
UniWebViewInterface.AddSslExceptionDomain = (void(*)(monoString*, monoString*))UniWebViewInterface.AddSslExceptionDomainOffset;

UniWebViewInterface.RemoveSslExceptionDomainOffset = getRealOffset(0xB33698);
UniWebViewInterface.RemoveSslExceptionDomain = (void(*)(monoString*, monoString*))UniWebViewInterface.RemoveSslExceptionDomainOffset;

UniWebViewInterface.AddPermissionTrustDomainOffset = getRealOffset(0xB33800);
UniWebViewInterface.AddPermissionTrustDomain = (void(*)(monoString*, monoString*))UniWebViewInterface.AddPermissionTrustDomainOffset;

UniWebViewInterface.RemovePermissionTrustDomainOffset = getRealOffset(0xB33968);
UniWebViewInterface.RemovePermissionTrustDomain = (void(*)(monoString*, monoString*))UniWebViewInterface.RemovePermissionTrustDomainOffset;

UniWebViewInterface.SetHeaderFieldOffset = getRealOffset(0xB33AD0);
UniWebViewInterface.SetHeaderField = (void(*)(monoString*, monoString*, monoString*))UniWebViewInterface.SetHeaderFieldOffset;

UniWebViewInterface.SetUserAgentOffset = getRealOffset(0xB33C84);
UniWebViewInterface.SetUserAgent = (void(*)(monoString*, monoString*))UniWebViewInterface.SetUserAgentOffset;

UniWebViewInterface.GetUserAgentOffset = getRealOffset(0xB33DEC);
UniWebViewInterface.GetUserAgent = (monoString *(*)(monoString*))UniWebViewInterface.GetUserAgentOffset;

UniWebViewInterface.SetAllowAutoPlayOffset = getRealOffset(0xB33F14);
UniWebViewInterface.SetAllowAutoPlay = (void(*)(bool))UniWebViewInterface.SetAllowAutoPlayOffset;

UniWebViewInterface.SetAllowJavaScriptOpenWindowOffset = getRealOffset(0xB34058);
UniWebViewInterface.SetAllowJavaScriptOpenWindow = (void(*)(bool))UniWebViewInterface.SetAllowJavaScriptOpenWindowOffset;

UniWebViewInterface.SetJavaScriptEnabledOffset = getRealOffset(0xB3419C);
UniWebViewInterface.SetJavaScriptEnabled = (void(*)(bool))UniWebViewInterface.SetJavaScriptEnabledOffset;

UniWebViewInterface.CleanCacheOffset = getRealOffset(0xB342E0);
UniWebViewInterface.CleanCache = (void(*)(monoString*))UniWebViewInterface.CleanCacheOffset;

UniWebViewInterface.ClearCookiesOffset = getRealOffset(0xB343FC);
UniWebViewInterface.ClearCookies = (void(*)())UniWebViewInterface.ClearCookiesOffset;

UniWebViewInterface.SetCookieOffset = getRealOffset(0xB3454C);
UniWebViewInterface.SetCookie = (void(*)(monoString*, monoString*, bool))UniWebViewInterface.SetCookieOffset;

UniWebViewInterface.GetCookieOffset = getRealOffset(0xB346B4);
UniWebViewInterface.GetCookie = (monoString *(*)(monoString*, monoString*, bool))UniWebViewInterface.GetCookieOffset;

UniWebViewInterface.ClearHttpAuthUsernamePasswordOffset = getRealOffset(0xB34828);
UniWebViewInterface.ClearHttpAuthUsernamePassword = (void(*)(monoString*, monoString*))UniWebViewInterface.ClearHttpAuthUsernamePasswordOffset;

UniWebViewInterface.SetBackgroundColorOffset = getRealOffset(0xB34990);
UniWebViewInterface.SetBackgroundColor = (void(*)(monoString*, float, float, float, float))UniWebViewInterface.SetBackgroundColorOffset;

UniWebViewInterface.SetWebViewAlphaOffset = getRealOffset(0xB34C54);
UniWebViewInterface.SetWebViewAlpha = (void(*)(monoString*, float))UniWebViewInterface.SetWebViewAlphaOffset;

UniWebViewInterface.GetWebViewAlphaOffset = getRealOffset(0xB34DF0);
UniWebViewInterface.GetWebViewAlpha = (float(*)(monoString*))UniWebViewInterface.GetWebViewAlphaOffset;

UniWebViewInterface.SetShowSpinnerWhileLoadingOffset = getRealOffset(0xB34F18);
UniWebViewInterface.SetShowSpinnerWhileLoading = (void(*)(monoString*, bool))UniWebViewInterface.SetShowSpinnerWhileLoadingOffset;

UniWebViewInterface.SetSpinnerTextOffset = getRealOffset(0xB350A8);
UniWebViewInterface.SetSpinnerText = (void(*)(monoString*, monoString*))UniWebViewInterface.SetSpinnerTextOffset;

UniWebViewInterface.CanGoBackOffset = getRealOffset(0xB35210);
UniWebViewInterface.CanGoBack = (bool(*)(monoString*))UniWebViewInterface.CanGoBackOffset;

UniWebViewInterface.CanGoForwardOffset = getRealOffset(0xB35338);
UniWebViewInterface.CanGoForward = (bool(*)(monoString*))UniWebViewInterface.CanGoForwardOffset;

UniWebViewInterface.GoBackOffset = getRealOffset(0xB35460);
UniWebViewInterface.GoBack = (void(*)(monoString*))UniWebViewInterface.GoBackOffset;

UniWebViewInterface.GoForwardOffset = getRealOffset(0xB3557C);
UniWebViewInterface.GoForward = (void(*)(monoString*))UniWebViewInterface.GoForwardOffset;

UniWebViewInterface.SetOpenLinksInExternalBrowserOffset = getRealOffset(0xB35698);
UniWebViewInterface.SetOpenLinksInExternalBrowser = (void(*)(monoString*, bool))UniWebViewInterface.SetOpenLinksInExternalBrowserOffset;

UniWebViewInterface.SetHorizontalScrollBarEnabledOffset = getRealOffset(0xB35828);
UniWebViewInterface.SetHorizontalScrollBarEnabled = (void(*)(monoString*, bool))UniWebViewInterface.SetHorizontalScrollBarEnabledOffset;

UniWebViewInterface.SetVerticalScrollBarEnabledOffset = getRealOffset(0xB359B8);
UniWebViewInterface.SetVerticalScrollBarEnabled = (void(*)(monoString*, bool))UniWebViewInterface.SetVerticalScrollBarEnabledOffset;

UniWebViewInterface.SetBouncesEnabledOffset = getRealOffset(0xB35B48);
UniWebViewInterface.SetBouncesEnabled = (void(*)(monoString*, bool))UniWebViewInterface.SetBouncesEnabledOffset;

UniWebViewInterface.SetZoomEnabledOffset = getRealOffset(0xB35CD8);
UniWebViewInterface.SetZoomEnabled = (void(*)(monoString*, bool))UniWebViewInterface.SetZoomEnabledOffset;

UniWebViewInterface.SetBackButtonEnabledOffset = getRealOffset(0xB35E68);
UniWebViewInterface.SetBackButtonEnabled = (void(*)(monoString*, bool))UniWebViewInterface.SetBackButtonEnabledOffset;

UniWebViewInterface.SetUseWideViewPortOffset = getRealOffset(0xB35FF8);
UniWebViewInterface.SetUseWideViewPort = (void(*)(monoString*, bool))UniWebViewInterface.SetUseWideViewPortOffset;

UniWebViewInterface.SetLoadWithOverviewModeOffset = getRealOffset(0xB36188);
UniWebViewInterface.SetLoadWithOverviewMode = (void(*)(monoString*, bool))UniWebViewInterface.SetLoadWithOverviewModeOffset;

UniWebViewInterface.SetImmersiveModeEnabledOffset = getRealOffset(0xB36318);
UniWebViewInterface.SetImmersiveModeEnabled = (void(*)(monoString*, bool))UniWebViewInterface.SetImmersiveModeEnabledOffset;

UniWebViewInterface.SetWebContentsDebuggingEnabledOffset = getRealOffset(0xB364A8);
UniWebViewInterface.SetWebContentsDebuggingEnabled = (void(*)(bool))UniWebViewInterface.SetWebContentsDebuggingEnabledOffset;

UniWebViewInterface.ShowWebViewDialogOffset = getRealOffset(0xB365EC);
UniWebViewInterface.ShowWebViewDialog = (void(*)(monoString*, bool))UniWebViewInterface.ShowWebViewDialogOffset;

UniWebViewInterface.PrintOffset = getRealOffset(0xB3677C);
UniWebViewInterface.Print = (void(*)(monoString*))UniWebViewInterface.PrintOffset;

UniWebViewInterface.CheckPlatformOffset = getRealOffset(0xB3129C);
UniWebViewInterface.CheckPlatform = (void(*)())UniWebViewInterface.CheckPlatformOffset;

UniWebViewAndroidStaticListener.AwakeOffset = getRealOffset(0xB309A4);
UniWebViewAndroidStaticListener.Awake = (void(*)(void*))UniWebViewAndroidStaticListener.AwakeOffset;

UniWebViewAndroidStaticListener.OnJavaMessageOffset = getRealOffset(0xB30A30);
UniWebViewAndroidStaticListener.OnJavaMessage = (void(*)(void*, monoString*))UniWebViewAndroidStaticListener.OnJavaMessageOffset;

UniWebView.add_OnPageStartedOffset = getRealOffset(0x5E26D4);
UniWebView.add_OnPageStarted = (void(*)(void*, void *))UniWebView.add_OnPageStartedOffset;

UniWebView.remove_OnPageStartedOffset = getRealOffset(0x5E2784);
UniWebView.remove_OnPageStarted = (void(*)(void*, void *))UniWebView.remove_OnPageStartedOffset;

UniWebView.add_OnPageFinishedOffset = getRealOffset(0x5E2834);
UniWebView.add_OnPageFinished = (void(*)(void*, void *))UniWebView.add_OnPageFinishedOffset;

UniWebView.remove_OnPageFinishedOffset = getRealOffset(0x5E28E4);
UniWebView.remove_OnPageFinished = (void(*)(void*, void *))UniWebView.remove_OnPageFinishedOffset;

UniWebView.add_OnPageErrorReceivedOffset = getRealOffset(0x5E2994);
UniWebView.add_OnPageErrorReceived = (void(*)(void*, void *))UniWebView.add_OnPageErrorReceivedOffset;

UniWebView.remove_OnPageErrorReceivedOffset = getRealOffset(0x5E2A44);
UniWebView.remove_OnPageErrorReceived = (void(*)(void*, void *))UniWebView.remove_OnPageErrorReceivedOffset;

UniWebView.add_OnMessageReceivedOffset = getRealOffset(0x5E2AF4);
UniWebView.add_OnMessageReceived = (void(*)(void*, void *))UniWebView.add_OnMessageReceivedOffset;

UniWebView.remove_OnMessageReceivedOffset = getRealOffset(0x5E2BA4);
UniWebView.remove_OnMessageReceived = (void(*)(void*, void *))UniWebView.remove_OnMessageReceivedOffset;

UniWebView.add_OnShouldCloseOffset = getRealOffset(0x5E2C54);
UniWebView.add_OnShouldClose = (void(*)(void*, void *))UniWebView.add_OnShouldCloseOffset;

UniWebView.remove_OnShouldCloseOffset = getRealOffset(0x5E2D04);
UniWebView.remove_OnShouldClose = (void(*)(void*, void *))UniWebView.remove_OnShouldCloseOffset;

UniWebView.add_OnKeyCodeReceivedOffset = getRealOffset(0x5E2DB4);
UniWebView.add_OnKeyCodeReceived = (void(*)(void*, void *))UniWebView.add_OnKeyCodeReceivedOffset;

UniWebView.remove_OnKeyCodeReceivedOffset = getRealOffset(0x5E2E64);
UniWebView.remove_OnKeyCodeReceived = (void(*)(void*, void *))UniWebView.remove_OnKeyCodeReceivedOffset;

UniWebView.add_OnOreintationChangedOffset = getRealOffset(0x5E2F14);
UniWebView.add_OnOreintationChanged = (void(*)(void*, void *))UniWebView.add_OnOreintationChangedOffset;

UniWebView.remove_OnOreintationChangedOffset = getRealOffset(0x5E2FC4);
UniWebView.remove_OnOreintationChanged = (void(*)(void*, void *))UniWebView.remove_OnOreintationChangedOffset;

UniWebView.get_FrameOffset = getRealOffset(0x5E3074);
UniWebView.get_Frame = (int (*)(void*))UniWebView.get_FrameOffset;

UniWebView.set_FrameOffset = getRealOffset(0x5E3084);
UniWebView.set_Frame = (void(*)(void*, int))UniWebView.set_FrameOffset;

UniWebView.get_ReferenceRectTransformOffset = getRealOffset(0x5E31E4);
UniWebView.get_ReferenceRectTransform = (void *(*)(void*))UniWebView.get_ReferenceRectTransformOffset;

UniWebView.set_ReferenceRectTransformOffset = getRealOffset(0x5E31EC);
UniWebView.set_ReferenceRectTransform = (void(*)(void*, void *))UniWebView.set_ReferenceRectTransformOffset;

UniWebView.get_UrlOffset = getRealOffset(0x5E31F4);
UniWebView.get_Url = (monoString *(*)(void*))UniWebView.get_UrlOffset;

UniWebView.UpdateFrameOffset = getRealOffset(0x5E309C);
UniWebView.UpdateFrame = (void(*)(void*))UniWebView.UpdateFrameOffset;

UniWebView.NextFrameRectOffset = getRealOffset(0x5E3290);
UniWebView.NextFrameRect = (int (*)(void*))UniWebView.NextFrameRectOffset;

UniWebView.AwakeOffset = getRealOffset(0x5E36C0);
UniWebView.Awake = (void(*)(void*))UniWebView.AwakeOffset;

UniWebView.StartOffset = getRealOffset(0x5E396C);
UniWebView.Start = (void(*)(void*))UniWebView.StartOffset;

UniWebView.UpdateOffset = getRealOffset(0x5E39DC);
UniWebView.Update = (void(*)(void*))UniWebView.UpdateOffset;

UniWebView.OnEnableOffset = getRealOffset(0x5E3AE0);
UniWebView.OnEnable = (void(*)(void*))UniWebView.OnEnableOffset;

UniWebView.OnDisableOffset = getRealOffset(0x5E3BB4);
UniWebView.OnDisable = (void(*)(void*))UniWebView.OnDisableOffset;

UniWebView.LoadOffset = getRealOffset(0x5E2494);
UniWebView.Load = (void(*)(void*, monoString*, bool))UniWebView.LoadOffset;

UniWebView.LoadHTMLStringOffset = getRealOffset(0x5E3E1C);
UniWebView.LoadHTMLString = (void(*)(void*, monoString*, monoString*, bool))UniWebView.LoadHTMLStringOffset;

UniWebView.ReloadOffset = getRealOffset(0x5E3EDC);
UniWebView.Reload = (void(*)(void*))UniWebView.ReloadOffset;

UniWebView.StopOffset = getRealOffset(0x5E3F78);
UniWebView.Stop = (void(*)(void*))UniWebView.StopOffset;

UniWebView.get_CanGoBackOffset = getRealOffset(0x5E4014);
UniWebView.get_CanGoBack = (bool(*)(void*))UniWebView.get_CanGoBackOffset;

UniWebView.get_CanGoForwardOffset = getRealOffset(0x5E40B0);
UniWebView.get_CanGoForward = (bool(*)(void*))UniWebView.get_CanGoForwardOffset;

UniWebView.GoBackOffset = getRealOffset(0x5E414C);
UniWebView.GoBack = (void(*)(void*))UniWebView.GoBackOffset;

UniWebView.GoForwardOffset = getRealOffset(0x5E41E8);
UniWebView.GoForward = (void(*)(void*))UniWebView.GoForwardOffset;

UniWebView.SetOpenLinksInExternalBrowserOffset = getRealOffset(0x5E4284);
UniWebView.SetOpenLinksInExternalBrowser = (void(*)(void*, bool))UniWebView.SetOpenLinksInExternalBrowserOffset;

UniWebView.ShowOffset = getRealOffset(0x5E2540);
UniWebView.Show = (bool(*)(void*, bool, int, float, void *))UniWebView.ShowOffset;

UniWebView.HideOffset = getRealOffset(0x5E3C90);
UniWebView.Hide = (bool(*)(void*, bool, int, float, void *))UniWebView.HideOffset;

UniWebView.AnimateToOffset = getRealOffset(0x5E432C);
UniWebView.AnimateTo = (bool(*)(void*, int, float, float, void *))UniWebView.AnimateToOffset;

UniWebView.AddUrlSchemeOffset = getRealOffset(0x5E47DC);
UniWebView.AddUrlScheme = (void(*)(void*, monoString*))UniWebView.AddUrlSchemeOffset;

UniWebView.RemoveUrlSchemeOffset = getRealOffset(0x5E490C);
UniWebView.RemoveUrlScheme = (void(*)(void*, monoString*))UniWebView.RemoveUrlSchemeOffset;

UniWebView.AddSslExceptionDomainOffset = getRealOffset(0x5E4A3C);
UniWebView.AddSslExceptionDomain = (void(*)(void*, monoString*))UniWebView.AddSslExceptionDomainOffset;

UniWebView.RemoveSslExceptionDomainOffset = getRealOffset(0x5E4B6C);
UniWebView.RemoveSslExceptionDomain = (void(*)(void*, monoString*))UniWebView.RemoveSslExceptionDomainOffset;

UniWebView.SetHeaderFieldOffset = getRealOffset(0x5E4C9C);
UniWebView.SetHeaderField = (void(*)(void*, monoString*, monoString*))UniWebView.SetHeaderFieldOffset;

UniWebView.SetUserAgentOffset = getRealOffset(0x5E4D88);
UniWebView.SetUserAgent = (void(*)(void*, monoString*))UniWebView.SetUserAgentOffset;

UniWebView.GetUserAgentOffset = getRealOffset(0x5E4E2C);
UniWebView.GetUserAgent = (monoString *(*)(void*))UniWebView.GetUserAgentOffset;

UniWebView.SetAllowAutoPlayOffset = getRealOffset(0x5E4EC8);
UniWebView.SetAllowAutoPlay = (void(*)(bool))UniWebView.SetAllowAutoPlayOffset;

UniWebView.SetAllowInlinePlayOffset = getRealOffset(0x5E4F44);
UniWebView.SetAllowInlinePlay = (void(*)(bool))UniWebView.SetAllowInlinePlayOffset;

UniWebView.SetJavaScriptEnabledOffset = getRealOffset(0x5E4F48);
UniWebView.SetJavaScriptEnabled = (void(*)(bool))UniWebView.SetJavaScriptEnabledOffset;

UniWebView.SetAllowJavaScriptOpenWindowOffset = getRealOffset(0x5E4FC4);
UniWebView.SetAllowJavaScriptOpenWindow = (void(*)(bool))UniWebView.SetAllowJavaScriptOpenWindowOffset;

UniWebView.CleanCacheOffset = getRealOffset(0x5E5040);
UniWebView.CleanCache = (void(*)(void*))UniWebView.CleanCacheOffset;

UniWebView.ClearCookiesOffset = getRealOffset(0x5E50DC);
UniWebView.ClearCookies = (void(*)())UniWebView.ClearCookiesOffset;

UniWebView.SetCookieOffset = getRealOffset(0x5E5150);
UniWebView.SetCookie = (void(*)(monoString*, monoString*, bool))UniWebView.SetCookieOffset;

UniWebView.GetCookieOffset = getRealOffset(0x5E51DC);
UniWebView.GetCookie = (monoString *(*)(monoString*, monoString*, bool))UniWebView.GetCookieOffset;

UniWebView.ClearHttpAuthUsernamePasswordOffset = getRealOffset(0x5E5268);
UniWebView.ClearHttpAuthUsernamePassword = (void(*)(monoString*, monoString*))UniWebView.ClearHttpAuthUsernamePasswordOffset;

UniWebView.get_BackgroundColorOffset = getRealOffset(0x5E52EC);
UniWebView.get_BackgroundColor = (Color (*)(void*))UniWebView.get_BackgroundColorOffset;

UniWebView.set_BackgroundColorOffset = getRealOffset(0x5E52FC);
UniWebView.set_BackgroundColor = (void(*)(void*, Color))UniWebView.set_BackgroundColorOffset;

UniWebView.get_AlphaOffset = getRealOffset(0x5E53E4);
UniWebView.get_Alpha = (float(*)(void*))UniWebView.get_AlphaOffset;

UniWebView.set_AlphaOffset = getRealOffset(0x5E5480);
UniWebView.set_Alpha = (void(*)(void*, float))UniWebView.set_AlphaOffset;

UniWebView.SetShowSpinnerWhileLoadingOffset = getRealOffset(0x5E5524);
UniWebView.SetShowSpinnerWhileLoading = (void(*)(void*, bool))UniWebView.SetShowSpinnerWhileLoadingOffset;

UniWebView.SetSpinnerTextOffset = getRealOffset(0x5E55C8);
UniWebView.SetSpinnerText = (void(*)(void*, monoString*))UniWebView.SetSpinnerTextOffset;

UniWebView.SetHorizontalScrollBarEnabledOffset = getRealOffset(0x5E566C);
UniWebView.SetHorizontalScrollBarEnabled = (void(*)(void*, bool))UniWebView.SetHorizontalScrollBarEnabledOffset;

UniWebView.SetVerticalScrollBarEnabledOffset = getRealOffset(0x5E5710);
UniWebView.SetVerticalScrollBarEnabled = (void(*)(void*, bool))UniWebView.SetVerticalScrollBarEnabledOffset;

UniWebView.SetBouncesEnabledOffset = getRealOffset(0x5E57B4);
UniWebView.SetBouncesEnabled = (void(*)(void*, bool))UniWebView.SetBouncesEnabledOffset;

UniWebView.SetZoomEnabledOffset = getRealOffset(0x5E5858);
UniWebView.SetZoomEnabled = (void(*)(void*, bool))UniWebView.SetZoomEnabledOffset;

UniWebView.AddPermissionTrustDomainOffset = getRealOffset(0x5E58FC);
UniWebView.AddPermissionTrustDomain = (void(*)(void*, monoString*))UniWebView.AddPermissionTrustDomainOffset;

UniWebView.RemovePermissionTrustDomainOffset = getRealOffset(0x5E59A0);
UniWebView.RemovePermissionTrustDomain = (void(*)(void*, monoString*))UniWebView.RemovePermissionTrustDomainOffset;

UniWebView.SetBackButtonEnabledOffset = getRealOffset(0x5E5A44);
UniWebView.SetBackButtonEnabled = (void(*)(void*, bool))UniWebView.SetBackButtonEnabledOffset;

UniWebView.SetUseWideViewPortOffset = getRealOffset(0x5E5AE8);
UniWebView.SetUseWideViewPort = (void(*)(void*, bool))UniWebView.SetUseWideViewPortOffset;

UniWebView.SetLoadWithOverviewModeOffset = getRealOffset(0x5E5B8C);
UniWebView.SetLoadWithOverviewMode = (void(*)(void*, bool))UniWebView.SetLoadWithOverviewModeOffset;

UniWebView.SetImmersiveModeEnabledOffset = getRealOffset(0x5E5C30);
UniWebView.SetImmersiveModeEnabled = (void(*)(void*, bool))UniWebView.SetImmersiveModeEnabledOffset;

UniWebView.SetShowToolbarOffset = getRealOffset(0x5E4328);
UniWebView.SetShowToolbar = (void(*)(void*, bool, bool, bool, bool))UniWebView.SetShowToolbarOffset;

UniWebView.SetToolbarDoneButtonTextOffset = getRealOffset(0x5E5CD4);
UniWebView.SetToolbarDoneButtonText = (void(*)(void*, monoString*))UniWebView.SetToolbarDoneButtonTextOffset;

UniWebView.SetWebContentsDebuggingEnabledOffset = getRealOffset(0x5E5CD8);
UniWebView.SetWebContentsDebuggingEnabled = (void(*)(bool))UniWebView.SetWebContentsDebuggingEnabledOffset;

UniWebView.SetWindowUserResizeEnabledOffset = getRealOffset(0x5E5D54);
UniWebView.SetWindowUserResizeEnabled = (void(*)(void*, bool))UniWebView.SetWindowUserResizeEnabledOffset;

UniWebView.PrintOffset = getRealOffset(0x5E5E30);
UniWebView.Print = (void(*)(void*))UniWebView.PrintOffset;

UniWebView.OnDestroyOffset = getRealOffset(0x5E5ECC);
UniWebView.OnDestroy = (void(*)(void*))UniWebView.OnDestroyOffset;

UniWebView.OnApplicationPauseOffset = getRealOffset(0x5E6018);
UniWebView.OnApplicationPause = (void(*)(void*, bool))UniWebView.OnApplicationPauseOffset;

UniWebView.InternalOnShowTransitionFinishedOffset = getRealOffset(0x5E60BC);
UniWebView.InternalOnShowTransitionFinished = (void(*)(void*, monoString*))UniWebView.InternalOnShowTransitionFinishedOffset;

UniWebView.InternalOnHideTransitionFinishedOffset = getRealOffset(0x5E6194);
UniWebView.InternalOnHideTransitionFinished = (void(*)(void*, monoString*))UniWebView.InternalOnHideTransitionFinishedOffset;

UniWebView.InternalOnAnimateToFinishedOffset = getRealOffset(0x5E626C);
UniWebView.InternalOnAnimateToFinished = (void(*)(void*, monoString*))UniWebView.InternalOnAnimateToFinishedOffset;

UniWebView.InternalOnAddJavaScriptFinishedOffset = getRealOffset(0x5E6344);
UniWebView.InternalOnAddJavaScriptFinished = (void(*)(void*, void *))UniWebView.InternalOnAddJavaScriptFinishedOffset;

UniWebView.InternalOnEvalJavaScriptFinishedOffset = getRealOffset(0x5E643C);
UniWebView.InternalOnEvalJavaScriptFinished = (void(*)(void*, void *))UniWebView.InternalOnEvalJavaScriptFinishedOffset;

UniWebView.InternalOnPageFinishedOffset = getRealOffset(0x5E6534);
UniWebView.InternalOnPageFinished = (void(*)(void*, void *))UniWebView.InternalOnPageFinishedOffset;

UniWebView.InternalOnPageStartedOffset = getRealOffset(0x5E6644);
UniWebView.InternalOnPageStarted = (void(*)(void*, monoString*))UniWebView.InternalOnPageStartedOffset;

UniWebView.InternalOnPageErrorReceivedOffset = getRealOffset(0x5E6660);
UniWebView.InternalOnPageErrorReceived = (void(*)(void*, void *))UniWebView.InternalOnPageErrorReceivedOffset;

UniWebView.InternalOnMessageReceivedOffset = getRealOffset(0x5E6770);
UniWebView.InternalOnMessageReceived = (void(*)(void*, monoString*))UniWebView.InternalOnMessageReceivedOffset;

UniWebView.InternalOnWebViewKeyDownOffset = getRealOffset(0x5E67C8);
UniWebView.InternalOnWebViewKeyDown = (void(*)(void*, int))UniWebView.InternalOnWebViewKeyDownOffset;

UniWebView.InternalOnShouldCloseOffset = getRealOffset(0x5E67E4);
UniWebView.InternalOnShouldClose = (void(*)(void*))UniWebView.InternalOnShouldCloseOffset;

UniWebViewHelper.StreamingAssetURLForPathOffset = getRealOffset(0xB30F78);
UniWebViewHelper.StreamingAssetURLForPath = (monoString *(*)(monoString*))UniWebViewHelper.StreamingAssetURLForPathOffset;

UniWebViewHelper.PersistentDataURLForPathOffset = getRealOffset(0xB31004);
UniWebViewHelper.PersistentDataURLForPath = (monoString *(*)(monoString*))UniWebViewHelper.PersistentDataURLForPathOffset;

UniWebViewLogger.get_LogLevelOffset = getRealOffset(0xB368A0);
UniWebViewLogger.get_LogLevel = (int (*)(void*))UniWebViewLogger.get_LogLevelOffset;

UniWebViewLogger.set_LogLevelOffset = getRealOffset(0xB368A8);
UniWebViewLogger.set_LogLevel = (void(*)(void*, int))UniWebViewLogger.set_LogLevelOffset;

UniWebViewLogger.get_InstanceOffset = getRealOffset(0xB36A80);
UniWebViewLogger.get_Instance = (void *(*)())UniWebViewLogger.get_InstanceOffset;

UniWebViewLogger.VerboseOffset = getRealOffset(0xB36B14);
UniWebViewLogger.Verbose = (void(*)(void*, monoString*))UniWebViewLogger.VerboseOffset;

UniWebViewLogger.DebugOffset = getRealOffset(0xB36B20);
UniWebViewLogger.Debug = (void(*)(void*, monoString*))UniWebViewLogger.DebugOffset;

UniWebViewLogger.InfoOffset = getRealOffset(0xB36B2C);
UniWebViewLogger.Info = (void(*)(void*, monoString*))UniWebViewLogger.InfoOffset;

UniWebViewLogger.CriticalOffset = getRealOffset(0xB36B38);
UniWebViewLogger.Critical = (void(*)(void*, monoString*))UniWebViewLogger.CriticalOffset;

UniWebViewLogger.LogOffset = getRealOffset(0xB36978);
UniWebViewLogger.Log = (void(*)(void*, int, monoString*))UniWebViewLogger.LogOffset;

UniWebViewMessage.get_RawMessageOffset = getRealOffset(0x3E2D30);
UniWebViewMessage.get_RawMessage = (monoString *(*)(void*))UniWebViewMessage.get_RawMessageOffset;

UniWebViewMessage.set_RawMessageOffset = getRealOffset(0x3E2D38);
UniWebViewMessage.set_RawMessage = (void(*)(void*, monoString*))UniWebViewMessage.set_RawMessageOffset;

UniWebViewMessage.get_SchemeOffset = getRealOffset(0x3E2D40);
UniWebViewMessage.get_Scheme = (monoString *(*)(void*))UniWebViewMessage.get_SchemeOffset;

UniWebViewMessage.set_SchemeOffset = getRealOffset(0x3E2D48);
UniWebViewMessage.set_Scheme = (void(*)(void*, monoString*))UniWebViewMessage.set_SchemeOffset;

UniWebViewMessage.get_PathOffset = getRealOffset(0x3E2D50);
UniWebViewMessage.get_Path = (monoString *(*)(void*))UniWebViewMessage.get_PathOffset;

UniWebViewMessage.set_PathOffset = getRealOffset(0x3E2D58);
UniWebViewMessage.set_Path = (void(*)(void*, monoString*))UniWebViewMessage.set_PathOffset;

UniWebViewMessage.get_ArgsOffset = getRealOffset(0x3E2D60);
UniWebViewNativeListener.AddListenerOffset = getRealOffset(0xB372D4);
UniWebViewNativeListener.AddListener = (void(*)(void *))UniWebViewNativeListener.AddListenerOffset;

UniWebViewNativeListener.RemoveListenerOffset = getRealOffset(0xB373C4);
UniWebViewNativeListener.RemoveListener = (void(*)(monoString*))UniWebViewNativeListener.RemoveListenerOffset;

UniWebViewNativeListener.GetListenerOffset = getRealOffset(0xB30EAC);
UniWebViewNativeListener.GetListener = (void *(*)(monoString*))UniWebViewNativeListener.GetListenerOffset;

UniWebViewNativeListener.get_NameOffset = getRealOffset(0xB37394);
UniWebViewNativeListener.get_Name = (monoString *(*)(void*))UniWebViewNativeListener.get_NameOffset;

UniWebViewNativeListener.PageStartedOffset = getRealOffset(0xB37468);
UniWebViewNativeListener.PageStarted = (void(*)(void*, monoString*))UniWebViewNativeListener.PageStartedOffset;

UniWebViewNativeListener.PageFinishedOffset = getRealOffset(0xB37514);
UniWebViewNativeListener.PageFinished = (void(*)(void*, monoString*))UniWebViewNativeListener.PageFinishedOffset;

UniWebViewNativeListener.PageErrorReceivedOffset = getRealOffset(0xB375DC);
UniWebViewNativeListener.PageErrorReceived = (void(*)(void*, monoString*))UniWebViewNativeListener.PageErrorReceivedOffset;

UniWebViewNativeListener.ShowTransitionFinishedOffset = getRealOffset(0xB376A4);
UniWebViewNativeListener.ShowTransitionFinished = (void(*)(void*, monoString*))UniWebViewNativeListener.ShowTransitionFinishedOffset;

UniWebViewNativeListener.HideTransitionFinishedOffset = getRealOffset(0xB37750);
UniWebViewNativeListener.HideTransitionFinished = (void(*)(void*, monoString*))UniWebViewNativeListener.HideTransitionFinishedOffset;

UniWebViewNativeListener.AnimateToFinishedOffset = getRealOffset(0xB377FC);
UniWebViewNativeListener.AnimateToFinished = (void(*)(void*, monoString*))UniWebViewNativeListener.AnimateToFinishedOffset;

UniWebViewNativeListener.AddJavaScriptFinishedOffset = getRealOffset(0xB378A8);
UniWebViewNativeListener.AddJavaScriptFinished = (void(*)(void*, monoString*))UniWebViewNativeListener.AddJavaScriptFinishedOffset;

UniWebViewNativeListener.EvalJavaScriptFinishedOffset = getRealOffset(0xB37970);
UniWebViewNativeListener.EvalJavaScriptFinished = (void(*)(void*, monoString*))UniWebViewNativeListener.EvalJavaScriptFinishedOffset;

UniWebViewNativeListener.MessageReceivedOffset = getRealOffset(0xB37A38);
UniWebViewNativeListener.MessageReceived = (void(*)(void*, monoString*))UniWebViewNativeListener.MessageReceivedOffset;

UniWebViewNativeListener.WebViewKeyDownOffset = getRealOffset(0xB37AE4);
UniWebViewNativeListener.WebViewKeyDown = (void(*)(void*, monoString*))UniWebViewNativeListener.WebViewKeyDownOffset;

UniWebViewNativeListener.WebViewDoneOffset = getRealOffset(0xB37C04);
UniWebViewNativeListener.WebViewDone = (void(*)(void*, monoString*))UniWebViewNativeListener.WebViewDoneOffset;

UnityDeeplinks.AwakeOffset = getRealOffset(0xB37D2C);
UnityDeeplinks.Awake = (void(*)(void*))UnityDeeplinks.AwakeOffset;

UnityDeeplinks.StartOffset = getRealOffset(0xB37DF0);
UnityDeeplinks.Start = (void(*)(void*))UnityDeeplinks.StartOffset;

UnityDeeplinks.onDeeplinkOffset = getRealOffset(0xB37DF4);
UnityDeeplinks.onDeeplink = (void(*)(void*, monoString*))UnityDeeplinks.onDeeplinkOffset;

DeviceDetection.IsEmulatorOffset = getRealOffset(0x5A8A44);
DeviceDetection.IsEmulator = (bool(*)())DeviceDetection.IsEmulatorOffset;

DeviceDetection.IsRootedOrJailbrokenOffset = getRealOffset(0x5A8DE0);
DeviceDetection.IsRootedOrJailbroken = (bool(*)())DeviceDetection.IsRootedOrJailbrokenOffset;

FrustumAlways.OnDrawGizmosOffset = getRealOffset(0x728634);
FrustumAlways.OnDrawGizmos = (void(*)(void*))FrustumAlways.OnDrawGizmosOffset;

WeaponPictureTaker.OnGUIOffset = getRealOffset(0x8B35CC);
WeaponPictureTaker.OnGUI = (void(*)(void*))WeaponPictureTaker.OnGUIOffset;

WeaponPictureTaker.TakePictureOffset = getRealOffset(0x8B3940);
WeaponPictureTaker.TakePicture = (void(*)(void*, monoString*))WeaponPictureTaker.TakePictureOffset;

WeaponPictureTaker.UpdateOffset = getRealOffset(0x8B3BDC);
WeaponPictureTaker.Update = (void(*)(void*))WeaponPictureTaker.UpdateOffset;

WeaponPictureTaker.TakePicturesOffset = getRealOffset(0x8B38C0);
WeaponPictureTaker.TakePictures = (void *(*)(void*))WeaponPictureTaker.TakePicturesOffset;

MinigunSounds.StartOffset = getRealOffset(0x52553C);
MinigunSounds.Start = (void(*)(void*))MinigunSounds.StartOffset;

MinigunSounds.ShouldPlayOffset = getRealOffset(0x525568);
MinigunSounds.ShouldPlay = (bool(*)(void*))MinigunSounds.ShouldPlayOffset;

MinigunSounds.StartRotationOffset = getRealOffset(0x525690);
MinigunSounds.StartRotation = (void(*)(void*))MinigunSounds.StartRotationOffset;

MinigunSounds.PlayDieSoundOffset = getRealOffset(0x5256F0);
MinigunSounds.PlayDieSound = (void(*)(void*))MinigunSounds.PlayDieSoundOffset;

MinigunSounds.StopAllAudiosOffset = getRealOffset(0x525818);
MinigunSounds.StopAllAudios = (void(*)(void*))MinigunSounds.StopAllAudiosOffset;

CloseBrowserButton.StartOffset = getRealOffset(0x7846D0);
CloseBrowserButton.Start = (void(*)(void*))CloseBrowserButton.StartOffset;

CloseBrowserButton.Startb__1_0Offset = getRealOffset(0x7847D0);
CloseBrowserButton.Startb__1_0 = (void(*)(void*))CloseBrowserButton.Startb__1_0Offset;

PreloaderScript.StartOffset = getRealOffset(0x7105B4);
PreloaderScript.Start = (void(*)(void*))PreloaderScript.StartOffset;

RotateCircle.StartOffset = getRealOffset(0x612634);
RotateCircle.Start = (void(*)(void*))RotateCircle.StartOffset;

RotateCircle.UpdateOffset = getRealOffset(0x6126B4);
RotateCircle.Update = (void(*)(void*))RotateCircle.UpdateOffset;

AuthTokenHelper.DeleteTokenOffset = getRealOffset(0x6BD8B4);
AuthTokenHelper.DeleteToken = (void(*)(monoString*))AuthTokenHelper.DeleteTokenOffset;

AuthTokenHelper.SaveTokenOffset = getRealOffset(0x6BD8F8);
AuthTokenHelper.SaveToken = (void(*)(monoString*, void *))AuthTokenHelper.SaveTokenOffset;

CatalogItemModel.get_VirtualPriceOffset = getRealOffset(0x77E2DC);
CatalogItemModel.get_RealPriceOffset = getRealOffset(0x77E2FC);
CatalogItemModel.IsVirtualCurrencyOffset = getRealOffset(0x77E31C);
CatalogItemModel.IsVirtualCurrency = (bool(*)(void*))CatalogItemModel.IsVirtualCurrencyOffset;

CatalogVirtualCurrencyModel.get_AmountOffset = getRealOffset(0x77E32C);
CatalogVirtualCurrencyModel.get_CurrencySkuOffset = getRealOffset(0x77E33C);
CatalogVirtualCurrencyModel.get_CurrencySku = (monoString *(*)(void*))CatalogVirtualCurrencyModel.get_CurrencySkuOffset;

CatalogVirtualCurrencyModel.set_CurrencySkuOffset = getRealOffset(0x77E344);
CatalogVirtualCurrencyModel.set_CurrencySku = (void(*)(void*, monoString*))CatalogVirtualCurrencyModel.set_CurrencySkuOffset;

CatalogVirtualCurrencyModel.IsVirtualCurrencyOffset = getRealOffset(0x77E34C);
CatalogVirtualCurrencyModel.IsVirtualCurrency = (bool(*)(void*))CatalogVirtualCurrencyModel.IsVirtualCurrencyOffset;

CatalogVirtualItemModel.IsVirtualCurrencyOffset = getRealOffset(0x77E35C);
CatalogVirtualItemModel.IsVirtualCurrency = (bool(*)(void*))CatalogVirtualItemModel.IsVirtualCurrencyOffset;

GroupUI.AwakeOffset = getRealOffset(0x8FDC0C);
GroupUI.Awake = (void(*)(void*))GroupUI.AwakeOffset;

GroupUI.get_IdOffset = getRealOffset(0x8FDCA8);
GroupUI.get_Id = (monoString *(*)(void*))GroupUI.get_IdOffset;

GroupUI.set_IdOffset = getRealOffset(0x8FDCC8);
GroupUI.set_Id = (void(*)(void*, monoString*))GroupUI.set_IdOffset;

GroupUI.get_NameOffset = getRealOffset(0x8FDCEC);
GroupUI.get_Name = (monoString *(*)(void*))GroupUI.get_NameOffset;

GroupUI.set_NameOffset = getRealOffset(0x8FDD14);
GroupUI.set_Name = (void(*)(void*, monoString*))GroupUI.set_NameOffset;

GroupUI.get_OnGroupClickOffset = getRealOffset(0x8FDD44);
GroupUI.SelectOffset = getRealOffset(0x8FDD54);
GroupUI.Select = (void(*)(void*))GroupUI.SelectOffset;

GroupUI.DeselectOffset = getRealOffset(0x8FDD80);
GroupUI.Deselect = (void(*)(void*))GroupUI.DeselectOffset;

GroupUI.IsSelectedOffset = getRealOffset(0x8FDDA8);
GroupUI.IsSelected = (bool(*)(void*))GroupUI.IsSelectedOffset;

GroupUI.Awakeb__1_0Offset = getRealOffset(0x8FDDD0);
GroupUI.Awakeb__1_0 = (void(*)(void*, monoString*))GroupUI.Awakeb__1_0Offset;

GroupsController.get_GroupsOffset = getRealOffset(0x8FDFA0);
GroupsController.AwakeOffset = getRealOffset(0x8FDFB0);
GroupsController.Awake = (void(*)(void*))GroupsController.AwakeOffset;

GroupsController.StartOffset = getRealOffset(0x8FE028);
GroupsController.Start = (void(*)(void*))GroupsController.StartOffset;

GroupsController.SetPreviousGroupOffset = getRealOffset(0x8FE1B8);
GroupsController.SetPreviousGroup = (void(*)(void*))GroupsController.SetPreviousGroupOffset;

GroupsController.SetNextGroupOffset = getRealOffset(0x8FE7AC);
GroupsController.SetNextGroup = (void(*)(void*))GroupsController.SetNextGroupOffset;

GroupsController.AddGroupOffset = getRealOffset(0x8FE970);
GroupsController.AddGroup = (void(*)(void*, monoString*))GroupsController.AddGroupOffset;

GroupsController.SelectGroupOffset = getRealOffset(0x8FE5B0);
GroupsController.SelectGroup = (void(*)(void*, monoString*))GroupsController.SelectGroupOffset;

GroupsController.SelectDefaultOffset = getRealOffset(0x8FEF00);
GroupsController.SelectDefault = (void(*)(void*))GroupsController.SelectDefaultOffset;

GroupsController.GetSelectedGroupOffset = getRealOffset(0x8FE380);
GroupsController.GetSelectedGroup = (void *(*)(void*))GroupsController.GetSelectedGroupOffset;

GroupsHotKeys.StartOffset = getRealOffset(0x8FF48C);
GroupsHotKeys.Start = (void(*)(void*))GroupsHotKeys.StartOffset;

GroupsHotKeys.Startb__2_0Offset = getRealOffset(0x8FF628);
GroupsHotKeys.Startb__2_0 = (void(*)(void*))GroupsHotKeys.Startb__2_0Offset;

GroupsHotKeys.Startb__2_1Offset = getRealOffset(0x8FF63C);
GroupsHotKeys.Startb__2_1 = (void(*)(void*))GroupsHotKeys.Startb__2_1Offset;

HotkeyCoroutine.add_KeyPressedEventOffset = getRealOffset(0x7FA324);
HotkeyCoroutine.add_KeyPressedEvent = (void(*)(void*, void *))HotkeyCoroutine.add_KeyPressedEventOffset;

HotkeyCoroutine.remove_KeyPressedEventOffset = getRealOffset(0x7FA3D4);
HotkeyCoroutine.remove_KeyPressedEvent = (void(*)(void*, void *))HotkeyCoroutine.remove_KeyPressedEventOffset;

HotkeyCoroutine.StartCoroutineOffset = getRealOffset(0x7FA484);
HotkeyCoroutine.StartCoroutine = (void *(*)(void*, int, float))HotkeyCoroutine.StartCoroutineOffset;

HotkeyCoroutine.LockOffset = getRealOffset(0x7FA534);
HotkeyCoroutine.Lock = (void(*)())HotkeyCoroutine.LockOffset;

HotkeyCoroutine.UnlockOffset = getRealOffset(0x7FA590);
HotkeyCoroutine.Unlock = (void(*)())HotkeyCoroutine.UnlockOffset;

HotkeyCoroutine.IsLockedOffset = getRealOffset(0x7FA5EC);
HotkeyCoroutine.IsLocked = (bool(*)())HotkeyCoroutine.IsLockedOffset;

HotkeyCoroutine.OnEnableOffset = getRealOffset(0x7FA644);
HotkeyCoroutine.OnEnable = (void(*)(void*))HotkeyCoroutine.OnEnableOffset;

HotkeyCoroutine.OnDisableOffset = getRealOffset(0x7FA648);
HotkeyCoroutine.OnDisable = (void(*)(void*))HotkeyCoroutine.OnDisableOffset;

HotkeyCoroutine.OnDestroyOffset = getRealOffset(0x7FA678);
HotkeyCoroutine.OnDestroy = (void(*)(void*))HotkeyCoroutine.OnDestroyOffset;

HotkeyCoroutine.startCoroutineOffset = getRealOffset(0x7FA4FC);
HotkeyCoroutine.startCoroutine = (void(*)(void*))HotkeyCoroutine.startCoroutineOffset;

HotkeyCoroutine.stopCoroutineOffset = getRealOffset(0x7FA4CC);
HotkeyCoroutine.stopCoroutine = (void(*)(void*))HotkeyCoroutine.stopCoroutineOffset;

HotkeyCoroutine.SomeHotkeyCoroutineOffset = getRealOffset(0x7FA680);
HotkeyCoroutine.SomeHotkeyCoroutine = (void *(*)(void*))HotkeyCoroutine.SomeHotkeyCoroutineOffset;

HotkeyCoroutine.SomeHotkeyCoroutineb__16_0Offset = getRealOffset(0x7FA728);
HotkeyCoroutine.SomeHotkeyCoroutineb__16_0 = (bool(*)(void*))HotkeyCoroutine.SomeHotkeyCoroutineb__16_0Offset;

StoreTabsHotkey.StartOffset = getRealOffset(0x587FA0);
StoreTabsHotkey.Start = (void(*)(void*))StoreTabsHotkey.StartOffset;

StoreTabsHotkey.Startb__3_0Offset = getRealOffset(0x5881D8);
StoreTabsHotkey.Startb__3_0 = (void(*)(void*))StoreTabsHotkey.Startb__3_0Offset;

StoreTabsHotkey.Startb__3_1Offset = getRealOffset(0x5881EC);
StoreTabsHotkey.Startb__3_1 = (void(*)(void*))StoreTabsHotkey.Startb__3_1Offset;

StoreTabsHotkey.Startb__3_2Offset = getRealOffset(0x588200);
StoreTabsHotkey.Startb__3_2 = (void(*)(void*))StoreTabsHotkey.Startb__3_2Offset;

InventoryItemModel.IsVirtualCurrencyOffset = getRealOffset(0xC9F140);
InventoryItemModel.IsVirtualCurrency = (bool(*)(void*))InventoryItemModel.IsVirtualCurrencyOffset;

VirtualCurrencyBalanceModel.IsVirtualCurrencyOffset = getRealOffset(0x899010);
VirtualCurrencyBalanceModel.IsVirtualCurrency = (bool(*)(void*))VirtualCurrencyBalanceModel.IsVirtualCurrencyOffset;

VirtualCurrencyBalanceModel.get_AmountOffset = getRealOffset(0x899018);
ConsumeButton.get_onClickOffset = getRealOffset(0x81B6D0);
ConsumeButton.get_onClick = (void *(*)(void*))ConsumeButton.get_onClickOffset;

ConsumeButton.set_onClickOffset = getRealOffset(0x81B6D8);
ConsumeButton.set_onClick = (void(*)(void*, void *))ConsumeButton.set_onClickOffset;

ConsumeButton.StartOffset = getRealOffset(0x81B6E0);
ConsumeButton.Start = (void(*)(void*))ConsumeButton.StartOffset;

ConsumeButton.Startb__6_0Offset = getRealOffset(0x81B778);
ConsumeButton.Startb__6_0 = (void(*)(void*))ConsumeButton.Startb__6_0Offset;

MenuButton.AwakeOffset = getRealOffset(0x51E998);
MenuButton.Awake = (void(*)(void*))MenuButton.AwakeOffset;

MenuButton.PerformClickEventOffset = getRealOffset(0x51EA18);
MenuButton.PerformClickEvent = (void(*)(void*))MenuButton.PerformClickEventOffset;

MenuButton.SelectOffset = getRealOffset(0x51EB74);
MenuButton.Select = (void(*)(void*, bool))MenuButton.SelectOffset;

MenuButton.DeselectOffset = getRealOffset(0x51EBAC);
MenuButton.Deselect = (void(*)(void*))MenuButton.DeselectOffset;

MenuButton.get_TextOffset = getRealOffset(0x51EBC4);
MenuButton.get_Text = (monoString *(*)(void*))MenuButton.get_TextOffset;

MenuButton.set_TextOffset = getRealOffset(0x51EBF4);
MenuButton.set_Text = (void(*)(void*, monoString*))MenuButton.set_TextOffset;

MenuButton.get_IdOffset = getRealOffset(0x51EC54);
MenuButton.get_Id = (monoString *(*)(void*))MenuButton.get_IdOffset;

MenuButton.set_IdOffset = getRealOffset(0x51EC5C);
MenuButton.set_Id = (void(*)(void*, monoString*))MenuButton.set_IdOffset;

MenuButton.get_IsSelectedOffset = getRealOffset(0x51EC64);
MenuButton.get_IsSelected = (bool(*)(void*))MenuButton.get_IsSelectedOffset;

MenuButton.OnDragOffset = getRealOffset(0x51EC6C);
MenuButton.OnDrag = (void(*)(void*, void *))MenuButton.OnDragOffset;

MenuButton.OnPointerEnterOffset = getRealOffset(0x51EC70);
MenuButton.OnPointerEnter = (void(*)(void*, void *))MenuButton.OnPointerEnterOffset;

MenuButton.OnPointerExitOffset = getRealOffset(0x51EC8C);
MenuButton.OnPointerExit = (void(*)(void*, void *))MenuButton.OnPointerExitOffset;

MenuButton.OnPointerDownOffset = getRealOffset(0x51ECD0);
MenuButton.OnPointerDown = (void(*)(void*, void *))MenuButton.OnPointerDownOffset;

MenuButton.OnPointerUpOffset = getRealOffset(0x51ECF4);
MenuButton.OnPointerUp = (void(*)(void*, void *))MenuButton.OnPointerUpOffset;

MenuButton.OnNormalOffset = getRealOffset(0x51ED48);
MenuButton.OnNormal = (void(*)(void*))MenuButton.OnNormalOffset;

MenuButton.OnHoverOffset = getRealOffset(0x51EDCC);
MenuButton.OnHover = (void(*)(void*))MenuButton.OnHoverOffset;

MenuButton.OnPressedOffset = getRealOffset(0x51EE50);
MenuButton.OnPressed = (void(*)(void*))MenuButton.OnPressedOffset;

MenuButton.OnSelectedOffset = getRealOffset(0x51EED4);
MenuButton.OnSelected = (void(*)(void*))MenuButton.OnSelectedOffset;

SimpleButton.get_RateLimitMsOffset = getRealOffset(0x6241BC);
SimpleButton.get_RateLimitMs = (float(*)(void*))SimpleButton.get_RateLimitMsOffset;

SimpleButton.set_RateLimitMsOffset = getRealOffset(0x6241C4);
SimpleButton.set_RateLimitMs = (void(*)(void*, float))SimpleButton.set_RateLimitMsOffset;

SimpleButton.AwakeOffset = getRealOffset(0x6241CC);
SimpleButton.Awake = (void(*)(void*))SimpleButton.AwakeOffset;

SimpleButton.OnDragOffset = getRealOffset(0x624268);
SimpleButton.OnDrag = (void(*)(void*, void *))SimpleButton.OnDragOffset;

SimpleButton.OnPointerEnterOffset = getRealOffset(0x62426C);
SimpleButton.OnPointerEnter = (void(*)(void*, void *))SimpleButton.OnPointerEnterOffset;

SimpleButton.OnPointerExitOffset = getRealOffset(0x62427C);
SimpleButton.OnPointerExit = (void(*)(void*, void *))SimpleButton.OnPointerExitOffset;

SimpleButton.OnPointerDownOffset = getRealOffset(0x6242A8);
SimpleButton.OnPointerDown = (void(*)(void*, void *))SimpleButton.OnPointerDownOffset;

SimpleButton.PerformClickEventOffset = getRealOffset(0x6242C0);
SimpleButton.PerformClickEvent = (void(*)(void*))SimpleButton.PerformClickEventOffset;

SimpleButton.OnPointerUpOffset = getRealOffset(0x62440C);
SimpleButton.OnPointerUp = (void(*)(void*, void *))SimpleButton.OnPointerUpOffset;

SimpleButton.OnNormalOffset = getRealOffset(0x62444C);
SimpleButton.OnNormal = (void(*)(void*))SimpleButton.OnNormalOffset;

SimpleButton.OnHoverOffset = getRealOffset(0x62447C);
SimpleButton.OnHover = (void(*)(void*))SimpleButton.OnHoverOffset;

SimpleButton.OnPressedOffset = getRealOffset(0x6244AC);
SimpleButton.OnPressed = (void(*)(void*))SimpleButton.OnPressedOffset;

SimpleButtonLockDecorator.LockOffset = getRealOffset(0x6244F0);
SimpleButtonLockDecorator.Lock = (void(*)(void*))SimpleButtonLockDecorator.LockOffset;

SimpleButtonLockDecorator.UnlockOffset = getRealOffset(0x6244FC);
SimpleButtonLockDecorator.Unlock = (void(*)(void*))SimpleButtonLockDecorator.UnlockOffset;

SimpleButtonLockDecorator.IsLockedOffset = getRealOffset(0x624508);
SimpleButtonLockDecorator.IsLocked = (bool(*)(void*))SimpleButtonLockDecorator.IsLockedOffset;

SimpleButtonLockDecorator.OnPointerDownOffset = getRealOffset(0x624510);
SimpleButtonLockDecorator.OnPointerDown = (void(*)(void*, void *))SimpleButtonLockDecorator.OnPointerDownOffset;

SimpleButtonLockDecorator.OnPointerUpOffset = getRealOffset(0x624534);
SimpleButtonLockDecorator.OnPointerUp = (void(*)(void*, void *))SimpleButtonLockDecorator.OnPointerUpOffset;

SimpleButtonLockDecorator.OnPointerEnterOffset = getRealOffset(0x624580);
SimpleButtonLockDecorator.OnPointerEnter = (void(*)(void*, void *))SimpleButtonLockDecorator.OnPointerEnterOffset;

SimpleButtonLockDecorator.OnPointerExitOffset = getRealOffset(0x62459C);
SimpleButtonLockDecorator.OnPointerExit = (void(*)(void*, void *))SimpleButtonLockDecorator.OnPointerExitOffset;

SimpleButtonLockDecorator.OnDragOffset = getRealOffset(0x6245D4);
SimpleButtonLockDecorator.OnDrag = (void(*)(void*, void *))SimpleButtonLockDecorator.OnDragOffset;

SimpleTextButton.get_TextOffset = getRealOffset(0x572534);
SimpleTextButton.get_Text = (monoString *(*)(void*))SimpleTextButton.get_TextOffset;

SimpleTextButton.set_TextOffset = getRealOffset(0x572564);
SimpleTextButton.set_Text = (void(*)(void*, monoString*))SimpleTextButton.set_TextOffset;

SimpleTextButton.OnNormalOffset = getRealOffset(0x57259C);
SimpleTextButton.OnNormal = (void(*)(void*))SimpleTextButton.OnNormalOffset;

SimpleTextButton.OnHoverOffset = getRealOffset(0x572600);
SimpleTextButton.OnHover = (void(*)(void*))SimpleTextButton.OnHoverOffset;

SimpleTextButton.OnPressedOffset = getRealOffset(0x572668);
SimpleTextButton.OnPressed = (void(*)(void*))SimpleTextButton.OnPressedOffset;

LoadingCircle.StartOffset = getRealOffset(0x6E1CB0);
LoadingCircle.Start = (void(*)(void*))LoadingCircle.StartOffset;

LoadingCircle.UpdateOffset = getRealOffset(0x6E1D10);
LoadingCircle.Update = (void(*)(void*))LoadingCircle.UpdateOffset;

HorizontalSizeChanger.AwakeOffset = getRealOffset(0x7FA21C);
HorizontalSizeChanger.Awake = (void(*)(void*))HorizontalSizeChanger.AwakeOffset;

HorizontalSizeChanger.SetWidthOffset = getRealOffset(0x7FA27C);
HorizontalSizeChanger.SetWidth = (void(*)(void*, float))HorizontalSizeChanger.SetWidthOffset;

HorizontalSizeChanger.GetWidthOffset = getRealOffset(0x7FA2C4);
HorizontalSizeChanger.GetWidth = (float(*)(void*))HorizontalSizeChanger.GetWidthOffset;

ValueCounter.GetValueOffset = getRealOffset(0x895014);
ValueCounter.GetValue = (int(*)(void*))ValueCounter.GetValueOffset;

ValueCounter.IncreaseValueOffset = getRealOffset(0x89501C);
ValueCounter.IncreaseValue = (void(*)(void*, int))ValueCounter.IncreaseValueOffset;

ValueCounter.DecreaseValueOffset = getRealOffset(0x895094);
ValueCounter.DecreaseValue = (void(*)(void*, int))ValueCounter.DecreaseValueOffset;

ValueCounter.ToStringOffset = getRealOffset(0x895114);
ValueCounter.ToString = (monoString *(*)(void*))ValueCounter.ToStringOffset;

ValueCounter.op_IncrementOffset = getRealOffset(0x895120);
ValueCounter.op_Increment = (void *(*)(void *))ValueCounter.op_IncrementOffset;

ValueCounter.op_DecrementOffset = getRealOffset(0x89514C);
ValueCounter.op_Decrement = (void *(*)(void *))ValueCounter.op_DecrementOffset;

ValueCounter.op_ImplicitOffset = getRealOffset(0x895178);
ValueCounter.op_Implicit = (int(*)(void *))ValueCounter.op_ImplicitOffset;

ValueCounterControl.StartOffset = getRealOffset(0x8951A0);
ValueCounterControl.Start = (void(*)(void*))ValueCounterControl.StartOffset;

ValueCounterControl.Counter_ValueChangedOffset = getRealOffset(0x895388);
ValueCounterControl.Counter_ValueChanged = (void(*)(void*, int))ValueCounterControl.Counter_ValueChangedOffset;

ValueCounterControl.Startb__5_0Offset = getRealOffset(0x8953EC);
ValueCounterControl.Startb__5_0 = (void(*)(void*))ValueCounterControl.Startb__5_0Offset;

ValueCounterControl.Startb__5_1Offset = getRealOffset(0x89541C);
ValueCounterControl.Startb__5_1 = (void(*)(void*))ValueCounterControl.Startb__5_1Offset;

ValueCounterVisibility.AwakeOffset = getRealOffset(0x89544C);
ValueCounterVisibility.Awake = (void(*)(void*))ValueCounterVisibility.AwakeOffset;

ValueCounterVisibility.StartOffset = getRealOffset(0x8954C8);
ValueCounterVisibility.Start = (void(*)(void*))ValueCounterVisibility.StartOffset;

ValueCounterVisibility.ChangeVisibilityCoroutineOffset = getRealOffset(0x895508);
ValueCounterVisibility.ChangeVisibilityCoroutine = (void *(*)(void*, bool))ValueCounterVisibility.ChangeVisibilityCoroutineOffset;

ValueCounterVisibility.ChangeSizeCoroutineOffset = getRealOffset(0x8955C0);
ValueCounterVisibility.ChangeSizeCoroutine = (void *(*)(void*, void *, float, float))ValueCounterVisibility.ChangeSizeCoroutineOffset;

ValueCounterVisibility.ChangeSizeOffset = getRealOffset(0x8956B0);
ValueCounterVisibility.ChangeSize = (bool(*)(void*, void *, float, float))ValueCounterVisibility.ChangeSizeOffset;

ValueCounterVisibility.SetVisibilityOffset = getRealOffset(0x8954D0);
ValueCounterVisibility.SetVisibility = (void(*)(void*, bool))ValueCounterVisibility.SetVisibilityOffset;

ValueCounterVisibility.UnityEngineEventSystemsIPointerEnterHandlerOnPointerEnterOffset = getRealOffset(0x8957D0);
ValueCounterVisibility.UnityEngineEventSystemsIPointerEnterHandlerOnPointerEnter = (void(*)(void*, void *))ValueCounterVisibility.UnityEngineEventSystemsIPointerEnterHandlerOnPointerEnterOffset;

ValueCounterVisibility.UnityEngineEventSystemsIPointerExitHandlerOnPointerExitOffset = getRealOffset(0x8957D8);
ValueCounterVisibility.UnityEngineEventSystemsIPointerExitHandlerOnPointerExit = (void(*)(void*, void *))ValueCounterVisibility.UnityEngineEventSystemsIPointerExitHandlerOnPointerExitOffset;

VirtualCurrencyBalanceUI.InitializeOffset = getRealOffset(0x899030);
VirtualCurrencyBalanceUI.Initialize = (void(*)(void*, void *))VirtualCurrencyBalanceUI.InitializeOffset;

VirtualCurrencyBalanceUI.Initializeb__2_0Offset = getRealOffset(0x899298);
VirtualCurrencyBalanceUI.Initializeb__2_0 = (void(*)(void*, monoString*, void *))VirtualCurrencyBalanceUI.Initializeb__2_0Offset;

VirtualCurrencyContainer.AwakeOffset = getRealOffset(0x8992C8);
VirtualCurrencyContainer.Awake = (void(*)(void*))VirtualCurrencyContainer.AwakeOffset;

VirtualCurrencyContainer.AddCurrencyOffset = getRealOffset(0x899654);
VirtualCurrencyContainer.AddCurrency = (void *(*)(void*, void *))VirtualCurrencyContainer.AddCurrencyOffset;

VirtualCurrencyContainer.SetCurrencyBalanceOffset = getRealOffset(0x8998BC);
VirtualCurrencyContainer.SetCurrencyBalance = (void(*)(void*, void *))VirtualCurrencyContainer.SetCurrencyBalanceOffset;

BasicAuth.get_OnSuccessOffset = getRealOffset(0x6C30B8);
BasicAuth.get_OnFailedOffset = getRealOffset(0x6C30C8);
BasicAuth.get_OnFailed = (void *(*)(void*))BasicAuth.get_OnFailedOffset;

BasicAuth.set_OnFailedOffset = getRealOffset(0x6C30D0);
BasicAuth.set_OnFailed = (void(*)(void*, void *))BasicAuth.set_OnFailedOffset;

BasicAuth.OnDestroyOffset = getRealOffset(0x6C3238);
BasicAuth.OnDestroy = (void(*)(void*))BasicAuth.OnDestroyOffset;

BasicAuth.IsValidCredentialsOffset = getRealOffset(0x6C32F8);
BasicAuth.IsValidCredentials = (bool(*)(void*))BasicAuth.IsValidCredentialsOffset;

BasicAuth.SetUserNameOffset = getRealOffset(0x6C335C);
BasicAuth.SetUserName = (void(*)(void*, monoString*))BasicAuth.SetUserNameOffset;

BasicAuth.SetPasswordOffset = getRealOffset(0x6C3364);
BasicAuth.SetPassword = (void(*)(void*, monoString*))BasicAuth.SetPasswordOffset;

BasicAuth.SetLoginButtonOffset = getRealOffset(0x6C336C);
BasicAuth.SetLoginButton = (void *(*)(void*, void *))BasicAuth.SetLoginButtonOffset;

BasicAuth.SoftwareAuthOffset = getRealOffset(0x6C3544);
BasicAuth.SoftwareAuth = (void(*)(void*))BasicAuth.SoftwareAuthOffset;

BasicAuth.LoginOffset = getRealOffset(0x6C359C);
BasicAuth.Login = (void(*)(void*))BasicAuth.LoginOffset;

BasicAuth.BasicAuthFailedOffset = getRealOffset(0x6C36DC);
BasicAuth.BasicAuthFailed = (void(*)(void*, void *))BasicAuth.BasicAuthFailedOffset;

BasicAuth.Loginb__20_0Offset = getRealOffset(0x6C382C);
BasicAuth.Loginb__20_0 = (void(*)(void*, void *))BasicAuth.Loginb__20_0Offset;

BasicAuthButton.AwakeOffset = getRealOffset(0x6C389C);
BasicAuthButton.Awake = (void(*)(void*))BasicAuthButton.AwakeOffset;

BasicAuthButton.UpdateOffset = getRealOffset(0x6C391C);
BasicAuthButton.Update = (void(*)(void*))BasicAuthButton.UpdateOffset;

BasicAuthButton.SetButtonOffset = getRealOffset(0x6C34AC);
BasicAuthButton.SetButton = (void *(*)(void*, void *))BasicAuthButton.SetButtonOffset;

BasicAuthButton.SetHandlerOffset = getRealOffset(0x6C34EC);
BasicAuthButton.SetHandler = (void *(*)(void*, void *))BasicAuthButton.SetHandlerOffset;

BasicAuthButton.SoftwareClickOffset = getRealOffset(0x6C3568);
BasicAuthButton.SoftwareClick = (void(*)(void*))BasicAuthButton.SoftwareClickOffset;

BasicAuthButton.WithRateLimitsOffset = getRealOffset(0x6C39A8);
BasicAuthButton.WithRateLimits = (void *(*)(void*, void *))BasicAuthButton.WithRateLimitsOffset;

SavedTokenAuth.get_OnSuccessOffset = getRealOffset(0x6152B0);
SavedTokenAuth.get_OnFailedOffset = getRealOffset(0x6152C0);
SavedTokenAuth.get_OnFailed = (void *(*)(void*))SavedTokenAuth.get_OnFailedOffset;

SavedTokenAuth.set_OnFailedOffset = getRealOffset(0x6152C8);
SavedTokenAuth.set_OnFailed = (void(*)(void*, void *))SavedTokenAuth.set_OnFailedOffset;

SavedTokenAuth.StartOffset = getRealOffset(0x6152D0);
SavedTokenAuth.Start = (void(*)(void*))SavedTokenAuth.StartOffset;

AuthController.AwakeOffset = getRealOffset(0x6BBD38);
AuthController.Awake = (void(*)(void*))AuthController.AwakeOffset;

AuthController.PagesEventsOffset = getRealOffset(0x6BC0BC);
AuthController.PagesEvents = (void(*)(void*))AuthController.PagesEventsOffset;

AuthController.PagesControllerOffset = getRealOffset(0x6BBD54);
AuthController.PagesController = (void(*)(void*))AuthController.PagesControllerOffset;

AuthController.ReturnToTheLogInOffset = getRealOffset(0x6BC7C8);
AuthController.ReturnToTheLogIn = (void(*)(void*))AuthController.ReturnToTheLogInOffset;

AuthController.OpenPageOffset = getRealOffset(0x6BC6A8);
AuthController.OpenPage = (void(*)(void*, void *))AuthController.OpenPageOffset;

AuthController.OpenSavedOffset = getRealOffset(0x6BCB78);
AuthController.OpenSaved = (void(*)(void*))AuthController.OpenSavedOffset;

AuthController.CloseAndSaveOffset = getRealOffset(0x6BCD3C);
AuthController.CloseAndSave = (void(*)(void*))AuthController.CloseAndSaveOffset;

AuthController.CloseAllOffset = getRealOffset(0x6BC974);
AuthController.CloseAll = (void(*)(void*))AuthController.CloseAllOffset;

AuthController.OpenPopUpOffset = getRealOffset(0x6BCF00);
AuthController.OpenPopUp = (void(*)(void*, monoString*, int))AuthController.OpenPopUpOffset;

AuthController.OpenPopUp1Offset = getRealOffset(0x6BD130);
AuthController.OpenPopUp1 = (void(*)(void*, monoString*, monoString*))AuthController.OpenPopUp1Offset;

AuthController.OnErrorOffset = getRealOffset(0x6BD358);
AuthController.OnError = (void(*)(void*, void *))AuthController.OnErrorOffset;

AuthController.OnLoginOffset = getRealOffset(0x6BD39C);
AuthController.OnLogin = (void(*)(void*, void *))AuthController.OnLoginOffset;

AuthController.PagesEventsb__11_0Offset = getRealOffset(0x6BD4D0);
AuthController.PagesEventsb__11_0 = (void(*)(void*))AuthController.PagesEventsb__11_0Offset;

AuthController.PagesControllerb__12_0Offset = getRealOffset(0x6BD53C);
AuthController.PagesControllerb__12_0 = (void(*)(void*))AuthController.PagesControllerb__12_0Offset;

AuthController.PagesControllerb__12_1Offset = getRealOffset(0x6BD55C);
AuthController.PagesControllerb__12_1 = (void(*)(void*))AuthController.PagesControllerb__12_1Offset;

AuthController.PagesControllerb__12_2Offset = getRealOffset(0x6BD708);
AuthController.PagesControllerb__12_2 = (void(*)(void*))AuthController.PagesControllerb__12_2Offset;

ChangeCursor.OnPointerEnterOffset = getRealOffset(0x77EB58);
ChangeCursor.OnPointerEnter = (void(*)(void*, void *))ChangeCursor.OnPointerEnterOffset;

ChangeCursor.OnPointerExitOffset = getRealOffset(0x77EB94);
ChangeCursor.OnPointerExit = (void(*)(void*, void *))ChangeCursor.OnPointerExitOffset;

ChangeCursor.OnDisableOffset = getRealOffset(0x77EC38);
ChangeCursor.OnDisable = (void(*)(void*))ChangeCursor.OnDisableOffset;

ChangeCursor.OnEnableOffset = getRealOffset(0x77ECD8);
ChangeCursor.OnEnable = (void(*)(void*))ChangeCursor.OnEnableOffset;

ExtendedPopUp.set_OnReturnToLoginOffset = getRealOffset(0x68FF30);
ExtendedPopUp.set_OnReturnToLogin = (void(*)(void*, void *))ExtendedPopUp.set_OnReturnToLoginOffset;

ExtendedPopUp.AwakeOffset = getRealOffset(0x68FF70);
ExtendedPopUp.Awake = (void(*)(void*))ExtendedPopUp.AwakeOffset;

ExtendedPopUp.ShowPopUpOffset = getRealOffset(0x690020);
ExtendedPopUp.ShowPopUp = (void(*)(void*, monoString*, monoString*))ExtendedPopUp.ShowPopUpOffset;

LogInHotkeys.add_EnterKeyPressedEventOffset = getRealOffset(0x6F5828);
LogInHotkeys.add_EnterKeyPressedEvent = (void(*)(void*, void *))LogInHotkeys.add_EnterKeyPressedEventOffset;

LogInHotkeys.remove_EnterKeyPressedEventOffset = getRealOffset(0x6F58D8);
LogInHotkeys.remove_EnterKeyPressedEvent = (void(*)(void*, void *))LogInHotkeys.remove_EnterKeyPressedEventOffset;

LogInHotkeys.add_TabKeyPressedEventOffset = getRealOffset(0x6F5988);
LogInHotkeys.add_TabKeyPressedEvent = (void(*)(void*, void *))LogInHotkeys.add_TabKeyPressedEventOffset;

LogInHotkeys.remove_TabKeyPressedEventOffset = getRealOffset(0x6F5A38);
LogInHotkeys.remove_TabKeyPressedEvent = (void(*)(void*, void *))LogInHotkeys.remove_TabKeyPressedEventOffset;

LogInHotkeys.StartOffset = getRealOffset(0x6F5AE8);
LogInHotkeys.Start = (void(*)(void*))LogInHotkeys.StartOffset;

LogInHotkeys.OnDestroyOffset = getRealOffset(0x6F5C7C);
LogInHotkeys.OnDestroy = (void(*)(void*))LogInHotkeys.OnDestroyOffset;

LogInHotkeys.Startb__6_0Offset = getRealOffset(0x6F5DF4);
LogInHotkeys.Startb__6_0 = (void(*)(void*))LogInHotkeys.Startb__6_0Offset;

LogInHotkeys.Startb__6_1Offset = getRealOffset(0x6F5E08);
LogInHotkeys.Startb__6_1 = (void(*)(void*))LogInHotkeys.Startb__6_1Offset;

LoginPage.get_OnSuccessfulLoginOffset = getRealOffset(0x6F7A74);
LoginPage.get_OnUnsuccessfulLoginOffset = getRealOffset(0x6F7A84);
LoginPage.StartOffset = getRealOffset(0x6F7A94);
LoginPage.Start = (void(*)(void*))LoginPage.StartOffset;

LoginPage.SavedTokenAuthFailedOffset = getRealOffset(0x6F7BB0);
LoginPage.SavedTokenAuthFailed = (void(*)(void*))LoginPage.SavedTokenAuthFailedOffset;

LoginPage.TryBasicAuthOffset = getRealOffset(0x6F7BB4);
LoginPage.TryBasicAuth = (void(*)(void*))LoginPage.TryBasicAuthOffset;

LoginPage.ConfigBaseAuthOffset = getRealOffset(0x6F7CAC);
LoginPage.ConfigBaseAuth = (void(*)(void*))LoginPage.ConfigBaseAuthOffset;

LoginPage.ChangeFocusOffset = getRealOffset(0x6F8030);
LoginPage.ChangeFocus = (void(*)(void*))LoginPage.ChangeFocusOffset;

LoginPage.Startb__14_0Offset = getRealOffset(0x6F8088);
LoginPage.Startb__14_0 = (void(*)(void*, bool))LoginPage.Startb__14_0Offset;

LoginPage.TryBasicAuthb__16_0Offset = getRealOffset(0x6F80E0);
LoginPage.TryBasicAuthb__16_0 = (void(*)(void*, void *))LoginPage.TryBasicAuthb__16_0Offset;

Page.CloseOffset = getRealOffset(0x55B1F4);
Page.Close = (void(*)(void*))Page.CloseOffset;

Page.OpenOffset = getRealOffset(0x55B228);
Page.Open = (void(*)(void*))Page.OpenOffset;

PanelElementVisualize.SelectOffset = getRealOffset(0x55B264);
PanelElementVisualize.Select = (void(*)(void*))PanelElementVisualize.SelectOffset;

PanelElementVisualize.DeselectOffset = getRealOffset(0x55B2F0);
PanelElementVisualize.Deselect = (void(*)(void*))PanelElementVisualize.DeselectOffset;

PanelElementVisualize.OnPointerExitOffset = getRealOffset(0x55B37C);
PanelElementVisualize.OnPointerExit = (void(*)(void*, void *))PanelElementVisualize.OnPointerExitOffset;

PanelElementVisualize.OnPointerEnterOffset = getRealOffset(0x55B414);
PanelElementVisualize.OnPointerEnter = (void(*)(void*, void *))PanelElementVisualize.OnPointerEnterOffset;

PopUp.set_OnCloseOffset = getRealOffset(0x70CCBC);
PopUp.set_OnClose = (void(*)(void*, void *))PopUp.set_OnCloseOffset;

PopUp.AwakeOffset = getRealOffset(0x70CCFC);
PopUp.Awake = (void(*)(void*))PopUp.AwakeOffset;

PopUp.ShowPopUpOffset = getRealOffset(0x70CDA0);
PopUp.ShowPopUp = (void(*)(void*, monoString*))PopUp.ShowPopUpOffset;

PopUpController.set_OnClosePopUpOffset = getRealOffset(0x70CDF0);
PopUpController.set_OnClosePopUp = (void(*)(void*, void *))PopUpController.set_OnClosePopUpOffset;

PopUpController.set_OnReturnToLoginOffset = getRealOffset(0x70D044);
PopUpController.set_OnReturnToLogin = (void(*)(void*, void *))PopUpController.set_OnReturnToLoginOffset;

PopUpController.ShowPopUpOffset = getRealOffset(0x70D140);
PopUpController.ShowPopUp = (void(*)(void*, monoString*, int))PopUpController.ShowPopUpOffset;

PopUpController.ShowPopUp1Offset = getRealOffset(0x70D3F4);
PopUpController.ShowPopUp1 = (void(*)(void*, monoString*, monoString*))PopUpController.ShowPopUp1Offset;

ResetPasswordPage.get_OnSuccessfulResetPasswordOffset = getRealOffset(0x643CD4);
ResetPasswordPage.get_OnSuccessfulResetPassword = (void *(*)(void*))ResetPasswordPage.get_OnSuccessfulResetPasswordOffset;

ResetPasswordPage.set_OnSuccessfulResetPasswordOffset = getRealOffset(0x643CDC);
ResetPasswordPage.set_OnSuccessfulResetPassword = (void(*)(void*, void *))ResetPasswordPage.set_OnSuccessfulResetPasswordOffset;

ResetPasswordPage.get_OnUnsuccessfulResetPasswordOffset = getRealOffset(0x643CE4);
ResetPasswordPage.AwakeOffset = getRealOffset(0x643CF4);
ResetPasswordPage.Awake = (void(*)(void*))ResetPasswordPage.AwakeOffset;

ResetPasswordPage.StartOffset = getRealOffset(0x643E18);
ResetPasswordPage.Start = (void(*)(void*))ResetPasswordPage.StartOffset;

ResetPasswordPage.UpdateButtonStateOffset = getRealOffset(0x643E1C);
ResetPasswordPage.UpdateButtonState = (void(*)(void*))ResetPasswordPage.UpdateButtonStateOffset;

ResetPasswordPage.SuccessfulResetPasswordOffset = getRealOffset(0x643E68);
ResetPasswordPage.SuccessfulResetPassword = (void(*)(void*))ResetPasswordPage.SuccessfulResetPasswordOffset;

ResetPasswordPage.ResetPasswordOffset = getRealOffset(0x643F08);
ResetPasswordPage.ResetPassword = (void(*)(void*))ResetPasswordPage.ResetPasswordOffset;

ResetPasswordPage.Awakeb__10_0Offset = getRealOffset(0x64400C);
ResetPasswordPage.Awakeb__10_0 = (void(*)(void*, monoString*))ResetPasswordPage.Awakeb__10_0Offset;

SignUpPage.get_SignUpEmailOffset = getRealOffset(0x6237A8);
SignUpPage.get_SignUpEmail = (monoString *(*)(void*))SignUpPage.get_SignUpEmailOffset;

SignUpPage.get_OnSuccessfulSignUpOffset = getRealOffset(0x6237C8);
SignUpPage.get_OnUnsuccessfulSignUpOffset = getRealOffset(0x6237D8);
SignUpPage.AwakeOffset = getRealOffset(0x6237E8);
SignUpPage.Awake = (void(*)(void*))SignUpPage.AwakeOffset;

SignUpPage.StartOffset = getRealOffset(0x623AD4);
SignUpPage.Start = (void(*)(void*))SignUpPage.StartOffset;

SignUpPage.ChangeFocusOffset = getRealOffset(0x623CD0);
SignUpPage.ChangeFocus = (void(*)(void*))SignUpPage.ChangeFocusOffset;

SignUpPage.UpdateButtonStateOffset = getRealOffset(0x623BF8);
SignUpPage.UpdateButtonState = (void(*)(void*))SignUpPage.UpdateButtonStateOffset;

SignUpPage.SignUpOffset = getRealOffset(0x623D58);
SignUpPage.SignUp = (void(*)(void*))SignUpPage.SignUpOffset;

SignUpPage.SuccessfulRegistrationOffset = getRealOffset(0x624064);
SignUpPage.SuccessfulRegistration = (void(*)(void*, void *))SignUpPage.SuccessfulRegistrationOffset;

SignUpPage.Awakeb__17_0Offset = getRealOffset(0x624148);
SignUpPage.Awakeb__17_0 = (void(*)(void*, monoString*))SignUpPage.Awakeb__17_0Offset;

SignUpPage.Awakeb__17_1Offset = getRealOffset(0x62414C);
SignUpPage.Awakeb__17_1 = (void(*)(void*, monoString*))SignUpPage.Awakeb__17_1Offset;

SignUpPage.Awakeb__17_2Offset = getRealOffset(0x624150);
SignUpPage.Awakeb__17_2 = (void(*)(void*, monoString*))SignUpPage.Awakeb__17_2Offset;

SignUpPage.Awakeb__17_3Offset = getRealOffset(0x624154);
SignUpPage.Awakeb__17_3 = (void(*)(void*, bool))SignUpPage.Awakeb__17_3Offset;

VisualizeInputField.AwakeOffset = getRealOffset(0x89BA1C);
VisualizeInputField.Awake = (void(*)(void*))VisualizeInputField.AwakeOffset;

VisualizeInputField.OnSelectOffset = getRealOffset(0x89BA98);
VisualizeInputField.OnSelect = (void(*)(void*, void *))VisualizeInputField.OnSelectOffset;

VisualizeInputField.OnDeselectOffset = getRealOffset(0x89BAC8);
VisualizeInputField.OnDeselect = (void(*)(void*, void *))VisualizeInputField.OnDeselectOffset;

VisualizeInputField.OnPointerExitOffset = getRealOffset(0x89BAF8);
VisualizeInputField.OnPointerExit = (void(*)(void*, void *))VisualizeInputField.OnPointerExitOffset;

VisualizeInputField.OnPointerEnterOffset = getRealOffset(0x89BB48);
VisualizeInputField.OnPointerEnter = (void(*)(void*, void *))VisualizeInputField.OnPointerEnterOffset;

VisualizeSpecificText.OnEnableOffset = getRealOffset(0x89BBA0);
VisualizeSpecificText.OnEnable = (void(*)(void*))VisualizeSpecificText.OnEnableOffset;

VisualizeSpecificText.OnPointerEnterOffset = getRealOffset(0x89BBFC);
VisualizeSpecificText.OnPointerEnter = (void(*)(void*, void *))VisualizeSpecificText.OnPointerEnterOffset;

VisualizeSpecificText.OnPointerExitOffset = getRealOffset(0x89BC58);
VisualizeSpecificText.OnPointerExit = (void(*)(void*, void *))VisualizeSpecificText.OnPointerExitOffset;

VisualizeText.AwakeOffset = getRealOffset(0x89BCBC);
VisualizeText.Awake = (void(*)(void*))VisualizeText.AwakeOffset;

VisualizeText.OnEnableOffset = getRealOffset(0x89BD1C);
VisualizeText.OnEnable = (void(*)(void*))VisualizeText.OnEnableOffset;

VisualizeText.OnPointerEnterOffset = getRealOffset(0x89BD78);
VisualizeText.OnPointerEnter = (void(*)(void*, void *))VisualizeText.OnPointerEnterOffset;

VisualizeText.OnPointerExitOffset = getRealOffset(0x89BDD4);
VisualizeText.OnPointerExit = (void(*)(void*, void *))VisualizeText.OnPointerExitOffset;

VisualizeToggle.AwakeOffset = getRealOffset(0x89BE38);
VisualizeToggle.Awake = (void(*)(void*))VisualizeToggle.AwakeOffset;

VisualizeToggle.OnPointerExitOffset = getRealOffset(0x89BE98);
VisualizeToggle.OnPointerExit = (void(*)(void*, void *))VisualizeToggle.OnPointerExitOffset;

VisualizeToggle.OnPointerEnterOffset = getRealOffset(0x89BF38);
VisualizeToggle.OnPointerEnter = (void(*)(void*, void *))VisualizeToggle.OnPointerEnterOffset;

VisualizeToggle.OnPointerClickOffset = getRealOffset(0x89BFD8);
VisualizeToggle.OnPointerClick = (void(*)(void*, void *))VisualizeToggle.OnPointerClickOffset;

WarningPopUp.AwakeOffset = getRealOffset(0x8AA734);
WarningPopUp.Awake = (void(*)(void*))WarningPopUp.AwakeOffset;

KeyChainBinding.get_mSavePathOffset = getRealOffset(0x64FA04);
KeyChainBinding.get_mSavePath = (monoString *(*)())KeyChainBinding.get_mSavePathOffset;

KeyChainBinding.get_mUniqueIdentifierOffset = getRealOffset(0x64FA98);
KeyChainBinding.get_mUniqueIdentifier = (monoString *(*)())KeyChainBinding.get_mUniqueIdentifierOffset;

KeyChainBinding.set_mUniqueIdentifierOffset = getRealOffset(0x64FAF0);
KeyChainBinding.set_mUniqueIdentifier = (void(*)(monoString*))KeyChainBinding.set_mUniqueIdentifierOffset;

KeyChainBinding.SetKeyChainDataOffset = getRealOffset(0x650030);
KeyChainBinding.SetKeyChainData = (void(*)(monoString*, monoString*))KeyChainBinding.SetKeyChainDataOffset;

KeyChainBinding.DeleteKeyChainDataOffset = getRealOffset(0x6503B8);
KeyChainBinding.DeleteKeyChainData = (void(*)())KeyChainBinding.DeleteKeyChainDataOffset;

KeyChainBinding.LogOffset = getRealOffset(0x6503B4);
KeyChainBinding.Log = (void(*)(monoString*))KeyChainBinding.LogOffset;

KeyChainCrypto.CryptOffset = getRealOffset(0x6501C8);
KeyChainCrypto.Crypt = (monoString *(*)(monoString*, monoString*))KeyChainCrypto.CryptOffset;

KeyChainCrypto.DecryptOffset = getRealOffset(0x64FE40);
KeyChainCrypto.Decrypt = (monoString *(*)(monoString*, monoString*))KeyChainCrypto.DecryptOffset;

KeyChainDebug.OnGUIOffset = getRealOffset(0x6506A4);
KeyChainDebug.OnGUI = (void(*)(void*))KeyChainDebug.OnGUIOffset;

AmplifyColor::VersionInfo.StaticToStringOffset = getRealOffset(0x829010);
AmplifyColor::VersionInfo.StaticToString = (monoString *(*)())AmplifyColor::VersionInfo.StaticToStringOffset;

AmplifyColor::VersionInfo.ToStringOffset = getRealOffset(0x829114);
AmplifyColor::VersionInfo.ToString = (monoString *(*)(void*))AmplifyColor::VersionInfo.ToStringOffset;

AmplifyColor::VersionInfo.get_NumberOffset = getRealOffset(0x829220);
AmplifyColor::VersionInfo.get_Number = (int(*)(void*))AmplifyColor::VersionInfo.get_NumberOffset;

AmplifyColor::VersionInfo.CurrentOffset = getRealOffset(0x8292A4);
AmplifyColor::VersionInfo.Current = (void *(*)())AmplifyColor::VersionInfo.CurrentOffset;

AmplifyColor::VersionInfo.MatchesOffset = getRealOffset(0x829320);
AmplifyColor::VersionInfo.Matches = (bool(*)(void *))AmplifyColor::VersionInfo.MatchesOffset;

AmplifyColor::VolumeEffectField.ctor1Offset = getRealOffset(0x82BE7C);
AmplifyColor::VolumeEffectField.ctor1 = (void(*)(void*, void *, void *))AmplifyColor::VolumeEffectField.ctor1Offset;

AmplifyColor::VolumeEffectField.IsValidTypeOffset = getRealOffset(0x82BD60);
AmplifyColor::VolumeEffectField.IsValidType = (bool(*)(monoString*))AmplifyColor::VolumeEffectField.IsValidTypeOffset;

AmplifyColor::VolumeEffectComponent.AddFieldOffset = getRealOffset(0x82BBEC);
AmplifyColor::VolumeEffectComponent.AddField = (void *(*)(void*, void *, void *))AmplifyColor::VolumeEffectComponent.AddFieldOffset;

AmplifyColor::VolumeEffectComponent.AddField1Offset = getRealOffset(0x82BC08);
AmplifyColor::VolumeEffectComponent.AddField1 = (void *(*)(void*, void *, void *, int))AmplifyColor::VolumeEffectComponent.AddField1Offset;

AmplifyColor::VolumeEffectComponent.RemoveEffectFieldOffset = getRealOffset(0x82BF38);
AmplifyColor::VolumeEffectComponent.RemoveEffectField = (void(*)(void*, void *))AmplifyColor::VolumeEffectComponent.RemoveEffectFieldOffset;

AmplifyColor::VolumeEffectComponent.ctor1Offset = getRealOffset(0x82A408);
AmplifyColor::VolumeEffectComponent.ctor1 = (void(*)(void*, void *, void *))AmplifyColor::VolumeEffectComponent.ctor1Offset;

AmplifyColor::VolumeEffectComponent.UpdateComponentOffset = getRealOffset(0x82A0B4);
AmplifyColor::VolumeEffectComponent.UpdateComponent = (void(*)(void*, void *, void *))AmplifyColor::VolumeEffectComponent.UpdateComponentOffset;

AmplifyColor::VolumeEffectComponent.FindEffectFieldOffset = getRealOffset(0x829E7C);
AmplifyColor::VolumeEffectComponent.FindEffectField = (void *(*)(void*, monoString*))AmplifyColor::VolumeEffectComponent.FindEffectFieldOffset;

AmplifyColor::VolumeEffectComponent.ListAcceptableFieldsOffset = getRealOffset(0x82BFB4);
AmplifyColor::VolumeEffectComponent.GetFieldNamesOffset = getRealOffset(0x82C178);
AmplifyColor::VolumeEffect.BlendValuesToVolumeEffectOffset = getRealOffset(0x82946C);
AmplifyColor::VolumeEffect.BlendValuesToVolumeEffect = (void *(*)(void *, void *, void *, float))AmplifyColor::VolumeEffect.BlendValuesToVolumeEffectOffset;

AmplifyColor::VolumeEffect.AddComponentOffset = getRealOffset(0x829F9C);
AmplifyColor::VolumeEffect.AddComponent = (void *(*)(void*, void *, void *))AmplifyColor::VolumeEffect.AddComponentOffset;

AmplifyColor::VolumeEffect.RemoveEffectComponentOffset = getRealOffset(0x82A684);
AmplifyColor::VolumeEffect.RemoveEffectComponent = (void(*)(void*, void *))AmplifyColor::VolumeEffect.RemoveEffectComponentOffset;

AmplifyColor::VolumeEffect.UpdateVolumeOffset = getRealOffset(0x82A6F8);
AmplifyColor::VolumeEffect.UpdateVolume = (void(*)(void*))AmplifyColor::VolumeEffect.UpdateVolumeOffset;

AmplifyColor::VolumeEffect.SetValuesOffset = getRealOffset(0x82A910);
AmplifyColor::VolumeEffect.SetValues = (void(*)(void*, void *))AmplifyColor::VolumeEffect.SetValuesOffset;

AmplifyColor::VolumeEffect.BlendValuesOffset = getRealOffset(0x82AFF0);
AmplifyColor::VolumeEffect.BlendValues = (void(*)(void*, void *, void *, float))AmplifyColor::VolumeEffect.BlendValuesOffset;

AmplifyColor::VolumeEffect.FindEffectComponentOffset = getRealOffset(0x829CF8);
AmplifyColor::VolumeEffect.FindEffectComponent = (void *(*)(void*, monoString*))AmplifyColor::VolumeEffect.FindEffectComponentOffset;

AmplifyColor::VolumeEffect.ListAcceptableComponentsOffset = getRealOffset(0x82B6D0);
AmplifyColor::VolumeEffect.GetComponentNamesOffset = getRealOffset(0x82B8C8);
AmplifyColor::VolumeEffectContainer.AddColorEffectOffset = getRealOffset(0x82D0F0);
AmplifyColor::VolumeEffectContainer.AddColorEffect = (void(*)(void*, void *))AmplifyColor::VolumeEffectContainer.AddColorEffectOffset;

AmplifyColor::VolumeEffectContainer.AddJustColorEffectOffset = getRealOffset(0x82D3EC);
AmplifyColor::VolumeEffectContainer.AddJustColorEffect = (void *(*)(void*, void *))AmplifyColor::VolumeEffectContainer.AddJustColorEffectOffset;

AmplifyColor::VolumeEffectContainer.FindVolumeEffectOffset = getRealOffset(0x82D1AC);
AmplifyColor::VolumeEffectContainer.FindVolumeEffect = (void *(*)(void*, void *))AmplifyColor::VolumeEffectContainer.FindVolumeEffectOffset;

AmplifyColor::VolumeEffectContainer.RemoveVolumeEffectOffset = getRealOffset(0x82D484);
AmplifyColor::VolumeEffectContainer.RemoveVolumeEffect = (void(*)(void*, void *))AmplifyColor::VolumeEffectContainer.RemoveVolumeEffectOffset;

AmplifyColor::VolumeEffectContainer.GetStoredEffectsOffset = getRealOffset(0x82D4F8);
AmplifyColor::VolumeEffectFieldFlags.ctor1Offset = getRealOffset(0x82C62C);
AmplifyColor::VolumeEffectFieldFlags.ctor1 = (void(*)(void*, void *))AmplifyColor::VolumeEffectFieldFlags.ctor1Offset;

AmplifyColor::VolumeEffectComponentFlags.ctor1Offset = getRealOffset(0x82C464);
AmplifyColor::VolumeEffectComponentFlags.ctor1 = (void(*)(void*, void *))AmplifyColor::VolumeEffectComponentFlags.ctor1Offset;

AmplifyColor::VolumeEffectComponentFlags.ctor2Offset = getRealOffset(0x82C680);
AmplifyColor::VolumeEffectComponentFlags.ctor2 = (void(*)(void*, void *))AmplifyColor::VolumeEffectComponentFlags.ctor2Offset;

AmplifyColor::VolumeEffectComponentFlags.UpdateComponentFlagsOffset = getRealOffset(0x82C898);
AmplifyColor::VolumeEffectComponentFlags.UpdateComponentFlags = (void(*)(void*, void *))AmplifyColor::VolumeEffectComponentFlags.UpdateComponentFlagsOffset;

AmplifyColor::VolumeEffectComponentFlags.UpdateComponentFlags1Offset = getRealOffset(0x82CB00);
AmplifyColor::VolumeEffectComponentFlags.UpdateComponentFlags1 = (void(*)(void*, void *))AmplifyColor::VolumeEffectComponentFlags.UpdateComponentFlags1Offset;

AmplifyColor::VolumeEffectComponentFlags.GetFieldNamesOffset = getRealOffset(0x82CD20);
AmplifyColor::VolumeEffectFlags.AddComponentOffset = getRealOffset(0x82DA20);
AmplifyColor::VolumeEffectFlags.AddComponent = (void(*)(void*, void *))AmplifyColor::VolumeEffectFlags.AddComponentOffset;

AmplifyColor::VolumeEffectFlags.UpdateFlagsOffset = getRealOffset(0x82DB74);
AmplifyColor::VolumeEffectFlags.UpdateFlags = (void(*)(void*, void *))AmplifyColor::VolumeEffectFlags.UpdateFlagsOffset;

AmplifyColor::VolumeEffectFlags.GenerateEffectDataOffset = getRealOffset(0x82DF24);
AmplifyColor::VolumeEffectFlags.GenerateEffectData = (void *(*)(void*, void *))AmplifyColor::VolumeEffectFlags.GenerateEffectDataOffset;

AmplifyColor::VolumeEffectFlags.FindComponentFlagsOffset = getRealOffset(0x82E110);
AmplifyColor::VolumeEffectFlags.FindComponentFlags = (void *(*)(void*, monoString*))AmplifyColor::VolumeEffectFlags.FindComponentFlagsOffset;

AmplifyColor::VolumeEffectFlags.GetComponentNamesOffset = getRealOffset(0x82E208);
AssetBundles::AssetBundleLoadOperation.get_CurrentOffset = getRealOffset(0x841C04);
AssetBundles::AssetBundleLoadOperation.MoveNextOffset = getRealOffset(0x841C0C);
AssetBundles::AssetBundleLoadOperation.MoveNext = (bool(*)(void*))AssetBundles::AssetBundleLoadOperation.MoveNextOffset;

AssetBundles::AssetBundleLoadOperation.ResetOffset = getRealOffset(0x841C2C);
AssetBundles::AssetBundleLoadOperation.Reset = (void(*)(void*))AssetBundles::AssetBundleLoadOperation.ResetOffset;

AssetBundles::AssetBundleLoadLevelOperation.UpdateOffset = getRealOffset(0x84191C);
AssetBundles::AssetBundleLoadLevelOperation.Update = (bool(*)(void*))AssetBundles::AssetBundleLoadLevelOperation.UpdateOffset;

AssetBundles::AssetBundleLoadLevelOperation.IsDoneOffset = getRealOffset(0x8419F0);
AssetBundles::AssetBundleLoadLevelOperation.IsDone = (bool(*)(void*))AssetBundles::AssetBundleLoadLevelOperation.IsDoneOffset;

AssetBundles::AssetBundleLoadAssetOperationSimulation.UpdateOffset = getRealOffset(0x8418DC);
AssetBundles::AssetBundleLoadAssetOperationSimulation.Update = (bool(*)(void*))AssetBundles::AssetBundleLoadAssetOperationSimulation.UpdateOffset;

AssetBundles::AssetBundleLoadAssetOperationSimulation.IsDoneOffset = getRealOffset(0x8418E4);
AssetBundles::AssetBundleLoadAssetOperationSimulation.IsDone = (bool(*)(void*))AssetBundles::AssetBundleLoadAssetOperationSimulation.IsDoneOffset;

AssetBundles::AssetBundleLoadAssetOperationFull.UpdateOffset = getRealOffset(0x84140C);
AssetBundles::AssetBundleLoadAssetOperationFull.Update = (bool(*)(void*))AssetBundles::AssetBundleLoadAssetOperationFull.UpdateOffset;

AssetBundles::AssetBundleLoadAssetOperationFull.IsDoneOffset = getRealOffset(0x841810);
AssetBundles::AssetBundleLoadAssetOperationFull.IsDone = (bool(*)(void*))AssetBundles::AssetBundleLoadAssetOperationFull.IsDoneOffset;

AssetBundles::AssetBundleLoadManifestOperation.UpdateOffset = getRealOffset(0x841ACC);
AssetBundles::AssetBundleLoadManifestOperation.Update = (bool(*)(void*))AssetBundles::AssetBundleLoadManifestOperation.UpdateOffset;

AssetBundles::AssetBundleManager.get_logModeOffset = getRealOffset(0x841C30);
AssetBundles::AssetBundleManager.get_logMode = (int (*)())AssetBundles::AssetBundleManager.get_logModeOffset;

AssetBundles::AssetBundleManager.set_logModeOffset = getRealOffset(0x841CA8);
AssetBundles::AssetBundleManager.set_logMode = (void(*)(int))AssetBundles::AssetBundleManager.set_logModeOffset;

AssetBundles::AssetBundleManager.get_BaseDownloadingURLOffset = getRealOffset(0x841D24);
AssetBundles::AssetBundleManager.get_BaseDownloadingURL = (monoString *(*)())AssetBundles::AssetBundleManager.get_BaseDownloadingURLOffset;

AssetBundles::AssetBundleManager.set_BaseDownloadingURLOffset = getRealOffset(0x841D9C);
AssetBundles::AssetBundleManager.set_BaseDownloadingURL = (void(*)(monoString*))AssetBundles::AssetBundleManager.set_BaseDownloadingURLOffset;

AssetBundles::AssetBundleManager.get_ActiveVariantsOffset = getRealOffset(0x841E18);
AssetBundles::AssetBundleManager.set_AssetBundleManifestObjectOffset = getRealOffset(0x841F0C);
AssetBundles::AssetBundleManager.set_AssetBundleManifestObject = (void(*)(void *))AssetBundles::AssetBundleManager.set_AssetBundleManifestObjectOffset;

AssetBundles::AssetBundleManager.LogOffset = getRealOffset(0x841F88);
AssetBundles::AssetBundleManager.Log = (void(*)(int, monoString*))AssetBundles::AssetBundleManager.LogOffset;

AssetBundles::AssetBundleManager.GetStreamingAssetsPathOffset = getRealOffset(0x8420CC);
AssetBundles::AssetBundleManager.GetStreamingAssetsPath = (monoString *(*)())AssetBundles::AssetBundleManager.GetStreamingAssetsPathOffset;

AssetBundles::AssetBundleManager.SetSourceAssetBundleDirectoryOffset = getRealOffset(0x8421B4);
AssetBundles::AssetBundleManager.SetSourceAssetBundleDirectory = (void(*)(monoString*))AssetBundles::AssetBundleManager.SetSourceAssetBundleDirectoryOffset;

AssetBundles::AssetBundleManager.SetSourceAssetBundleURLOffset = getRealOffset(0x842298);
AssetBundles::AssetBundleManager.SetSourceAssetBundleURL = (void(*)(monoString*))AssetBundles::AssetBundleManager.SetSourceAssetBundleURLOffset;

AssetBundles::AssetBundleManager.SetDevelopmentAssetBundleServerOffset = getRealOffset(0x8423B0);
AssetBundles::AssetBundleManager.SetDevelopmentAssetBundleServer = (void(*)())AssetBundles::AssetBundleManager.SetDevelopmentAssetBundleServerOffset;

AssetBundles::AssetBundleManager.InitializeOffset = getRealOffset(0x842558);
AssetBundles::AssetBundleManager.Initialize = (void *(*)())AssetBundles::AssetBundleManager.InitializeOffset;

AssetBundles::AssetBundleManager.Initialize1Offset = getRealOffset(0x8425DC);
AssetBundles::AssetBundleManager.Initialize1 = (void *(*)(monoString*))AssetBundles::AssetBundleManager.Initialize1Offset;

AssetBundles::AssetBundleManager.LoadAssetBundleOffset = getRealOffset(0x842818);
AssetBundles::AssetBundleManager.LoadAssetBundle = (void(*)(monoString*, bool))AssetBundles::AssetBundleManager.LoadAssetBundleOffset;

AssetBundles::AssetBundleManager.RemapVariantNameOffset = getRealOffset(0x842F58);
AssetBundles::AssetBundleManager.RemapVariantName = (monoString *(*)(monoString*))AssetBundles::AssetBundleManager.RemapVariantNameOffset;

AssetBundles::AssetBundleManager.LoadAssetBundleInternalOffset = getRealOffset(0x842A04);
AssetBundles::AssetBundleManager.LoadAssetBundleInternal = (bool(*)(monoString*, bool))AssetBundles::AssetBundleManager.LoadAssetBundleInternalOffset;

AssetBundles::AssetBundleManager.LoadDependenciesOffset = getRealOffset(0x842C7C);
AssetBundles::AssetBundleManager.LoadDependencies = (void(*)(monoString*))AssetBundles::AssetBundleManager.LoadDependenciesOffset;

AssetBundles::AssetBundleManager.UnloadAssetBundleOffset = getRealOffset(0x8432C4);
AssetBundles::AssetBundleManager.UnloadAssetBundle = (void(*)(monoString*))AssetBundles::AssetBundleManager.UnloadAssetBundleOffset;

AssetBundles::AssetBundleManager.UnloadDependenciesOffset = getRealOffset(0x843484);
AssetBundles::AssetBundleManager.UnloadDependencies = (void(*)(monoString*))AssetBundles::AssetBundleManager.UnloadDependenciesOffset;

AssetBundles::AssetBundleManager.UnloadAssetBundleInternalOffset = getRealOffset(0x843344);
AssetBundles::AssetBundleManager.UnloadAssetBundleInternal = (void(*)(monoString*))AssetBundles::AssetBundleManager.UnloadAssetBundleInternalOffset;

AssetBundles::AssetBundleManager.UpdateOffset = getRealOffset(0x843604);
AssetBundles::AssetBundleManager.Update = (void(*)(void*))AssetBundles::AssetBundleManager.UpdateOffset;

AssetBundles::AssetBundleManager.LoadAssetAsyncOffset = getRealOffset(0x843DB8);
AssetBundles::AssetBundleManager.LoadAssetAsync = (void *(*)(monoString*, monoString*, void *))AssetBundles::AssetBundleManager.LoadAssetAsyncOffset;

AssetBundles::AssetBundleManager.LoadLevelAsyncOffset = getRealOffset(0x844084);
AssetBundles::AssetBundleManager.LoadLevelAsync = (void *(*)(monoString*, monoString*, bool))AssetBundles::AssetBundleManager.LoadLevelAsyncOffset;

AssetBundles::Utility.GetPlatformNameOffset = getRealOffset(0x842398);
AssetBundles::Utility.GetPlatformName = (monoString *(*)())AssetBundles::Utility.GetPlatformNameOffset;

AssetBundles::Utility.GetPlatformForAssetBundlesOffset = getRealOffset(0x844528);
AssetBundles::Utility.GetPlatformForAssetBundles = (monoString *(*)(int))AssetBundles::Utility.GetPlatformForAssetBundlesOffset;

BazaarPlugin::AbstractManager.getBazaarManagerGameObjectOffset = getRealOffset(0x6C3C10);
BazaarPlugin::AbstractManager.getBazaarManagerGameObject = (void *(*)())BazaarPlugin::AbstractManager.getBazaarManagerGameObjectOffset;

BazaarPlugin::AbstractManager.initializeOffset = getRealOffset(0x6C3D88);
BazaarPlugin::AbstractManager.initialize = (void(*)(void *))BazaarPlugin::AbstractManager.initializeOffset;

BazaarPlugin::AbstractManager.AwakeOffset = getRealOffset(0x6C4218);
BazaarPlugin::AbstractManager.Awake = (void(*)(void*))BazaarPlugin::AbstractManager.AwakeOffset;

BazaarPlugin::ActionExtensions.SafeInvokeOffset = getRealOffset(0x6C4560);
BazaarPlugin::ActionExtensions.SafeInvoke = (void(*)(void *))BazaarPlugin::ActionExtensions.SafeInvokeOffset;

BazaarPlugin::BazaarIAB.GetVersionOffset = getRealOffset(0x6C45E8);
BazaarPlugin::BazaarIAB.GetVersion = (monoString *(*)())BazaarPlugin::BazaarIAB.GetVersionOffset;

BazaarPlugin::BazaarIAB.enableLoggingOffset = getRealOffset(0x6C4870);
BazaarPlugin::BazaarIAB.enableLogging = (void(*)(bool))BazaarPlugin::BazaarIAB.enableLoggingOffset;

BazaarPlugin::BazaarIAB.initOffset = getRealOffset(0x6C4A0C);
BazaarPlugin::BazaarIAB.init = (void(*)(monoString*))BazaarPlugin::BazaarIAB.initOffset;

BazaarPlugin::BazaarIAB.unbindServiceOffset = getRealOffset(0x6C4B38);
BazaarPlugin::BazaarIAB.unbindService = (void(*)())BazaarPlugin::BazaarIAB.unbindServiceOffset;

BazaarPlugin::BazaarIAB.areSubscriptionsSupportedOffset = getRealOffset(0x6C4C98);
BazaarPlugin::BazaarIAB.areSubscriptionsSupported = (bool(*)())BazaarPlugin::BazaarIAB.areSubscriptionsSupportedOffset;

BazaarPlugin::BazaarIAB.queryPurchasesOffset = getRealOffset(0x6C5060);
BazaarPlugin::BazaarIAB.queryPurchases = (void(*)())BazaarPlugin::BazaarIAB.queryPurchasesOffset;

BazaarPlugin::BazaarIAB.purchaseProductOffset = getRealOffset(0x6C51C0);
BazaarPlugin::BazaarIAB.purchaseProduct = (void(*)(monoString*))BazaarPlugin::BazaarIAB.purchaseProductOffset;

BazaarPlugin::BazaarIAB.purchaseProduct1Offset = getRealOffset(0x6C5254);
BazaarPlugin::BazaarIAB.purchaseProduct1 = (void(*)(monoString*, monoString*))BazaarPlugin::BazaarIAB.purchaseProduct1Offset;

BazaarPlugin::BazaarIAB.consumeProductOffset = getRealOffset(0x6C53CC);
BazaarPlugin::BazaarIAB.consumeProduct = (void(*)(monoString*))BazaarPlugin::BazaarIAB.consumeProductOffset;

BazaarPlugin::IABEventManager.add_billingSupportedEventOffset = getRealOffset(0x6C68B8);
BazaarPlugin::IABEventManager.add_billingSupportedEvent = (void(*)(void *))BazaarPlugin::IABEventManager.add_billingSupportedEventOffset;

BazaarPlugin::IABEventManager.remove_billingSupportedEventOffset = getRealOffset(0x6C69BC);
BazaarPlugin::IABEventManager.remove_billingSupportedEvent = (void(*)(void *))BazaarPlugin::IABEventManager.remove_billingSupportedEventOffset;

BazaarPlugin::IABEventManager.billingSupportedOffset = getRealOffset(0x6C81FC);
BazaarPlugin::IABEventManager.billingSupported = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.billingSupportedOffset;

BazaarPlugin::IABEventManager.billingNotSupportedOffset = getRealOffset(0x6C8278);
BazaarPlugin::IABEventManager.billingNotSupported = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.billingNotSupportedOffset;

BazaarPlugin::IABEventManager.queryInventorySucceededOffset = getRealOffset(0x6C830C);
BazaarPlugin::IABEventManager.queryInventorySucceeded = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.queryInventorySucceededOffset;

BazaarPlugin::IABEventManager.queryInventoryFailedOffset = getRealOffset(0x6C8460);
BazaarPlugin::IABEventManager.queryInventoryFailed = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.queryInventoryFailedOffset;

BazaarPlugin::IABEventManager.querySkuDetailsSucceededOffset = getRealOffset(0x6C84F4);
BazaarPlugin::IABEventManager.querySkuDetailsSucceeded = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.querySkuDetailsSucceededOffset;

BazaarPlugin::IABEventManager.querySkuDetailsFailedOffset = getRealOffset(0x6C85C0);
BazaarPlugin::IABEventManager.querySkuDetailsFailed = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.querySkuDetailsFailedOffset;

BazaarPlugin::IABEventManager.queryPurchasesSucceededOffset = getRealOffset(0x6C8654);
BazaarPlugin::IABEventManager.queryPurchasesSucceeded = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.queryPurchasesSucceededOffset;

BazaarPlugin::IABEventManager.queryPurchasesFailedOffset = getRealOffset(0x6C8720);
BazaarPlugin::IABEventManager.queryPurchasesFailed = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.queryPurchasesFailedOffset;

BazaarPlugin::IABEventManager.purchaseSucceededOffset = getRealOffset(0x6C87B4);
BazaarPlugin::IABEventManager.purchaseSucceeded = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.purchaseSucceededOffset;

BazaarPlugin::IABEventManager.purchaseFailedOffset = getRealOffset(0x6C88B4);
BazaarPlugin::IABEventManager.purchaseFailed = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.purchaseFailedOffset;

BazaarPlugin::IABEventManager.consumePurchaseSucceededOffset = getRealOffset(0x6C8948);
BazaarPlugin::IABEventManager.consumePurchaseSucceeded = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.consumePurchaseSucceededOffset;

BazaarPlugin::IABEventManager.consumePurchaseFailedOffset = getRealOffset(0x6C8A48);
BazaarPlugin::IABEventManager.consumePurchaseFailed = (void(*)(void*, monoString*))BazaarPlugin::IABEventManager.consumePurchaseFailedOffset;

BazaarPlugin::BazaarPurchase.get_PackageNameOffset = getRealOffset(0x6C562C);
BazaarPlugin::BazaarPurchase.get_PackageName = (monoString *(*)(void*))BazaarPlugin::BazaarPurchase.get_PackageNameOffset;

BazaarPlugin::BazaarPurchase.set_PackageNameOffset = getRealOffset(0x6C5634);
BazaarPlugin::BazaarPurchase.set_PackageName = (void(*)(void*, monoString*))BazaarPlugin::BazaarPurchase.set_PackageNameOffset;

BazaarPlugin::BazaarPurchase.get_OrderIdOffset = getRealOffset(0x6C563C);
BazaarPlugin::BazaarPurchase.get_OrderId = (monoString *(*)(void*))BazaarPlugin::BazaarPurchase.get_OrderIdOffset;

BazaarPlugin::BazaarPurchase.set_OrderIdOffset = getRealOffset(0x6C5644);
BazaarPlugin::BazaarPurchase.set_OrderId = (void(*)(void*, monoString*))BazaarPlugin::BazaarPurchase.set_OrderIdOffset;

BazaarPlugin::BazaarPurchase.get_ProductIdOffset = getRealOffset(0x6C564C);
BazaarPlugin::BazaarPurchase.get_ProductId = (monoString *(*)(void*))BazaarPlugin::BazaarPurchase.get_ProductIdOffset;

BazaarPlugin::BazaarPurchase.set_ProductIdOffset = getRealOffset(0x6C5654);
BazaarPlugin::BazaarPurchase.set_ProductId = (void(*)(void*, monoString*))BazaarPlugin::BazaarPurchase.set_ProductIdOffset;

BazaarPlugin::BazaarPurchase.get_DeveloperPayloadOffset = getRealOffset(0x6C565C);
BazaarPlugin::BazaarPurchase.get_DeveloperPayload = (monoString *(*)(void*))BazaarPlugin::BazaarPurchase.get_DeveloperPayloadOffset;

BazaarPlugin::BazaarPurchase.set_DeveloperPayloadOffset = getRealOffset(0x6C5664);
BazaarPlugin::BazaarPurchase.set_DeveloperPayload = (void(*)(void*, monoString*))BazaarPlugin::BazaarPurchase.set_DeveloperPayloadOffset;

BazaarPlugin::BazaarPurchase.get_TypeOffset = getRealOffset(0x6C566C);
BazaarPlugin::BazaarPurchase.get_Type = (monoString *(*)(void*))BazaarPlugin::BazaarPurchase.get_TypeOffset;

BazaarPlugin::BazaarPurchase.set_TypeOffset = getRealOffset(0x6C5674);
BazaarPlugin::BazaarPurchase.set_Type = (void(*)(void*, monoString*))BazaarPlugin::BazaarPurchase.set_TypeOffset;

BazaarPlugin::BazaarPurchase.get_PurchaseTimeOffset = getRealOffset(0x6C567C);
BazaarPlugin::BazaarPurchase.get_PurchaseStateOffset = getRealOffset(0x6C5694);
BazaarPlugin::BazaarPurchase.get_PurchaseState = (int (*)(void*))BazaarPlugin::BazaarPurchase.get_PurchaseStateOffset;

BazaarPlugin::BazaarPurchase.set_PurchaseStateOffset = getRealOffset(0x6C569C);
BazaarPlugin::BazaarPurchase.set_PurchaseState = (void(*)(void*, int))BazaarPlugin::BazaarPurchase.set_PurchaseStateOffset;

BazaarPlugin::BazaarPurchase.get_PurchaseTokenOffset = getRealOffset(0x6C56A4);
BazaarPlugin::BazaarPurchase.get_PurchaseToken = (monoString *(*)(void*))BazaarPlugin::BazaarPurchase.get_PurchaseTokenOffset;

BazaarPlugin::BazaarPurchase.set_PurchaseTokenOffset = getRealOffset(0x6C56AC);
BazaarPlugin::BazaarPurchase.set_PurchaseToken = (void(*)(void*, monoString*))BazaarPlugin::BazaarPurchase.set_PurchaseTokenOffset;

BazaarPlugin::BazaarPurchase.get_SignatureOffset = getRealOffset(0x6C56B4);
BazaarPlugin::BazaarPurchase.get_Signature = (monoString *(*)(void*))BazaarPlugin::BazaarPurchase.get_SignatureOffset;

BazaarPlugin::BazaarPurchase.set_SignatureOffset = getRealOffset(0x6C56BC);
BazaarPlugin::BazaarPurchase.set_Signature = (void(*)(void*, monoString*))BazaarPlugin::BazaarPurchase.set_SignatureOffset;

BazaarPlugin::BazaarPurchase.get_OriginalJsonOffset = getRealOffset(0x6C56C4);
BazaarPlugin::BazaarPurchase.get_OriginalJson = (monoString *(*)(void*))BazaarPlugin::BazaarPurchase.get_OriginalJsonOffset;

BazaarPlugin::BazaarPurchase.set_OriginalJsonOffset = getRealOffset(0x6C56CC);
BazaarPlugin::BazaarPurchase.set_OriginalJson = (void(*)(void*, monoString*))BazaarPlugin::BazaarPurchase.set_OriginalJsonOffset;

BazaarPlugin::BazaarPurchase.fromJsonArrayOffset = getRealOffset(0x6C56D4);
BazaarPlugin::BazaarPurchase.fromJsonOffset = getRealOffset(0x6C5A58);
BazaarPlugin::BazaarPurchase.fromJson = (void(*)(void*, void *))BazaarPlugin::BazaarPurchase.fromJsonOffset;

BazaarPlugin::BazaarPurchase.ToStringOffset = getRealOffset(0x6C5DB4);
BazaarPlugin::BazaarPurchase.ToString = (monoString *(*)(void*))BazaarPlugin::BazaarPurchase.ToStringOffset;

BazaarPlugin::BazaarSkuInfo.get_TitleOffset = getRealOffset(0x6C6110);
BazaarPlugin::BazaarSkuInfo.get_Title = (monoString *(*)(void*))BazaarPlugin::BazaarSkuInfo.get_TitleOffset;

BazaarPlugin::BazaarSkuInfo.set_TitleOffset = getRealOffset(0x6C6118);
BazaarPlugin::BazaarSkuInfo.set_Title = (void(*)(void*, monoString*))BazaarPlugin::BazaarSkuInfo.set_TitleOffset;

BazaarPlugin::BazaarSkuInfo.get_PriceOffset = getRealOffset(0x6C6120);
BazaarPlugin::BazaarSkuInfo.get_Price = (monoString *(*)(void*))BazaarPlugin::BazaarSkuInfo.get_PriceOffset;

BazaarPlugin::BazaarSkuInfo.set_PriceOffset = getRealOffset(0x6C6128);
BazaarPlugin::BazaarSkuInfo.set_Price = (void(*)(void*, monoString*))BazaarPlugin::BazaarSkuInfo.set_PriceOffset;

BazaarPlugin::BazaarSkuInfo.get_TypeOffset = getRealOffset(0x6C6130);
BazaarPlugin::BazaarSkuInfo.get_Type = (monoString *(*)(void*))BazaarPlugin::BazaarSkuInfo.get_TypeOffset;

BazaarPlugin::BazaarSkuInfo.set_TypeOffset = getRealOffset(0x6C6138);
BazaarPlugin::BazaarSkuInfo.set_Type = (void(*)(void*, monoString*))BazaarPlugin::BazaarSkuInfo.set_TypeOffset;

BazaarPlugin::BazaarSkuInfo.get_DescriptionOffset = getRealOffset(0x6C6140);
BazaarPlugin::BazaarSkuInfo.get_Description = (monoString *(*)(void*))BazaarPlugin::BazaarSkuInfo.get_DescriptionOffset;

BazaarPlugin::BazaarSkuInfo.set_DescriptionOffset = getRealOffset(0x6C6148);
BazaarPlugin::BazaarSkuInfo.set_Description = (void(*)(void*, monoString*))BazaarPlugin::BazaarSkuInfo.set_DescriptionOffset;

BazaarPlugin::BazaarSkuInfo.get_ProductIdOffset = getRealOffset(0x6C6150);
BazaarPlugin::BazaarSkuInfo.get_ProductId = (monoString *(*)(void*))BazaarPlugin::BazaarSkuInfo.get_ProductIdOffset;

BazaarPlugin::BazaarSkuInfo.set_ProductIdOffset = getRealOffset(0x6C6158);
BazaarPlugin::BazaarSkuInfo.set_ProductId = (void(*)(void*, monoString*))BazaarPlugin::BazaarSkuInfo.set_ProductIdOffset;

BazaarPlugin::BazaarSkuInfo.fromJsonArrayOffset = getRealOffset(0x6C6160);
BazaarPlugin::BazaarSkuInfo.fromJsonOffset = getRealOffset(0x6C64E4);
BazaarPlugin::BazaarSkuInfo.fromJson = (void(*)(void*, void *))BazaarPlugin::BazaarSkuInfo.fromJsonOffset;

BazaarPlugin::BazaarSkuInfo.ToStringOffset = getRealOffset(0x6C66B4);
BazaarPlugin::BazaarSkuInfo.ToString = (monoString *(*)(void*))BazaarPlugin::BazaarSkuInfo.ToStringOffset;

CodeStageAdvancedFPSCounter::APITester.StartOffset = getRealOffset(0x78AC9C);
CodeStageAdvancedFPSCounter::APITester.Start = (void(*)(void*))CodeStageAdvancedFPSCounter::APITester.StartOffset;

CodeStageAdvancedFPSCounter::APITester.OnFPSLevelChangedOffset = getRealOffset(0x78AE4C);
CodeStageAdvancedFPSCounter::APITester.OnFPSLevelChanged = (void(*)(void*, int))CodeStageAdvancedFPSCounter::APITester.OnFPSLevelChangedOffset;

CodeStageAdvancedFPSCounter::APITester.OnGUIOffset = getRealOffset(0x78AE54);
CodeStageAdvancedFPSCounter::APITester.OnGUI = (void(*)(void*))CodeStageAdvancedFPSCounter::APITester.OnGUIOffset;

CodeStageAdvancedFPSCounter::APITester.SliderLabelOffset = getRealOffset(0x790B04);
CodeStageAdvancedFPSCounter::APITester.SliderLabel = (float(*)(float, float, float))CodeStageAdvancedFPSCounter::APITester.SliderLabelOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_OperationModeOffset = getRealOffset(0x78727C);
CodeStageAdvancedFPSCounter::AFPSCounter.get_OperationMode = (int (*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.get_OperationModeOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_OperationModeOffset = getRealOffset(0x787284);
CodeStageAdvancedFPSCounter::AFPSCounter.set_OperationMode = (void(*)(void*, int))CodeStageAdvancedFPSCounter::AFPSCounter.set_OperationModeOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_ForceFrameRateOffset = getRealOffset(0x787AE4);
CodeStageAdvancedFPSCounter::AFPSCounter.get_ForceFrameRate = (bool(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.get_ForceFrameRateOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_ForceFrameRateOffset = getRealOffset(0x787AEC);
CodeStageAdvancedFPSCounter::AFPSCounter.set_ForceFrameRate = (void(*)(void*, bool))CodeStageAdvancedFPSCounter::AFPSCounter.set_ForceFrameRateOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_ForcedFrameRateOffset = getRealOffset(0x787B50);
CodeStageAdvancedFPSCounter::AFPSCounter.get_ForcedFrameRate = (int(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.get_ForcedFrameRateOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_ForcedFrameRateOffset = getRealOffset(0x787B58);
CodeStageAdvancedFPSCounter::AFPSCounter.set_ForcedFrameRate = (void(*)(void*, int))CodeStageAdvancedFPSCounter::AFPSCounter.set_ForcedFrameRateOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_ScaleFactorOffset = getRealOffset(0x787BA8);
CodeStageAdvancedFPSCounter::AFPSCounter.get_ScaleFactor = (float(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.get_ScaleFactorOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_ScaleFactorOffset = getRealOffset(0x787BB0);
CodeStageAdvancedFPSCounter::AFPSCounter.set_ScaleFactor = (void(*)(void*, float))CodeStageAdvancedFPSCounter::AFPSCounter.set_ScaleFactorOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_LabelsFontOffset = getRealOffset(0x787CE4);
CodeStageAdvancedFPSCounter::AFPSCounter.get_LabelsFont = (void *(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.get_LabelsFontOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_LabelsFontOffset = getRealOffset(0x787CEC);
CodeStageAdvancedFPSCounter::AFPSCounter.set_LabelsFont = (void(*)(void*, void *))CodeStageAdvancedFPSCounter::AFPSCounter.set_LabelsFontOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_FontSizeOffset = getRealOffset(0x787E20);
CodeStageAdvancedFPSCounter::AFPSCounter.get_FontSize = (int(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.get_FontSizeOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_FontSizeOffset = getRealOffset(0x787E28);
CodeStageAdvancedFPSCounter::AFPSCounter.set_FontSize = (void(*)(void*, int))CodeStageAdvancedFPSCounter::AFPSCounter.set_FontSizeOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_LineSpacingOffset = getRealOffset(0x787FA0);
CodeStageAdvancedFPSCounter::AFPSCounter.get_LineSpacing = (float(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.get_LineSpacingOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_LineSpacingOffset = getRealOffset(0x787FA8);
CodeStageAdvancedFPSCounter::AFPSCounter.set_LineSpacing = (void(*)(void*, float))CodeStageAdvancedFPSCounter::AFPSCounter.set_LineSpacingOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_CountersSpacingOffset = getRealOffset(0x7881AC);
CodeStageAdvancedFPSCounter::AFPSCounter.get_CountersSpacing = (int(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.get_CountersSpacingOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_CountersSpacingOffset = getRealOffset(0x7881B4);
CodeStageAdvancedFPSCounter::AFPSCounter.set_CountersSpacing = (void(*)(void*, int))CodeStageAdvancedFPSCounter::AFPSCounter.set_CountersSpacingOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_PaddingOffsetOffset = getRealOffset(0x7882D4);
CodeStageAdvancedFPSCounter::AFPSCounter.get_PaddingOffset = (Vector2 (*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.get_PaddingOffsetOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_PaddingOffsetOffset = getRealOffset(0x7882E8);
CodeStageAdvancedFPSCounter::AFPSCounter.set_PaddingOffset = (void(*)(void*, Vector2))CodeStageAdvancedFPSCounter::AFPSCounter.set_PaddingOffsetOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_SortingOrderOffset = getRealOffset(0x788510);
CodeStageAdvancedFPSCounter::AFPSCounter.get_SortingOrder = (int(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.get_SortingOrderOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_SortingOrderOffset = getRealOffset(0x788518);
CodeStageAdvancedFPSCounter::AFPSCounter.set_SortingOrder = (void(*)(void*, int))CodeStageAdvancedFPSCounter::AFPSCounter.set_SortingOrderOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_InstanceOffset = getRealOffset(0x788950);
CodeStageAdvancedFPSCounter::AFPSCounter.get_Instance = (void *(*)())CodeStageAdvancedFPSCounter::AFPSCounter.get_InstanceOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.set_InstanceOffset = getRealOffset(0x7889A8);
CodeStageAdvancedFPSCounter::AFPSCounter.set_Instance = (void(*)(void *))CodeStageAdvancedFPSCounter::AFPSCounter.set_InstanceOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.get_GetOrCreateInstanceOffset = getRealOffset(0x788A04);
CodeStageAdvancedFPSCounter::AFPSCounter.get_GetOrCreateInstance = (void *(*)())CodeStageAdvancedFPSCounter::AFPSCounter.get_GetOrCreateInstanceOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.AddToSceneOffset = getRealOffset(0x788CE0);
CodeStageAdvancedFPSCounter::AFPSCounter.AddToScene = (void *(*)())CodeStageAdvancedFPSCounter::AFPSCounter.AddToSceneOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.DisposeOffset = getRealOffset(0x788CE4);
CodeStageAdvancedFPSCounter::AFPSCounter.Dispose = (void(*)())CodeStageAdvancedFPSCounter::AFPSCounter.DisposeOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.Color32ToHexOffset = getRealOffset(0x788F20);
CodeStageAdvancedFPSCounter::AFPSCounter.Color32ToHex = (monoString *(*)(int))CodeStageAdvancedFPSCounter::AFPSCounter.Color32ToHexOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.CreateInSceneOffset = getRealOffset(0x788FE4);
CodeStageAdvancedFPSCounter::AFPSCounter.CreateInScene = (void *(*)())CodeStageAdvancedFPSCounter::AFPSCounter.CreateInSceneOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.CreateInScene1Offset = getRealOffset(0x788BA0);
CodeStageAdvancedFPSCounter::AFPSCounter.CreateInScene1 = (void *(*)(bool))CodeStageAdvancedFPSCounter::AFPSCounter.CreateInScene1Offset;

CodeStageAdvancedFPSCounter::AFPSCounter.AwakeOffset = getRealOffset(0x788FEC);
CodeStageAdvancedFPSCounter::AFPSCounter.Awake = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.AwakeOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.UpdateOffset = getRealOffset(0x7898EC);
CodeStageAdvancedFPSCounter::AFPSCounter.Update = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.UpdateOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.OnLevelWasLoadedOffset = getRealOffset(0x789950);
CodeStageAdvancedFPSCounter::AFPSCounter.OnLevelWasLoaded = (void(*)(void*, int))CodeStageAdvancedFPSCounter::AFPSCounter.OnLevelWasLoadedOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.OnEnableOffset = getRealOffset(0x7874BC);
CodeStageAdvancedFPSCounter::AFPSCounter.OnEnable = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.OnEnableOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.OnDisableOffset = getRealOffset(0x7879E8);
CodeStageAdvancedFPSCounter::AFPSCounter.OnDisable = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.OnDisableOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.OnDestroyOffset = getRealOffset(0x789D98);
CodeStageAdvancedFPSCounter::AFPSCounter.OnDestroy = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.OnDestroyOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.MakeDrawableLabelDirtyOffset = getRealOffset(0x78A064);
CodeStageAdvancedFPSCounter::AFPSCounter.MakeDrawableLabelDirty = (void(*)(void*, int))CodeStageAdvancedFPSCounter::AFPSCounter.MakeDrawableLabelDirtyOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.UpdateTextsOffset = getRealOffset(0x78753C);
CodeStageAdvancedFPSCounter::AFPSCounter.UpdateTexts = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.UpdateTextsOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.ConfigureCanvasOffset = getRealOffset(0x789344);
CodeStageAdvancedFPSCounter::AFPSCounter.ConfigureCanvas = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.ConfigureCanvasOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.ConfigureLabelsOffset = getRealOffset(0x7896D4);
CodeStageAdvancedFPSCounter::AFPSCounter.ConfigureLabels = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.ConfigureLabelsOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.DisposeInternalOffset = getRealOffset(0x788E00);
CodeStageAdvancedFPSCounter::AFPSCounter.DisposeInternal = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.DisposeInternalOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.SwitchCounterOffset = getRealOffset(0x78992C);
CodeStageAdvancedFPSCounter::AFPSCounter.SwitchCounter = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.SwitchCounterOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.ActivateCountersOffset = getRealOffset(0x789AF4);
CodeStageAdvancedFPSCounter::AFPSCounter.ActivateCounters = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.ActivateCountersOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.DeactivateCountersOffset = getRealOffset(0x789BD0);
CodeStageAdvancedFPSCounter::AFPSCounter.DeactivateCounters = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.DeactivateCountersOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.RefreshForcedFrameRateOffset = getRealOffset(0x787B48);
CodeStageAdvancedFPSCounter::AFPSCounter.RefreshForcedFrameRate = (void(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.RefreshForcedFrameRateOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.RefreshForcedFrameRate1Offset = getRealOffset(0x789D10);
CodeStageAdvancedFPSCounter::AFPSCounter.RefreshForcedFrameRate1 = (void(*)(void*, bool))CodeStageAdvancedFPSCounter::AFPSCounter.RefreshForcedFrameRate1Offset;

CodeStageAdvancedFPSCounter::AFPSCounter.UpdateFPSCounterOffset = getRealOffset(0x78A7F0);
CodeStageAdvancedFPSCounter::AFPSCounter.UpdateFPSCounter = (void *(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.UpdateFPSCounterOffset;

CodeStageAdvancedFPSCounter::AFPSCounter.UpdateMemoryCounterOffset = getRealOffset(0x78A890);
CodeStageAdvancedFPSCounter::AFPSCounter.UpdateMemoryCounter = (void *(*)(void*))CodeStageAdvancedFPSCounter::AFPSCounter.UpdateMemoryCounterOffset;

CodeStageAdvancedFPSCounter::UIUtils.ResetRectTransformOffset = getRealOffset(0x78A4D8);
CodeStageAdvancedFPSCounter::UIUtils.ResetRectTransform = (void(*)(void *))CodeStageAdvancedFPSCounter::UIUtils.ResetRectTransformOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.get_EnabledOffset = getRealOffset(0x791840);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.get_Enabled = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.get_EnabledOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.set_EnabledOffset = getRealOffset(0x790E60);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.set_Enabled = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.set_EnabledOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.get_AnchorOffset = getRealOffset(0x791848);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.get_Anchor = (int (*)(void*))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.get_AnchorOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.set_AnchorOffset = getRealOffset(0x790EE4);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.set_Anchor = (void(*)(void*, int))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.set_AnchorOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.get_ColorOffset = getRealOffset(0x791850);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.get_Color = (Color (*)(void*))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.get_ColorOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.set_ColorOffset = getRealOffset(0x791860);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.set_Color = (void(*)(void*, Color))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.set_ColorOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.RefreshOffset = getRealOffset(0x791904);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.Refresh = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.RefreshOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.UpdateValueOffset = getRealOffset(0x791964);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.UpdateValue = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.UpdateValueOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.InitOffset = getRealOffset(0x791978);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.Init = (void(*)(void*, void *))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.InitOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.DisposeOffset = getRealOffset(0x78A000);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.Dispose = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.DisposeOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.ActivateOffset = getRealOffset(0x791980);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.Activate = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.ActivateOffset;

CodeStageAdvancedFPSCounterCountersData::BaseCounterData.DeactivateOffset = getRealOffset(0x791A24);
CodeStageAdvancedFPSCounterCountersData::BaseCounterData.Deactivate = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::BaseCounterData.DeactivateOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_CpuModelOffset = getRealOffset(0x791A90);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_CpuModel = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_CpuModelOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_CpuModelOffset = getRealOffset(0x791504);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_CpuModel = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_CpuModelOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_GpuModelOffset = getRealOffset(0x791A98);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_GpuModel = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_GpuModelOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_GpuModelOffset = getRealOffset(0x79155C);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_GpuModel = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_GpuModelOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_RamSizeOffset = getRealOffset(0x791AA0);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_RamSize = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_RamSizeOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_RamSizeOffset = getRealOffset(0x7915B4);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_RamSize = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_RamSizeOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_ScreenDataOffset = getRealOffset(0x791AA8);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_ScreenData = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_ScreenDataOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_ScreenDataOffset = getRealOffset(0x79160C);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_ScreenData = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_ScreenDataOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_LastValueOffset = getRealOffset(0x791AB0);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_LastValue = (monoString *(*)(void*))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.get_LastValueOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_LastValueOffset = getRealOffset(0x791AB8);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_LastValue = (void(*)(void*, monoString*))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.set_LastValueOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.ActivateOffset = getRealOffset(0x791AC0);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.Activate = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.ActivateOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.DeactivateOffset = getRealOffset(0x791BA8);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.Deactivate = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.DeactivateOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.UpdateValueOffset = getRealOffset(0x791C0C);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.UpdateValue = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.UpdateValueOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.CacheCurrentColorOffset = getRealOffset(0x7925B0);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.CacheCurrentColor = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.CacheCurrentColorOffset;

CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.HasDataOffset = getRealOffset(0x791B6C);
CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.HasData = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::DeviceInfoCounterData.HasDataOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_UpdateIntervalOffset = getRealOffset(0x7926F4);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_UpdateInterval = (float(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_UpdateIntervalOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_UpdateIntervalOffset = getRealOffset(0x790F68);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_UpdateInterval = (void(*)(void*, float))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_UpdateIntervalOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_MillisecondsOffset = getRealOffset(0x79278C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_Milliseconds = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_MillisecondsOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_MillisecondsOffset = getRealOffset(0x791038);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_Milliseconds = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_MillisecondsOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_AverageOffset = getRealOffset(0x792794);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_Average = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_AverageOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_AverageOffset = getRealOffset(0x79109C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_Average = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_AverageOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_AverageSamplesOffset = getRealOffset(0x79279C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_AverageSamples = (int(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_AverageSamplesOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_AverageSamplesOffset = getRealOffset(0x791100);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_AverageSamples = (void(*)(void*, int))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_AverageSamplesOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_MinMaxOffset = getRealOffset(0x7927A4);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_MinMax = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_MinMaxOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_MinMaxOffset = getRealOffset(0x7911F0);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_MinMax = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_MinMaxOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_MinMaxNewLineOffset = getRealOffset(0x7927AC);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_MinMaxNewLine = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_MinMaxNewLineOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_MinMaxNewLineOffset = getRealOffset(0x791254);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_MinMaxNewLine = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_MinMaxNewLineOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_ColorWarningOffset = getRealOffset(0x7927B4);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_ColorWarning = (Color (*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_ColorWarningOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_ColorWarningOffset = getRealOffset(0x7927C4);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_ColorWarning = (void(*)(void*, Color))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_ColorWarningOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_ColorCriticalOffset = getRealOffset(0x792964);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_ColorCritical = (Color (*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_ColorCriticalOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_ColorCriticalOffset = getRealOffset(0x792974);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_ColorCritical = (void(*)(void*, Color))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_ColorCriticalOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastValueOffset = getRealOffset(0x792B14);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastValue = (int(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastValueOffset = getRealOffset(0x792B1C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastValue = (void(*)(void*, int))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastMillisecondsValueOffset = getRealOffset(0x792B24);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastMillisecondsValue = (float(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastMillisecondsValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastMillisecondsValueOffset = getRealOffset(0x792B2C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastMillisecondsValue = (void(*)(void*, float))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastMillisecondsValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastAverageValueOffset = getRealOffset(0x792B34);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastAverageValue = (int(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastAverageValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastAverageValueOffset = getRealOffset(0x792B3C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastAverageValue = (void(*)(void*, int))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastAverageValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastMinimumValueOffset = getRealOffset(0x792B44);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastMinimumValue = (int(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastMinimumValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastMinimumValueOffset = getRealOffset(0x792B4C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastMinimumValue = (void(*)(void*, int))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastMinimumValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastMaximumValueOffset = getRealOffset(0x792B54);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastMaximumValue = (int(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_LastMaximumValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastMaximumValueOffset = getRealOffset(0x792B5C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastMaximumValue = (void(*)(void*, int))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_LastMaximumValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_CurrentFpsLevelOffset = getRealOffset(0x792B64);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_CurrentFpsLevel = (int (*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.get_CurrentFpsLevelOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_CurrentFpsLevelOffset = getRealOffset(0x792B6C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_CurrentFpsLevel = (void(*)(void*, int))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.set_CurrentFpsLevelOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.ResetAverageOffset = getRealOffset(0x789A98);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.ResetAverage = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.ResetAverageOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.ResetMinMaxOffset = getRealOffset(0x789A44);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.ResetMinMax = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.ResetMinMaxOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.ActivateOffset = getRealOffset(0x792B74);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.Activate = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.ActivateOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.DeactivateOffset = getRealOffset(0x792D00);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.Deactivate = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.DeactivateOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.UpdateValueOffset = getRealOffset(0x792DA4);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.UpdateValue = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.UpdateValueOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.CacheCurrentColorOffset = getRealOffset(0x793550);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.CacheCurrentColor = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.CacheCurrentColorOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.CacheWarningColorOffset = getRealOffset(0x79285C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.CacheWarningColor = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.CacheWarningColorOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.CacheCriticalColorOffset = getRealOffset(0x792A0C);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.CacheCriticalColor = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.CacheCriticalColorOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.RestartCoroutineOffset = getRealOffset(0x7926FC);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.RestartCoroutine = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.RestartCoroutineOffset;

CodeStageAdvancedFPSCounterCountersData::FPSCounterData.GetAverageFromAccumulatedSamplesOffset = getRealOffset(0x7934B8);
CodeStageAdvancedFPSCounterCountersData::FPSCounterData.GetAverageFromAccumulatedSamples = (float(*)(void*))CodeStageAdvancedFPSCounterCountersData::FPSCounterData.GetAverageFromAccumulatedSamplesOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_UpdateIntervalOffset = getRealOffset(0x793658);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_UpdateInterval = (float(*)(void*))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_UpdateIntervalOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_UpdateIntervalOffset = getRealOffset(0x7912AC);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_UpdateInterval = (void(*)(void*, float))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_UpdateIntervalOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_PreciseOffset = getRealOffset(0x7936F0);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_Precise = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_PreciseOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_PreciseOffset = getRealOffset(0x79137C);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_Precise = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_PreciseOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_TotalOffset = getRealOffset(0x7936F8);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_Total = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_TotalOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_TotalOffset = getRealOffset(0x7913D4);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_Total = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_TotalOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_AllocatedOffset = getRealOffset(0x793700);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_Allocated = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_AllocatedOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_AllocatedOffset = getRealOffset(0x791438);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_Allocated = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_AllocatedOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_MonoUsageOffset = getRealOffset(0x793708);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_MonoUsage = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_MonoUsageOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_MonoUsageOffset = getRealOffset(0x79149C);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_MonoUsage = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.set_MonoUsageOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_LastTotalValueOffset = getRealOffset(0x793710);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_LastAllocatedValueOffset = getRealOffset(0x793720);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.get_LastMonoValueOffset = getRealOffset(0x793730);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.CacheCurrentColorOffset = getRealOffset(0x793748);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.CacheCurrentColor = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.CacheCurrentColorOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.ActivateOffset = getRealOffset(0x7937CC);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.Activate = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.ActivateOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.DeactivateOffset = getRealOffset(0x793C1C);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.Deactivate = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.DeactivateOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.UpdateValueOffset = getRealOffset(0x793CE0);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.UpdateValue = (void(*)(void*, bool))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.UpdateValueOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.RestartCoroutineOffset = getRealOffset(0x793660);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.RestartCoroutine = (void(*)(void*))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.RestartCoroutineOffset;

CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.HasDataOffset = getRealOffset(0x793BEC);
CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.HasData = (bool(*)(void*))CodeStageAdvancedFPSCounterCountersData::MemoryCounterData.HasDataOffset;

CodeStageAdvancedFPSCounterLabels::DrawableLabel.CheckAndUpdateOffset = getRealOffset(0x78A0C4);
CodeStageAdvancedFPSCounterLabels::DrawableLabel.CheckAndUpdate = (void(*)(void*))CodeStageAdvancedFPSCounterLabels::DrawableLabel.CheckAndUpdateOffset;

CodeStageAdvancedFPSCounterLabels::DrawableLabel.ClearOffset = getRealOffset(0x7873B8);
CodeStageAdvancedFPSCounterLabels::DrawableLabel.Clear = (void(*)(void*))CodeStageAdvancedFPSCounterLabels::DrawableLabel.ClearOffset;

CodeStageAdvancedFPSCounterLabels::DrawableLabel.DisposeOffset = getRealOffset(0x78A048);
CodeStageAdvancedFPSCounterLabels::DrawableLabel.Dispose = (void(*)(void*))CodeStageAdvancedFPSCounterLabels::DrawableLabel.DisposeOffset;

CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeFontOffset = getRealOffset(0x787E18);
CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeFont = (void(*)(void*, void *))CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeFontOffset;

CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeFontSizeOffset = getRealOffset(0x787EE4);
CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeFontSize = (void(*)(void*, int))CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeFontSizeOffset;

CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeOffsetOffset = getRealOffset(0x78843C);
CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeOffset = (void(*)(void*, Vector2))CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeOffsetOffset;

CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeLineSpacingOffset = getRealOffset(0x7880E4);
CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeLineSpacing = (void(*)(void*, float))CodeStageAdvancedFPSCounterLabels::DrawableLabel.ChangeLineSpacingOffset;

CodeStageAdvancedFPSCounterLabels::DrawableLabel.UpdateTextPositionOffset = getRealOffset(0x794480);
CodeStageAdvancedFPSCounterLabels::DrawableLabel.UpdateTextPosition = (void(*)(void*))CodeStageAdvancedFPSCounterLabels::DrawableLabel.UpdateTextPositionOffset;

CodeStageAdvancedFPSCounterLabels::DrawableLabel.NormalizeOffsetOffset = getRealOffset(0x7942D8);
CodeStageAdvancedFPSCounterLabels::DrawableLabel.NormalizeOffset = (void(*)(void*))CodeStageAdvancedFPSCounterLabels::DrawableLabel.NormalizeOffsetOffset;

CodeStageAdvancedFPSCounterLabels::DrawableLabel.ApplyFontOffset = getRealOffset(0x794360);
CodeStageAdvancedFPSCounterLabels::DrawableLabel.ApplyFont = (void(*)(void*))CodeStageAdvancedFPSCounterLabels::DrawableLabel.ApplyFontOffset;

CodeStageAntiCheatCommon::ACTkByte4.ShuffleOffset = getRealOffset(0x3D71F0);
CodeStageAntiCheatCommon::ACTkByte4.Shuffle = (void(*)(void*))CodeStageAntiCheatCommon::ACTkByte4.ShuffleOffset;

CodeStageAntiCheatCommon::ACTkByte4.UnShuffleOffset = getRealOffset(0x3D7204);
CodeStageAntiCheatCommon::ACTkByte4.UnShuffle = (void(*)(void*))CodeStageAntiCheatCommon::ACTkByte4.UnShuffleOffset;

CodeStageAntiCheatCommon::ACTkByte8.ShuffleOffset = getRealOffset(0x3D7218);
CodeStageAntiCheatCommon::ACTkByte8.Shuffle = (void(*)(void*))CodeStageAntiCheatCommon::ACTkByte8.ShuffleOffset;

CodeStageAntiCheatCommon::ACTkByte8.UnShuffleOffset = getRealOffset(0x3D724C);
CodeStageAntiCheatCommon::ACTkByte8.UnShuffle = (void(*)(void*))CodeStageAntiCheatCommon::ACTkByte8.UnShuffleOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.add_CheatDetectedOffset = getRealOffset(0x794A10);
CodeStageAntiCheatDetectors::ACTkDetectorBase.add_CheatDetected = (void(*)(void*, void *))CodeStageAntiCheatDetectors::ACTkDetectorBase.add_CheatDetectedOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.remove_CheatDetectedOffset = getRealOffset(0x794AC0);
CodeStageAntiCheatDetectors::ACTkDetectorBase.remove_CheatDetected = (void(*)(void*, void *))CodeStageAntiCheatDetectors::ACTkDetectorBase.remove_CheatDetectedOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.get_IsRunningOffset = getRealOffset(0x794B70);
CodeStageAntiCheatDetectors::ACTkDetectorBase.get_IsRunning = (bool(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.get_IsRunningOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.StartOffset = getRealOffset(0x794B78);
CodeStageAntiCheatDetectors::ACTkDetectorBase.Start = (void(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.StartOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.OnEnableOffset = getRealOffset(0x794CA8);
CodeStageAntiCheatDetectors::ACTkDetectorBase.OnEnable = (void(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.OnEnableOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.OnDisableOffset = getRealOffset(0x794CB8);
CodeStageAntiCheatDetectors::ACTkDetectorBase.OnDisable = (void(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.OnDisableOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.OnApplicationQuitOffset = getRealOffset(0x794CC8);
CodeStageAntiCheatDetectors::ACTkDetectorBase.OnApplicationQuit = (void(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.OnApplicationQuitOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.OnDestroyOffset = getRealOffset(0x794CD8);
CodeStageAntiCheatDetectors::ACTkDetectorBase.OnDestroy = (void(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.OnDestroyOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.OnCheatingDetectedOffset = getRealOffset(0x794E40);
CodeStageAntiCheatDetectors::ACTkDetectorBase.OnCheatingDetected = (void(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.OnCheatingDetectedOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.InitOffset = getRealOffset(0x794EB8);
CodeStageAntiCheatDetectors::ACTkDetectorBase.Init = (bool(*)(void*, void *, monoString*))CodeStageAntiCheatDetectors::ACTkDetectorBase.InitOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.DisposeInternalOffset = getRealOffset(0x795130);
CodeStageAntiCheatDetectors::ACTkDetectorBase.DisposeInternal = (void(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.DisposeInternalOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.DetectorHasCallbacksOffset = getRealOffset(0x7951AC);
CodeStageAntiCheatDetectors::ACTkDetectorBase.DetectorHasCallbacks = (bool(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.DetectorHasCallbacksOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.StopDetectionInternalOffset = getRealOffset(0x7951D0);
CodeStageAntiCheatDetectors::ACTkDetectorBase.StopDetectionInternal = (void(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.StopDetectionInternalOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.PauseDetectorOffset = getRealOffset(0x7951E0);
CodeStageAntiCheatDetectors::ACTkDetectorBase.PauseDetector = (void(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.PauseDetectorOffset;

CodeStageAntiCheatDetectors::ACTkDetectorBase.ResumeDetectorOffset = getRealOffset(0x7951F4);
CodeStageAntiCheatDetectors::ACTkDetectorBase.ResumeDetector = (bool(*)(void*))CodeStageAntiCheatDetectors::ACTkDetectorBase.ResumeDetectorOffset;

CodeStageAntiCheatDetectors::InjectionDetector.get_InstanceOffset = getRealOffset(0x795258);
CodeStageAntiCheatDetectors::InjectionDetector.get_Instance = (void *(*)())CodeStageAntiCheatDetectors::InjectionDetector.get_InstanceOffset;

CodeStageAntiCheatDetectors::InjectionDetector.StartDetectionOffset = getRealOffset(0x7952E0);
CodeStageAntiCheatDetectors::InjectionDetector.StartDetection = (void(*)())CodeStageAntiCheatDetectors::InjectionDetector.StartDetectionOffset;

CodeStageAntiCheatDetectors::InjectionDetector.StopDetectionOffset = getRealOffset(0x7953E8);
CodeStageAntiCheatDetectors::InjectionDetector.StopDetection = (void(*)())CodeStageAntiCheatDetectors::InjectionDetector.StopDetectionOffset;

CodeStageAntiCheatDetectors::InjectionDetector.DisposeOffset = getRealOffset(0x79546C);
CodeStageAntiCheatDetectors::InjectionDetector.Dispose = (void(*)())CodeStageAntiCheatDetectors::InjectionDetector.DisposeOffset;

CodeStageAntiCheatDetectors::InjectionDetector.StartDetectionAutomaticallyOffset = getRealOffset(0x7954F0);
CodeStageAntiCheatDetectors::InjectionDetector.StartDetectionAutomatically = (void(*)(void*))CodeStageAntiCheatDetectors::InjectionDetector.StartDetectionAutomaticallyOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.AddToSceneOrGetExistingOffset = getRealOffset(0x79558C);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.AddToSceneOrGetExisting = (void *(*)())CodeStageAntiCheatDetectors::ObscuredCheatingDetector.AddToSceneOrGetExistingOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetectionOffset = getRealOffset(0x795798);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetection = (void(*)())CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetectionOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetection1Offset = getRealOffset(0x795AC4);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetection1 = (void(*)(void *))CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetection1Offset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StopDetectionOffset = getRealOffset(0x795AF4);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StopDetection = (void(*)())CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StopDetectionOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.DisposeOffset = getRealOffset(0x795C1C);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.Dispose = (void(*)())CodeStageAntiCheatDetectors::ObscuredCheatingDetector.DisposeOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.get_InstanceOffset = getRealOffset(0x795D44);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.get_Instance = (void *(*)())CodeStageAntiCheatDetectors::ObscuredCheatingDetector.get_InstanceOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.set_InstanceOffset = getRealOffset(0x795D9C);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.set_Instance = (void(*)(void *))CodeStageAntiCheatDetectors::ObscuredCheatingDetector.set_InstanceOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.get_GetOrCreateInstanceOffset = getRealOffset(0x795590);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.get_GetOrCreateInstance = (void *(*)())CodeStageAntiCheatDetectors::ObscuredCheatingDetector.get_GetOrCreateInstanceOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.get_ExistsAndIsRunningOffset = getRealOffset(0x795DF8);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.get_ExistsAndIsRunning = (bool(*)())CodeStageAntiCheatDetectors::ObscuredCheatingDetector.get_ExistsAndIsRunningOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.AwakeOffset = getRealOffset(0x795EC0);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.Awake = (void(*)(void*))CodeStageAntiCheatDetectors::ObscuredCheatingDetector.AwakeOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.OnDestroyOffset = getRealOffset(0x79604C);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.OnDestroy = (void(*)(void*))CodeStageAntiCheatDetectors::ObscuredCheatingDetector.OnDestroyOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.OnLevelWasLoadedNewOffset = getRealOffset(0x7960B8);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.OnLevelWasLoadedNew = (void(*)(void*, int, int))CodeStageAntiCheatDetectors::ObscuredCheatingDetector.OnLevelWasLoadedNewOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetectionInternalOffset = getRealOffset(0x7958FC);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetectionInternal = (void(*)(void*, void *))CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetectionInternalOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetectionAutomaticallyOffset = getRealOffset(0x7961CC);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetectionAutomatically = (void(*)(void*))CodeStageAntiCheatDetectors::ObscuredCheatingDetector.StartDetectionAutomaticallyOffset;

CodeStageAntiCheatDetectors::ObscuredCheatingDetector.DisposeInternalOffset = getRealOffset(0x7961D4);
CodeStageAntiCheatDetectors::ObscuredCheatingDetector.DisposeInternal = (void(*)(void*))CodeStageAntiCheatDetectors::ObscuredCheatingDetector.DisposeInternalOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.AddToSceneOrGetExistingOffset = getRealOffset(0x7962F4);
CodeStageAntiCheatDetectors::SpeedHackDetector.AddToSceneOrGetExisting = (void *(*)())CodeStageAntiCheatDetectors::SpeedHackDetector.AddToSceneOrGetExistingOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetectionOffset = getRealOffset(0x796500);
CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetection = (void(*)())CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetectionOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetection1Offset = getRealOffset(0x796938);
CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetection1 = (void(*)(void *))CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetection1Offset;

CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetection2Offset = getRealOffset(0x796968);
CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetection2 = (void(*)(void *, float))CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetection2Offset;

CodeStageAntiCheatDetectors::SpeedHackDetector.StopDetectionOffset = getRealOffset(0x796A38);
CodeStageAntiCheatDetectors::SpeedHackDetector.StopDetection = (void(*)())CodeStageAntiCheatDetectors::SpeedHackDetector.StopDetectionOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.DisposeOffset = getRealOffset(0x796B60);
CodeStageAntiCheatDetectors::SpeedHackDetector.Dispose = (void(*)())CodeStageAntiCheatDetectors::SpeedHackDetector.DisposeOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.get_InstanceOffset = getRealOffset(0x796C88);
CodeStageAntiCheatDetectors::SpeedHackDetector.get_Instance = (void *(*)())CodeStageAntiCheatDetectors::SpeedHackDetector.get_InstanceOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.set_InstanceOffset = getRealOffset(0x796CE0);
CodeStageAntiCheatDetectors::SpeedHackDetector.set_Instance = (void(*)(void *))CodeStageAntiCheatDetectors::SpeedHackDetector.set_InstanceOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.get_GetOrCreateInstanceOffset = getRealOffset(0x7962F8);
CodeStageAntiCheatDetectors::SpeedHackDetector.get_GetOrCreateInstance = (void *(*)())CodeStageAntiCheatDetectors::SpeedHackDetector.get_GetOrCreateInstanceOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.AwakeOffset = getRealOffset(0x796D6C);
CodeStageAntiCheatDetectors::SpeedHackDetector.Awake = (void(*)(void*))CodeStageAntiCheatDetectors::SpeedHackDetector.AwakeOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.OnDestroyOffset = getRealOffset(0x796EF8);
CodeStageAntiCheatDetectors::SpeedHackDetector.OnDestroy = (void(*)(void*))CodeStageAntiCheatDetectors::SpeedHackDetector.OnDestroyOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.OnLevelWasLoadedNewOffset = getRealOffset(0x796F64);
CodeStageAntiCheatDetectors::SpeedHackDetector.OnLevelWasLoadedNew = (void(*)(void*, int, int))CodeStageAntiCheatDetectors::SpeedHackDetector.OnLevelWasLoadedNewOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.OnApplicationPauseOffset = getRealOffset(0x797078);
CodeStageAntiCheatDetectors::SpeedHackDetector.OnApplicationPause = (void(*)(void*, bool))CodeStageAntiCheatDetectors::SpeedHackDetector.OnApplicationPauseOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.UpdateOffset = getRealOffset(0x7970CC);
CodeStageAntiCheatDetectors::SpeedHackDetector.Update = (void(*)(void*))CodeStageAntiCheatDetectors::SpeedHackDetector.UpdateOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetectionAutomaticallyOffset = getRealOffset(0x7973D4);
CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetectionAutomatically = (void(*)(void*))CodeStageAntiCheatDetectors::SpeedHackDetector.StartDetectionAutomaticallyOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.DisposeInternalOffset = getRealOffset(0x797400);
CodeStageAntiCheatDetectors::SpeedHackDetector.DisposeInternal = (void(*)(void*))CodeStageAntiCheatDetectors::SpeedHackDetector.DisposeInternalOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.ResetStartTicksOffset = getRealOffset(0x797084);
CodeStageAntiCheatDetectors::SpeedHackDetector.ResetStartTicks = (void(*)(void*))CodeStageAntiCheatDetectors::SpeedHackDetector.ResetStartTicksOffset;

CodeStageAntiCheatDetectors::SpeedHackDetector.GetReliableTicksOffset = getRealOffset(0x79731C);
CodeStageAntiCheatDetectors::SpeedHackDetector.TryReadTicksFromAndroidRoutineOffset = getRealOffset(0x797564);
CodeStageAntiCheatDetectors::SpeedHackDetector.ReleaseAndroidClassOffset = getRealOffset(0x79753C);
CodeStageAntiCheatDetectors::SpeedHackDetector.ReleaseAndroidClass = (void(*)(void*))CodeStageAntiCheatDetectors::SpeedHackDetector.ReleaseAndroidClassOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.add_CheatCheckedOffset = getRealOffset(0x79789C);
CodeStageAntiCheatDetectors::TimeCheatingDetector.add_CheatChecked = (void(*)(void*, void *))CodeStageAntiCheatDetectors::TimeCheatingDetector.add_CheatCheckedOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.remove_CheatCheckedOffset = getRealOffset(0x79794C);
CodeStageAntiCheatDetectors::TimeCheatingDetector.remove_CheatChecked = (void(*)(void*, void *))CodeStageAntiCheatDetectors::TimeCheatingDetector.remove_CheatCheckedOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.get_RequestUrlOffset = getRealOffset(0x7979FC);
CodeStageAntiCheatDetectors::TimeCheatingDetector.get_RequestUrl = (monoString *(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.get_RequestUrlOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.set_RequestUrlOffset = getRealOffset(0x797A04);
CodeStageAntiCheatDetectors::TimeCheatingDetector.set_RequestUrl = (void(*)(void*, monoString*))CodeStageAntiCheatDetectors::TimeCheatingDetector.set_RequestUrlOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.get_LastErrorOffset = getRealOffset(0x797BA8);
CodeStageAntiCheatDetectors::TimeCheatingDetector.get_LastError = (int (*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.get_LastErrorOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.set_LastErrorOffset = getRealOffset(0x797BB0);
CodeStageAntiCheatDetectors::TimeCheatingDetector.set_LastError = (void(*)(void*, int))CodeStageAntiCheatDetectors::TimeCheatingDetector.set_LastErrorOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.get_LastResultOffset = getRealOffset(0x797BB8);
CodeStageAntiCheatDetectors::TimeCheatingDetector.get_LastResult = (int (*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.get_LastResultOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.set_LastResultOffset = getRealOffset(0x797BC0);
CodeStageAntiCheatDetectors::TimeCheatingDetector.set_LastResult = (void(*)(void*, int))CodeStageAntiCheatDetectors::TimeCheatingDetector.set_LastResultOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.get_IsCheckingForCheatOffset = getRealOffset(0x797BC8);
CodeStageAntiCheatDetectors::TimeCheatingDetector.get_IsCheckingForCheat = (bool(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.get_IsCheckingForCheatOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.set_IsCheckingForCheatOffset = getRealOffset(0x797BD0);
CodeStageAntiCheatDetectors::TimeCheatingDetector.set_IsCheckingForCheat = (void(*)(void*, bool))CodeStageAntiCheatDetectors::TimeCheatingDetector.set_IsCheckingForCheatOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.get_InstanceOffset = getRealOffset(0x797BD8);
CodeStageAntiCheatDetectors::TimeCheatingDetector.get_Instance = (void *(*)())CodeStageAntiCheatDetectors::TimeCheatingDetector.get_InstanceOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.set_InstanceOffset = getRealOffset(0x797C50);
CodeStageAntiCheatDetectors::TimeCheatingDetector.set_Instance = (void(*)(void *))CodeStageAntiCheatDetectors::TimeCheatingDetector.set_InstanceOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.get_GetOrCreateInstanceOffset = getRealOffset(0x797CCC);
CodeStageAntiCheatDetectors::TimeCheatingDetector.get_GetOrCreateInstance = (void *(*)())CodeStageAntiCheatDetectors::TimeCheatingDetector.get_GetOrCreateInstanceOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.AwakeOffset = getRealOffset(0x797FC8);
CodeStageAntiCheatDetectors::TimeCheatingDetector.Awake = (void(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.AwakeOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.OnDestroyOffset = getRealOffset(0x7981D4);
CodeStageAntiCheatDetectors::TimeCheatingDetector.OnDestroy = (void(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.OnDestroyOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.OnLevelWasLoadedNewOffset = getRealOffset(0x7982DC);
CodeStageAntiCheatDetectors::TimeCheatingDetector.OnLevelWasLoadedNew = (void(*)(void*, int, int))CodeStageAntiCheatDetectors::TimeCheatingDetector.OnLevelWasLoadedNewOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.OnApplicationPauseOffset = getRealOffset(0x798450);
CodeStageAntiCheatDetectors::TimeCheatingDetector.OnApplicationPause = (void(*)(void*, bool))CodeStageAntiCheatDetectors::TimeCheatingDetector.OnApplicationPauseOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.UpdateOffset = getRealOffset(0x798490);
CodeStageAntiCheatDetectors::TimeCheatingDetector.Update = (void(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.UpdateOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.AddToSceneOrGetExistingOffset = getRealOffset(0x7985C0);
CodeStageAntiCheatDetectors::TimeCheatingDetector.AddToSceneOrGetExisting = (void *(*)())CodeStageAntiCheatDetectors::TimeCheatingDetector.AddToSceneOrGetExistingOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetectionOffset = getRealOffset(0x798630);
CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetection = (void(*)(void *))CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetectionOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetection1Offset = getRealOffset(0x798A50);
CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetection1 = (void(*)(float, void *))CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetection1Offset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.StopDetectionOffset = getRealOffset(0x798AE8);
CodeStageAntiCheatDetectors::TimeCheatingDetector.StopDetection = (void(*)())CodeStageAntiCheatDetectors::TimeCheatingDetector.StopDetectionOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.DisposeOffset = getRealOffset(0x798C94);
CodeStageAntiCheatDetectors::TimeCheatingDetector.Dispose = (void(*)())CodeStageAntiCheatDetectors::TimeCheatingDetector.DisposeOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.GetOnlineTimeCoroutineOffset = getRealOffset(0x798E40);
CodeStageAntiCheatDetectors::TimeCheatingDetector.GetOnlineTimeCoroutine = (void *(*)(monoString*, void *, int))CodeStageAntiCheatDetectors::TimeCheatingDetector.GetOnlineTimeCoroutineOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.GetOnlineTimeCoroutine1Offset = getRealOffset(0x798F0C);
CodeStageAntiCheatDetectors::TimeCheatingDetector.GetOnlineTimeCoroutine1 = (void *(*)(void *, void *, int))CodeStageAntiCheatDetectors::TimeCheatingDetector.GetOnlineTimeCoroutine1Offset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.GetOnlineTimeTaskOffset = getRealOffset(0x798FD8);
CodeStageAntiCheatDetectors::TimeCheatingDetector.GetOnlineTimeTask1Offset = getRealOffset(0x799118);
CodeStageAntiCheatDetectors::TimeCheatingDetector.GetWebRequestOffset = getRealOffset(0x79926C);
CodeStageAntiCheatDetectors::TimeCheatingDetector.GetWebRequest = (void *(*)(void *, int))CodeStageAntiCheatDetectors::TimeCheatingDetector.GetWebRequestOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.UrlToUriOffset = getRealOffset(0x797AB0);
CodeStageAntiCheatDetectors::TimeCheatingDetector.UrlToUri = (void *(*)(monoString*))CodeStageAntiCheatDetectors::TimeCheatingDetector.UrlToUriOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.ForceCheckOffset = getRealOffset(0x799C2C);
CodeStageAntiCheatDetectors::TimeCheatingDetector.ForceCheck = (bool(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.ForceCheckOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.ForceCheckEnumeratorOffset = getRealOffset(0x799D64);
CodeStageAntiCheatDetectors::TimeCheatingDetector.ForceCheckEnumerator = (void *(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.ForceCheckEnumeratorOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.ForceCheckTaskOffset = getRealOffset(0x799E04);
CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetectionInternalOffset = getRealOffset(0x7988DC);
CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetectionInternal = (void(*)(void*, float, void *))CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetectionInternalOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.InitOffset = getRealOffset(0x799F3C);
CodeStageAntiCheatDetectors::TimeCheatingDetector.Init = (bool(*)(void*, void *, monoString*))CodeStageAntiCheatDetectors::TimeCheatingDetector.InitOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetectionAutomaticallyOffset = getRealOffset(0x79A014);
CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetectionAutomatically = (void(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetectionAutomaticallyOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.DetectorHasCallbacksOffset = getRealOffset(0x79A020);
CodeStageAntiCheatDetectors::TimeCheatingDetector.DetectorHasCallbacks = (bool(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.DetectorHasCallbacksOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.PauseDetectorOffset = getRealOffset(0x79A05C);
CodeStageAntiCheatDetectors::TimeCheatingDetector.PauseDetector = (void(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.PauseDetectorOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.StopDetectionInternalOffset = getRealOffset(0x79A078);
CodeStageAntiCheatDetectors::TimeCheatingDetector.StopDetectionInternal = (void(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.StopDetectionInternalOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.DisposeInternalOffset = getRealOffset(0x79A090);
CodeStageAntiCheatDetectors::TimeCheatingDetector.DisposeInternal = (void(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.DisposeInternalOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.CheckForCheatOffset = getRealOffset(0x798540);
CodeStageAntiCheatDetectors::TimeCheatingDetector.CheckForCheat = (void *(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.CheckForCheatOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.ReportCheckResultOffset = getRealOffset(0x79A254);
CodeStageAntiCheatDetectors::TimeCheatingDetector.ReportCheckResult = (void(*)(void*))CodeStageAntiCheatDetectors::TimeCheatingDetector.ReportCheckResultOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.OnOnlineTimeReceivedOffset = getRealOffset(0x79A350);
CodeStageAntiCheatDetectors::TimeCheatingDetector.OnOnlineTimeReceived = (void(*)(void*, int))CodeStageAntiCheatDetectors::TimeCheatingDetector.OnOnlineTimeReceivedOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.GetLocalSecondsUtcOffset = getRealOffset(0x79A388);
CodeStageAntiCheatDetectors::TimeCheatingDetector.add_CheckPassedOffset = getRealOffset(0x79A5AC);
CodeStageAntiCheatDetectors::TimeCheatingDetector.add_CheckPassed = (void(*)(void*, void *))CodeStageAntiCheatDetectors::TimeCheatingDetector.add_CheckPassedOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.remove_CheckPassedOffset = getRealOffset(0x79A65C);
CodeStageAntiCheatDetectors::TimeCheatingDetector.remove_CheckPassed = (void(*)(void*, void *))CodeStageAntiCheatDetectors::TimeCheatingDetector.remove_CheckPassedOffset;

CodeStageAntiCheatDetectors::TimeCheatingDetector.GetOnlineTimeOffset = getRealOffset(0x79A70C);
CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetection11Offset = getRealOffset(0x79A71C);
CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetection11 = (void(*)(void *, int))CodeStageAntiCheatDetectors::TimeCheatingDetector.StartDetection11Offset;

CodeStageAntiCheatDetectors::WallHackDetector.get_CheckRigidbodyOffset = getRealOffset(0xD3D208);
CodeStageAntiCheatDetectors::WallHackDetector.get_CheckRigidbody = (bool(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.get_CheckRigidbodyOffset;

CodeStageAntiCheatDetectors::WallHackDetector.set_CheckRigidbodyOffset = getRealOffset(0xD3D210);
CodeStageAntiCheatDetectors::WallHackDetector.set_CheckRigidbody = (void(*)(void*, bool))CodeStageAntiCheatDetectors::WallHackDetector.set_CheckRigidbodyOffset;

CodeStageAntiCheatDetectors::WallHackDetector.get_CheckControllerOffset = getRealOffset(0xD3EEC0);
CodeStageAntiCheatDetectors::WallHackDetector.get_CheckController = (bool(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.get_CheckControllerOffset;

CodeStageAntiCheatDetectors::WallHackDetector.set_CheckControllerOffset = getRealOffset(0xD3EEC8);
CodeStageAntiCheatDetectors::WallHackDetector.set_CheckController = (void(*)(void*, bool))CodeStageAntiCheatDetectors::WallHackDetector.set_CheckControllerOffset;

CodeStageAntiCheatDetectors::WallHackDetector.get_CheckWireframeOffset = getRealOffset(0xD3F1EC);
CodeStageAntiCheatDetectors::WallHackDetector.get_CheckWireframe = (bool(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.get_CheckWireframeOffset;

CodeStageAntiCheatDetectors::WallHackDetector.set_CheckWireframeOffset = getRealOffset(0xD3F1F4);
CodeStageAntiCheatDetectors::WallHackDetector.set_CheckWireframe = (void(*)(void*, bool))CodeStageAntiCheatDetectors::WallHackDetector.set_CheckWireframeOffset;

CodeStageAntiCheatDetectors::WallHackDetector.get_CheckRaycastOffset = getRealOffset(0xD3F3A8);
CodeStageAntiCheatDetectors::WallHackDetector.get_CheckRaycast = (bool(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.get_CheckRaycastOffset;

CodeStageAntiCheatDetectors::WallHackDetector.set_CheckRaycastOffset = getRealOffset(0xD3F3B0);
CodeStageAntiCheatDetectors::WallHackDetector.set_CheckRaycast = (void(*)(void*, bool))CodeStageAntiCheatDetectors::WallHackDetector.set_CheckRaycastOffset;

CodeStageAntiCheatDetectors::WallHackDetector.AddToSceneOrGetExistingOffset = getRealOffset(0xD3F558);
CodeStageAntiCheatDetectors::WallHackDetector.AddToSceneOrGetExisting = (void *(*)())CodeStageAntiCheatDetectors::WallHackDetector.AddToSceneOrGetExistingOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StartDetectionOffset = getRealOffset(0xD3F764);
CodeStageAntiCheatDetectors::WallHackDetector.StartDetection = (void(*)())CodeStageAntiCheatDetectors::WallHackDetector.StartDetectionOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StartDetection1Offset = getRealOffset(0xD3FB5C);
CodeStageAntiCheatDetectors::WallHackDetector.StartDetection1 = (void(*)(void *))CodeStageAntiCheatDetectors::WallHackDetector.StartDetection1Offset;

CodeStageAntiCheatDetectors::WallHackDetector.StartDetection2Offset = getRealOffset(0xD3FB98);
CodeStageAntiCheatDetectors::WallHackDetector.StartDetection2 = (void(*)(void *, Vector3))CodeStageAntiCheatDetectors::WallHackDetector.StartDetection2Offset;

CodeStageAntiCheatDetectors::WallHackDetector.StopDetectionOffset = getRealOffset(0xD3FC40);
CodeStageAntiCheatDetectors::WallHackDetector.StopDetection = (void(*)())CodeStageAntiCheatDetectors::WallHackDetector.StopDetectionOffset;

CodeStageAntiCheatDetectors::WallHackDetector.DisposeOffset = getRealOffset(0xD3FD68);
CodeStageAntiCheatDetectors::WallHackDetector.Dispose = (void(*)())CodeStageAntiCheatDetectors::WallHackDetector.DisposeOffset;

CodeStageAntiCheatDetectors::WallHackDetector.get_InstanceOffset = getRealOffset(0xD3FE90);
CodeStageAntiCheatDetectors::WallHackDetector.get_Instance = (void *(*)())CodeStageAntiCheatDetectors::WallHackDetector.get_InstanceOffset;

CodeStageAntiCheatDetectors::WallHackDetector.set_InstanceOffset = getRealOffset(0xD3FEE8);
CodeStageAntiCheatDetectors::WallHackDetector.set_Instance = (void(*)(void *))CodeStageAntiCheatDetectors::WallHackDetector.set_InstanceOffset;

CodeStageAntiCheatDetectors::WallHackDetector.get_GetOrCreateInstanceOffset = getRealOffset(0xD3F55C);
CodeStageAntiCheatDetectors::WallHackDetector.get_GetOrCreateInstance = (void *(*)())CodeStageAntiCheatDetectors::WallHackDetector.get_GetOrCreateInstanceOffset;

CodeStageAntiCheatDetectors::WallHackDetector.AwakeOffset = getRealOffset(0xD4007C);
CodeStageAntiCheatDetectors::WallHackDetector.Awake = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.AwakeOffset;

CodeStageAntiCheatDetectors::WallHackDetector.OnDestroyOffset = getRealOffset(0xD40208);
CodeStageAntiCheatDetectors::WallHackDetector.OnDestroy = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.OnDestroyOffset;

CodeStageAntiCheatDetectors::WallHackDetector.OnLevelWasLoadedNewOffset = getRealOffset(0xD403C4);
CodeStageAntiCheatDetectors::WallHackDetector.OnLevelWasLoadedNew = (void(*)(void*, int, int))CodeStageAntiCheatDetectors::WallHackDetector.OnLevelWasLoadedNewOffset;

CodeStageAntiCheatDetectors::WallHackDetector.FixedUpdateOffset = getRealOffset(0xD404D8);
CodeStageAntiCheatDetectors::WallHackDetector.FixedUpdate = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.FixedUpdateOffset;

CodeStageAntiCheatDetectors::WallHackDetector.UpdateOffset = getRealOffset(0xD40660);
CodeStageAntiCheatDetectors::WallHackDetector.Update = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.UpdateOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StartDetectionAutomaticallyOffset = getRealOffset(0xD4087C);
CodeStageAntiCheatDetectors::WallHackDetector.StartDetectionAutomatically = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.StartDetectionAutomaticallyOffset;

CodeStageAntiCheatDetectors::WallHackDetector.PauseDetectorOffset = getRealOffset(0xD408AC);
CodeStageAntiCheatDetectors::WallHackDetector.PauseDetector = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.PauseDetectorOffset;

CodeStageAntiCheatDetectors::WallHackDetector.ResumeDetectorOffset = getRealOffset(0xD408F8);
CodeStageAntiCheatDetectors::WallHackDetector.ResumeDetector = (bool(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.ResumeDetectorOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StopDetectionInternalOffset = getRealOffset(0xD40964);
CodeStageAntiCheatDetectors::WallHackDetector.StopDetectionInternal = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.StopDetectionInternalOffset;

CodeStageAntiCheatDetectors::WallHackDetector.DisposeInternalOffset = getRealOffset(0xD409A0);
CodeStageAntiCheatDetectors::WallHackDetector.DisposeInternal = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.DisposeInternalOffset;

CodeStageAntiCheatDetectors::WallHackDetector.UpdateServiceContainerOffset = getRealOffset(0xD3D2CC);
CodeStageAntiCheatDetectors::WallHackDetector.UpdateServiceContainer = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.UpdateServiceContainerOffset;

CodeStageAntiCheatDetectors::WallHackDetector.InitDetectorOffset = getRealOffset(0xD407FC);
CodeStageAntiCheatDetectors::WallHackDetector.InitDetector = (void *(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.InitDetectorOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StartRigidModuleOffset = getRealOffset(0xD3EB0C);
CodeStageAntiCheatDetectors::WallHackDetector.StartRigidModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.StartRigidModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StartControllerModuleOffset = getRealOffset(0xD3EF84);
CodeStageAntiCheatDetectors::WallHackDetector.StartControllerModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.StartControllerModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StartWireframeModuleOffset = getRealOffset(0xD3F2B0);
CodeStageAntiCheatDetectors::WallHackDetector.StartWireframeModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.StartWireframeModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.ShootWireframeModuleOffset = getRealOffset(0xD41210);
CodeStageAntiCheatDetectors::WallHackDetector.ShootWireframeModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.ShootWireframeModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.CaptureFrameOffset = getRealOffset(0xD41294);
CodeStageAntiCheatDetectors::WallHackDetector.CaptureFrame = (void *(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.CaptureFrameOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StartRaycastModuleOffset = getRealOffset(0xD3F46C);
CodeStageAntiCheatDetectors::WallHackDetector.StartRaycastModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.StartRaycastModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.ShootRaycastModuleOffset = getRealOffset(0xD41334);
CodeStageAntiCheatDetectors::WallHackDetector.ShootRaycastModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.ShootRaycastModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StopRigidModuleOffset = getRealOffset(0xD3EDB8);
CodeStageAntiCheatDetectors::WallHackDetector.StopRigidModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.StopRigidModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StopControllerModuleOffset = getRealOffset(0xD3F144);
CodeStageAntiCheatDetectors::WallHackDetector.StopControllerModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.StopControllerModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StopWireframeModuleOffset = getRealOffset(0xD3F348);
CodeStageAntiCheatDetectors::WallHackDetector.StopWireframeModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.StopWireframeModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.StopRaycastModuleOffset = getRealOffset(0xD3F4F8);
CodeStageAntiCheatDetectors::WallHackDetector.StopRaycastModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.StopRaycastModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.InitRigidModuleOffset = getRealOffset(0xD40D58);
CodeStageAntiCheatDetectors::WallHackDetector.InitRigidModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.InitRigidModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.InitControllerModuleOffset = getRealOffset(0xD41030);
CodeStageAntiCheatDetectors::WallHackDetector.InitControllerModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.InitControllerModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.UninitRigidModuleOffset = getRealOffset(0xD40C7C);
CodeStageAntiCheatDetectors::WallHackDetector.UninitRigidModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.UninitRigidModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.UninitControllerModuleOffset = getRealOffset(0xD40F54);
CodeStageAntiCheatDetectors::WallHackDetector.UninitControllerModule = (void(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.UninitControllerModuleOffset;

CodeStageAntiCheatDetectors::WallHackDetector.DetectOffset = getRealOffset(0xD40600);
CodeStageAntiCheatDetectors::WallHackDetector.Detect = (bool(*)(void*))CodeStageAntiCheatDetectors::WallHackDetector.DetectOffset;

CodeStageAntiCheatDetectors::WallHackDetector.GenerateColorOffset = getRealOffset(0xD40AC4);
CodeStageAntiCheatDetectors::WallHackDetector.GenerateColor = (int (*)())CodeStageAntiCheatDetectors::WallHackDetector.GenerateColorOffset;

CodeStageAntiCheatDetectors::WallHackDetector.ColorsSimilarOffset = getRealOffset(0xD40B38);
CodeStageAntiCheatDetectors::WallHackDetector.ColorsSimilar = (bool(*)(int, int, int))CodeStageAntiCheatDetectors::WallHackDetector.ColorsSimilarOffset;

CodeStageAntiCheatExamples::InfiniteRotator.UpdateOffset = getRealOffset(0xD4CE04);
CodeStageAntiCheatExamples::InfiniteRotator.Update = (void(*)(void*))CodeStageAntiCheatExamples::InfiniteRotator.UpdateOffset;

CodeStageAntiCheatExamples::ExamplesGUI.OnGUIOffset = getRealOffset(0xD4254C);
CodeStageAntiCheatExamples::ExamplesGUI.OnGUI = (void(*)(void*))CodeStageAntiCheatExamples::ExamplesGUI.OnGUIOffset;

CodeStageAntiCheatExamples::ExamplesGUI.DrawObscuredTypesPageOffset = getRealOffset(0xD42940);
CodeStageAntiCheatExamples::ExamplesGUI.DrawObscuredTypesPage = (void(*)(void*))CodeStageAntiCheatExamples::ExamplesGUI.DrawObscuredTypesPageOffset;

CodeStageAntiCheatExamples::ExamplesGUI.DrawObscuredPrefsPageOffset = getRealOffset(0xD450D0);
CodeStageAntiCheatExamples::ExamplesGUI.DrawObscuredPrefsPage = (void(*)(void*))CodeStageAntiCheatExamples::ExamplesGUI.DrawObscuredPrefsPageOffset;

CodeStageAntiCheatExamples::ExamplesGUI.DrawDetectorsPageOffset = getRealOffset(0xD482B4);
CodeStageAntiCheatExamples::ExamplesGUI.DrawDetectorsPage = (void(*)(void*))CodeStageAntiCheatExamples::ExamplesGUI.DrawDetectorsPageOffset;

CodeStageAntiCheatExamples::ExamplesGUI.GetAllSimpleObscuredTypesOffset = getRealOffset(0xD4A634);
CodeStageAntiCheatExamples::ExamplesGUI.GetAllSimpleObscuredTypes = (monoString *(*)(void*))CodeStageAntiCheatExamples::ExamplesGUI.GetAllSimpleObscuredTypesOffset;

CodeStageAntiCheatExamples::ExamplesGUI.GetAllObscuredPrefsDataTypesOffset = getRealOffset(0xD4A994);
CodeStageAntiCheatExamples::ExamplesGUI.GetAllObscuredPrefsDataTypes = (monoString *(*)(void*))CodeStageAntiCheatExamples::ExamplesGUI.GetAllObscuredPrefsDataTypesOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.StartOffset = getRealOffset(0xD4CE80);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.Start = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.StartOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.StartTestsOffset = getRealOffset(0xD4CEE4);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.StartTests = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.StartTestsOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestBoolOffset = getRealOffset(0xD4D070);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestBool = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestBoolOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestByteOffset = getRealOffset(0xD4D4B0);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestByte = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestByteOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestShortOffset = getRealOffset(0xD4D8CC);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestShort = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestShortOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestUShortOffset = getRealOffset(0xD4DCF0);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestUShort = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestUShortOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestDoubleOffset = getRealOffset(0xD4F388);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestDouble = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestDoubleOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestFloatOffset = getRealOffset(0xD4EEA0);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestFloat = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestFloatOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestIntOffset = getRealOffset(0xD4E114);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestInt = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestIntOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestLongOffset = getRealOffset(0xD4E9EC);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestLong = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestLongOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestStringOffset = getRealOffset(0xD4F83C);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestString = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestStringOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestUIntOffset = getRealOffset(0xD4E59C);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestUInt = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestUIntOffset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestVector3Offset = getRealOffset(0xD4FC80);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestVector3 = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestVector3Offset;

CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestPrefsOffset = getRealOffset(0xD502A8);
CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestPrefs = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPerformanceTests.TestPrefsOffset;

CodeStageAntiCheatExamples::DetectorsExamples.OnSpeedHackDetectedOffset = getRealOffset(0xD41C44);
CodeStageAntiCheatExamples::DetectorsExamples.OnSpeedHackDetected = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.OnSpeedHackDetectedOffset;

CodeStageAntiCheatExamples::DetectorsExamples.OnTimeCheatingDetectedOffset = getRealOffset(0xD41CD4);
CodeStageAntiCheatExamples::DetectorsExamples.OnTimeCheatingDetected = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.OnTimeCheatingDetectedOffset;

CodeStageAntiCheatExamples::DetectorsExamples.OnInjectionDetectedOffset = getRealOffset(0xD41D64);
CodeStageAntiCheatExamples::DetectorsExamples.OnInjectionDetected = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.OnInjectionDetectedOffset;

CodeStageAntiCheatExamples::DetectorsExamples.OnInjectionDetectedWithCauseOffset = getRealOffset(0xD41DF4);
CodeStageAntiCheatExamples::DetectorsExamples.OnInjectionDetectedWithCause = (void(*)(void*, monoString*))CodeStageAntiCheatExamples::DetectorsExamples.OnInjectionDetectedWithCauseOffset;

CodeStageAntiCheatExamples::DetectorsExamples.OnObscuredTypeCheatingDetectedOffset = getRealOffset(0xD41E9C);
CodeStageAntiCheatExamples::DetectorsExamples.OnObscuredTypeCheatingDetected = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.OnObscuredTypeCheatingDetectedOffset;

CodeStageAntiCheatExamples::DetectorsExamples.OnWallHackDetectedOffset = getRealOffset(0xD41F2C);
CodeStageAntiCheatExamples::DetectorsExamples.OnWallHackDetected = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.OnWallHackDetectedOffset;

CodeStageAntiCheatExamples::DetectorsExamples.OnTimeCheatCheckedOffset = getRealOffset(0xD41FBC);
CodeStageAntiCheatExamples::DetectorsExamples.OnTimeCheatChecked = (void(*)(void*, int, int))CodeStageAntiCheatExamples::DetectorsExamples.OnTimeCheatCheckedOffset;

CodeStageAntiCheatExamples::DetectorsExamples.StartOffset = getRealOffset(0xD421E4);
CodeStageAntiCheatExamples::DetectorsExamples.Start = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.StartOffset;

CodeStageAntiCheatExamples::DetectorsExamples.SpeedHackDetectorExampleOffset = getRealOffset(0xD421E8);
CodeStageAntiCheatExamples::DetectorsExamples.SpeedHackDetectorExample = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.SpeedHackDetectorExampleOffset;

CodeStageAntiCheatExamples::DetectorsExamples.InjectionDetectorExampleOffset = getRealOffset(0xD421EC);
CodeStageAntiCheatExamples::DetectorsExamples.InjectionDetectorExample = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.InjectionDetectorExampleOffset;

CodeStageAntiCheatExamples::DetectorsExamples.ObscuredCheatingDetectorExampleOffset = getRealOffset(0xD421F0);
CodeStageAntiCheatExamples::DetectorsExamples.ObscuredCheatingDetectorExample = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.ObscuredCheatingDetectorExampleOffset;

CodeStageAntiCheatExamples::DetectorsExamples.TimeCheatingDetectorExampleOffset = getRealOffset(0xD421F4);
CodeStageAntiCheatExamples::DetectorsExamples.TimeCheatingDetectorExample = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.TimeCheatingDetectorExampleOffset;

CodeStageAntiCheatExamples::DetectorsExamples.ForceTimeCheatingDetectorCheckOffset = getRealOffset(0xD42318);
CodeStageAntiCheatExamples::DetectorsExamples.ForceTimeCheatingDetectorCheck = (void(*)(void*))CodeStageAntiCheatExamples::DetectorsExamples.ForceTimeCheatingDetectorCheckOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.get_PreservePlayerPrefsOffset = getRealOffset(0xD51190);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.get_PreservePlayerPrefs = (bool(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.get_PreservePlayerPrefsOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.set_PreservePlayerPrefsOffset = getRealOffset(0xD4C8F4);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.set_PreservePlayerPrefs = (void(*)(void*, bool))CodeStageAntiCheatExamples::ObscuredPrefsExamples.set_PreservePlayerPrefsOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.get_EmergencyModeOffset = getRealOffset(0xD51208);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.get_EmergencyMode = (bool(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.get_EmergencyModeOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.set_EmergencyModeOffset = getRealOffset(0xD4C970);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.set_EmergencyMode = (void(*)(void*, bool))CodeStageAntiCheatExamples::ObscuredPrefsExamples.set_EmergencyModeOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.get_ReadForeignSavesOffset = getRealOffset(0xD51280);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.get_ReadForeignSaves = (bool(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.get_ReadForeignSavesOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.set_ReadForeignSavesOffset = getRealOffset(0xD4C9EC);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.set_ReadForeignSaves = (void(*)(void*, bool))CodeStageAntiCheatExamples::ObscuredPrefsExamples.set_ReadForeignSavesOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.AwakeOffset = getRealOffset(0xD512F8);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.Awake = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.AwakeOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.OnDestroyOffset = getRealOffset(0xD51650);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.OnDestroy = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.OnDestroyOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.SavesAlterationDetectedOffset = getRealOffset(0xD51664);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.SavesAlterationDetected = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.SavesAlterationDetectedOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.ForeignSavesDetectedOffset = getRealOffset(0xD51670);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.ForeignSavesDetected = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.ForeignSavesDetectedOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.LoadRegularPrefsOffset = getRealOffset(0xD4A9E4);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.LoadRegularPrefs = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.LoadRegularPrefsOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.SaveRegularPrefsOffset = getRealOffset(0xD4ACA0);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.SaveRegularPrefs = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.SaveRegularPrefsOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.DeleteRegularPrefsOffset = getRealOffset(0xD4AD4C);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.DeleteRegularPrefs = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.DeleteRegularPrefsOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.LockObscuredPrefsToDeviceOffset = getRealOffset(0xD4C878);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.LockObscuredPrefsToDevice = (void(*)(void*, int))CodeStageAntiCheatExamples::ObscuredPrefsExamples.LockObscuredPrefsToDeviceOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.LoadObscuredPrefsOffset = getRealOffset(0xD4ADDC);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.LoadObscuredPrefs = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.LoadObscuredPrefsOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.SaveObscuredPrefsOffset = getRealOffset(0xD4C390);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.SaveObscuredPrefs = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.SaveObscuredPrefsOffset;

CodeStageAntiCheatExamples::ObscuredPrefsExamples.DeleteObscuredPrefsOffset = getRealOffset(0xD4C700);
CodeStageAntiCheatExamples::ObscuredPrefsExamples.DeleteObscuredPrefs = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredPrefsExamples.DeleteObscuredPrefsOffset;

CodeStageAntiCheatExamples::ObscuredTypesExamples.AwakeOffset = getRealOffset(0xD527FC);
CodeStageAntiCheatExamples::ObscuredTypesExamples.Awake = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredTypesExamples.AwakeOffset;

CodeStageAntiCheatExamples::ObscuredTypesExamples.StartOffset = getRealOffset(0xD53104);
CodeStageAntiCheatExamples::ObscuredTypesExamples.Start = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredTypesExamples.StartOffset;

CodeStageAntiCheatExamples::ObscuredTypesExamples.RandomizeObscuredVarsOffset = getRealOffset(0xD534F4);
CodeStageAntiCheatExamples::ObscuredTypesExamples.RandomizeObscuredVars = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredTypesExamples.RandomizeObscuredVarsOffset;

CodeStageAntiCheatExamples::ObscuredTypesExamples.ObscuredStringExampleOffset = getRealOffset(0xD52818);
CodeStageAntiCheatExamples::ObscuredTypesExamples.ObscuredStringExample = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredTypesExamples.ObscuredStringExampleOffset;

CodeStageAntiCheatExamples::ObscuredTypesExamples.ObscuredIntExampleOffset = getRealOffset(0xD52A5C);
CodeStageAntiCheatExamples::ObscuredTypesExamples.ObscuredIntExample = (void(*)(void*))CodeStageAntiCheatExamples::ObscuredTypesExamples.ObscuredIntExampleOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.EncryptOffset = getRealOffset(0xD54460);
CodeStageAntiCheatObscuredTypes::ObscuredBool.Encrypt = (int(*)(bool))CodeStageAntiCheatObscuredTypes::ObscuredBool.EncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.DecryptOffset = getRealOffset(0xD545F0);
CodeStageAntiCheatObscuredTypes::ObscuredBool.Decrypt = (bool(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredBool.DecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.FromEncryptedOffset = getRealOffset(0xD54700);
CodeStageAntiCheatObscuredTypes::ObscuredBool.FromEncrypted = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredBool.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.ApplyNewCryptoKeyOffset = getRealOffset(0x3E74B4);
CodeStageAntiCheatObscuredTypes::ObscuredBool.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredBool.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.RandomizeCryptoKeyOffset = getRealOffset(0x3E74BC);
CodeStageAntiCheatObscuredTypes::ObscuredBool.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredBool.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.GetEncryptedOffset = getRealOffset(0x3E74C4);
CodeStageAntiCheatObscuredTypes::ObscuredBool.GetEncrypted = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredBool.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.SetEncryptedOffset = getRealOffset(0x3E74E0);
CodeStageAntiCheatObscuredTypes::ObscuredBool.SetEncrypted = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredBool.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.GetDecryptedOffset = getRealOffset(0x3E74E8);
CodeStageAntiCheatObscuredTypes::ObscuredBool.GetDecrypted = (bool(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredBool.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.InternalDecryptOffset = getRealOffset(0x3E74F0);
CodeStageAntiCheatObscuredTypes::ObscuredBool.InternalDecrypt = (bool(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredBool.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.op_ImplicitOffset = getRealOffset(0xD5078C);
CodeStageAntiCheatObscuredTypes::ObscuredBool.op_Implicit = (int (*)(bool))CodeStageAntiCheatObscuredTypes::ObscuredBool.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.op_Implicit1Offset = getRealOffset(0xD507AC);
CodeStageAntiCheatObscuredTypes::ObscuredBool.op_Implicit1 = (bool(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredBool.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.GetHashCodeOffset = getRealOffset(0x3E74F8);
CodeStageAntiCheatObscuredTypes::ObscuredBool.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredBool.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.ToStringOffset = getRealOffset(0x3E7524);
CodeStageAntiCheatObscuredTypes::ObscuredBool.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredBool.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.Equals1Offset = getRealOffset(0x3E7558);
CodeStageAntiCheatObscuredTypes::ObscuredBool.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredBool.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.CompareToOffset = getRealOffset(0x3E7574);
CodeStageAntiCheatObscuredTypes::ObscuredBool.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredBool.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredBool.CompareTo1Offset = getRealOffset(0x3E7590);
CodeStageAntiCheatObscuredTypes::ObscuredBool.CompareTo1 = (int(*)(void*, bool))CodeStageAntiCheatObscuredTypes::ObscuredBool.CompareTo1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.ApplyNewCryptoKeyOffset = getRealOffset(0x3E766C);
CodeStageAntiCheatObscuredTypes::ObscuredByte.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredByte.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.RandomizeCryptoKeyOffset = getRealOffset(0x3E7674);
CodeStageAntiCheatObscuredTypes::ObscuredByte.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredByte.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.GetEncryptedOffset = getRealOffset(0x3E767C);
CodeStageAntiCheatObscuredTypes::ObscuredByte.GetDecryptedOffset = getRealOffset(0x3E76A0);
CodeStageAntiCheatObscuredTypes::ObscuredByte.InternalDecryptOffset = getRealOffset(0x3E76A8);
CodeStageAntiCheatObscuredTypes::ObscuredByte.op_Implicit1Offset = getRealOffset(0xD507E8);
CodeStageAntiCheatObscuredTypes::ObscuredByte.op_IncrementOffset = getRealOffset(0xD555A8);
CodeStageAntiCheatObscuredTypes::ObscuredByte.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredByte.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.op_DecrementOffset = getRealOffset(0xD55678);
CodeStageAntiCheatObscuredTypes::ObscuredByte.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredByte.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.GetHashCodeOffset = getRealOffset(0x3E76B0);
CodeStageAntiCheatObscuredTypes::ObscuredByte.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredByte.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.ToStringOffset = getRealOffset(0x3E76DC);
CodeStageAntiCheatObscuredTypes::ObscuredByte.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredByte.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.ToString1Offset = getRealOffset(0x3E7708);
CodeStageAntiCheatObscuredTypes::ObscuredByte.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredByte.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.ToString2Offset = getRealOffset(0x3E773C);
CodeStageAntiCheatObscuredTypes::ObscuredByte.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredByte.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.ToString3Offset = getRealOffset(0x3E7770);
CodeStageAntiCheatObscuredTypes::ObscuredByte.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredByte.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.Equals1Offset = getRealOffset(0x3E77B4);
CodeStageAntiCheatObscuredTypes::ObscuredByte.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredByte.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredByte.CompareToOffset = getRealOffset(0x3E77C0);
CodeStageAntiCheatObscuredTypes::ObscuredByte.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredByte.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredChar.ApplyNewCryptoKeyOffset = getRealOffset(0x3E78A8);
CodeStageAntiCheatObscuredTypes::ObscuredChar.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredChar.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredChar.RandomizeCryptoKeyOffset = getRealOffset(0x3E78B0);
CodeStageAntiCheatObscuredTypes::ObscuredChar.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredChar.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredChar.GetEncryptedOffset = getRealOffset(0x3E78B8);
CodeStageAntiCheatObscuredTypes::ObscuredChar.GetDecryptedOffset = getRealOffset(0x3E78DC);
CodeStageAntiCheatObscuredTypes::ObscuredChar.InternalDecryptOffset = getRealOffset(0x3E78E4);
CodeStageAntiCheatObscuredTypes::ObscuredChar.op_Implicit1Offset = getRealOffset(0xD560F0);
CodeStageAntiCheatObscuredTypes::ObscuredChar.op_IncrementOffset = getRealOffset(0xD56114);
CodeStageAntiCheatObscuredTypes::ObscuredChar.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredChar.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredChar.op_DecrementOffset = getRealOffset(0xD561E4);
CodeStageAntiCheatObscuredTypes::ObscuredChar.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredChar.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredChar.GetHashCodeOffset = getRealOffset(0x3E78EC);
CodeStageAntiCheatObscuredTypes::ObscuredChar.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredChar.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredChar.ToStringOffset = getRealOffset(0x3E7918);
CodeStageAntiCheatObscuredTypes::ObscuredChar.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredChar.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredChar.ToString1Offset = getRealOffset(0x3E7944);
CodeStageAntiCheatObscuredTypes::ObscuredChar.ToString1 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredChar.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredChar.Equals1Offset = getRealOffset(0x3E7980);
CodeStageAntiCheatObscuredTypes::ObscuredChar.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredChar.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredChar.CompareToOffset = getRealOffset(0x3E79A0);
CodeStageAntiCheatObscuredTypes::ObscuredChar.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredChar.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.EncryptOffset = getRealOffset(0xD567E4);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.Encrypt = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.EncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.InternalEncryptOffset = getRealOffset(0xD566B8);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.InternalEncrypt = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.InternalEncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.DecryptOffset = getRealOffset(0xD56978);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.Decrypt = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.DecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.FromEncryptedOffset = getRealOffset(0xD56A48);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.FromEncrypted = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ApplyNewCryptoKeyOffset = getRealOffset(0x3E7AD8);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.RandomizeCryptoKeyOffset = getRealOffset(0x3E7AE0);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.GetEncryptedOffset = getRealOffset(0x3E7AE8);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.GetEncrypted = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.SetEncryptedOffset = getRealOffset(0x3E7B10);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.SetEncrypted = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.GetDecryptedOffset = getRealOffset(0x3E7B34);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.GetDecrypted = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.InternalDecryptOffset = getRealOffset(0x3E7B48);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.InternalDecrypt = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_ImplicitOffset = getRealOffset(0xD54068);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_Implicit = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_Implicit1Offset = getRealOffset(0xD57018);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_Implicit1 = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_ExplicitOffset = getRealOffset(0xD57080);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_Explicit = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_ExplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_IncrementOffset = getRealOffset(0xD571CC);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_DecrementOffset = getRealOffset(0xD573A4);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.GetHashCodeOffset = getRealOffset(0x3E7B5C);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToStringOffset = getRealOffset(0x3E7B94);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToString1Offset = getRealOffset(0x3E7BCC);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToString2Offset = getRealOffset(0x3E7C0C);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToString3Offset = getRealOffset(0x3E7C4C);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.Equals1Offset = getRealOffset(0x3E7C9C);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.CompareToOffset = getRealOffset(0x3E7CFC);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDecimal.CompareTo1Offset = getRealOffset(0x3E7D5C);
CodeStageAntiCheatObscuredTypes::ObscuredDecimal.CompareTo1 = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredDecimal.CompareTo1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.ApplyNewCryptoKeyOffset = getRealOffset(0x3E7EAC);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDouble.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.RandomizeCryptoKeyOffset = getRealOffset(0x3E7EB4);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDouble.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.GetEncryptedOffset = getRealOffset(0x3E7EBC);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.GetDecryptedOffset = getRealOffset(0x3E7EF4);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.InternalDecryptOffset = getRealOffset(0x3E7EFC);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.op_Implicit1Offset = getRealOffset(0xD50840);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.op_ExplicitOffset = getRealOffset(0xD5833C);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.op_Explicit = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDouble.op_ExplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.op_IncrementOffset = getRealOffset(0xD58458);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDouble.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.op_DecrementOffset = getRealOffset(0xD58590);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredDouble.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.GetHashCodeOffset = getRealOffset(0x3E7F04);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDouble.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToStringOffset = getRealOffset(0x3E7F30);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToString1Offset = getRealOffset(0x3E7F5C);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToString2Offset = getRealOffset(0x3E7F90);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToString3Offset = getRealOffset(0x3E7FC4);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredDouble.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.Equals1Offset = getRealOffset(0x3E8008);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredDouble.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredDouble.CompareToOffset = getRealOffset(0x3E8068);
CodeStageAntiCheatObscuredTypes::ObscuredDouble.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredDouble.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.SetNewCryptoKeyOffset = getRealOffset(0xD58C1C);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.SetNewCryptoKey = (void(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.SetNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.EncryptOffset = getRealOffset(0xD58C98);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.Encrypt = (int(*)(float))CodeStageAntiCheatObscuredTypes::ObscuredFloat.EncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.Encrypt1Offset = getRealOffset(0xD58D34);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.Encrypt1 = (int(*)(float, int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.Encrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.InternalEncryptOffset = getRealOffset(0xD58B58);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.InternalEncrypt = (int(*)(float, int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.InternalEncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.DecryptOffset = getRealOffset(0xD58D60);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.Decrypt = (float(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.DecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.Decrypt1Offset = getRealOffset(0xD58DFC);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.Decrypt1 = (float(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.Decrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.FromEncryptedOffset = getRealOffset(0xD58E64);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.FromEncrypted = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.ApplyNewCryptoKeyOffset = getRealOffset(0x3E81C4);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredFloat.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.RandomizeCryptoKeyOffset = getRealOffset(0x3E81CC);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredFloat.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.GetEncryptedOffset = getRealOffset(0x3E81D4);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.GetEncrypted = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredFloat.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.SetEncryptedOffset = getRealOffset(0x3E81F0);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.SetEncrypted = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.GetDecryptedOffset = getRealOffset(0x3E81F8);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.GetDecrypted = (float(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredFloat.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.InternalDecryptOffset = getRealOffset(0x3E8200);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.InternalDecrypt = (float(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredFloat.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_ImplicitOffset = getRealOffset(0xD4A968);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_Implicit = (int (*)(float))CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_Implicit1Offset = getRealOffset(0xD4A93C);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_Implicit1 = (float(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_IncrementOffset = getRealOffset(0xD5929C);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_DecrementOffset = getRealOffset(0xD59394);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.GetHashCodeOffset = getRealOffset(0x3E8208);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredFloat.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToStringOffset = getRealOffset(0x3E8234);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToString1Offset = getRealOffset(0x3E8260);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToString2Offset = getRealOffset(0x3E8294);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToString3Offset = getRealOffset(0x3E82C8);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredFloat.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.Equals1Offset = getRealOffset(0x3E830C);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.CompareToOffset = getRealOffset(0x3E833C);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredFloat.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredFloat.CompareTo1Offset = getRealOffset(0x3E836C);
CodeStageAntiCheatObscuredTypes::ObscuredFloat.CompareTo1 = (int(*)(void*, float))CodeStageAntiCheatObscuredTypes::ObscuredFloat.CompareTo1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.SetNewCryptoKeyOffset = getRealOffset(0xD598A8);
CodeStageAntiCheatObscuredTypes::ObscuredInt.SetNewCryptoKey = (void(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.SetNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.EncryptOffset = getRealOffset(0xD5982C);
CodeStageAntiCheatObscuredTypes::ObscuredInt.Encrypt = (int(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.EncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.Encrypt1Offset = getRealOffset(0xD59924);
CodeStageAntiCheatObscuredTypes::ObscuredInt.Encrypt1 = (int(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredInt.Encrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.DecryptOffset = getRealOffset(0xD599B0);
CodeStageAntiCheatObscuredTypes::ObscuredInt.Decrypt = (int(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.DecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.Decrypt1Offset = getRealOffset(0xD59A2C);
CodeStageAntiCheatObscuredTypes::ObscuredInt.Decrypt1 = (int(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredInt.Decrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.FromEncryptedOffset = getRealOffset(0xD59AB8);
CodeStageAntiCheatObscuredTypes::ObscuredInt.FromEncrypted = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.ApplyNewCryptoKeyOffset = getRealOffset(0x3E8448);
CodeStageAntiCheatObscuredTypes::ObscuredInt.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredInt.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.RandomizeCryptoKeyOffset = getRealOffset(0x3E8450);
CodeStageAntiCheatObscuredTypes::ObscuredInt.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredInt.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.GetEncryptedOffset = getRealOffset(0x3E8458);
CodeStageAntiCheatObscuredTypes::ObscuredInt.GetEncrypted = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredInt.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.SetEncryptedOffset = getRealOffset(0x3E8474);
CodeStageAntiCheatObscuredTypes::ObscuredInt.SetEncrypted = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredInt.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.GetDecryptedOffset = getRealOffset(0x3E847C);
CodeStageAntiCheatObscuredTypes::ObscuredInt.GetDecrypted = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredInt.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.InternalDecryptOffset = getRealOffset(0x3E8484);
CodeStageAntiCheatObscuredTypes::ObscuredInt.InternalDecrypt = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredInt.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.op_ImplicitOffset = getRealOffset(0xD4A918);
CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Implicit = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Implicit1Offset = getRealOffset(0xD4A8F4);
CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Implicit1 = (int(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Implicit2Offset = getRealOffset(0xD59D50);
CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Implicit2 = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Implicit2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Implicit3Offset = getRealOffset(0xD59E1C);
CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Implicit3 = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Implicit3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.op_ExplicitOffset = getRealOffset(0xD59EE8);
CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Explicit = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.op_ExplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.op_IncrementOffset = getRealOffset(0xD537DC);
CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.op_DecrementOffset = getRealOffset(0xD538C0);
CodeStageAntiCheatObscuredTypes::ObscuredInt.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredInt.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.GetHashCodeOffset = getRealOffset(0x3E848C);
CodeStageAntiCheatObscuredTypes::ObscuredInt.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredInt.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.ToStringOffset = getRealOffset(0x3E84B8);
CodeStageAntiCheatObscuredTypes::ObscuredInt.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredInt.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.ToString1Offset = getRealOffset(0x3E84E4);
CodeStageAntiCheatObscuredTypes::ObscuredInt.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredInt.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.ToString2Offset = getRealOffset(0x3E8518);
CodeStageAntiCheatObscuredTypes::ObscuredInt.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredInt.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.ToString3Offset = getRealOffset(0x3E854C);
CodeStageAntiCheatObscuredTypes::ObscuredInt.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredInt.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.Equals1Offset = getRealOffset(0x3E8590);
CodeStageAntiCheatObscuredTypes::ObscuredInt.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredInt.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.CompareToOffset = getRealOffset(0x3E85B8);
CodeStageAntiCheatObscuredTypes::ObscuredInt.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredInt.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredInt.CompareTo1Offset = getRealOffset(0x3E85E0);
CodeStageAntiCheatObscuredTypes::ObscuredInt.CompareTo1 = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredInt.CompareTo1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.ApplyNewCryptoKeyOffset = getRealOffset(0x3E86E8);
CodeStageAntiCheatObscuredTypes::ObscuredLong.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredLong.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.RandomizeCryptoKeyOffset = getRealOffset(0x3E86F0);
CodeStageAntiCheatObscuredTypes::ObscuredLong.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredLong.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.GetEncryptedOffset = getRealOffset(0x3E86F8);
CodeStageAntiCheatObscuredTypes::ObscuredLong.GetDecryptedOffset = getRealOffset(0x3E8730);
CodeStageAntiCheatObscuredTypes::ObscuredLong.InternalDecryptOffset = getRealOffset(0x3E8738);
CodeStageAntiCheatObscuredTypes::ObscuredLong.op_Implicit1Offset = getRealOffset(0xD508D4);
CodeStageAntiCheatObscuredTypes::ObscuredLong.op_IncrementOffset = getRealOffset(0xD5AAF0);
CodeStageAntiCheatObscuredTypes::ObscuredLong.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredLong.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.op_DecrementOffset = getRealOffset(0xD5AC10);
CodeStageAntiCheatObscuredTypes::ObscuredLong.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredLong.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.GetHashCodeOffset = getRealOffset(0x3E8740);
CodeStageAntiCheatObscuredTypes::ObscuredLong.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredLong.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.ToStringOffset = getRealOffset(0x3E876C);
CodeStageAntiCheatObscuredTypes::ObscuredLong.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredLong.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.ToString1Offset = getRealOffset(0x3E8798);
CodeStageAntiCheatObscuredTypes::ObscuredLong.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredLong.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.ToString2Offset = getRealOffset(0x3E87CC);
CodeStageAntiCheatObscuredTypes::ObscuredLong.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredLong.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.ToString3Offset = getRealOffset(0x3E8800);
CodeStageAntiCheatObscuredTypes::ObscuredLong.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredLong.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.Equals1Offset = getRealOffset(0x3E8844);
CodeStageAntiCheatObscuredTypes::ObscuredLong.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredLong.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredLong.CompareToOffset = getRealOffset(0x3E889C);
CodeStageAntiCheatObscuredTypes::ObscuredLong.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredLong.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.set_CryptoKeyOffset = getRealOffset(0xD5B124);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.set_CryptoKey = (void(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.set_CryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_CryptoKeyOffset = getRealOffset(0xD5B1A0);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_CryptoKey = (monoString *(*)())CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_CryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_DeviceIdOffset = getRealOffset(0xD5B218);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_DeviceId = (monoString *(*)())CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_DeviceIdOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.set_DeviceIdOffset = getRealOffset(0xD5B374);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.set_DeviceId = (void(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.set_DeviceIdOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_DeviceIDOffset = getRealOffset(0xD5B3F0);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_DeviceID = (monoString *(*)())CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_DeviceIDOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.set_DeviceIDOffset = getRealOffset(0xD5B460);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.set_DeviceID = (void(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.set_DeviceIDOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_DeviceIdHashOffset = getRealOffset(0xD5B530);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.add_OnAlterationDetectedOffset = getRealOffset(0xD51440);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.add_OnAlterationDetected = (void(*)(void *))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.add_OnAlterationDetectedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.remove_OnAlterationDetectedOffset = getRealOffset(0xD5B6EC);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.remove_OnAlterationDetected = (void(*)(void *))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.remove_OnAlterationDetectedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.add_OnPossibleForeignSavesDetectedOffset = getRealOffset(0xD51548);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.add_OnPossibleForeignSavesDetected = (void(*)(void *))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.add_OnPossibleForeignSavesDetectedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.remove_OnPossibleForeignSavesDetectedOffset = getRealOffset(0xD5B7F4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.remove_OnPossibleForeignSavesDetected = (void(*)(void *))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.remove_OnPossibleForeignSavesDetectedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.ForceLockToDeviceInitOffset = getRealOffset(0xD5B8FC);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.ForceLockToDeviceInit = (void(*)())CodeStageAntiCheatObscuredTypes::ObscuredPrefs.ForceLockToDeviceInitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetNewCryptoKeyOffset = getRealOffset(0xD5BA14);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetNewCryptoKey = (void(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetIntOffset = getRealOffset(0xD50920);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetInt = (void(*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetIntOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetIntOffset = getRealOffset(0xD5BCD0);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetInt = (int(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetIntOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetInt1Offset = getRealOffset(0xD50AF4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetInt1 = (int(*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetInt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptIntValueOffset = getRealOffset(0xD5BC10);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptIntValue = (monoString *(*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptIntValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptIntValueOffset = getRealOffset(0xD5BE48);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptIntValue = (int(*)(monoString*, monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptIntValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetUIntOffset = getRealOffset(0xD5D000);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetStringOffset = getRealOffset(0xD50A58);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetString = (void(*)(monoString*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetStringOffset = getRealOffset(0xD5D2D4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetString = (monoString *(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetString1Offset = getRealOffset(0xD50E54);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetString1 = (monoString *(*)(monoString*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptStringValueOffset = getRealOffset(0xD5D21C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptStringValue = (monoString *(*)(monoString*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptStringValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptStringValueOffset = getRealOffset(0xD5D35C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptStringValue = (monoString *(*)(monoString*, monoString*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptStringValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetFloatOffset = getRealOffset(0xD509BC);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetFloat = (void(*)(monoString*, float))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetFloatOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetFloatOffset = getRealOffset(0xD5D5A4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetFloat = (float(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetFloatOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetFloat1Offset = getRealOffset(0xD50CA4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetFloat1 = (float(*)(monoString*, float))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetFloat1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptFloatValueOffset = getRealOffset(0xD5D4E4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptFloatValue = (monoString *(*)(monoString*, float))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptFloatValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptFloatValueOffset = getRealOffset(0xD5D620);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptFloatValue = (float(*)(monoString*, monoString*, float))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptFloatValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetDoubleOffset = getRealOffset(0xD5D894);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetDecimalOffset = getRealOffset(0xD5DAFC);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetDecimal = (void(*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetDecimalOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetDecimalOffset = getRealOffset(0xD5DC68);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetDecimal = (int (*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetDecimalOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetDecimal1Offset = getRealOffset(0xD5DD40);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetDecimal1 = (int (*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetDecimal1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptDecimalValueOffset = getRealOffset(0xD5DBB8);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptDecimalValue = (monoString *(*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptDecimalValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptDecimalValueOffset = getRealOffset(0xD5DE5C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptDecimalValue = (int (*)(monoString*, monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptDecimalValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetLongOffset = getRealOffset(0xD5E0FC);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetULongOffset = getRealOffset(0xD5E4B4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetBoolOffset = getRealOffset(0xD520DC);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetBool = (void(*)(monoString*, bool))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetBoolOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetBoolOffset = getRealOffset(0xD5E8B8);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetBool = (bool(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetBoolOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetBool1Offset = getRealOffset(0xD5167C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetBool1 = (bool(*)(monoString*, bool))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetBool1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptBoolValueOffset = getRealOffset(0xD5E7F8);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptBoolValue = (monoString *(*)(monoString*, bool))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptBoolValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptBoolValueOffset = getRealOffset(0xD5E934);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptBoolValue = (bool(*)(monoString*, monoString*, bool))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptBoolValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetByteArrayOffset = getRealOffset(0xD5EB6C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetVector2Offset = getRealOffset(0xD5236C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetVector2 = (void(*)(monoString*, Vector2))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetVector2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector2Offset = getRealOffset(0xD5EF60);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector2 = (Vector2 (*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector21Offset = getRealOffset(0xD51A4C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector21 = (Vector2 (*)(monoString*, Vector2))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector21Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptVector2ValueOffset = getRealOffset(0xD5EE38);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptVector2Value = (monoString *(*)(monoString*, Vector2))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptVector2ValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptVector2ValueOffset = getRealOffset(0xD5F028);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptVector2Value = (Vector2 (*)(monoString*, monoString*, Vector2))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptVector2ValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetVector3Offset = getRealOffset(0xD52410);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetVector3 = (void(*)(monoString*, Vector3))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetVector3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector3Offset = getRealOffset(0xD5F43C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector3 = (Vector3 (*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector31Offset = getRealOffset(0xD51B54);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector31 = (Vector3 (*)(monoString*, Vector3))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetVector31Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptVector3ValueOffset = getRealOffset(0xD5F2F8);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptVector3Value = (monoString *(*)(monoString*, Vector3))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptVector3ValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptVector3ValueOffset = getRealOffset(0xD5F50C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptVector3Value = (Vector3 (*)(monoString*, monoString*, Vector3))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptVector3ValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetQuaternionOffset = getRealOffset(0xD524C4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetQuaternion = (void(*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetQuaternionOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetQuaternionOffset = getRealOffset(0xD5F9AC);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetQuaternion = (int (*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetQuaternionOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetQuaternion1Offset = getRealOffset(0xD51C60);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetQuaternion1 = (int (*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetQuaternion1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptQuaternionValueOffset = getRealOffset(0xD5F844);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptQuaternionValue = (monoString *(*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptQuaternionValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptQuaternionValueOffset = getRealOffset(0xD5FA80);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptQuaternionValue = (int (*)(monoString*, monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptQuaternionValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetColorOffset = getRealOffset(0xD5263C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetColor = (void(*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetColorOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetColorOffset = getRealOffset(0xD5FEE4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetColor = (int (*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetColorOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetColor1Offset = getRealOffset(0xD51E98);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetColor1 = (int (*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetColor1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetRectOffset = getRealOffset(0xD52580);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetRect = (void(*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetRectOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRectOffset = getRealOffset(0xD60128);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRect = (int (*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRectOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRect1Offset = getRealOffset(0xD51D7C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRect1 = (int (*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRect1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptRectValueOffset = getRealOffset(0xD5FF90);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptRectValue = (monoString *(*)(monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptRectValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptRectValueOffset = getRealOffset(0xD601EC);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptRectValue = (int (*)(monoString*, monoString*, int))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptRectValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetRawValueOffset = getRealOffset(0xD605C4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetRawValue = (void(*)(monoString*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SetRawValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRawValueOffset = getRealOffset(0xD6064C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRawValue = (monoString *(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRawValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRawValueTypeOffset = getRealOffset(0xD606CC);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRawValueType = (int (*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetRawValueTypeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptKeyOffset = getRealOffset(0xD5BAE4);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptKey = (monoString *(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.EncryptKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.HasKeyOffset = getRealOffset(0xD60804);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.HasKey = (bool(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.HasKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeleteKeyOffset = getRealOffset(0xD51004);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeleteKey = (void(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeleteKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeleteAllOffset = getRealOffset(0xD608A0);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeleteAll = (void(*)())CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeleteAllOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SaveOffset = getRealOffset(0xD52790);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.Save = (void(*)())CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SaveOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetEncryptedPrefsStringOffset = getRealOffset(0xD5BD4C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetEncryptedPrefsString = (monoString *(*)(monoString*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetEncryptedPrefsStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DecryptDataOffset = getRealOffset(0xD5C9A8);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.CalculateChecksumOffset = getRealOffset(0xD5B60C);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SavesTamperedOffset = getRealOffset(0xD609DC);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SavesTampered = (void(*)())CodeStageAntiCheatObscuredTypes::ObscuredPrefs.SavesTamperedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.PossibleForeignSavesDetectedOffset = getRealOffset(0xD60B94);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.PossibleForeignSavesDetected = (void(*)())CodeStageAntiCheatObscuredTypes::ObscuredPrefs.PossibleForeignSavesDetectedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetDeviceIdOffset = getRealOffset(0xD5B300);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetDeviceId = (monoString *(*)())CodeStageAntiCheatObscuredTypes::ObscuredPrefs.GetDeviceIdOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeprecatedDecryptValueOffset = getRealOffset(0xD5C3C0);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeprecatedDecryptValue = (monoString *(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeprecatedDecryptValueOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeprecatedCalculateChecksumOffset = getRealOffset(0xD60E40);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeprecatedCalculateChecksum = (monoString *(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredPrefs.DeprecatedCalculateChecksumOffset;

CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_DeprecatedDeviceIdOffset = getRealOffset(0xD60D54);
CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_DeprecatedDeviceId = (monoString *(*)())CodeStageAntiCheatObscuredTypes::ObscuredPrefs.get_DeprecatedDeviceIdOffset;

CodeStageAntiCheatObscuredTypes::BitconverterExt.GetBytesOffset = getRealOffset(0xD540A4);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ctor1Offset = getRealOffset(0x3D7584);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ctor1 = (void(*)(void*, float, float, float, float))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ctor1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.SetNewCryptoKeyOffset = getRealOffset(0x80C784);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.SetNewCryptoKey = (void(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.SetNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.EncryptOffset = getRealOffset(0x80C44C);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Encrypt = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.EncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Encrypt1Offset = getRealOffset(0x80C800);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Encrypt1 = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Encrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Encrypt2Offset = getRealOffset(0x80C65C);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Encrypt2 = (int (*)(float, float, float, float, int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Encrypt2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.DecryptOffset = getRealOffset(0x80C8BC);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Decrypt = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.DecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Decrypt1Offset = getRealOffset(0x80C964);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Decrypt1 = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.Decrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.FromEncryptedOffset = getRealOffset(0x80CA8C);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.FromEncrypted = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ApplyNewCryptoKeyOffset = getRealOffset(0x3D75A8);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.RandomizeCryptoKeyOffset = getRealOffset(0x3D75B0);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.GetEncryptedOffset = getRealOffset(0x3D75B8);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.GetEncrypted = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.SetEncryptedOffset = getRealOffset(0x3D75E0);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.SetEncrypted = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.GetDecryptedOffset = getRealOffset(0x3D7604);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.GetDecrypted = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.InternalDecryptOffset = getRealOffset(0x3D7618);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.InternalDecrypt = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.CompareQuaternionsWithToleranceOffset = getRealOffset(0x3D762C);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.CompareQuaternionsWithTolerance = (bool(*)(void*, int, int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.CompareQuaternionsWithToleranceOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.op_ImplicitOffset = getRealOffset(0x80D228);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.op_Implicit = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.op_Implicit1Offset = getRealOffset(0x80D264);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.op_Implicit1 = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.GetHashCodeOffset = getRealOffset(0x3D7668);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ToStringOffset = getRealOffset(0x3D76A0);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ToString1Offset = getRealOffset(0x3D76D8);
CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredQuaternion.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.ApplyNewCryptoKeyOffset = getRealOffset(0x3D778C);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredSByte.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.RandomizeCryptoKeyOffset = getRealOffset(0x3D7794);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredSByte.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.GetEncryptedOffset = getRealOffset(0x3D779C);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.GetDecryptedOffset = getRealOffset(0x3D77C0);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.InternalDecryptOffset = getRealOffset(0x3D77C8);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.op_Implicit1Offset = getRealOffset(0x80DAA4);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.op_IncrementOffset = getRealOffset(0x80DAC8);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredSByte.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.op_DecrementOffset = getRealOffset(0x80DB98);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredSByte.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.GetHashCodeOffset = getRealOffset(0x3D77D0);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredSByte.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToStringOffset = getRealOffset(0x3D77FC);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToString1Offset = getRealOffset(0x3D7828);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToString2Offset = getRealOffset(0x3D785C);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToString3Offset = getRealOffset(0x3D7890);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredSByte.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.Equals1Offset = getRealOffset(0x3D78D4);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredSByte.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredSByte.CompareToOffset = getRealOffset(0x3D78E0);
CodeStageAntiCheatObscuredTypes::ObscuredSByte.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredSByte.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.SetNewCryptoKeyOffset = getRealOffset(0x80E0BC);
CodeStageAntiCheatObscuredTypes::ObscuredShort.SetNewCryptoKey = (void(*)(byte))CodeStageAntiCheatObscuredTypes::ObscuredShort.SetNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.EncryptDecryptOffset = getRealOffset(0x80E040);
CodeStageAntiCheatObscuredTypes::ObscuredShort.EncryptDecrypt = (byte(*)(byte))CodeStageAntiCheatObscuredTypes::ObscuredShort.EncryptDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.EncryptDecrypt1Offset = getRealOffset(0x80E138);
CodeStageAntiCheatObscuredTypes::ObscuredShort.EncryptDecrypt1 = (byte(*)(byte, byte))CodeStageAntiCheatObscuredTypes::ObscuredShort.EncryptDecrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.FromEncryptedOffset = getRealOffset(0x80E1C8);
CodeStageAntiCheatObscuredTypes::ObscuredShort.FromEncrypted = (int (*)(byte))CodeStageAntiCheatObscuredTypes::ObscuredShort.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.ApplyNewCryptoKeyOffset = getRealOffset(0x3D79C8);
CodeStageAntiCheatObscuredTypes::ObscuredShort.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredShort.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.RandomizeCryptoKeyOffset = getRealOffset(0x3D79D0);
CodeStageAntiCheatObscuredTypes::ObscuredShort.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredShort.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.GetEncryptedOffset = getRealOffset(0x3D79D8);
CodeStageAntiCheatObscuredTypes::ObscuredShort.GetEncrypted = (byte(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredShort.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.SetEncryptedOffset = getRealOffset(0x3D79F4);
CodeStageAntiCheatObscuredTypes::ObscuredShort.SetEncrypted = (void(*)(void*, byte))CodeStageAntiCheatObscuredTypes::ObscuredShort.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.GetDecryptedOffset = getRealOffset(0x3D79FC);
CodeStageAntiCheatObscuredTypes::ObscuredShort.GetDecrypted = (byte(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredShort.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.InternalDecryptOffset = getRealOffset(0x3D7A04);
CodeStageAntiCheatObscuredTypes::ObscuredShort.InternalDecrypt = (byte(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredShort.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.op_ImplicitOffset = getRealOffset(0x80E60C);
CodeStageAntiCheatObscuredTypes::ObscuredShort.op_Implicit = (int (*)(byte))CodeStageAntiCheatObscuredTypes::ObscuredShort.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.op_Implicit1Offset = getRealOffset(0x80E62C);
CodeStageAntiCheatObscuredTypes::ObscuredShort.op_Implicit1 = (byte(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredShort.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.op_IncrementOffset = getRealOffset(0x80E650);
CodeStageAntiCheatObscuredTypes::ObscuredShort.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredShort.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.op_DecrementOffset = getRealOffset(0x80E718);
CodeStageAntiCheatObscuredTypes::ObscuredShort.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredShort.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.GetHashCodeOffset = getRealOffset(0x3D7A0C);
CodeStageAntiCheatObscuredTypes::ObscuredShort.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredShort.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.ToStringOffset = getRealOffset(0x3D7A38);
CodeStageAntiCheatObscuredTypes::ObscuredShort.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredShort.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.ToString1Offset = getRealOffset(0x3D7A64);
CodeStageAntiCheatObscuredTypes::ObscuredShort.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredShort.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.ToString2Offset = getRealOffset(0x3D7A98);
CodeStageAntiCheatObscuredTypes::ObscuredShort.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredShort.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.ToString3Offset = getRealOffset(0x3D7ACC);
CodeStageAntiCheatObscuredTypes::ObscuredShort.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredShort.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.Equals1Offset = getRealOffset(0x3D7B10);
CodeStageAntiCheatObscuredTypes::ObscuredShort.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredShort.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.CompareToOffset = getRealOffset(0x3D7B30);
CodeStageAntiCheatObscuredTypes::ObscuredShort.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredShort.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredShort.CompareTo1Offset = getRealOffset(0x3D7B50);
CodeStageAntiCheatObscuredTypes::ObscuredShort.CompareTo1 = (int(*)(void*, byte))CodeStageAntiCheatObscuredTypes::ObscuredShort.CompareTo1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredString.ctor1Offset = getRealOffset(0x80EB20);
CodeStageAntiCheatObscuredTypes::ObscuredString.ctor1 = (void(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredString.ctor1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredString.SetNewCryptoKeyOffset = getRealOffset(0x80EC70);
CodeStageAntiCheatObscuredTypes::ObscuredString.SetNewCryptoKey = (void(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredString.SetNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.EncryptDecryptOffset = getRealOffset(0x80ECEC);
CodeStageAntiCheatObscuredTypes::ObscuredString.EncryptDecrypt = (monoString *(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredString.EncryptDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.EncryptDecrypt1Offset = getRealOffset(0x80ED80);
CodeStageAntiCheatObscuredTypes::ObscuredString.EncryptDecrypt1 = (monoString *(*)(monoString*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredString.EncryptDecrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredString.FromEncryptedOffset = getRealOffset(0x80EF38);
CodeStageAntiCheatObscuredTypes::ObscuredString.FromEncrypted = (void *(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredString.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.ApplyNewCryptoKeyOffset = getRealOffset(0x80F0B4);
CodeStageAntiCheatObscuredTypes::ObscuredString.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredString.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.RandomizeCryptoKeyOffset = getRealOffset(0x80F390);
CodeStageAntiCheatObscuredTypes::ObscuredString.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredString.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.GetEncryptedOffset = getRealOffset(0x80F4D0);
CodeStageAntiCheatObscuredTypes::ObscuredString.GetEncrypted = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredString.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.SetEncryptedOffset = getRealOffset(0x80EFB8);
CodeStageAntiCheatObscuredTypes::ObscuredString.SetEncrypted = (void(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredString.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.GetDecryptedOffset = getRealOffset(0x80F6D0);
CodeStageAntiCheatObscuredTypes::ObscuredString.GetDecrypted = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredString.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.InternalEncryptOffset = getRealOffset(0x80EBEC);
CodeStageAntiCheatObscuredTypes::ObscuredString.InternalEncrypt1Offset = getRealOffset(0x80F44C);
CodeStageAntiCheatObscuredTypes::ObscuredString.InternalDecryptOffset = getRealOffset(0x80F190);
CodeStageAntiCheatObscuredTypes::ObscuredString.InternalDecrypt = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredString.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.get_LengthOffset = getRealOffset(0x80F6D4);
CodeStageAntiCheatObscuredTypes::ObscuredString.get_Length = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredString.get_LengthOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.op_ImplicitOffset = getRealOffset(0x80F6FC);
CodeStageAntiCheatObscuredTypes::ObscuredString.op_Implicit = (void *(*)(monoString*))CodeStageAntiCheatObscuredTypes::ObscuredString.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.op_Implicit1Offset = getRealOffset(0x80F774);
CodeStageAntiCheatObscuredTypes::ObscuredString.op_Implicit1 = (monoString *(*)(void *))CodeStageAntiCheatObscuredTypes::ObscuredString.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredString.op_EqualityOffset = getRealOffset(0x80F830);
CodeStageAntiCheatObscuredTypes::ObscuredString.op_Equality = (bool(*)(void *, void *))CodeStageAntiCheatObscuredTypes::ObscuredString.op_EqualityOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.op_InequalityOffset = getRealOffset(0x80F9C4);
CodeStageAntiCheatObscuredTypes::ObscuredString.op_Inequality = (bool(*)(void *, void *))CodeStageAntiCheatObscuredTypes::ObscuredString.op_InequalityOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.GetHashCodeOffset = getRealOffset(0x80FA48);
CodeStageAntiCheatObscuredTypes::ObscuredString.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredString.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.ToStringOffset = getRealOffset(0x80FA7C);
CodeStageAntiCheatObscuredTypes::ObscuredString.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredString.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.Equals1Offset = getRealOffset(0x80FB00);
CodeStageAntiCheatObscuredTypes::ObscuredString.Equals1 = (bool(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredString.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredString.Equals2Offset = getRealOffset(0x80FC2C);
CodeStageAntiCheatObscuredTypes::ObscuredString.Equals2 = (bool(*)(void*, void *, int))CodeStageAntiCheatObscuredTypes::ObscuredString.Equals2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredString.CompareToOffset = getRealOffset(0x80FD10);
CodeStageAntiCheatObscuredTypes::ObscuredString.CompareTo = (int(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredString.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredString.CompareTo1Offset = getRealOffset(0x80FD5C);
CodeStageAntiCheatObscuredTypes::ObscuredString.CompareTo1 = (int(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredString.CompareTo1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredString.GetBytesOffset = getRealOffset(0x80F60C);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.ApplyNewCryptoKeyOffset = getRealOffset(0x3D7C2C);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredUInt.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.RandomizeCryptoKeyOffset = getRealOffset(0x3D7C34);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredUInt.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.GetEncryptedOffset = getRealOffset(0x3D7C3C);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.GetDecryptedOffset = getRealOffset(0x3D7C60);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.InternalDecryptOffset = getRealOffset(0x3D7C68);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.op_Implicit1Offset = getRealOffset(0x8105BC);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.op_ExplicitOffset = getRealOffset(0x8105E0);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.op_Explicit = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredUInt.op_ExplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.op_IncrementOffset = getRealOffset(0x81068C);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredUInt.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.op_DecrementOffset = getRealOffset(0x810770);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredUInt.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.GetHashCodeOffset = getRealOffset(0x3D7C70);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredUInt.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToStringOffset = getRealOffset(0x3D7C9C);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToString1Offset = getRealOffset(0x3D7CC8);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToString2Offset = getRealOffset(0x3D7CFC);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToString3Offset = getRealOffset(0x3D7D30);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredUInt.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.Equals1Offset = getRealOffset(0x3D7D74);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredUInt.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredUInt.CompareToOffset = getRealOffset(0x3D7D9C);
CodeStageAntiCheatObscuredTypes::ObscuredUInt.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredUInt.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.ApplyNewCryptoKeyOffset = getRealOffset(0x3D7ECC);
CodeStageAntiCheatObscuredTypes::ObscuredULong.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredULong.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.RandomizeCryptoKeyOffset = getRealOffset(0x3D7ED4);
CodeStageAntiCheatObscuredTypes::ObscuredULong.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredULong.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.GetEncryptedOffset = getRealOffset(0x3D7EDC);
CodeStageAntiCheatObscuredTypes::ObscuredULong.GetDecryptedOffset = getRealOffset(0x3D7F14);
CodeStageAntiCheatObscuredTypes::ObscuredULong.InternalDecryptOffset = getRealOffset(0x3D7F1C);
CodeStageAntiCheatObscuredTypes::ObscuredULong.op_Implicit1Offset = getRealOffset(0x811414);
CodeStageAntiCheatObscuredTypes::ObscuredULong.op_IncrementOffset = getRealOffset(0x811460);
CodeStageAntiCheatObscuredTypes::ObscuredULong.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredULong.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.op_DecrementOffset = getRealOffset(0x811580);
CodeStageAntiCheatObscuredTypes::ObscuredULong.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredULong.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.GetHashCodeOffset = getRealOffset(0x3D7F24);
CodeStageAntiCheatObscuredTypes::ObscuredULong.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredULong.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.ToStringOffset = getRealOffset(0x3D7F50);
CodeStageAntiCheatObscuredTypes::ObscuredULong.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredULong.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.ToString1Offset = getRealOffset(0x3D7F7C);
CodeStageAntiCheatObscuredTypes::ObscuredULong.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredULong.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.ToString2Offset = getRealOffset(0x3D7FB0);
CodeStageAntiCheatObscuredTypes::ObscuredULong.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredULong.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.ToString3Offset = getRealOffset(0x3D7FE4);
CodeStageAntiCheatObscuredTypes::ObscuredULong.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredULong.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.Equals1Offset = getRealOffset(0x3D8028);
CodeStageAntiCheatObscuredTypes::ObscuredULong.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredULong.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredULong.CompareToOffset = getRealOffset(0x3D8080);
CodeStageAntiCheatObscuredTypes::ObscuredULong.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredULong.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.ApplyNewCryptoKeyOffset = getRealOffset(0x3D81C4);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredUShort.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.RandomizeCryptoKeyOffset = getRealOffset(0x3D81CC);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredUShort.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.GetEncryptedOffset = getRealOffset(0x3D81D4);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.GetDecryptedOffset = getRealOffset(0x3D81F8);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.InternalDecryptOffset = getRealOffset(0x3D8200);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.op_Implicit1Offset = getRealOffset(0x812114);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.op_IncrementOffset = getRealOffset(0x812138);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.op_Increment = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredUShort.op_IncrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.op_DecrementOffset = getRealOffset(0x812208);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.op_Decrement = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredUShort.op_DecrementOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.GetHashCodeOffset = getRealOffset(0x3D8208);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredUShort.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToStringOffset = getRealOffset(0x3D8234);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToString1Offset = getRealOffset(0x3D8260);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToString2Offset = getRealOffset(0x3D8294);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToString2 = (monoString *(*)(void*, void *))CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToString2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToString3Offset = getRealOffset(0x3D82C8);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToString3 = (monoString *(*)(void*, monoString*, void *))CodeStageAntiCheatObscuredTypes::ObscuredUShort.ToString3Offset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.Equals1Offset = getRealOffset(0x3D830C);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.Equals1 = (bool(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredUShort.Equals1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredUShort.CompareToOffset = getRealOffset(0x3D832C);
CodeStageAntiCheatObscuredTypes::ObscuredUShort.CompareTo = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredUShort.CompareToOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.ctor1Offset = getRealOffset(0x3D8438);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.ctor1 = (void(*)(void*, float, float))CodeStageAntiCheatObscuredTypes::ObscuredVector2.ctor1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.get_xOffset = getRealOffset(0x3D8440);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.get_x = (float(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2.get_xOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.set_xOffset = getRealOffset(0x3D8448);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.set_x = (void(*)(void*, float))CodeStageAntiCheatObscuredTypes::ObscuredVector2.set_xOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.get_yOffset = getRealOffset(0x3D8450);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.get_y = (float(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2.get_yOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.set_yOffset = getRealOffset(0x3D8458);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.set_y = (void(*)(void*, float))CodeStageAntiCheatObscuredTypes::ObscuredVector2.set_yOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.get_ItemOffset = getRealOffset(0x3D8460);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.get_Item = (float(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.get_ItemOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.set_ItemOffset = getRealOffset(0x3D8468);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.set_Item = (void(*)(void*, int, float))CodeStageAntiCheatObscuredTypes::ObscuredVector2.set_ItemOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.SetNewCryptoKeyOffset = getRealOffset(0x813050);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.SetNewCryptoKey = (void(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.SetNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.EncryptOffset = getRealOffset(0x812710);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.Encrypt = (int (*)(Vector2))CodeStageAntiCheatObscuredTypes::ObscuredVector2.EncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.Encrypt1Offset = getRealOffset(0x8130CC);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.Encrypt1 = (int (*)(Vector2, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.Encrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.Encrypt2Offset = getRealOffset(0x8128E4);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.Encrypt2 = (int (*)(float, float, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.Encrypt2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.DecryptOffset = getRealOffset(0x813164);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.Decrypt = (Vector2 (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.DecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.Decrypt1Offset = getRealOffset(0x8131F8);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.Decrypt1 = (Vector2 (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.Decrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.FromEncryptedOffset = getRealOffset(0x8132E0);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.FromEncrypted = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.ApplyNewCryptoKeyOffset = getRealOffset(0x3D8470);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.RandomizeCryptoKeyOffset = getRealOffset(0x3D8478);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.GetEncryptedOffset = getRealOffset(0x3D8480);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.GetEncrypted = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.SetEncryptedOffset = getRealOffset(0x3D84A8);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.SetEncrypted = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.GetDecryptedOffset = getRealOffset(0x3D84B0);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.GetDecrypted = (Vector2 (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.InternalDecryptOffset = getRealOffset(0x3D84C4);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.InternalDecrypt = (Vector2 (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.CompareVectorsWithToleranceOffset = getRealOffset(0x3D84D8);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.CompareVectorsWithTolerance = (bool(*)(void*, Vector2, Vector2))CodeStageAntiCheatObscuredTypes::ObscuredVector2.CompareVectorsWithToleranceOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.InternalDecryptFieldOffset = getRealOffset(0x3D84F8);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.InternalDecryptField = (float(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.InternalDecryptFieldOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.InternalEncryptFieldOffset = getRealOffset(0x3D8500);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.InternalEncryptField = (int(*)(void*, float))CodeStageAntiCheatObscuredTypes::ObscuredVector2.InternalEncryptFieldOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.op_ImplicitOffset = getRealOffset(0x813950);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.op_Implicit = (int (*)(Vector2))CodeStageAntiCheatObscuredTypes::ObscuredVector2.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.op_Implicit1Offset = getRealOffset(0x813974);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.op_Implicit1 = (Vector2 (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.op_Implicit2Offset = getRealOffset(0x8139A4);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.op_Implicit2 = (Vector3 (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2.op_Implicit2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.GetHashCodeOffset = getRealOffset(0x3D8504);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.ToStringOffset = getRealOffset(0x3D8540);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2.ToString1Offset = getRealOffset(0x3D857C);
CodeStageAntiCheatObscuredTypes::ObscuredVector2.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredVector2.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.ctor1Offset = getRealOffset(0x3D8644);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.ctor1 = (void(*)(void*, int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.ctor1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.get_xOffset = getRealOffset(0x3D864C);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.get_x = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.get_xOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.set_xOffset = getRealOffset(0x3D8654);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.set_x = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.set_xOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.get_yOffset = getRealOffset(0x3D865C);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.get_y = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.get_yOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.set_yOffset = getRealOffset(0x3D8664);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.set_y = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.set_yOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.get_ItemOffset = getRealOffset(0x3D866C);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.get_Item = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.get_ItemOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.set_ItemOffset = getRealOffset(0x3D8674);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.set_Item = (void(*)(void*, int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.set_ItemOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.SetNewCryptoKeyOffset = getRealOffset(0x814558);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.SetNewCryptoKey = (void(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.SetNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.EncryptOffset = getRealOffset(0x813C80);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Encrypt = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.EncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Encrypt1Offset = getRealOffset(0x8145D4);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Encrypt1 = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Encrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Encrypt2Offset = getRealOffset(0x813E54);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Encrypt2 = (int (*)(int, int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Encrypt2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.DecryptOffset = getRealOffset(0x814690);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Decrypt = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.DecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Decrypt1Offset = getRealOffset(0x814724);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Decrypt1 = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.Decrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.FromEncryptedOffset = getRealOffset(0x814848);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.FromEncrypted = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.ApplyNewCryptoKeyOffset = getRealOffset(0x3D867C);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.RandomizeCryptoKeyOffset = getRealOffset(0x3D8684);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.GetEncryptedOffset = getRealOffset(0x3D868C);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.GetEncrypted = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.SetEncryptedOffset = getRealOffset(0x3D86B4);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.SetEncrypted = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.GetDecryptedOffset = getRealOffset(0x3D86BC);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.GetDecrypted = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.InternalDecryptOffset = getRealOffset(0x3D86D0);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.InternalDecrypt = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.InternalDecryptFieldOffset = getRealOffset(0x3D86E4);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.InternalDecryptField = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.InternalDecryptFieldOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.InternalEncryptFieldOffset = getRealOffset(0x3D86EC);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.InternalEncryptField = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.InternalEncryptFieldOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.op_ImplicitOffset = getRealOffset(0x814DD4);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.op_Implicit = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.op_Implicit1Offset = getRealOffset(0x814DF8);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.op_Implicit1 = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.op_Implicit2Offset = getRealOffset(0x814E28);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.op_Implicit2 = (Vector2 (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.op_Implicit2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.GetHashCodeOffset = getRealOffset(0x3D86F0);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.ToStringOffset = getRealOffset(0x3D872C);
CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector2Int.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.ctor1Offset = getRealOffset(0x3D881C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.ctor1 = (void(*)(void*, float, float, float))CodeStageAntiCheatObscuredTypes::ObscuredVector3.ctor1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_xOffset = getRealOffset(0x3D8838);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_x = (float(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_xOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_xOffset = getRealOffset(0x3D8840);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_x = (void(*)(void*, float))CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_xOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_yOffset = getRealOffset(0x3D8848);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_y = (float(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_yOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_yOffset = getRealOffset(0x3D8850);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_y = (void(*)(void*, float))CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_yOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_zOffset = getRealOffset(0x3D8858);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_z = (float(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_zOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_zOffset = getRealOffset(0x3D8860);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_z = (void(*)(void*, float))CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_zOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_ItemOffset = getRealOffset(0x3D8868);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_Item = (float(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.get_ItemOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_ItemOffset = getRealOffset(0x3D8870);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_Item = (void(*)(void*, int, float))CodeStageAntiCheatObscuredTypes::ObscuredVector3.set_ItemOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.SetNewCryptoKeyOffset = getRealOffset(0x815CBC);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.SetNewCryptoKey = (void(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.SetNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.EncryptOffset = getRealOffset(0x815118);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.Encrypt = (int (*)(Vector3))CodeStageAntiCheatObscuredTypes::ObscuredVector3.EncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.Encrypt1Offset = getRealOffset(0x815D38);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.Encrypt1 = (int (*)(Vector3, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.Encrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.Encrypt2Offset = getRealOffset(0x81530C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.Encrypt2 = (int (*)(float, float, float, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.Encrypt2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.DecryptOffset = getRealOffset(0x815DD8);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.Decrypt = (Vector3 (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.DecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.Decrypt1Offset = getRealOffset(0x815E78);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.Decrypt1 = (Vector3 (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.Decrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.FromEncryptedOffset = getRealOffset(0x815F7C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.FromEncrypted = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.ApplyNewCryptoKeyOffset = getRealOffset(0x3D8878);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.RandomizeCryptoKeyOffset = getRealOffset(0x3D8880);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.GetEncryptedOffset = getRealOffset(0x3D8888);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.GetEncrypted = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.SetEncryptedOffset = getRealOffset(0x3D88B4);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.SetEncrypted = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.GetDecryptedOffset = getRealOffset(0x3D88D0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.GetDecrypted = (Vector3 (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.InternalDecryptOffset = getRealOffset(0x3D88E4);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.InternalDecrypt = (Vector3 (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.CompareVectorsWithToleranceOffset = getRealOffset(0x3D88F8);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.CompareVectorsWithTolerance = (bool(*)(void*, Vector3, Vector3))CodeStageAntiCheatObscuredTypes::ObscuredVector3.CompareVectorsWithToleranceOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.InternalDecryptFieldOffset = getRealOffset(0x3D891C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.InternalDecryptField = (float(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.InternalDecryptFieldOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.InternalEncryptFieldOffset = getRealOffset(0x3D8924);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.InternalEncryptField = (int(*)(void*, float))CodeStageAntiCheatObscuredTypes::ObscuredVector3.InternalEncryptFieldOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_ImplicitOffset = getRealOffset(0x816688);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Implicit = (int (*)(Vector3))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Implicit1Offset = getRealOffset(0x8166C0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Implicit1 = (Vector3 (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_AdditionOffset = getRealOffset(0x8166F8);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Addition = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_AdditionOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Addition1Offset = getRealOffset(0x816880);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Addition1 = (int (*)(Vector3, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Addition1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Addition2Offset = getRealOffset(0x8169C0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Addition2 = (int (*)(int, Vector3))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Addition2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_SubtractionOffset = getRealOffset(0x816AFC);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Subtraction = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_SubtractionOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Subtraction1Offset = getRealOffset(0x816C84);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Subtraction1 = (int (*)(Vector3, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Subtraction1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Subtraction2Offset = getRealOffset(0x816DC4);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Subtraction2 = (int (*)(int, Vector3))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Subtraction2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_UnaryNegationOffset = getRealOffset(0x816F00);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_UnaryNegation = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_UnaryNegationOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_MultiplyOffset = getRealOffset(0x81701C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Multiply = (int (*)(int, float))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_MultiplyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Multiply1Offset = getRealOffset(0x81714C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Multiply1 = (int (*)(float, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Multiply1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_DivisionOffset = getRealOffset(0x817284);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Division = (int (*)(int, float))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_DivisionOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_EqualityOffset = getRealOffset(0x8173B4);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Equality = (bool(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_EqualityOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Equality1Offset = getRealOffset(0x8174D0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Equality1 = (bool(*)(Vector3, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Equality1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Equality2Offset = getRealOffset(0x8175A4);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Equality2 = (bool(*)(int, Vector3))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Equality2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_InequalityOffset = getRealOffset(0x817684);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Inequality = (bool(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_InequalityOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Inequality1Offset = getRealOffset(0x8177A0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Inequality1 = (bool(*)(Vector3, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Inequality1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Inequality2Offset = getRealOffset(0x817874);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Inequality2 = (bool(*)(int, Vector3))CodeStageAntiCheatObscuredTypes::ObscuredVector3.op_Inequality2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.GetHashCodeOffset = getRealOffset(0x3D8970);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.ToStringOffset = getRealOffset(0x3D89B0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3.ToString1Offset = getRealOffset(0x3D89F0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredVector3.ToString1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ctor1Offset = getRealOffset(0x3D8AEC);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ctor1 = (void(*)(void*, int, int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ctor1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_xOffset = getRealOffset(0x3D8B08);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_x = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_xOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_xOffset = getRealOffset(0x3D8B10);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_x = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_xOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_yOffset = getRealOffset(0x3D8B18);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_y = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_yOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_yOffset = getRealOffset(0x3D8B20);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_y = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_yOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_zOffset = getRealOffset(0x3D8B28);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_z = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_zOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_zOffset = getRealOffset(0x3D8B30);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_z = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_zOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_ItemOffset = getRealOffset(0x3D8B38);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_Item = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.get_ItemOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_ItemOffset = getRealOffset(0x3D8B40);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_Item = (void(*)(void*, int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.set_ItemOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.SetNewCryptoKeyOffset = getRealOffset(0x818778);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.SetNewCryptoKey = (void(*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.SetNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.EncryptOffset = getRealOffset(0x817C24);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Encrypt = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.EncryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Encrypt1Offset = getRealOffset(0x8187F4);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Encrypt1 = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Encrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Encrypt2Offset = getRealOffset(0x817E44);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Encrypt2 = (int (*)(int, int, int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Encrypt2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.DecryptOffset = getRealOffset(0x8188C8);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Decrypt = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.DecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Decrypt1Offset = getRealOffset(0x818968);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Decrypt1 = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.Decrypt1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.FromEncryptedOffset = getRealOffset(0x818AC0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.FromEncrypted = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.FromEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ApplyNewCryptoKeyOffset = getRealOffset(0x3D8B48);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ApplyNewCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ApplyNewCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.RandomizeCryptoKeyOffset = getRealOffset(0x3D8B50);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.RandomizeCryptoKey = (void(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.RandomizeCryptoKeyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.GetEncryptedOffset = getRealOffset(0x3D8B58);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.GetEncrypted = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.GetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.SetEncryptedOffset = getRealOffset(0x3D8B84);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.SetEncrypted = (void(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.SetEncryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.GetDecryptedOffset = getRealOffset(0x3D8BA0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.GetDecrypted = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.GetDecryptedOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.InternalDecryptOffset = getRealOffset(0x3D8BB4);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.InternalDecrypt = (int (*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.InternalDecryptOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.InternalDecryptFieldOffset = getRealOffset(0x3D8BC8);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.InternalDecryptField = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.InternalDecryptFieldOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.InternalEncryptFieldOffset = getRealOffset(0x3D8BD0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.InternalEncryptField = (int(*)(void*, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.InternalEncryptFieldOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_ImplicitOffset = getRealOffset(0x8190B4);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Implicit = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_ImplicitOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Implicit1Offset = getRealOffset(0x8190EC);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Implicit1 = (int (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Implicit1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Implicit2Offset = getRealOffset(0x819124);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Implicit2 = (Vector3 (*)(int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Implicit2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_AdditionOffset = getRealOffset(0x8191F4);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Addition = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_AdditionOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Addition1Offset = getRealOffset(0x81937C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Addition1 = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Addition1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Addition2Offset = getRealOffset(0x8194BC);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Addition2 = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Addition2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_SubtractionOffset = getRealOffset(0x8195F8);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Subtraction = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_SubtractionOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Subtraction1Offset = getRealOffset(0x819780);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Subtraction1 = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Subtraction1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Subtraction2Offset = getRealOffset(0x8198C0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Subtraction2 = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Subtraction2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_MultiplyOffset = getRealOffset(0x8199FC);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Multiply = (int (*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_MultiplyOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_EqualityOffset = getRealOffset(0x819B30);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Equality = (bool(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_EqualityOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Equality1Offset = getRealOffset(0x819C4C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Equality1 = (bool(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Equality1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Equality2Offset = getRealOffset(0x819D20);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Equality2 = (bool(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Equality2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_InequalityOffset = getRealOffset(0x819E00);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Inequality = (bool(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_InequalityOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Inequality1Offset = getRealOffset(0x819F1C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Inequality1 = (bool(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Inequality1Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Inequality2Offset = getRealOffset(0x819FF0);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Inequality2 = (bool(*)(int, int))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.op_Inequality2Offset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.GetHashCodeOffset = getRealOffset(0x3D8C1C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.GetHashCode = (int(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.GetHashCodeOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ToStringOffset = getRealOffset(0x3D8C5C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ToString = (monoString *(*)(void*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ToStringOffset;

CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ToString1Offset = getRealOffset(0x3D8C9C);
CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ToString1 = (monoString *(*)(void*, monoString*))CodeStageAntiCheatObscuredTypes::ObscuredVector3Int.ToString1Offset;

Crazy::LoadNextScene.StartOffset = getRealOffset(0x81CD60);
Crazy::LoadNextScene.Start = (void(*)(void*))Crazy::LoadNextScene.StartOffset;

Crazy::LoadNextScene.loadNextSceneOffset = getRealOffset(0x81CDC4);
Crazy::LoadNextScene.loadNextScene = (void(*)(void*))Crazy::LoadNextScene.loadNextSceneOffset;

Crazy::RotateImg.StartOffset = getRealOffset(0x81CE74);
Crazy::RotateImg.Start = (void(*)(void*))Crazy::RotateImg.StartOffset;

Crazy::RotateImg.UpdateOffset = getRealOffset(0x81CED4);
Crazy::RotateImg.Update = (void(*)(void*))Crazy::RotateImg.UpdateOffset;

DigitalOpusMBCore::MBVersionConcrete.versionOffset = getRealOffset(0x112D5E0);
DigitalOpusMBCore::MBVersionConcrete.version = (monoString *(*)(void*))DigitalOpusMBCore::MBVersionConcrete.versionOffset;

DigitalOpusMBCore::MBVersionConcrete.GetMajorVersionOffset = getRealOffset(0x1121518);
DigitalOpusMBCore::MBVersionConcrete.GetMajorVersion = (int(*)(void*))DigitalOpusMBCore::MBVersionConcrete.GetMajorVersionOffset;

DigitalOpusMBCore::MBVersionConcrete.GetMinorVersionOffset = getRealOffset(0x11215FC);
DigitalOpusMBCore::MBVersionConcrete.GetMinorVersion = (int(*)(void*))DigitalOpusMBCore::MBVersionConcrete.GetMinorVersionOffset;

DigitalOpusMBCore::MBVersionConcrete.GetActiveOffset = getRealOffset(0x112D630);
DigitalOpusMBCore::MBVersionConcrete.GetActive = (bool(*)(void*, void *))DigitalOpusMBCore::MBVersionConcrete.GetActiveOffset;

DigitalOpusMBCore::MBVersionConcrete.SetActiveOffset = getRealOffset(0x112D658);
DigitalOpusMBCore::MBVersionConcrete.SetActive = (void(*)(void*, void *, bool))DigitalOpusMBCore::MBVersionConcrete.SetActiveOffset;

DigitalOpusMBCore::MBVersionConcrete.SetActiveRecursivelyOffset = getRealOffset(0x112D688);
DigitalOpusMBCore::MBVersionConcrete.SetActiveRecursively = (void(*)(void*, void *, bool))DigitalOpusMBCore::MBVersionConcrete.SetActiveRecursivelyOffset;

DigitalOpusMBCore::MBVersionConcrete.FindSceneObjectsOfTypeOffset = getRealOffset(0x112D6B8);
DigitalOpusMBCore::MBVersionConcrete.IsRunningAndMeshNotReadWriteableOffset = getRealOffset(0x112D734);
DigitalOpusMBCore::MBVersionConcrete.IsRunningAndMeshNotReadWriteable = (bool(*)(void*, void *))DigitalOpusMBCore::MBVersionConcrete.IsRunningAndMeshNotReadWriteableOffset;

DigitalOpusMBCore::MBVersionConcrete.GetMeshUV1sOffset = getRealOffset(0x112D778);
DigitalOpusMBCore::MBVersionConcrete.GetMeshUV3orUV4Offset = getRealOffset(0x112DAA8);
DigitalOpusMBCore::MBVersionConcrete.MeshClearOffset = getRealOffset(0x112DE6C);
DigitalOpusMBCore::MBVersionConcrete.MeshClear = (void(*)(void*, void *, bool))DigitalOpusMBCore::MBVersionConcrete.MeshClearOffset;

DigitalOpusMBCore::MBVersionConcrete.GetLightmapTilingOffsetOffset = getRealOffset(0x112DEFC);
DigitalOpusMBCore::MBVersionConcrete.GetLightmapTilingOffset = (int (*)(void*, void *))DigitalOpusMBCore::MBVersionConcrete.GetLightmapTilingOffsetOffset;

DigitalOpusMBCore::MBVersionConcrete.GetBonesOffset = getRealOffset(0x112DF2C);
DigitalOpusMBCore::TextureBlenderFallback.DoesShaderNameMatchOffset = getRealOffset(0x675BCC);
DigitalOpusMBCore::TextureBlenderFallback.DoesShaderNameMatch = (bool(*)(void*, monoString*))DigitalOpusMBCore::TextureBlenderFallback.DoesShaderNameMatchOffset;

DigitalOpusMBCore::TextureBlenderFallback.OnBeforeTintTextureOffset = getRealOffset(0x675BD4);
DigitalOpusMBCore::TextureBlenderFallback.OnBeforeTintTexture = (void(*)(void*, void *, monoString*))DigitalOpusMBCore::TextureBlenderFallback.OnBeforeTintTextureOffset;

DigitalOpusMBCore::TextureBlenderFallback.OnBlendTexturePixelOffset = getRealOffset(0x675CE4);
DigitalOpusMBCore::TextureBlenderFallback.OnBlendTexturePixel = (Color (*)(void*, monoString*, Color))DigitalOpusMBCore::TextureBlenderFallback.OnBlendTexturePixelOffset;

DigitalOpusMBCore::TextureBlenderFallback.NonTexturePropertiesAreEqualOffset = getRealOffset(0x675D78);
DigitalOpusMBCore::TextureBlenderFallback.NonTexturePropertiesAreEqual = (bool(*)(void*, void *, void *))DigitalOpusMBCore::TextureBlenderFallback.NonTexturePropertiesAreEqualOffset;

DigitalOpusMBCore::TextureBlenderFallback.SetNonTexturePropertyValuesOnResultMaterialOffset = getRealOffset(0x675F18);
DigitalOpusMBCore::TextureBlenderFallback.SetNonTexturePropertyValuesOnResultMaterial = (void(*)(void*, void *))DigitalOpusMBCore::TextureBlenderFallback.SetNonTexturePropertyValuesOnResultMaterialOffset;

DigitalOpusMBCore::TextureBlenderFallback.GetColorIfNoTextureOffset = getRealOffset(0x675FD8);
DigitalOpusMBCore::TextureBlenderFallback.GetColorIfNoTexture = (Color (*)(void*, void *, void *))DigitalOpusMBCore::TextureBlenderFallback.GetColorIfNoTextureOffset;

DigitalOpusMBCore::TextureBlenderFallback._compareColorOffset = getRealOffset(0x675E00);
DigitalOpusMBCore::TextureBlenderFallback._compareColor = (bool(*)(void *, void *, Color, monoString*))DigitalOpusMBCore::TextureBlenderFallback._compareColorOffset;

DigitalOpusMBCore::TextureBlenderFallback._compareFloatOffset = getRealOffset(0x676B7C);
DigitalOpusMBCore::TextureBlenderFallback._compareFloat = (bool(*)(void *, void *, float, monoString*))DigitalOpusMBCore::TextureBlenderFallback._compareFloatOffset;

DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.DoesShaderNameMatchOffset = getRealOffset(0x676C88);
DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.DoesShaderNameMatch = (bool(*)(void*, monoString*))DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.DoesShaderNameMatchOffset;

DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.OnBeforeTintTextureOffset = getRealOffset(0x676D2C);
DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.OnBeforeTintTexture = (void(*)(void*, void *, monoString*))DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.OnBeforeTintTextureOffset;

DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.OnBlendTexturePixelOffset = getRealOffset(0x676E04);
DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.OnBlendTexturePixel = (Color (*)(void*, monoString*, Color))DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.OnBlendTexturePixelOffset;

DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.NonTexturePropertiesAreEqualOffset = getRealOffset(0x676E98);
DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.NonTexturePropertiesAreEqual = (bool(*)(void*, void *, void *))DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.NonTexturePropertiesAreEqualOffset;

DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.SetNonTexturePropertyValuesOnResultMaterialOffset = getRealOffset(0x676F20);
DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.SetNonTexturePropertyValuesOnResultMaterial = (void(*)(void*, void *))DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.SetNonTexturePropertyValuesOnResultMaterialOffset;

DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.GetColorIfNoTextureOffset = getRealOffset(0x676FB4);
DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.GetColorIfNoTexture = (Color (*)(void*, void *, void *))DigitalOpusMBCore::TextureBlenderLegacyBumpDiffuse.GetColorIfNoTextureOffset;

DigitalOpusMBCore::TextureBlenderLegacyDiffuse.DoesShaderNameMatchOffset = getRealOffset(0x677244);
DigitalOpusMBCore::TextureBlenderLegacyDiffuse.DoesShaderNameMatch = (bool(*)(void*, monoString*))DigitalOpusMBCore::TextureBlenderLegacyDiffuse.DoesShaderNameMatchOffset;

DigitalOpusMBCore::TextureBlenderLegacyDiffuse.OnBeforeTintTextureOffset = getRealOffset(0x6772E8);
DigitalOpusMBCore::TextureBlenderLegacyDiffuse.OnBeforeTintTexture = (void(*)(void*, void *, monoString*))DigitalOpusMBCore::TextureBlenderLegacyDiffuse.OnBeforeTintTextureOffset;

DigitalOpusMBCore::TextureBlenderLegacyDiffuse.OnBlendTexturePixelOffset = getRealOffset(0x6773C0);
DigitalOpusMBCore::TextureBlenderLegacyDiffuse.OnBlendTexturePixel = (Color (*)(void*, monoString*, Color))DigitalOpusMBCore::TextureBlenderLegacyDiffuse.OnBlendTexturePixelOffset;

DigitalOpusMBCore::TextureBlenderLegacyDiffuse.NonTexturePropertiesAreEqualOffset = getRealOffset(0x677454);
DigitalOpusMBCore::TextureBlenderLegacyDiffuse.NonTexturePropertiesAreEqual = (bool(*)(void*, void *, void *))DigitalOpusMBCore::TextureBlenderLegacyDiffuse.NonTexturePropertiesAreEqualOffset;

DigitalOpusMBCore::TextureBlenderLegacyDiffuse.SetNonTexturePropertyValuesOnResultMaterialOffset = getRealOffset(0x6774DC);
DigitalOpusMBCore::TextureBlenderLegacyDiffuse.SetNonTexturePropertyValuesOnResultMaterial = (void(*)(void*, void *))DigitalOpusMBCore::TextureBlenderLegacyDiffuse.SetNonTexturePropertyValuesOnResultMaterialOffset;

DigitalOpusMBCore::TextureBlenderLegacyDiffuse.GetColorIfNoTextureOffset = getRealOffset(0x677570);
DigitalOpusMBCore::TextureBlenderLegacyDiffuse.GetColorIfNoTexture = (Color (*)(void*, void *, void *))DigitalOpusMBCore::TextureBlenderLegacyDiffuse.GetColorIfNoTextureOffset;

DigitalOpusMBCore::TextureBlenderStandardMetallic.DoesShaderNameMatchOffset = getRealOffset(0x6777A4);
DigitalOpusMBCore::TextureBlenderStandardMetallic.DoesShaderNameMatch = (bool(*)(void*, monoString*))DigitalOpusMBCore::TextureBlenderStandardMetallic.DoesShaderNameMatchOffset;

DigitalOpusMBCore::TextureBlenderStandardMetallic.OnBeforeTintTextureOffset = getRealOffset(0x677810);
DigitalOpusMBCore::TextureBlenderStandardMetallic.OnBeforeTintTexture = (void(*)(void*, void *, monoString*))DigitalOpusMBCore::TextureBlenderStandardMetallic.OnBeforeTintTextureOffset;

DigitalOpusMBCore::TextureBlenderStandardMetallic.OnBlendTexturePixelOffset = getRealOffset(0x6779F4);
DigitalOpusMBCore::TextureBlenderStandardMetallic.OnBlendTexturePixel = (Color (*)(void*, monoString*, Color))DigitalOpusMBCore::TextureBlenderStandardMetallic.OnBlendTexturePixelOffset;

DigitalOpusMBCore::TextureBlenderStandardMetallic.NonTexturePropertiesAreEqualOffset = getRealOffset(0x677AB0);
DigitalOpusMBCore::TextureBlenderStandardMetallic.NonTexturePropertiesAreEqual = (bool(*)(void*, void *, void *))DigitalOpusMBCore::TextureBlenderStandardMetallic.NonTexturePropertiesAreEqualOffset;

DigitalOpusMBCore::TextureBlenderStandardMetallic.SetNonTexturePropertyValuesOnResultMaterialOffset = getRealOffset(0x677BD0);
DigitalOpusMBCore::TextureBlenderStandardMetallic.SetNonTexturePropertyValuesOnResultMaterial = (void(*)(void*, void *))DigitalOpusMBCore::TextureBlenderStandardMetallic.SetNonTexturePropertyValuesOnResultMaterialOffset;

DigitalOpusMBCore::TextureBlenderStandardMetallic.GetColorIfNoTextureOffset = getRealOffset(0x677DBC);
DigitalOpusMBCore::TextureBlenderStandardMetallic.GetColorIfNoTexture = (Color (*)(void*, void *, void *))DigitalOpusMBCore::TextureBlenderStandardMetallic.GetColorIfNoTextureOffset;

DigitalOpusMBCore::TextureBlenderStandardSpecular.DoesShaderNameMatchOffset = getRealOffset(0x67851C);
DigitalOpusMBCore::TextureBlenderStandardSpecular.DoesShaderNameMatch = (bool(*)(void*, monoString*))DigitalOpusMBCore::TextureBlenderStandardSpecular.DoesShaderNameMatchOffset;

DigitalOpusMBCore::TextureBlenderStandardSpecular.OnBeforeTintTextureOffset = getRealOffset(0x678588);
DigitalOpusMBCore::TextureBlenderStandardSpecular.OnBeforeTintTexture = (void(*)(void*, void *, monoString*))DigitalOpusMBCore::TextureBlenderStandardSpecular.OnBeforeTintTextureOffset;

DigitalOpusMBCore::TextureBlenderStandardSpecular.OnBlendTexturePixelOffset = getRealOffset(0x67876C);
DigitalOpusMBCore::TextureBlenderStandardSpecular.OnBlendTexturePixel = (Color (*)(void*, monoString*, Color))DigitalOpusMBCore::TextureBlenderStandardSpecular.OnBlendTexturePixelOffset;

DigitalOpusMBCore::TextureBlenderStandardSpecular.NonTexturePropertiesAreEqualOffset = getRealOffset(0x678828);
DigitalOpusMBCore::TextureBlenderStandardSpecular.NonTexturePropertiesAreEqual = (bool(*)(void*, void *, void *))DigitalOpusMBCore::TextureBlenderStandardSpecular.NonTexturePropertiesAreEqualOffset;

DigitalOpusMBCore::TextureBlenderStandardSpecular.SetNonTexturePropertyValuesOnResultMaterialOffset = getRealOffset(0x67895C);
DigitalOpusMBCore::TextureBlenderStandardSpecular.SetNonTexturePropertyValuesOnResultMaterial = (void(*)(void*, void *))DigitalOpusMBCore::TextureBlenderStandardSpecular.SetNonTexturePropertyValuesOnResultMaterialOffset;

DigitalOpusMBCore::TextureBlenderStandardSpecular.GetColorIfNoTextureOffset = getRealOffset(0x678B68);
DigitalOpusMBCore::TextureBlenderStandardSpecular.GetColorIfNoTexture = (Color (*)(void*, void *, void *))DigitalOpusMBCore::TextureBlenderStandardSpecular.GetColorIfNoTextureOffset;

DigitalOpusMBCore::ProgressUpdateDelegate.InvokeOffset = getRealOffset(0x67554C);
DigitalOpusMBCore::ProgressUpdateDelegate.Invoke = (void(*)(void*, monoString*, float))DigitalOpusMBCore::ProgressUpdateDelegate.InvokeOffset;

DigitalOpusMBCore::ProgressUpdateDelegate.EndInvokeOffset = getRealOffset(0x675A8C);
DigitalOpusMBCore::ProgressUpdateDelegate.EndInvoke = (void(*)(void*, void *))DigitalOpusMBCore::ProgressUpdateDelegate.EndInvokeOffset;

DigitalOpusMBCore::MB2_Log.LogOffset = getRealOffset(0x5A9DE0);
DigitalOpusMBCore::MB2_Log.Log = (void(*)(int, monoString*, int))DigitalOpusMBCore::MB2_Log.LogOffset;

DigitalOpusMBCore::ObjectLog._CacheLogMessageOffset = getRealOffset(0x675158);
DigitalOpusMBCore::ObjectLog._CacheLogMessage = (void(*)(void*, monoString*))DigitalOpusMBCore::ObjectLog._CacheLogMessageOffset;

DigitalOpusMBCore::ObjectLog.LogOffset = getRealOffset(0x675284);
DigitalOpusMBCore::ObjectLog.Log = (void(*)(void*, int, monoString*, int))DigitalOpusMBCore::ObjectLog.LogOffset;

DigitalOpusMBCore::ObjectLog.DumpOffset = getRealOffset(0x675394);
DigitalOpusMBCore::ObjectLog.Dump = (monoString *(*)(void*))DigitalOpusMBCore::ObjectLog.DumpOffset;

DigitalOpusMBCore::MBVersion._CreateMBVersionConcreteOffset = getRealOffset(0x112C6E4);
DigitalOpusMBCore::MBVersion._CreateMBVersionConcrete = (void *(*)())DigitalOpusMBCore::MBVersion._CreateMBVersionConcreteOffset;

DigitalOpusMBCore::MBVersion.versionOffset = getRealOffset(0x112C7C0);
DigitalOpusMBCore::MBVersion.version = (monoString *(*)())DigitalOpusMBCore::MBVersion.versionOffset;

DigitalOpusMBCore::MBVersion.GetMajorVersionOffset = getRealOffset(0x112C8C8);
DigitalOpusMBCore::MBVersion.GetMajorVersion = (int(*)())DigitalOpusMBCore::MBVersion.GetMajorVersionOffset;

DigitalOpusMBCore::MBVersion.GetMinorVersionOffset = getRealOffset(0x112C9D0);
DigitalOpusMBCore::MBVersion.GetMinorVersion = (int(*)())DigitalOpusMBCore::MBVersion.GetMinorVersionOffset;

DigitalOpusMBCore::MBVersion.GetActiveOffset = getRealOffset(0x112CAD8);
DigitalOpusMBCore::MBVersion.GetActive = (bool(*)(void *))DigitalOpusMBCore::MBVersion.GetActiveOffset;

DigitalOpusMBCore::MBVersion.SetActiveOffset = getRealOffset(0x112CBE8);
DigitalOpusMBCore::MBVersion.SetActive = (void(*)(void *, bool))DigitalOpusMBCore::MBVersion.SetActiveOffset;

DigitalOpusMBCore::MBVersion.SetActiveRecursivelyOffset = getRealOffset(0x112CD08);
DigitalOpusMBCore::MBVersion.SetActiveRecursively = (void(*)(void *, bool))DigitalOpusMBCore::MBVersion.SetActiveRecursivelyOffset;

DigitalOpusMBCore::MBVersion.FindSceneObjectsOfTypeOffset = getRealOffset(0x112CE28);
DigitalOpusMBCore::MBVersion.IsRunningAndMeshNotReadWriteableOffset = getRealOffset(0x112CF38);
DigitalOpusMBCore::MBVersion.IsRunningAndMeshNotReadWriteable = (bool(*)(void *))DigitalOpusMBCore::MBVersion.IsRunningAndMeshNotReadWriteableOffset;

DigitalOpusMBCore::MBVersion.GetMeshUV3orUV4Offset = getRealOffset(0x110BDDC);
DigitalOpusMBCore::MBVersion.MeshClearOffset = getRealOffset(0x112D048);
DigitalOpusMBCore::MBVersion.MeshClear = (void(*)(void *, bool))DigitalOpusMBCore::MBVersion.MeshClearOffset;

DigitalOpusMBCore::MBVersion.GetLightmapTilingOffsetOffset = getRealOffset(0x112D3A8);
DigitalOpusMBCore::MBVersion.GetLightmapTilingOffset = (int (*)(void *))DigitalOpusMBCore::MBVersion.GetLightmapTilingOffsetOffset;

DigitalOpusMBCore::MBVersion.GetBonesOffset = getRealOffset(0x112D4C8);
DigitalOpusMBCore::MB2_TexturePacker.printTreeOffset = getRealOffset(0x5AA4D0);
DigitalOpusMBCore::MB2_TexturePacker.printTree = (void(*)(void *, monoString*))DigitalOpusMBCore::MB2_TexturePacker.printTreeOffset;

DigitalOpusMBCore::MB2_TexturePacker.drawGizmosNodeOffset = getRealOffset(0x5AA7D4);
DigitalOpusMBCore::MB2_TexturePacker.drawGizmosNode = (void(*)(void *))DigitalOpusMBCore::MB2_TexturePacker.drawGizmosNodeOffset;

DigitalOpusMBCore::MB2_TexturePacker.createFilledTexOffset = getRealOffset(0x5AAB10);
DigitalOpusMBCore::MB2_TexturePacker.createFilledTex = (void *(*)(Color, int, int))DigitalOpusMBCore::MB2_TexturePacker.createFilledTexOffset;

DigitalOpusMBCore::MB2_TexturePacker.DrawGizmosOffset = getRealOffset(0x5AAC20);
DigitalOpusMBCore::MB2_TexturePacker.DrawGizmos = (void(*)(void*))DigitalOpusMBCore::MB2_TexturePacker.DrawGizmosOffset;

DigitalOpusMBCore::MB2_TexturePacker.StepWidthHeightOffset = getRealOffset(0x5ABE40);
DigitalOpusMBCore::MB2_TexturePacker.StepWidthHeight = (int(*)(void*, int, int, int))DigitalOpusMBCore::MB2_TexturePacker.StepWidthHeightOffset;

DigitalOpusMBCore::MB2_TexturePacker.RoundToNearestPositivePowerOfTwoOffset = getRealOffset(0x5ABE70);
DigitalOpusMBCore::MB2_TexturePacker.RoundToNearestPositivePowerOfTwo = (int(*)(void*, int))DigitalOpusMBCore::MB2_TexturePacker.RoundToNearestPositivePowerOfTwoOffset;

DigitalOpusMBCore::MB2_TexturePacker.CeilToNearestPowerOfTwoOffset = getRealOffset(0x5ABD68);
DigitalOpusMBCore::MB2_TexturePacker.CeilToNearestPowerOfTwo = (int(*)(void*, int))DigitalOpusMBCore::MB2_TexturePacker.CeilToNearestPowerOfTwoOffset;

DigitalOpusMBCore::MB2_TexturePacker.RunTestHarnessOffset = getRealOffset(0x5AED58);
DigitalOpusMBCore::MB2_TexturePacker.RunTestHarness = (void(*)(void*))DigitalOpusMBCore::MB2_TexturePacker.RunTestHarnessOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_EVAL_VERSIONOffset = getRealOffset(0x5AFEE4);
DigitalOpusMBCore::MB3_MeshCombiner.get_EVAL_VERSION = (bool(*)())DigitalOpusMBCore::MB3_MeshCombiner.get_EVAL_VERSIONOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_LOG_LEVELOffset = getRealOffset(0x5AFEEC);
DigitalOpusMBCore::MB3_MeshCombiner.get_LOG_LEVEL = (int (*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_LOG_LEVELOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_LOG_LEVELOffset = getRealOffset(0x5AFEF4);
DigitalOpusMBCore::MB3_MeshCombiner.set_LOG_LEVEL = (void(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombiner.set_LOG_LEVELOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_validationLevelOffset = getRealOffset(0x5AFEFC);
DigitalOpusMBCore::MB3_MeshCombiner.get_validationLevel = (int (*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_validationLevelOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_validationLevelOffset = getRealOffset(0x5AFF04);
DigitalOpusMBCore::MB3_MeshCombiner.set_validationLevel = (void(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombiner.set_validationLevelOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_nameOffset = getRealOffset(0x5AFF0C);
DigitalOpusMBCore::MB3_MeshCombiner.get_name = (monoString *(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_nameOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_nameOffset = getRealOffset(0x5AFF14);
DigitalOpusMBCore::MB3_MeshCombiner.set_name = (void(*)(void*, monoString*))DigitalOpusMBCore::MB3_MeshCombiner.set_nameOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_textureBakeResultsOffset = getRealOffset(0x5AFF1C);
DigitalOpusMBCore::MB3_MeshCombiner.get_textureBakeResults = (void *(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_textureBakeResultsOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_textureBakeResultsOffset = getRealOffset(0x5AFF24);
DigitalOpusMBCore::MB3_MeshCombiner.set_textureBakeResults = (void(*)(void*, void *))DigitalOpusMBCore::MB3_MeshCombiner.set_textureBakeResultsOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_resultSceneObjectOffset = getRealOffset(0x5AFF2C);
DigitalOpusMBCore::MB3_MeshCombiner.get_resultSceneObject = (void *(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_resultSceneObjectOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_resultSceneObjectOffset = getRealOffset(0x5AFF34);
DigitalOpusMBCore::MB3_MeshCombiner.set_resultSceneObject = (void(*)(void*, void *))DigitalOpusMBCore::MB3_MeshCombiner.set_resultSceneObjectOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_targetRendererOffset = getRealOffset(0x5AFF3C);
DigitalOpusMBCore::MB3_MeshCombiner.get_targetRenderer = (void *(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_targetRendererOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_targetRendererOffset = getRealOffset(0x5AFF44);
DigitalOpusMBCore::MB3_MeshCombiner.set_targetRenderer = (void(*)(void*, void *))DigitalOpusMBCore::MB3_MeshCombiner.set_targetRendererOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_renderTypeOffset = getRealOffset(0x5B0058);
DigitalOpusMBCore::MB3_MeshCombiner.get_renderType = (int (*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_renderTypeOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_renderTypeOffset = getRealOffset(0x5B0060);
DigitalOpusMBCore::MB3_MeshCombiner.set_renderType = (void(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombiner.set_renderTypeOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_outputOptionOffset = getRealOffset(0x5B0068);
DigitalOpusMBCore::MB3_MeshCombiner.get_outputOption = (int (*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_outputOptionOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_outputOptionOffset = getRealOffset(0x5B0070);
DigitalOpusMBCore::MB3_MeshCombiner.set_outputOption = (void(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombiner.set_outputOptionOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_lightmapOptionOffset = getRealOffset(0x5B0078);
DigitalOpusMBCore::MB3_MeshCombiner.get_lightmapOption = (int (*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_lightmapOptionOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_lightmapOptionOffset = getRealOffset(0x5B0080);
DigitalOpusMBCore::MB3_MeshCombiner.set_lightmapOption = (void(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombiner.set_lightmapOptionOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_doNormOffset = getRealOffset(0x5B0088);
DigitalOpusMBCore::MB3_MeshCombiner.get_doNorm = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_doNormOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_doNormOffset = getRealOffset(0x5B0090);
DigitalOpusMBCore::MB3_MeshCombiner.set_doNorm = (void(*)(void*, bool))DigitalOpusMBCore::MB3_MeshCombiner.set_doNormOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_doTanOffset = getRealOffset(0x5B0098);
DigitalOpusMBCore::MB3_MeshCombiner.get_doTan = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_doTanOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_doTanOffset = getRealOffset(0x5B00A0);
DigitalOpusMBCore::MB3_MeshCombiner.set_doTan = (void(*)(void*, bool))DigitalOpusMBCore::MB3_MeshCombiner.set_doTanOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_doColOffset = getRealOffset(0x5B00A8);
DigitalOpusMBCore::MB3_MeshCombiner.get_doCol = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_doColOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_doColOffset = getRealOffset(0x5B00B0);
DigitalOpusMBCore::MB3_MeshCombiner.set_doCol = (void(*)(void*, bool))DigitalOpusMBCore::MB3_MeshCombiner.set_doColOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_doUVOffset = getRealOffset(0x5B00B8);
DigitalOpusMBCore::MB3_MeshCombiner.get_doUV = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_doUVOffset;

DigitalOpusMBCore::MB3_MeshCombiner.set_doUVOffset = getRealOffset(0x5B00C0);
DigitalOpusMBCore::MB3_MeshCombiner.set_doUV = (void(*)(void*, bool))DigitalOpusMBCore::MB3_MeshCombiner.set_doUVOffset;

DigitalOpusMBCore::MB3_MeshCombiner.get_doUV1Offset = getRealOffset(0x5B00C8);
DigitalOpusMBCore::MB3_MeshCombiner.get_doUV1 = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_doUV1Offset;

DigitalOpusMBCore::MB3_MeshCombiner.set_doUV1Offset = getRealOffset(0x5B00D0);
DigitalOpusMBCore::MB3_MeshCombiner.set_doUV1 = (void(*)(void*, bool))DigitalOpusMBCore::MB3_MeshCombiner.set_doUV1Offset;

DigitalOpusMBCore::MB3_MeshCombiner.doUV2Offset = getRealOffset(0x5B00D4);
DigitalOpusMBCore::MB3_MeshCombiner.doUV2 = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.doUV2Offset;

DigitalOpusMBCore::MB3_MeshCombiner.get_doUV3Offset = getRealOffset(0x5B00EC);
DigitalOpusMBCore::MB3_MeshCombiner.get_doUV3 = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_doUV3Offset;

DigitalOpusMBCore::MB3_MeshCombiner.set_doUV3Offset = getRealOffset(0x5B00F4);
DigitalOpusMBCore::MB3_MeshCombiner.set_doUV3 = (void(*)(void*, bool))DigitalOpusMBCore::MB3_MeshCombiner.set_doUV3Offset;

DigitalOpusMBCore::MB3_MeshCombiner.get_doUV4Offset = getRealOffset(0x5B00FC);
DigitalOpusMBCore::MB3_MeshCombiner.get_doUV4 = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.get_doUV4Offset;

DigitalOpusMBCore::MB3_MeshCombiner.set_doUV4Offset = getRealOffset(0x5B0104);
DigitalOpusMBCore::MB3_MeshCombiner.set_doUV4 = (void(*)(void*, bool))DigitalOpusMBCore::MB3_MeshCombiner.set_doUV4Offset;

DigitalOpusMBCore::MB3_MeshCombiner.ApplyOffset = getRealOffset(0x5B010C);
DigitalOpusMBCore::MB3_MeshCombiner.Apply = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombiner.ApplyOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.set_textureBakeResultsOffset = getRealOffset(0x5B1248);
DigitalOpusMBCore::MB3_MeshCombinerSingle.set_textureBakeResults = (void(*)(void*, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle.set_textureBakeResultsOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.set_renderTypeOffset = getRealOffset(0x5B1394);
DigitalOpusMBCore::MB3_MeshCombinerSingle.set_renderType = (void(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombinerSingle.set_renderTypeOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.set_resultSceneObjectOffset = getRealOffset(0x5B1468);
DigitalOpusMBCore::MB3_MeshCombinerSingle.set_resultSceneObject = (void(*)(void*, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle.set_resultSceneObjectOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapGetOffset = getRealOffset(0x5B1590);
DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapGet = (void *(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapGetOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapAddOffset = getRealOffset(0x5B1604);
DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapAdd = (void(*)(void*, int, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapAddOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapRemoveOffset = getRealOffset(0x5B1680);
DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapRemove = (void(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapRemoveOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapCountOffset = getRealOffset(0x5B1770);
DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapCount = (int(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapCountOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapClearOffset = getRealOffset(0x5B17DC);
DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapClear = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapClearOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapContainsKeyOffset = getRealOffset(0x5B1848);
DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapContainsKey = (bool(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombinerSingle.instance2Combined_MapContainsKeyOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.GetNumObjectsInCombinedOffset = getRealOffset(0x5B18BC);
DigitalOpusMBCore::MB3_MeshCombinerSingle.GetNumObjectsInCombined = (int(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.GetNumObjectsInCombinedOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.GetObjectsInCombinedOffset = getRealOffset(0x5B1914);
DigitalOpusMBCore::MB3_MeshCombinerSingle.GetMeshOffset = getRealOffset(0x5B19B8);
DigitalOpusMBCore::MB3_MeshCombinerSingle.GetMesh = (void *(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.GetMeshOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.GetBonesOffset = getRealOffset(0x5B1A74);
DigitalOpusMBCore::MB3_MeshCombinerSingle.GetLightmapIndexOffset = getRealOffset(0x5B1A7C);
DigitalOpusMBCore::MB3_MeshCombinerSingle.GetLightmapIndex = (int(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.GetLightmapIndexOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.GetNumVerticesForOffset = getRealOffset(0x5B1AD4);
DigitalOpusMBCore::MB3_MeshCombinerSingle.GetNumVerticesFor = (int(*)(void*, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle.GetNumVerticesForOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.GetNumVerticesFor1Offset = getRealOffset(0x5B1B18);
DigitalOpusMBCore::MB3_MeshCombinerSingle.GetNumVerticesFor1 = (int(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombinerSingle.GetNumVerticesFor1Offset;

DigitalOpusMBCore::MB3_MeshCombinerSingle._initializeOffset = getRealOffset(0x5B1B60);
DigitalOpusMBCore::MB3_MeshCombinerSingle._initialize = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle._initializeOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle._validateTextureBakeResultsOffset = getRealOffset(0x5B3134);
DigitalOpusMBCore::MB3_MeshCombinerSingle._validateTextureBakeResults = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle._validateTextureBakeResultsOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle._validateMeshFlagsOffset = getRealOffset(0x5B3498);
DigitalOpusMBCore::MB3_MeshCombinerSingle._validateMeshFlags = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle._validateMeshFlagsOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle._copyAndAdjustUVsFromMeshOffset = getRealOffset(0x5BA870);
DigitalOpusMBCore::MB3_MeshCombinerSingle._copyAndAdjustUVsFromMesh = (void(*)(void*, void *, void *, int, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle._copyAndAdjustUVsFromMeshOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle._copyAndAdjustUV2FromMeshOffset = getRealOffset(0x5BB1FC);
DigitalOpusMBCore::MB3_MeshCombinerSingle._copyAndAdjustUV2FromMesh = (void(*)(void*, void *, void *, int, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle._copyAndAdjustUV2FromMeshOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.UpdateSkinnedMeshApproximateBoundsOffset = getRealOffset(0x5BC064);
DigitalOpusMBCore::MB3_MeshCombinerSingle.UpdateSkinnedMeshApproximateBounds = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.UpdateSkinnedMeshApproximateBoundsOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.UpdateSkinnedMeshApproximateBoundsFromBonesOffset = getRealOffset(0x5BC074);
DigitalOpusMBCore::MB3_MeshCombinerSingle.UpdateSkinnedMeshApproximateBoundsFromBones = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.UpdateSkinnedMeshApproximateBoundsFromBonesOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.UpdateSkinnedMeshApproximateBoundsFromBoundsOffset = getRealOffset(0x5BC3D0);
DigitalOpusMBCore::MB3_MeshCombinerSingle.UpdateSkinnedMeshApproximateBoundsFromBounds = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.UpdateSkinnedMeshApproximateBoundsFromBoundsOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle._getNumBonesOffset = getRealOffset(0x5BC748);
DigitalOpusMBCore::MB3_MeshCombinerSingle._getNumBones = (int(*)(void*, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle._getNumBonesOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle._getBonesOffset = getRealOffset(0x5BC898);
DigitalOpusMBCore::MB3_MeshCombinerSingle.ApplyOffset = getRealOffset(0x5BC8A4);
DigitalOpusMBCore::MB3_MeshCombinerSingle.Apply = (void(*)(void*, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle.ApplyOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.ApplyShowHideOffset = getRealOffset(0x5BC970);
DigitalOpusMBCore::MB3_MeshCombinerSingle.ApplyShowHide = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.ApplyShowHideOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.Apply1Offset = getRealOffset(0x5BD18C);
DigitalOpusMBCore::MB3_MeshCombinerSingle.Apply1 = (void(*)(void*, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle.Apply1Offset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.GetSubmeshTrisWithShowHideAppliedOffset = getRealOffset(0x5BCC18);
DigitalOpusMBCore::MB3_MeshCombinerSingle._updateGameObjectOffset = getRealOffset(0x5BE698);
DigitalOpusMBCore::MB3_MeshCombinerSingle._updateGameObject = (void(*)(void*, void *, bool, bool, bool, bool, bool, bool, bool, bool, bool, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle._updateGameObjectOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.CombinedMeshContainsOffset = getRealOffset(0x5BFE6C);
DigitalOpusMBCore::MB3_MeshCombinerSingle.CombinedMeshContains = (bool(*)(void*, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle.CombinedMeshContainsOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.ClearBuffersOffset = getRealOffset(0x5BFEE0);
DigitalOpusMBCore::MB3_MeshCombinerSingle.ClearBuffers = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.ClearBuffersOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.ClearMeshOffset = getRealOffset(0x5C0198);
DigitalOpusMBCore::MB3_MeshCombinerSingle.ClearMesh = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.ClearMeshOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.DestroyMeshOffset = getRealOffset(0x5C0270);
DigitalOpusMBCore::MB3_MeshCombinerSingle.DestroyMesh = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.DestroyMeshOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.DestroyMeshEditorOffset = getRealOffset(0x5C0418);
DigitalOpusMBCore::MB3_MeshCombinerSingle.DestroyMeshEditor = (void(*)(void*, void *))DigitalOpusMBCore::MB3_MeshCombinerSingle.DestroyMeshEditorOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.ValidateTargRendererAndMeshAndResultSceneObjOffset = getRealOffset(0x5B916C);
DigitalOpusMBCore::MB3_MeshCombinerSingle.ValidateTargRendererAndMeshAndResultSceneObj = (bool(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.ValidateTargRendererAndMeshAndResultSceneObjOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.IsMirroredOffset = getRealOffset(0x5B9F24);
DigitalOpusMBCore::MB3_MeshCombinerSingle.IsMirrored = (bool(*)(void*, int))DigitalOpusMBCore::MB3_MeshCombinerSingle.IsMirroredOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle.CheckIntegrityOffset = getRealOffset(0x5C1880);
DigitalOpusMBCore::MB3_MeshCombinerSingle.CheckIntegrity = (void(*)(void*))DigitalOpusMBCore::MB3_MeshCombinerSingle.CheckIntegrityOffset;

DigitalOpusMBCore::MB3_MeshCombinerSingle._buildBoneIdx2dgoMapOffset = getRealOffset(0x5B9608);
DigitalOpusMBCore::MB3_MultiMeshCombiner.get_LOG_LEVELOffset = getRealOffset(0x110D70C);
DigitalOpusMBCore::MB3_MultiMeshCombiner.get_LOG_LEVEL = (int (*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.get_LOG_LEVELOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.set_LOG_LEVELOffset = getRealOffset(0x110D714);
DigitalOpusMBCore::MB3_MultiMeshCombiner.set_LOG_LEVEL = (void(*)(void*, int))DigitalOpusMBCore::MB3_MultiMeshCombiner.set_LOG_LEVELOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.set_validationLevelOffset = getRealOffset(0x110D7EC);
DigitalOpusMBCore::MB3_MultiMeshCombiner.set_validationLevel = (void(*)(void*, int))DigitalOpusMBCore::MB3_MultiMeshCombiner.set_validationLevelOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.get_validationLevelOffset = getRealOffset(0x110D8C8);
DigitalOpusMBCore::MB3_MultiMeshCombiner.get_validationLevel = (int (*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.get_validationLevelOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.get_maxVertsInMeshOffset = getRealOffset(0x110D8D0);
DigitalOpusMBCore::MB3_MultiMeshCombiner.get_maxVertsInMesh = (int(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.get_maxVertsInMeshOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.set_maxVertsInMeshOffset = getRealOffset(0x110D8D8);
DigitalOpusMBCore::MB3_MultiMeshCombiner.set_maxVertsInMesh = (void(*)(void*, int))DigitalOpusMBCore::MB3_MultiMeshCombiner.set_maxVertsInMeshOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.GetNumObjectsInCombinedOffset = getRealOffset(0x110D9E8);
DigitalOpusMBCore::MB3_MultiMeshCombiner.GetNumObjectsInCombined = (int(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.GetNumObjectsInCombinedOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.GetNumVerticesForOffset = getRealOffset(0x110DA54);
DigitalOpusMBCore::MB3_MultiMeshCombiner.GetNumVerticesFor = (int(*)(void*, void *))DigitalOpusMBCore::MB3_MultiMeshCombiner.GetNumVerticesForOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.GetNumVerticesFor1Offset = getRealOffset(0x110DB40);
DigitalOpusMBCore::MB3_MultiMeshCombiner.GetNumVerticesFor1 = (int(*)(void*, int))DigitalOpusMBCore::MB3_MultiMeshCombiner.GetNumVerticesFor1Offset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.GetObjectsInCombinedOffset = getRealOffset(0x110DC10);
DigitalOpusMBCore::MB3_MultiMeshCombiner.GetLightmapIndexOffset = getRealOffset(0x110DD3C);
DigitalOpusMBCore::MB3_MultiMeshCombiner.GetLightmapIndex = (int(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.GetLightmapIndexOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.CombinedMeshContainsOffset = getRealOffset(0x110DE00);
DigitalOpusMBCore::MB3_MultiMeshCombiner.CombinedMeshContains = (bool(*)(void*, void *))DigitalOpusMBCore::MB3_MultiMeshCombiner.CombinedMeshContainsOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner._validateTextureBakeResultsOffset = getRealOffset(0x110DE90);
DigitalOpusMBCore::MB3_MultiMeshCombiner._validateTextureBakeResults = (bool(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner._validateTextureBakeResultsOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.ApplyOffset = getRealOffset(0x110E1F4);
DigitalOpusMBCore::MB3_MultiMeshCombiner.Apply = (void(*)(void*, void *))DigitalOpusMBCore::MB3_MultiMeshCombiner.ApplyOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.Apply1Offset = getRealOffset(0x110E34C);
DigitalOpusMBCore::MB3_MultiMeshCombiner.Apply1 = (void(*)(void*, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, void *))DigitalOpusMBCore::MB3_MultiMeshCombiner.Apply1Offset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.UpdateSkinnedMeshApproximateBoundsOffset = getRealOffset(0x110E500);
DigitalOpusMBCore::MB3_MultiMeshCombiner.UpdateSkinnedMeshApproximateBounds = (void(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.UpdateSkinnedMeshApproximateBoundsOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.UpdateSkinnedMeshApproximateBoundsFromBonesOffset = getRealOffset(0x110E5CC);
DigitalOpusMBCore::MB3_MultiMeshCombiner.UpdateSkinnedMeshApproximateBoundsFromBones = (void(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.UpdateSkinnedMeshApproximateBoundsFromBonesOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.UpdateSkinnedMeshApproximateBoundsFromBoundsOffset = getRealOffset(0x110E698);
DigitalOpusMBCore::MB3_MultiMeshCombiner.UpdateSkinnedMeshApproximateBoundsFromBounds = (void(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.UpdateSkinnedMeshApproximateBoundsFromBoundsOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.ClearBuffersOffset = getRealOffset(0x1112008);
DigitalOpusMBCore::MB3_MultiMeshCombiner.ClearBuffers = (void(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.ClearBuffersOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.ClearMeshOffset = getRealOffset(0x11120D4);
DigitalOpusMBCore::MB3_MultiMeshCombiner.ClearMesh = (void(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.ClearMeshOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.DestroyMeshOffset = getRealOffset(0x11120E4);
DigitalOpusMBCore::MB3_MultiMeshCombiner.DestroyMesh = (void(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.DestroyMeshOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.DestroyMeshEditorOffset = getRealOffset(0x1112324);
DigitalOpusMBCore::MB3_MultiMeshCombiner.DestroyMeshEditor = (void(*)(void*, void *))DigitalOpusMBCore::MB3_MultiMeshCombiner.DestroyMeshEditorOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner._setMBValuesOffset = getRealOffset(0x1111D40);
DigitalOpusMBCore::MB3_MultiMeshCombiner._setMBValues = (void(*)(void*, void *))DigitalOpusMBCore::MB3_MultiMeshCombiner._setMBValuesOffset;

DigitalOpusMBCore::MB3_MultiMeshCombiner.CheckIntegrityOffset = getRealOffset(0x1112604);
DigitalOpusMBCore::MB3_MultiMeshCombiner.CheckIntegrity = (void(*)(void*))DigitalOpusMBCore::MB3_MultiMeshCombiner.CheckIntegrityOffset;

DigitalOpusMBCore::MB3_TextureCombiner.get_textureBakeResultsOffset = getRealOffset(0x11129E0);
DigitalOpusMBCore::MB3_TextureCombiner.get_textureBakeResults = (void *(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner.get_textureBakeResultsOffset;

DigitalOpusMBCore::MB3_TextureCombiner.set_textureBakeResultsOffset = getRealOffset(0x11129E8);
DigitalOpusMBCore::MB3_TextureCombiner.set_textureBakeResults = (void(*)(void*, void *))DigitalOpusMBCore::MB3_TextureCombiner.set_textureBakeResultsOffset;

DigitalOpusMBCore::MB3_TextureCombiner.get_atlasPaddingOffset = getRealOffset(0x11129F0);
DigitalOpusMBCore::MB3_TextureCombiner.get_atlasPadding = (int(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner.get_atlasPaddingOffset;

DigitalOpusMBCore::MB3_TextureCombiner.set_atlasPaddingOffset = getRealOffset(0x11129F8);
DigitalOpusMBCore::MB3_TextureCombiner.set_atlasPadding = (void(*)(void*, int))DigitalOpusMBCore::MB3_TextureCombiner.set_atlasPaddingOffset;

DigitalOpusMBCore::MB3_TextureCombiner.get_maxAtlasSizeOffset = getRealOffset(0x1112A00);
DigitalOpusMBCore::MB3_TextureCombiner.get_maxAtlasSize = (int(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner.get_maxAtlasSizeOffset;

DigitalOpusMBCore::MB3_TextureCombiner.set_maxAtlasSizeOffset = getRealOffset(0x1112A08);
DigitalOpusMBCore::MB3_TextureCombiner.set_maxAtlasSize = (void(*)(void*, int))DigitalOpusMBCore::MB3_TextureCombiner.set_maxAtlasSizeOffset;

DigitalOpusMBCore::MB3_TextureCombiner.get_resizePowerOfTwoTexturesOffset = getRealOffset(0x1112A10);
DigitalOpusMBCore::MB3_TextureCombiner.get_resizePowerOfTwoTextures = (bool(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner.get_resizePowerOfTwoTexturesOffset;

DigitalOpusMBCore::MB3_TextureCombiner.set_resizePowerOfTwoTexturesOffset = getRealOffset(0x1112A18);
DigitalOpusMBCore::MB3_TextureCombiner.set_resizePowerOfTwoTextures = (void(*)(void*, bool))DigitalOpusMBCore::MB3_TextureCombiner.set_resizePowerOfTwoTexturesOffset;

DigitalOpusMBCore::MB3_TextureCombiner.get_fixOutOfBoundsUVsOffset = getRealOffset(0x1112A20);
DigitalOpusMBCore::MB3_TextureCombiner.get_fixOutOfBoundsUVs = (bool(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner.get_fixOutOfBoundsUVsOffset;

DigitalOpusMBCore::MB3_TextureCombiner.set_fixOutOfBoundsUVsOffset = getRealOffset(0x1112A28);
DigitalOpusMBCore::MB3_TextureCombiner.set_fixOutOfBoundsUVs = (void(*)(void*, bool))DigitalOpusMBCore::MB3_TextureCombiner.set_fixOutOfBoundsUVsOffset;

DigitalOpusMBCore::MB3_TextureCombiner.get_maxTilingBakeSizeOffset = getRealOffset(0x1112A30);
DigitalOpusMBCore::MB3_TextureCombiner.get_maxTilingBakeSize = (int(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner.get_maxTilingBakeSizeOffset;

DigitalOpusMBCore::MB3_TextureCombiner.set_maxTilingBakeSizeOffset = getRealOffset(0x1112A38);
DigitalOpusMBCore::MB3_TextureCombiner.set_maxTilingBakeSize = (void(*)(void*, int))DigitalOpusMBCore::MB3_TextureCombiner.set_maxTilingBakeSizeOffset;

DigitalOpusMBCore::MB3_TextureCombiner.get_saveAtlasesAsAssetsOffset = getRealOffset(0x1112A40);
DigitalOpusMBCore::MB3_TextureCombiner.get_saveAtlasesAsAssets = (bool(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner.get_saveAtlasesAsAssetsOffset;

DigitalOpusMBCore::MB3_TextureCombiner.set_saveAtlasesAsAssetsOffset = getRealOffset(0x1112A48);
DigitalOpusMBCore::MB3_TextureCombiner.set_saveAtlasesAsAssets = (void(*)(void*, bool))DigitalOpusMBCore::MB3_TextureCombiner.set_saveAtlasesAsAssetsOffset;

DigitalOpusMBCore::MB3_TextureCombiner.get_packingAlgorithmOffset = getRealOffset(0x1112A50);
DigitalOpusMBCore::MB3_TextureCombiner.get_packingAlgorithm = (int (*)(void*))DigitalOpusMBCore::MB3_TextureCombiner.get_packingAlgorithmOffset;

DigitalOpusMBCore::MB3_TextureCombiner.set_packingAlgorithmOffset = getRealOffset(0x1112A58);
DigitalOpusMBCore::MB3_TextureCombiner.set_packingAlgorithm = (void(*)(void*, int))DigitalOpusMBCore::MB3_TextureCombiner.set_packingAlgorithmOffset;

DigitalOpusMBCore::MB3_TextureCombiner.get_meshBakerTexturePackerForcePowerOfTwoOffset = getRealOffset(0x1112A60);
DigitalOpusMBCore::MB3_TextureCombiner.get_meshBakerTexturePackerForcePowerOfTwo = (bool(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner.get_meshBakerTexturePackerForcePowerOfTwoOffset;

DigitalOpusMBCore::MB3_TextureCombiner.set_meshBakerTexturePackerForcePowerOfTwoOffset = getRealOffset(0x1112A68);
DigitalOpusMBCore::MB3_TextureCombiner.set_meshBakerTexturePackerForcePowerOfTwo = (void(*)(void*, bool))DigitalOpusMBCore::MB3_TextureCombiner.set_meshBakerTexturePackerForcePowerOfTwoOffset;

DigitalOpusMBCore::MB3_TextureCombiner.get_customShaderPropNamesOffset = getRealOffset(0x1112A70);
DigitalOpusMBCore::MB3_TextureCombiner.get_considerNonTexturePropertiesOffset = getRealOffset(0x1112A80);
DigitalOpusMBCore::MB3_TextureCombiner.get_considerNonTextureProperties = (bool(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner.get_considerNonTexturePropertiesOffset;

DigitalOpusMBCore::MB3_TextureCombiner.set_considerNonTexturePropertiesOffset = getRealOffset(0x1112A88);
DigitalOpusMBCore::MB3_TextureCombiner.set_considerNonTextureProperties = (void(*)(void*, bool))DigitalOpusMBCore::MB3_TextureCombiner.set_considerNonTexturePropertiesOffset;

DigitalOpusMBCore::MB3_TextureCombiner.RunCorutineWithoutPauseOffset = getRealOffset(0x1112A90);
DigitalOpusMBCore::MB3_TextureCombiner.RunCorutineWithoutPause = (void(*)(void *, int))DigitalOpusMBCore::MB3_TextureCombiner.RunCorutineWithoutPauseOffset;

DigitalOpusMBCore::MB3_TextureCombiner._LoadTextureBlendersOffset = getRealOffset(0x11131F0);
DigitalOpusMBCore::MB3_TextureCombiner._LoadTextureBlenders = (void(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner._LoadTextureBlendersOffset;

DigitalOpusMBCore::MB3_TextureCombiner._addWatermark1Offset = getRealOffset(0x1119280);
DigitalOpusMBCore::MB3_TextureCombiner._addWatermark1 = (void *(*)(void*, void *))DigitalOpusMBCore::MB3_TextureCombiner._addWatermark1Offset;

DigitalOpusMBCore::MB3_TextureCombiner.IsPowerOfTwoOffset = getRealOffset(0x1119288);
DigitalOpusMBCore::MB3_TextureCombiner.IsPowerOfTwo = (bool(*)(void*, int))DigitalOpusMBCore::MB3_TextureCombiner.IsPowerOfTwoOffset;

DigitalOpusMBCore::MB3_TextureCombiner.GetAdjustedForScaleAndOffset2DimensionsOffset = getRealOffset(0x111CB50);
DigitalOpusMBCore::MB3_TextureCombiner.GetAdjustedForScaleAndOffset2Dimensions = (Vector2 (*)(void*, void *, Vector2, Vector2))DigitalOpusMBCore::MB3_TextureCombiner.GetAdjustedForScaleAndOffset2DimensionsOffset;

DigitalOpusMBCore::MB3_TextureCombiner.GetAdjustedForScaleAndOffset2Offset = getRealOffset(0x1118460);
DigitalOpusMBCore::MB3_TextureCombiner.GetAdjustedForScaleAndOffset2 = (void *(*)(void*, void *, Vector2, Vector2))DigitalOpusMBCore::MB3_TextureCombiner.GetAdjustedForScaleAndOffset2Offset;

DigitalOpusMBCore::MB3_TextureCombiner.GetSourceSamplingRectOffset = getRealOffset(0x111D028);
DigitalOpusMBCore::MB3_TextureCombiner.GetSourceSamplingRect = (int (*)(void *, Vector2, Vector2))DigitalOpusMBCore::MB3_TextureCombiner.GetSourceSamplingRectOffset;

DigitalOpusMBCore::MB3_TextureCombiner.TintTextureWithTextureCombinerOffset = getRealOffset(0x1118A84);
DigitalOpusMBCore::MB3_TextureCombiner.TintTextureWithTextureCombiner = (void *(*)(void*, void *, void *, void *))DigitalOpusMBCore::MB3_TextureCombiner.TintTextureWithTextureCombinerOffset;

DigitalOpusMBCore::MB3_TextureCombiner._createTemporaryTextureOffset = getRealOffset(0x11181A4);
DigitalOpusMBCore::MB3_TextureCombiner._createTemporaryTexture = (void *(*)(void*, int, int, int, bool))DigitalOpusMBCore::MB3_TextureCombiner._createTemporaryTextureOffset;

DigitalOpusMBCore::MB3_TextureCombiner._createTextureCopyOffset = getRealOffset(0x111D0DC);
DigitalOpusMBCore::MB3_TextureCombiner._createTextureCopy = (void *(*)(void*, void *))DigitalOpusMBCore::MB3_TextureCombiner._createTextureCopyOffset;

DigitalOpusMBCore::MB3_TextureCombiner._resizeTextureOffset = getRealOffset(0x11189EC);
DigitalOpusMBCore::MB3_TextureCombiner._resizeTexture = (void *(*)(void*, void *, int, int))DigitalOpusMBCore::MB3_TextureCombiner._resizeTextureOffset;

DigitalOpusMBCore::MB3_TextureCombiner._destroyTemporaryTexturesOffset = getRealOffset(0x11160F8);
DigitalOpusMBCore::MB3_TextureCombiner._destroyTemporaryTextures = (void(*)(void*))DigitalOpusMBCore::MB3_TextureCombiner._destroyTemporaryTexturesOffset;

DigitalOpusMBCore::MB3_TextureCombiner.FindMatchingTextureBlenderOffset = getRealOffset(0x111F1B0);
DigitalOpusMBCore::MB3_TextureCombiner.FindMatchingTextureBlender = (void *(*)(void*, monoString*))DigitalOpusMBCore::MB3_TextureCombiner.FindMatchingTextureBlenderOffset;

DigitalOpusMBCore::MB3_TextureCombiner.GetColorIfNoTextureOffset = getRealOffset(0x1118284);
DigitalOpusMBCore::MB3_TextureCombiner.GetColorIfNoTexture = (Color (*)(void *))DigitalOpusMBCore::MB3_TextureCombiner.GetColorIfNoTextureOffset;

DigitalOpusMBCore::MB3_TextureCombiner.ConvertNormalFormatFromUnity_ToStandardOffset = getRealOffset(0x111FCF0);
DigitalOpusMBCore::MB3_TextureCombiner.ConvertNormalFormatFromUnity_ToStandard = (int (*)(void*, int))DigitalOpusMBCore::MB3_TextureCombiner.ConvertNormalFormatFromUnity_ToStandardOffset;

DigitalOpusMBCore::MB3_TextureCombiner.GetSubmeshAreaOffset = getRealOffset(0x111FE78);
DigitalOpusMBCore::MB3_TextureCombiner.GetSubmeshArea = (float(*)(void*, void *, int))DigitalOpusMBCore::MB3_TextureCombiner.GetSubmeshAreaOffset;

DigitalOpusMBCore::DRect.ctor1Offset = getRealOffset(0x3D4820);
DigitalOpusMBCore::DRect.ctor1 = (void(*)(void*, Vector2, Vector2))DigitalOpusMBCore::DRect.ctor1Offset;

DigitalOpusMBCore::DRect.ctor2Offset = getRealOffset(0x3D4854);
DigitalOpusMBCore::DRect.ctor2 = (void(*)(void*, float, float, float, float))DigitalOpusMBCore::DRect.ctor2Offset;

DigitalOpusMBCore::DRect.GetRectOffset = getRealOffset(0x3D48B0);
DigitalOpusMBCore::DRect.GetRect = (int (*)(void*))DigitalOpusMBCore::DRect.GetRectOffset;

DigitalOpusMBCore::DRect.get_minOffset = getRealOffset(0x3D4900);
DigitalOpusMBCore::DRect.get_min = (Vector2 (*)(void*))DigitalOpusMBCore::DRect.get_minOffset;

DigitalOpusMBCore::DRect.get_maxOffset = getRealOffset(0x3D4938);
DigitalOpusMBCore::DRect.get_max = (Vector2 (*)(void*))DigitalOpusMBCore::DRect.get_maxOffset;

DigitalOpusMBCore::DRect.get_sizeOffset = getRealOffset(0x3D4978);
DigitalOpusMBCore::DRect.get_size = (Vector2 (*)(void*))DigitalOpusMBCore::DRect.get_sizeOffset;

DigitalOpusMBCore::DRect.op_EqualityOffset = getRealOffset(0x5A991C);
DigitalOpusMBCore::DRect.op_Equality = (bool(*)(int, int))DigitalOpusMBCore::DRect.op_EqualityOffset;

DigitalOpusMBCore::DRect.op_InequalityOffset = getRealOffset(0x5A99F8);
DigitalOpusMBCore::DRect.op_Inequality = (bool(*)(int, int))DigitalOpusMBCore::DRect.op_InequalityOffset;

DigitalOpusMBCore::DRect.ToStringOffset = getRealOffset(0x3D49B0);
DigitalOpusMBCore::DRect.ToString = (monoString *(*)(void*))DigitalOpusMBCore::DRect.ToStringOffset;

DigitalOpusMBCore::DRect.EnclosesOffset = getRealOffset(0x3D49B8);
DigitalOpusMBCore::DRect.Encloses = (bool(*)(void*, int))DigitalOpusMBCore::DRect.EnclosesOffset;

DigitalOpusMBCore::DRect.GetHashCodeOffset = getRealOffset(0x3D4A00);
DigitalOpusMBCore::DRect.GetHashCode = (int(*)(void*))DigitalOpusMBCore::DRect.GetHashCodeOffset;

DigitalOpusMBCore::MB3_UVTransformUtility.TestOffset = getRealOffset(0x112BDA0);
DigitalOpusMBCore::MB3_UVTransformUtility.Test = (void(*)())DigitalOpusMBCore::MB3_UVTransformUtility.TestOffset;

DigitalOpusMBCore::MB_Utility.createTextureCopyOffset = getRealOffset(0x672A48);
DigitalOpusMBCore::MB_Utility.createTextureCopy = (void *(*)(void *))DigitalOpusMBCore::MB_Utility.createTextureCopyOffset;

DigitalOpusMBCore::MB_Utility.GetGOMaterialsOffset = getRealOffset(0x672C08);
DigitalOpusMBCore::MB_Utility.GetMeshOffset = getRealOffset(0x67333C);
DigitalOpusMBCore::MB_Utility.GetMesh = (void *(*)(void *))DigitalOpusMBCore::MB_Utility.GetMeshOffset;

DigitalOpusMBCore::MB_Utility.GetRendererOffset = getRealOffset(0x673544);
DigitalOpusMBCore::MB_Utility.GetRenderer = (void *(*)(void *))DigitalOpusMBCore::MB_Utility.GetRendererOffset;

DigitalOpusMBCore::MB_Utility.DisableRendererInSourceOffset = getRealOffset(0x673698);
DigitalOpusMBCore::MB_Utility.DisableRendererInSource = (void(*)(void *))DigitalOpusMBCore::MB_Utility.DisableRendererInSourceOffset;

DigitalOpusMBCore::MB_Utility.setSolidColorOffset = getRealOffset(0x673E70);
DigitalOpusMBCore::MB_Utility.setSolidColor = (void(*)(void *, Color))DigitalOpusMBCore::MB_Utility.setSolidColorOffset;

DigitalOpusMBCore::MB_Utility.resampleTextureOffset = getRealOffset(0x673F40);
DigitalOpusMBCore::MB_Utility.resampleTexture = (void *(*)(void *, int, int))DigitalOpusMBCore::MB_Utility.resampleTextureOffset;

DigitalOpusMBCore::MB_Utility.DestroyOffset = getRealOffset(0x675090);
DigitalOpusMBCore::MB_Utility.Destroy = (void(*)(void *))DigitalOpusMBCore::MB_Utility.DestroyOffset;

ExitGamesClientDemoParticle::TimeKeeper.get_IntervalOffset = getRealOffset(0x68DEEC);
ExitGamesClientDemoParticle::TimeKeeper.get_Interval = (int(*)(void*))ExitGamesClientDemoParticle::TimeKeeper.get_IntervalOffset;

ExitGamesClientDemoParticle::TimeKeeper.set_IntervalOffset = getRealOffset(0x68DEF4);
ExitGamesClientDemoParticle::TimeKeeper.set_Interval = (void(*)(void*, int))ExitGamesClientDemoParticle::TimeKeeper.set_IntervalOffset;

ExitGamesClientDemoParticle::TimeKeeper.get_IsEnabledOffset = getRealOffset(0x68DEFC);
ExitGamesClientDemoParticle::TimeKeeper.get_IsEnabled = (bool(*)(void*))ExitGamesClientDemoParticle::TimeKeeper.get_IsEnabledOffset;

ExitGamesClientDemoParticle::TimeKeeper.set_IsEnabledOffset = getRealOffset(0x68DF04);
ExitGamesClientDemoParticle::TimeKeeper.set_IsEnabled = (void(*)(void*, bool))ExitGamesClientDemoParticle::TimeKeeper.set_IsEnabledOffset;

ExitGamesClientDemoParticle::TimeKeeper.get_ShouldExecuteOffset = getRealOffset(0x68DF0C);
ExitGamesClientDemoParticle::TimeKeeper.get_ShouldExecute = (bool(*)(void*))ExitGamesClientDemoParticle::TimeKeeper.get_ShouldExecuteOffset;

ExitGamesClientDemoParticle::TimeKeeper.set_ShouldExecuteOffset = getRealOffset(0x68DF64);
ExitGamesClientDemoParticle::TimeKeeper.set_ShouldExecute = (void(*)(void*, bool))ExitGamesClientDemoParticle::TimeKeeper.set_ShouldExecuteOffset;

ExitGamesClientDemoParticle::TimeKeeper.ResetOffset = getRealOffset(0x68DFA4);
ExitGamesClientDemoParticle::TimeKeeper.Reset = (void(*)(void*))ExitGamesClientDemoParticle::TimeKeeper.ResetOffset;

ExitGamesClientGUI::GizmoTypeDrawer.DrawOffset = getRealOffset(0x68DFC8);
ExitGamesClientGUI::GizmoTypeDrawer.Draw = (void(*)(Vector3, int, Color, float))ExitGamesClientGUI::GizmoTypeDrawer.DrawOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.get_PlayerIdsOffset = getRealOffset(0x68E3D4);
ExitGamesUtilityScripts::PlayerRoomIndexing.AwakeOffset = getRealOffset(0x68E3DC);
ExitGamesUtilityScripts::PlayerRoomIndexing.Awake = (void(*)(void*))ExitGamesUtilityScripts::PlayerRoomIndexing.AwakeOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.OnJoinedRoomOffset = getRealOffset(0x68E80C);
ExitGamesUtilityScripts::PlayerRoomIndexing.OnJoinedRoom = (void(*)(void*))ExitGamesUtilityScripts::PlayerRoomIndexing.OnJoinedRoomOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.OnLeftRoomOffset = getRealOffset(0x68F0B4);
ExitGamesUtilityScripts::PlayerRoomIndexing.OnLeftRoom = (void(*)(void*))ExitGamesUtilityScripts::PlayerRoomIndexing.OnLeftRoomOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.OnPhotonPlayerConnectedOffset = getRealOffset(0x68F0B8);
ExitGamesUtilityScripts::PlayerRoomIndexing.OnPhotonPlayerConnected = (void(*)(void*, void *))ExitGamesUtilityScripts::PlayerRoomIndexing.OnPhotonPlayerConnectedOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.OnPhotonPlayerDisconnectedOffset = getRealOffset(0x68F14C);
ExitGamesUtilityScripts::PlayerRoomIndexing.OnPhotonPlayerDisconnected = (void(*)(void*, void *))ExitGamesUtilityScripts::PlayerRoomIndexing.OnPhotonPlayerDisconnectedOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.OnPhotonCustomRoomPropertiesChangedOffset = getRealOffset(0x68F3F0);
ExitGamesUtilityScripts::PlayerRoomIndexing.OnPhotonCustomRoomPropertiesChanged = (void(*)(void*, void *))ExitGamesUtilityScripts::PlayerRoomIndexing.OnPhotonCustomRoomPropertiesChangedOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.OnMasterClientSwitchedOffset = getRealOffset(0x68F480);
ExitGamesUtilityScripts::PlayerRoomIndexing.OnMasterClientSwitched = (void(*)(void*, void *))ExitGamesUtilityScripts::PlayerRoomIndexing.OnMasterClientSwitchedOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.GetRoomIndexOffset = getRealOffset(0x68F50C);
ExitGamesUtilityScripts::PlayerRoomIndexing.GetRoomIndex = (int(*)(void*, void *))ExitGamesUtilityScripts::PlayerRoomIndexing.GetRoomIndexOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.SanitizeIndexingOffset = getRealOffset(0x68E518);
ExitGamesUtilityScripts::PlayerRoomIndexing.SanitizeIndexing = (void(*)(void*, bool))ExitGamesUtilityScripts::PlayerRoomIndexing.SanitizeIndexingOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.RefreshDataOffset = getRealOffset(0x68ED8C);
ExitGamesUtilityScripts::PlayerRoomIndexing.RefreshData = (void(*)(void*))ExitGamesUtilityScripts::PlayerRoomIndexing.RefreshDataOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.AssignIndexOffset = getRealOffset(0x68E8CC);
ExitGamesUtilityScripts::PlayerRoomIndexing.AssignIndex = (void(*)(void*, void *))ExitGamesUtilityScripts::PlayerRoomIndexing.AssignIndexOffset;

ExitGamesUtilityScripts::PlayerRoomIndexing.UnAssignIndexOffset = getRealOffset(0x68F1E0);
ExitGamesUtilityScripts::PlayerRoomIndexing.UnAssignIndex = (void(*)(void*, void *))ExitGamesUtilityScripts::PlayerRoomIndexing.UnAssignIndexOffset;

ExitGamesUtilityScripts::PlayerRoomIndexingExtensions.GetRoomIndexOffset = getRealOffset(0x68F854);
ExitGamesUtilityScripts::PlayerRoomIndexingExtensions.GetRoomIndex = (int(*)(void *))ExitGamesUtilityScripts::PlayerRoomIndexingExtensions.GetRoomIndexOffset;

ExitGamesUtilityScripts::ButtonInsideScrollList.StartOffset = getRealOffset(0x68E1C8);
ExitGamesUtilityScripts::ButtonInsideScrollList.Start = (void(*)(void*))ExitGamesUtilityScripts::ButtonInsideScrollList.StartOffset;

ExitGamesUtilityScripts::ButtonInsideScrollList.UnityEngineEventSystemsIPointerDownHandlerOnPointerDownOffset = getRealOffset(0x68E228);
ExitGamesUtilityScripts::ButtonInsideScrollList.UnityEngineEventSystemsIPointerDownHandlerOnPointerDown = (void(*)(void*, void *))ExitGamesUtilityScripts::ButtonInsideScrollList.UnityEngineEventSystemsIPointerDownHandlerOnPointerDownOffset;

ExitGamesUtilityScripts::ButtonInsideScrollList.UnityEngineEventSystemsIPointerUpHandlerOnPointerUpOffset = getRealOffset(0x68E2F8);
ExitGamesUtilityScripts::ButtonInsideScrollList.UnityEngineEventSystemsIPointerUpHandlerOnPointerUp = (void(*)(void*, void *))ExitGamesUtilityScripts::ButtonInsideScrollList.UnityEngineEventSystemsIPointerUpHandlerOnPointerUpOffset;

ExitGamesUtilityScripts::TextButtonTransition.AwakeOffset = getRealOffset(0x68F964);
ExitGamesUtilityScripts::TextButtonTransition.Awake = (void(*)(void*))ExitGamesUtilityScripts::TextButtonTransition.AwakeOffset;

ExitGamesUtilityScripts::TextButtonTransition.OnPointerEnterOffset = getRealOffset(0x68F9C4);
ExitGamesUtilityScripts::TextButtonTransition.OnPointerEnter = (void(*)(void*, void *))ExitGamesUtilityScripts::TextButtonTransition.OnPointerEnterOffset;

ExitGamesUtilityScripts::TextButtonTransition.OnPointerExitOffset = getRealOffset(0x68FA20);
ExitGamesUtilityScripts::TextButtonTransition.OnPointerExit = (void(*)(void*, void *))ExitGamesUtilityScripts::TextButtonTransition.OnPointerExitOffset;

ExitGamesUtilityScripts::TextToggleIsOnTransition.OnEnableOffset = getRealOffset(0x68FAD8);
ExitGamesUtilityScripts::TextToggleIsOnTransition.OnEnable = (void(*)(void*))ExitGamesUtilityScripts::TextToggleIsOnTransition.OnEnableOffset;

ExitGamesUtilityScripts::TextToggleIsOnTransition.OnDisableOffset = getRealOffset(0x68FBB8);
ExitGamesUtilityScripts::TextToggleIsOnTransition.OnDisable = (void(*)(void*))ExitGamesUtilityScripts::TextToggleIsOnTransition.OnDisableOffset;

ExitGamesUtilityScripts::TextToggleIsOnTransition.OnValueChangedOffset = getRealOffset(0x68FC7C);
ExitGamesUtilityScripts::TextToggleIsOnTransition.OnValueChanged = (void(*)(void*, bool))ExitGamesUtilityScripts::TextToggleIsOnTransition.OnValueChangedOffset;

ExitGamesUtilityScripts::TextToggleIsOnTransition.OnPointerEnterOffset = getRealOffset(0x68FD40);
ExitGamesUtilityScripts::TextToggleIsOnTransition.OnPointerEnter = (void(*)(void*, void *))ExitGamesUtilityScripts::TextToggleIsOnTransition.OnPointerEnterOffset;

ExitGamesUtilityScripts::TextToggleIsOnTransition.OnPointerExitOffset = getRealOffset(0x68FDE8);
ExitGamesUtilityScripts::TextToggleIsOnTransition.OnPointerExit = (void(*)(void*, void *))ExitGamesUtilityScripts::TextToggleIsOnTransition.OnPointerExitOffset;

Horizon::HorizonCompensateZFighting.UpdateOffset = getRealOffset(0x7F28CC);
Horizon::HorizonCompensateZFighting.Update = (void(*)(void*))Horizon::HorizonCompensateZFighting.UpdateOffset;

Horizon::HorizonCopyMaterialProps.SyncOffset = getRealOffset(0x7F2BB8);
Horizon::HorizonCopyMaterialProps.Sync = (void(*)(void*, bool))Horizon::HorizonCopyMaterialProps.SyncOffset;

Horizon::HorizonCopyMaterialProps.CopyFloatOffset = getRealOffset(0x7F43A0);
Horizon::HorizonCopyMaterialProps.CopyFloat = (void(*)(void*, monoString*, void *, void *))Horizon::HorizonCopyMaterialProps.CopyFloatOffset;

Horizon::HorizonCopyMaterialProps.CopyFloat1Offset = getRealOffset(0x7F4B60);
Horizon::HorizonCopyMaterialProps.CopyFloat1 = (void(*)(void*, monoString*, monoString*, void *, void *))Horizon::HorizonCopyMaterialProps.CopyFloat1Offset;

Horizon::HorizonCopyMaterialProps.CopyColorOffset = getRealOffset(0x7F4614);
Horizon::HorizonCopyMaterialProps.CopyColor = (void(*)(void*, monoString*, void *, void *))Horizon::HorizonCopyMaterialProps.CopyColorOffset;

Horizon::HorizonCopyMaterialProps.CopyColor1Offset = getRealOffset(0x7F4AA4);
Horizon::HorizonCopyMaterialProps.CopyColor1 = (void(*)(void*, monoString*, monoString*, void *, void *))Horizon::HorizonCopyMaterialProps.CopyColor1Offset;

Horizon::HorizonCopyMaterialProps.CopyVectorOffset = getRealOffset(0x7F455C);
Horizon::HorizonCopyMaterialProps.CopyVector = (void(*)(void*, monoString*, void *, void *))Horizon::HorizonCopyMaterialProps.CopyVectorOffset;

Horizon::HorizonCopyMaterialProps.CopyVector1Offset = getRealOffset(0x7F4D00);
Horizon::HorizonCopyMaterialProps.CopyVector1 = (void(*)(void*, monoString*, monoString*, void *, void *))Horizon::HorizonCopyMaterialProps.CopyVector1Offset;

Horizon::HorizonCopyMaterialProps.CopyTextureOffset = getRealOffset(0x7F4444);
Horizon::HorizonCopyMaterialProps.CopyTexture = (void(*)(void*, monoString*, void *, void *))Horizon::HorizonCopyMaterialProps.CopyTextureOffset;

Horizon::HorizonCopyMaterialProps.CopyTexture1Offset = getRealOffset(0x7F488C);
Horizon::HorizonCopyMaterialProps.CopyTexture1 = (void(*)(void*, monoString*, monoString*, void *, void *))Horizon::HorizonCopyMaterialProps.CopyTexture1Offset;

Horizon::HorizonCopyMaterialProps.CopyTextureTilingOffsetOffset = getRealOffset(0x7F4C08);
Horizon::HorizonCopyMaterialProps.CopyTextureTilingOffset = (void(*)(void*, monoString*, void *, void *))Horizon::HorizonCopyMaterialProps.CopyTextureTilingOffsetOffset;

Horizon::HorizonCopyMaterialProps.CopyTextureTilingOffset1Offset = getRealOffset(0x7F49A8);
Horizon::HorizonCopyMaterialProps.CopyTextureTilingOffset1 = (void(*)(void*, monoString*, monoString*, void *, void *))Horizon::HorizonCopyMaterialProps.CopyTextureTilingOffset1Offset;

Horizon::HorizonCopyMaterialProps.CheckEnabledOffset = getRealOffset(0x7F4330);
Horizon::HorizonCopyMaterialProps.CheckEnabled = (bool(*)(void*, monoString*, void *))Horizon::HorizonCopyMaterialProps.CheckEnabledOffset;

Horizon::HorizonCopyMaterialProps.CheckTypeOffset = getRealOffset(0x7F46CC);
Horizon::HorizonCopyMaterialProps.CheckType = (float(*)(void*, monoString*, void *))Horizon::HorizonCopyMaterialProps.CheckTypeOffset;

Horizon::HorizonCopyMaterialProps.CompareTexturesOffset = getRealOffset(0x7F4728);
Horizon::HorizonCopyMaterialProps.CompareTextures = (bool(*)(void*, monoString*, void *, monoString*, void *))Horizon::HorizonCopyMaterialProps.CompareTexturesOffset;

Horizon::HorizonDisplacementHelper.AdjustBoundsOffset = getRealOffset(0x7F4DD4);
Horizon::HorizonDisplacementHelper.AdjustBounds = (void(*)(void *))Horizon::HorizonDisplacementHelper.AdjustBoundsOffset;

Horizon::HorizonDisplacementHelper.DisplaceMeshOffset = getRealOffset(0x7F6444);
Horizon::HorizonDisplacementHelper.DisplaceMesh = (void(*)(void *))Horizon::HorizonDisplacementHelper.DisplaceMeshOffset;

Horizon::HorizonDisplacementHelper.GetPropsOffset = getRealOffset(0x7F52B8);
Horizon::HorizonDisplacementHelper.GetProps = (bool(*)(void *))Horizon::HorizonDisplacementHelper.GetPropsOffset;

Horizon::HorizonDisplacementHelper.TRANSFORM_TEXOffset = getRealOffset(0x7F6AEC);
Horizon::HorizonDisplacementHelper.TRANSFORM_TEX = (Vector2 (*)(Vector2, int))Horizon::HorizonDisplacementHelper.TRANSFORM_TEXOffset;

Horizon::HorizonDisplacementHelper.DisplaceOffset = getRealOffset(0x7F6B18);
Horizon::HorizonDisplacementHelper.Displace = (float(*)(Vector2))Horizon::HorizonDisplacementHelper.DisplaceOffset;

Horizon::HorizonDisplacementHelper.dispOffset = getRealOffset(0x7F6288);
Horizon::HorizonDisplacementHelper.disp = (float(*)(Vector2))Horizon::HorizonDisplacementHelper.dispOffset;

Horizon::HorizonDisplacementHelper.getUVsOffset = getRealOffset(0x7F61BC);
Horizon::HorizonDisplacementHelper.getUVs = (Vector2 (*)(Vector2, Vector2))Horizon::HorizonDisplacementHelper.getUVsOffset;

IronSourceJSON::Json.DeserializeOffset = getRealOffset(0xCAC258);
LitJson::JsonData.get_CountOffset = getRealOffset(0x661E54);
LitJson::JsonData.get_Count = (int(*)(void*))LitJson::JsonData.get_CountOffset;

LitJson::JsonData.get_IsArrayOffset = getRealOffset(0x66201C);
LitJson::JsonData.get_IsArray = (bool(*)(void*))LitJson::JsonData.get_IsArrayOffset;

LitJson::JsonData.get_IsBooleanOffset = getRealOffset(0x662030);
LitJson::JsonData.get_IsBoolean = (bool(*)(void*))LitJson::JsonData.get_IsBooleanOffset;

LitJson::JsonData.get_IsDoubleOffset = getRealOffset(0x662044);
LitJson::JsonData.get_IsDouble = (bool(*)(void*))LitJson::JsonData.get_IsDoubleOffset;

LitJson::JsonData.get_IsIntOffset = getRealOffset(0x662058);
LitJson::JsonData.get_IsInt = (bool(*)(void*))LitJson::JsonData.get_IsIntOffset;

LitJson::JsonData.get_IsLongOffset = getRealOffset(0x66206C);
LitJson::JsonData.get_IsLong = (bool(*)(void*))LitJson::JsonData.get_IsLongOffset;

LitJson::JsonData.get_IsObjectOffset = getRealOffset(0x662080);
LitJson::JsonData.get_IsObject = (bool(*)(void*))LitJson::JsonData.get_IsObjectOffset;

LitJson::JsonData.get_IsStringOffset = getRealOffset(0x662094);
LitJson::JsonData.get_IsString = (bool(*)(void*))LitJson::JsonData.get_IsStringOffset;

LitJson::JsonData.SystemCollectionsICollectionget_CountOffset = getRealOffset(0x6620A8);
LitJson::JsonData.SystemCollectionsICollectionget_Count = (int(*)(void*))LitJson::JsonData.SystemCollectionsICollectionget_CountOffset;

LitJson::JsonData.SystemCollectionsICollectionget_IsSynchronizedOffset = getRealOffset(0x6620AC);
LitJson::JsonData.SystemCollectionsICollectionget_IsSynchronized = (bool(*)(void*))LitJson::JsonData.SystemCollectionsICollectionget_IsSynchronizedOffset;

LitJson::JsonData.SystemCollectionsICollectionget_SyncRootOffset = getRealOffset(0x662180);
LitJson::JsonData.SystemCollectionsIDictionaryget_IsFixedSizeOffset = getRealOffset(0x662254);
LitJson::JsonData.SystemCollectionsIDictionaryget_IsFixedSize = (bool(*)(void*))LitJson::JsonData.SystemCollectionsIDictionaryget_IsFixedSizeOffset;

LitJson::JsonData.SystemCollectionsIDictionaryget_IsReadOnlyOffset = getRealOffset(0x662484);
LitJson::JsonData.SystemCollectionsIDictionaryget_IsReadOnly = (bool(*)(void*))LitJson::JsonData.SystemCollectionsIDictionaryget_IsReadOnlyOffset;

LitJson::JsonData.get_KeysOffset = getRealOffset(0x662558);
LitJson::JsonData.get_Keys = (void *(*)(void*))LitJson::JsonData.get_KeysOffset;

LitJson::JsonData.SystemCollectionsIDictionaryget_ValuesOffset = getRealOffset(0x662918);
LitJson::JsonData.SystemCollectionsIDictionaryget_Values = (void *(*)(void*))LitJson::JsonData.SystemCollectionsIDictionaryget_ValuesOffset;

LitJson::JsonData.LitJsonIJsonWrapperget_IsArrayOffset = getRealOffset(0x662CD8);
LitJson::JsonData.LitJsonIJsonWrapperget_IsArray = (bool(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperget_IsArrayOffset;

LitJson::JsonData.LitJsonIJsonWrapperget_IsBooleanOffset = getRealOffset(0x662CEC);
LitJson::JsonData.LitJsonIJsonWrapperget_IsBoolean = (bool(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperget_IsBooleanOffset;

LitJson::JsonData.LitJsonIJsonWrapperget_IsDoubleOffset = getRealOffset(0x662D00);
LitJson::JsonData.LitJsonIJsonWrapperget_IsDouble = (bool(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperget_IsDoubleOffset;

LitJson::JsonData.LitJsonIJsonWrapperget_IsIntOffset = getRealOffset(0x662D14);
LitJson::JsonData.LitJsonIJsonWrapperget_IsInt = (bool(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperget_IsIntOffset;

LitJson::JsonData.LitJsonIJsonWrapperget_IsLongOffset = getRealOffset(0x662D28);
LitJson::JsonData.LitJsonIJsonWrapperget_IsLong = (bool(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperget_IsLongOffset;

LitJson::JsonData.LitJsonIJsonWrapperget_IsObjectOffset = getRealOffset(0x662D3C);
LitJson::JsonData.LitJsonIJsonWrapperget_IsObject = (bool(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperget_IsObjectOffset;

LitJson::JsonData.LitJsonIJsonWrapperget_IsStringOffset = getRealOffset(0x662D50);
LitJson::JsonData.LitJsonIJsonWrapperget_IsString = (bool(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperget_IsStringOffset;

LitJson::JsonData.SystemCollectionsIListget_IsFixedSizeOffset = getRealOffset(0x662D64);
LitJson::JsonData.SystemCollectionsIListget_IsFixedSize = (bool(*)(void*))LitJson::JsonData.SystemCollectionsIListget_IsFixedSizeOffset;

LitJson::JsonData.SystemCollectionsIListget_IsReadOnlyOffset = getRealOffset(0x662F9C);
LitJson::JsonData.SystemCollectionsIListget_IsReadOnly = (bool(*)(void*))LitJson::JsonData.SystemCollectionsIListget_IsReadOnlyOffset;

LitJson::JsonData.SystemCollectionsSpecializedIOrderedDictionaryget_ItemOffset = getRealOffset(0x663730);
LitJson::JsonData.SystemCollectionsIListget_ItemOffset = getRealOffset(0x663A78);
LitJson::JsonData.get_ItemOffset = getRealOffset(0x663E80);
LitJson::JsonData.get_Item = (void *(*)(void*, monoString*))LitJson::JsonData.get_ItemOffset;

LitJson::JsonData.set_ItemOffset = getRealOffset(0x6632EC);
LitJson::JsonData.set_Item = (void(*)(void*, monoString*, void *))LitJson::JsonData.set_ItemOffset;

LitJson::JsonData.get_Item1Offset = getRealOffset(0x663F5C);
LitJson::JsonData.get_Item1 = (void *(*)(void*, int))LitJson::JsonData.get_Item1Offset;

LitJson::JsonData.set_Item1Offset = getRealOffset(0x663B88);
LitJson::JsonData.set_Item1 = (void(*)(void*, int, void *))LitJson::JsonData.set_Item1Offset;

LitJson::JsonData.ctor1Offset = getRealOffset(0x6640F0);
LitJson::JsonData.ctor1 = (void(*)(void*, bool))LitJson::JsonData.ctor1Offset;

LitJson::JsonData.ctor3Offset = getRealOffset(0x664148);
LitJson::JsonData.ctor3 = (void(*)(void*, int))LitJson::JsonData.ctor3Offset;

LitJson::JsonData.ctor6Offset = getRealOffset(0x6643C0);
LitJson::JsonData.ctor6 = (void(*)(void*, monoString*))LitJson::JsonData.ctor6Offset;

LitJson::JsonData.op_ImplicitOffset = getRealOffset(0x6643E8);
LitJson::JsonData.op_Implicit = (void *(*)(bool))LitJson::JsonData.op_ImplicitOffset;

LitJson::JsonData.op_Implicit2Offset = getRealOffset(0x6644D8);
LitJson::JsonData.op_Implicit2 = (void *(*)(int))LitJson::JsonData.op_Implicit2Offset;

LitJson::JsonData.op_Implicit4Offset = getRealOffset(0x6645C8);
LitJson::JsonData.op_Implicit4 = (void *(*)(monoString*))LitJson::JsonData.op_Implicit4Offset;

LitJson::JsonData.op_ExplicitOffset = getRealOffset(0x66463C);
LitJson::JsonData.op_Explicit = (bool(*)(void *))LitJson::JsonData.op_ExplicitOffset;

LitJson::JsonData.op_Explicit1Offset = getRealOffset(0x6646E8);
LitJson::JsonData.op_Explicit2Offset = getRealOffset(0x664798);
LitJson::JsonData.op_Explicit2 = (int(*)(void *))LitJson::JsonData.op_Explicit2Offset;

LitJson::JsonData.op_Explicit3Offset = getRealOffset(0x664844);
LitJson::JsonData.op_Explicit4Offset = getRealOffset(0x6648F0);
LitJson::JsonData.op_Explicit4 = (monoString *(*)(void *))LitJson::JsonData.op_Explicit4Offset;

LitJson::JsonData.SystemCollectionsICollectionCopyToOffset = getRealOffset(0x66499C);
LitJson::JsonData.SystemCollectionsICollectionCopyTo = (void(*)(void*, void *, int))LitJson::JsonData.SystemCollectionsICollectionCopyToOffset;

LitJson::JsonData.SystemCollectionsIDictionaryClearOffset = getRealOffset(0x664C78);
LitJson::JsonData.SystemCollectionsIDictionaryClear = (void(*)(void*))LitJson::JsonData.SystemCollectionsIDictionaryClearOffset;

LitJson::JsonData.SystemCollectionsIDictionaryGetEnumeratorOffset = getRealOffset(0x664EB8);
LitJson::JsonData.SystemCollectionsIDictionaryGetEnumerator = (void *(*)(void*))LitJson::JsonData.SystemCollectionsIDictionaryGetEnumeratorOffset;

LitJson::JsonData.SystemCollectionsIEnumerableGetEnumeratorOffset = getRealOffset(0x665270);
LitJson::JsonData.SystemCollectionsIEnumerableGetEnumerator = (void *(*)(void*))LitJson::JsonData.SystemCollectionsIEnumerableGetEnumeratorOffset;

LitJson::JsonData.LitJsonIJsonWrapperGetBooleanOffset = getRealOffset(0x665344);
LitJson::JsonData.LitJsonIJsonWrapperGetBoolean = (bool(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperGetBooleanOffset;

LitJson::JsonData.LitJsonIJsonWrapperGetDoubleOffset = getRealOffset(0x6653E4);
LitJson::JsonData.LitJsonIJsonWrapperGetIntOffset = getRealOffset(0x665488);
LitJson::JsonData.LitJsonIJsonWrapperGetInt = (int(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperGetIntOffset;

LitJson::JsonData.LitJsonIJsonWrapperGetLongOffset = getRealOffset(0x665528);
LitJson::JsonData.LitJsonIJsonWrapperGetStringOffset = getRealOffset(0x6655C8);
LitJson::JsonData.LitJsonIJsonWrapperGetString = (monoString *(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperGetStringOffset;

LitJson::JsonData.LitJsonIJsonWrapperSetBooleanOffset = getRealOffset(0x665668);
LitJson::JsonData.LitJsonIJsonWrapperSetBoolean = (void(*)(void*, bool))LitJson::JsonData.LitJsonIJsonWrapperSetBooleanOffset;

LitJson::JsonData.LitJsonIJsonWrapperSetIntOffset = getRealOffset(0x6656A0);
LitJson::JsonData.LitJsonIJsonWrapperSetInt = (void(*)(void*, int))LitJson::JsonData.LitJsonIJsonWrapperSetIntOffset;

LitJson::JsonData.LitJsonIJsonWrapperSetStringOffset = getRealOffset(0x6656D8);
LitJson::JsonData.LitJsonIJsonWrapperSetString = (void(*)(void*, monoString*))LitJson::JsonData.LitJsonIJsonWrapperSetStringOffset;

LitJson::JsonData.LitJsonIJsonWrapperToJsonOffset = getRealOffset(0x6656F0);
LitJson::JsonData.LitJsonIJsonWrapperToJson = (monoString *(*)(void*))LitJson::JsonData.LitJsonIJsonWrapperToJsonOffset;

LitJson::JsonData.LitJsonIJsonWrapperToJson1Offset = getRealOffset(0x6657D0);
LitJson::JsonData.LitJsonIJsonWrapperToJson1 = (void(*)(void*, void *))LitJson::JsonData.LitJsonIJsonWrapperToJson1Offset;

LitJson::JsonData.SystemCollectionsIListClearOffset = getRealOffset(0x665928);
LitJson::JsonData.SystemCollectionsIListClear = (void(*)(void*))LitJson::JsonData.SystemCollectionsIListClearOffset;

LitJson::JsonData.SystemCollectionsIListRemoveAtOffset = getRealOffset(0x665D94);
LitJson::JsonData.SystemCollectionsIListRemoveAt = (void(*)(void*, int))LitJson::JsonData.SystemCollectionsIListRemoveAtOffset;

LitJson::JsonData.SystemCollectionsSpecializedIOrderedDictionaryGetEnumeratorOffset = getRealOffset(0x665E78);
LitJson::JsonData.SystemCollectionsSpecializedIOrderedDictionaryGetEnumerator = (void *(*)(void*))LitJson::JsonData.SystemCollectionsSpecializedIOrderedDictionaryGetEnumeratorOffset;

LitJson::JsonData.SystemCollectionsSpecializedIOrderedDictionaryRemoveAtOffset = getRealOffset(0x6660EC);
LitJson::JsonData.SystemCollectionsSpecializedIOrderedDictionaryRemoveAt = (void(*)(void*, int))LitJson::JsonData.SystemCollectionsSpecializedIOrderedDictionaryRemoveAtOffset;

LitJson::JsonData.EnsureCollectionOffset = getRealOffset(0x661F28);
LitJson::JsonData.EnsureCollection = (void *(*)(void*))LitJson::JsonData.EnsureCollectionOffset;

LitJson::JsonData.EnsureDictionaryOffset = getRealOffset(0x662328);
LitJson::JsonData.EnsureDictionary = (void *(*)(void*))LitJson::JsonData.EnsureDictionaryOffset;

LitJson::JsonData.EnsureListOffset = getRealOffset(0x662E38);
LitJson::JsonData.EnsureList = (void *(*)(void*))LitJson::JsonData.EnsureListOffset;

LitJson::JsonData.WriteJsonOffset = getRealOffset(0x6662F0);
LitJson::JsonData.WriteJson = (void(*)(void *, void *))LitJson::JsonData.WriteJsonOffset;

LitJson::JsonData.ClearOffset = getRealOffset(0x667038);
LitJson::JsonData.Clear = (void(*)(void*))LitJson::JsonData.ClearOffset;

LitJson::JsonData.EqualsOffset = getRealOffset(0x667174);
LitJson::JsonData.Equals = (bool(*)(void*, void *))LitJson::JsonData.EqualsOffset;

LitJson::JsonData.GetJsonTypeOffset = getRealOffset(0x6672B8);
LitJson::JsonData.GetJsonType = (int (*)(void*))LitJson::JsonData.GetJsonTypeOffset;

LitJson::JsonData.SetJsonTypeOffset = getRealOffset(0x6672C0);
LitJson::JsonData.SetJsonType = (void(*)(void*, int))LitJson::JsonData.SetJsonTypeOffset;

LitJson::JsonData.ToJsonOffset = getRealOffset(0x6656F4);
LitJson::JsonData.ToJson = (monoString *(*)(void*))LitJson::JsonData.ToJsonOffset;

LitJson::JsonData.ToJson1Offset = getRealOffset(0x6657D4);
LitJson::JsonData.ToJson1 = (void(*)(void*, void *))LitJson::JsonData.ToJson1Offset;

LitJson::JsonData.ToStringOffset = getRealOffset(0x667430);
LitJson::JsonData.ToString = (monoString *(*)(void*))LitJson::JsonData.ToStringOffset;

LitJson::OrderedDictionaryEnumerator.get_CurrentOffset = getRealOffset(0x6DD608);
LitJson::OrderedDictionaryEnumerator.get_EntryOffset = getRealOffset(0x6DD684);
LitJson::OrderedDictionaryEnumerator.get_Entry = (int (*)(void*))LitJson::OrderedDictionaryEnumerator.get_EntryOffset;

LitJson::OrderedDictionaryEnumerator.get_KeyOffset = getRealOffset(0x6DD77C);
LitJson::OrderedDictionaryEnumerator.get_ValueOffset = getRealOffset(0x6DD858);
LitJson::OrderedDictionaryEnumerator.MoveNextOffset = getRealOffset(0x6DD954);
LitJson::OrderedDictionaryEnumerator.MoveNext = (bool(*)(void*))LitJson::OrderedDictionaryEnumerator.MoveNextOffset;

LitJson::OrderedDictionaryEnumerator.ResetOffset = getRealOffset(0x6DDA20);
LitJson::OrderedDictionaryEnumerator.Reset = (void(*)(void*))LitJson::OrderedDictionaryEnumerator.ResetOffset;

LitJson::JsonException.ctor1Offset = getRealOffset(0x66752C);
LitJson::JsonException.ctor1 = (void(*)(void*, int))LitJson::JsonException.ctor1Offset;

LitJson::JsonException.ctor2Offset = getRealOffset(0x6675C4);
LitJson::JsonException.ctor2 = (void(*)(void*, int, void *))LitJson::JsonException.ctor2Offset;

LitJson::JsonException.ctor3Offset = getRealOffset(0x667664);
LitJson::JsonException.ctor3 = (void(*)(void*, int))LitJson::JsonException.ctor3Offset;

LitJson::JsonException.ctor4Offset = getRealOffset(0x6676FC);
LitJson::JsonException.ctor4 = (void(*)(void*, int, void *))LitJson::JsonException.ctor4Offset;

LitJson::JsonException.ctor5Offset = getRealOffset(0x66779C);
LitJson::JsonException.ctor5 = (void(*)(void*, monoString*))LitJson::JsonException.ctor5Offset;

LitJson::JsonException.ctor6Offset = getRealOffset(0x6677A4);
LitJson::JsonException.ctor6 = (void(*)(void*, monoString*, void *))LitJson::JsonException.ctor6Offset;

LitJson::ArrayMetadata.get_ElementTypeOffset = getRealOffset(0x3D4E7C);
LitJson::ArrayMetadata.get_ElementType = (void *(*)(void*))LitJson::ArrayMetadata.get_ElementTypeOffset;

LitJson::ArrayMetadata.set_ElementTypeOffset = getRealOffset(0x3D4E84);
LitJson::ArrayMetadata.set_ElementType = (void(*)(void*, void *))LitJson::ArrayMetadata.set_ElementTypeOffset;

LitJson::ArrayMetadata.get_IsArrayOffset = getRealOffset(0x3D4E8C);
LitJson::ArrayMetadata.get_IsArray = (bool(*)(void*))LitJson::ArrayMetadata.get_IsArrayOffset;

LitJson::ArrayMetadata.set_IsArrayOffset = getRealOffset(0x3D4E94);
LitJson::ArrayMetadata.set_IsArray = (void(*)(void*, bool))LitJson::ArrayMetadata.set_IsArrayOffset;

LitJson::ArrayMetadata.get_IsListOffset = getRealOffset(0x3D4E9C);
LitJson::ArrayMetadata.get_IsList = (bool(*)(void*))LitJson::ArrayMetadata.get_IsListOffset;

LitJson::ArrayMetadata.set_IsListOffset = getRealOffset(0x3D4EA4);
LitJson::ArrayMetadata.set_IsList = (void(*)(void*, bool))LitJson::ArrayMetadata.set_IsListOffset;

LitJson::ObjectMetadata.get_ElementTypeOffset = getRealOffset(0x3D517C);
LitJson::ObjectMetadata.get_ElementType = (void *(*)(void*))LitJson::ObjectMetadata.get_ElementTypeOffset;

LitJson::ObjectMetadata.set_ElementTypeOffset = getRealOffset(0x3D5184);
LitJson::ObjectMetadata.set_ElementType = (void(*)(void*, void *))LitJson::ObjectMetadata.set_ElementTypeOffset;

LitJson::ObjectMetadata.get_IsDictionaryOffset = getRealOffset(0x3D518C);
LitJson::ObjectMetadata.get_IsDictionary = (bool(*)(void*))LitJson::ObjectMetadata.get_IsDictionaryOffset;

LitJson::ObjectMetadata.set_IsDictionaryOffset = getRealOffset(0x3D5194);
LitJson::ObjectMetadata.set_IsDictionary = (void(*)(void*, bool))LitJson::ObjectMetadata.set_IsDictionaryOffset;

LitJson::ObjectMetadata.get_PropertiesOffset = getRealOffset(0x3D519C);
LitJson::ExporterFunc.EndInvokeOffset = getRealOffset(0x6619D0);
LitJson::ExporterFunc.EndInvoke = (void(*)(void*, void *))LitJson::ExporterFunc.EndInvokeOffset;

LitJson::ImporterFunc.EndInvokeOffset = getRealOffset(0x661E48);
LitJson::WrapperFactory.InvokeOffset = getRealOffset(0x6DDB00);
LitJson::WrapperFactory.Invoke = (void *(*)(void*))LitJson::WrapperFactory.InvokeOffset;

LitJson::WrapperFactory.EndInvokeOffset = getRealOffset(0x6DDD6C);
LitJson::WrapperFactory.EndInvoke = (void *(*)(void*, void *))LitJson::WrapperFactory.EndInvokeOffset;

LitJson::JsonMapper.AddArrayMetadataOffset = getRealOffset(0x669C58);
LitJson::JsonMapper.AddArrayMetadata = (void(*)(void *))LitJson::JsonMapper.AddArrayMetadataOffset;

LitJson::JsonMapper.AddObjectMetadataOffset = getRealOffset(0x66A18C);
LitJson::JsonMapper.AddObjectMetadata = (void(*)(void *))LitJson::JsonMapper.AddObjectMetadataOffset;

LitJson::JsonMapper.AddTypePropertiesOffset = getRealOffset(0x66A934);
LitJson::JsonMapper.AddTypeProperties = (void(*)(void *))LitJson::JsonMapper.AddTypePropertiesOffset;

LitJson::JsonMapper.GetConvOpOffset = getRealOffset(0x66AEA4);
LitJson::JsonMapper.GetConvOp = (void *(*)(void *, void *))LitJson::JsonMapper.GetConvOpOffset;

LitJson::JsonMapper.ReadValueOffset = getRealOffset(0x66B930);
LitJson::JsonMapper.ReadValue1Offset = getRealOffset(0x66D2C0);
LitJson::JsonMapper.ReadValue1 = (void *(*)(void *, void *))LitJson::JsonMapper.ReadValue1Offset;

LitJson::JsonMapper.RegisterBaseExportersOffset = getRealOffset(0x667AC4);
LitJson::JsonMapper.RegisterBaseExporters = (void(*)())LitJson::JsonMapper.RegisterBaseExportersOffset;

LitJson::JsonMapper.RegisterBaseImportersOffset = getRealOffset(0x668C20);
LitJson::JsonMapper.RegisterBaseImporters = (void(*)())LitJson::JsonMapper.RegisterBaseImportersOffset;

LitJson::JsonMapper.ToObjectOffset = getRealOffset(0x66F9BC);
LitJson::JsonMapper.ToObject = (void *(*)(void *))LitJson::JsonMapper.ToObjectOffset;

LitJson::JsonMapper.ToObject1Offset = getRealOffset(0x66FBB8);
LitJson::JsonMapper.ToObject1 = (void *(*)(void *))LitJson::JsonMapper.ToObject1Offset;

LitJson::JsonMapper.ToObject2Offset = getRealOffset(0x66FD60);
LitJson::JsonMapper.ToObject2 = (void *(*)(monoString*))LitJson::JsonMapper.ToObject2Offset;

LitJson::JsonMapper.ToWrapperOffset = getRealOffset(0x66FB38);
LitJson::JsonMapper.ToWrapper = (void *(*)(void *, void *))LitJson::JsonMapper.ToWrapperOffset;

LitJson::JsonMapper.ToWrapper1Offset = getRealOffset(0x66FEDC);
LitJson::JsonMapper.ToWrapper1 = (void *(*)(void *, monoString*))LitJson::JsonMapper.ToWrapper1Offset;

LitJson::JsonMapper.UnregisterExportersOffset = getRealOffset(0x66FFF8);
LitJson::JsonMapper.UnregisterExporters = (void(*)())LitJson::JsonMapper.UnregisterExportersOffset;

LitJson::JsonMapper.UnregisterImportersOffset = getRealOffset(0x6700F4);
LitJson::JsonMapper.UnregisterImporters = (void(*)())LitJson::JsonMapper.UnregisterImportersOffset;

LitJson::JsonReader.get_AllowCommentsOffset = getRealOffset(0x671860);
LitJson::JsonReader.get_AllowComments = (bool(*)(void*))LitJson::JsonReader.get_AllowCommentsOffset;

LitJson::JsonReader.set_AllowCommentsOffset = getRealOffset(0x671880);
LitJson::JsonReader.set_AllowComments = (void(*)(void*, bool))LitJson::JsonReader.set_AllowCommentsOffset;

LitJson::JsonReader.get_AllowSingleQuotedStringsOffset = getRealOffset(0x6718A4);
LitJson::JsonReader.get_AllowSingleQuotedStrings = (bool(*)(void*))LitJson::JsonReader.get_AllowSingleQuotedStringsOffset;

LitJson::JsonReader.set_AllowSingleQuotedStringsOffset = getRealOffset(0x6718C4);
LitJson::JsonReader.set_AllowSingleQuotedStrings = (void(*)(void*, bool))LitJson::JsonReader.set_AllowSingleQuotedStringsOffset;

LitJson::JsonReader.get_EndOfInputOffset = getRealOffset(0x6718E8);
LitJson::JsonReader.get_EndOfInput = (bool(*)(void*))LitJson::JsonReader.get_EndOfInputOffset;

LitJson::JsonReader.get_EndOfJsonOffset = getRealOffset(0x6718F0);
LitJson::JsonReader.get_EndOfJson = (bool(*)(void*))LitJson::JsonReader.get_EndOfJsonOffset;

LitJson::JsonReader.get_TokenOffset = getRealOffset(0x6718F8);
LitJson::JsonReader.get_Token = (int (*)(void*))LitJson::JsonReader.get_TokenOffset;

LitJson::JsonReader.get_ValueOffset = getRealOffset(0x671900);
LitJson::JsonReader.ctor1Offset = getRealOffset(0x66FD58);
LitJson::JsonReader.ctor1 = (void(*)(void*, void *))LitJson::JsonReader.ctor1Offset;

LitJson::JsonReader.ctor2Offset = getRealOffset(0x67214C);
LitJson::JsonReader.ctor2 = (void(*)(void*, void *, bool))LitJson::JsonReader.ctor2Offset;

LitJson::JsonReader.PopulateParseTableOffset = getRealOffset(0x67190C);
LitJson::JsonReader.PopulateParseTable = (void(*)())LitJson::JsonReader.PopulateParseTableOffset;

LitJson::JsonReader.TableAddRowOffset = getRealOffset(0x6722C4);
LitJson::JsonReader.TableAddRow = (void(*)(int))LitJson::JsonReader.TableAddRowOffset;

LitJson::JsonReader.ProcessNumberOffset = getRealOffset(0x6725A0);
LitJson::JsonReader.ProcessNumber = (void(*)(void*, monoString*))LitJson::JsonReader.ProcessNumberOffset;

LitJson::JsonReader.ProcessSymbolOffset = getRealOffset(0x672774);
LitJson::JsonReader.ProcessSymbol = (void(*)(void*))LitJson::JsonReader.ProcessSymbolOffset;

LitJson::JsonReader.ReadTokenOffset = getRealOffset(0x672964);
LitJson::JsonReader.ReadToken = (bool(*)(void*))LitJson::JsonReader.ReadTokenOffset;

LitJson::JsonReader.CloseOffset = getRealOffset(0x6729E8);
LitJson::JsonReader.Close = (void(*)(void*))LitJson::JsonReader.CloseOffset;

LitJson::JsonReader.ReadOffset = getRealOffset(0x66CD90);
LitJson::JsonReader.Read = (bool(*)(void*))LitJson::JsonReader.ReadOffset;

LitJson::JsonWriter.get_IndentValueOffset = getRealOffset(0x6D87B8);
LitJson::JsonWriter.get_IndentValue = (int(*)(void*))LitJson::JsonWriter.get_IndentValueOffset;

LitJson::JsonWriter.set_IndentValueOffset = getRealOffset(0x6D87C0);
LitJson::JsonWriter.set_IndentValue = (void(*)(void*, int))LitJson::JsonWriter.set_IndentValueOffset;

LitJson::JsonWriter.get_PrettyPrintOffset = getRealOffset(0x6D87EC);
LitJson::JsonWriter.get_PrettyPrint = (bool(*)(void*))LitJson::JsonWriter.get_PrettyPrintOffset;

LitJson::JsonWriter.set_PrettyPrintOffset = getRealOffset(0x6D87F4);
LitJson::JsonWriter.set_PrettyPrint = (void(*)(void*, bool))LitJson::JsonWriter.set_PrettyPrintOffset;

LitJson::JsonWriter.get_TextWriterOffset = getRealOffset(0x6D87FC);
LitJson::JsonWriter.get_TextWriter = (void *(*)(void*))LitJson::JsonWriter.get_TextWriterOffset;

LitJson::JsonWriter.get_ValidateOffset = getRealOffset(0x6D8804);
LitJson::JsonWriter.get_Validate = (bool(*)(void*))LitJson::JsonWriter.get_ValidateOffset;

LitJson::JsonWriter.set_ValidateOffset = getRealOffset(0x6D880C);
LitJson::JsonWriter.set_Validate = (void(*)(void*, bool))LitJson::JsonWriter.set_ValidateOffset;

LitJson::JsonWriter.ctor1Offset = getRealOffset(0x6D8A14);
LitJson::JsonWriter.ctor1 = (void(*)(void*, void *))LitJson::JsonWriter.ctor1Offset;

LitJson::JsonWriter.ctor2Offset = getRealOffset(0x6D8A8C);
LitJson::JsonWriter.ctor2 = (void(*)(void*, void *))LitJson::JsonWriter.ctor2Offset;

LitJson::JsonWriter.DoValidationOffset = getRealOffset(0x6D8B44);
LitJson::JsonWriter.DoValidation = (void(*)(void*, int))LitJson::JsonWriter.DoValidationOffset;

LitJson::JsonWriter.InitOffset = getRealOffset(0x6D8918);
LitJson::JsonWriter.Init = (void(*)(void*))LitJson::JsonWriter.InitOffset;

LitJson::JsonWriter.IndentOffset = getRealOffset(0x6D8EBC);
LitJson::JsonWriter.Indent = (void(*)(void*))LitJson::JsonWriter.IndentOffset;

LitJson::JsonWriter.PutOffset = getRealOffset(0x6D8ED8);
LitJson::JsonWriter.Put = (void(*)(void*, monoString*))LitJson::JsonWriter.PutOffset;

LitJson::JsonWriter.PutNewlineOffset = getRealOffset(0x6D8F84);
LitJson::JsonWriter.PutNewline = (void(*)(void*))LitJson::JsonWriter.PutNewlineOffset;

LitJson::JsonWriter.PutNewline1Offset = getRealOffset(0x6D8F8C);
LitJson::JsonWriter.PutNewline1 = (void(*)(void*, bool))LitJson::JsonWriter.PutNewline1Offset;

LitJson::JsonWriter.PutStringOffset = getRealOffset(0x6D9058);
LitJson::JsonWriter.PutString = (void(*)(void*, monoString*))LitJson::JsonWriter.PutStringOffset;

LitJson::JsonWriter.UnindentOffset = getRealOffset(0x6D93CC);
LitJson::JsonWriter.Unindent = (void(*)(void*))LitJson::JsonWriter.UnindentOffset;

LitJson::JsonWriter.ToStringOffset = getRealOffset(0x6D93E8);
LitJson::JsonWriter.ToString = (monoString *(*)(void*))LitJson::JsonWriter.ToStringOffset;

LitJson::JsonWriter.ResetOffset = getRealOffset(0x6D9464);
LitJson::JsonWriter.Reset = (void(*)(void*))LitJson::JsonWriter.ResetOffset;

LitJson::JsonWriter.WriteOffset = getRealOffset(0x6D9558);
LitJson::JsonWriter.Write = (void(*)(void*, bool))LitJson::JsonWriter.WriteOffset;

LitJson::JsonWriter.Write1Offset = getRealOffset(0x6D960C);
LitJson::JsonWriter.Write1 = (void(*)(void*, int))LitJson::JsonWriter.Write1Offset;

LitJson::JsonWriter.Write3Offset = getRealOffset(0x6D98AC);
LitJson::JsonWriter.Write3 = (void(*)(void*, int))LitJson::JsonWriter.Write3Offset;

LitJson::JsonWriter.Write5Offset = getRealOffset(0x6D9AAC);
LitJson::JsonWriter.Write5 = (void(*)(void*, monoString*))LitJson::JsonWriter.Write5Offset;

LitJson::JsonWriter.WriteArrayEndOffset = getRealOffset(0x6D9C58);
LitJson::JsonWriter.WriteArrayEnd = (void(*)(void*))LitJson::JsonWriter.WriteArrayEndOffset;

LitJson::JsonWriter.WriteArrayStartOffset = getRealOffset(0x6D9D78);
LitJson::JsonWriter.WriteArrayStart = (void(*)(void*))LitJson::JsonWriter.WriteArrayStartOffset;

LitJson::JsonWriter.WriteObjectEndOffset = getRealOffset(0x6D9E6C);
LitJson::JsonWriter.WriteObjectEnd = (void(*)(void*))LitJson::JsonWriter.WriteObjectEndOffset;

LitJson::JsonWriter.WriteObjectStartOffset = getRealOffset(0x6D9F8C);
LitJson::JsonWriter.WriteObjectStart = (void(*)(void*))LitJson::JsonWriter.WriteObjectStartOffset;

LitJson::JsonWriter.WritePropertyNameOffset = getRealOffset(0x6DA080);
LitJson::JsonWriter.WritePropertyName = (void(*)(void*, monoString*))LitJson::JsonWriter.WritePropertyNameOffset;

LitJson::Lexer.get_AllowCommentsOffset = getRealOffset(0x6DA200);
LitJson::Lexer.get_AllowComments = (bool(*)(void*))LitJson::Lexer.get_AllowCommentsOffset;

LitJson::Lexer.set_AllowCommentsOffset = getRealOffset(0x6DA208);
LitJson::Lexer.set_AllowComments = (void(*)(void*, bool))LitJson::Lexer.set_AllowCommentsOffset;

LitJson::Lexer.get_AllowSingleQuotedStringsOffset = getRealOffset(0x6DA210);
LitJson::Lexer.get_AllowSingleQuotedStrings = (bool(*)(void*))LitJson::Lexer.get_AllowSingleQuotedStringsOffset;

LitJson::Lexer.set_AllowSingleQuotedStringsOffset = getRealOffset(0x6DA218);
LitJson::Lexer.set_AllowSingleQuotedStrings = (void(*)(void*, bool))LitJson::Lexer.set_AllowSingleQuotedStringsOffset;

LitJson::Lexer.get_EndOfInputOffset = getRealOffset(0x6DA220);
LitJson::Lexer.get_EndOfInput = (bool(*)(void*))LitJson::Lexer.get_EndOfInputOffset;

LitJson::Lexer.get_TokenOffset = getRealOffset(0x6DA228);
LitJson::Lexer.get_Token = (int(*)(void*))LitJson::Lexer.get_TokenOffset;

LitJson::Lexer.get_StringValueOffset = getRealOffset(0x6DA230);
LitJson::Lexer.get_StringValue = (monoString *(*)(void*))LitJson::Lexer.get_StringValueOffset;

LitJson::Lexer.HexValueOffset = getRealOffset(0x6DB120);
LitJson::Lexer.HexValue = (int(*)(int))LitJson::Lexer.HexValueOffset;

LitJson::Lexer.PopulateFsmTablesOffset = getRealOffset(0x6DA23C);
LitJson::Lexer.PopulateFsmTables = (void(*)())LitJson::Lexer.PopulateFsmTablesOffset;

LitJson::Lexer.ProcessEscCharOffset = getRealOffset(0x6DB1D0);
LitJson::Lexer.State1Offset = getRealOffset(0x6DB2D0);
LitJson::Lexer.State1 = (bool(*)(void *))LitJson::Lexer.State1Offset;

LitJson::Lexer.State2Offset = getRealOffset(0x6DB620);
LitJson::Lexer.State2 = (bool(*)(void *))LitJson::Lexer.State2Offset;

LitJson::Lexer.State3Offset = getRealOffset(0x6DB75C);
LitJson::Lexer.State3 = (bool(*)(void *))LitJson::Lexer.State3Offset;

LitJson::Lexer.State4Offset = getRealOffset(0x6DB9A8);
LitJson::Lexer.State4 = (bool(*)(void *))LitJson::Lexer.State4Offset;

LitJson::Lexer.State5Offset = getRealOffset(0x6DBB60);
LitJson::Lexer.State5 = (bool(*)(void *))LitJson::Lexer.State5Offset;

LitJson::Lexer.State6Offset = getRealOffset(0x6DBC38);
LitJson::Lexer.State6 = (bool(*)(void *))LitJson::Lexer.State6Offset;

LitJson::Lexer.State7Offset = getRealOffset(0x6DBE24);
LitJson::Lexer.State7 = (bool(*)(void *))LitJson::Lexer.State7Offset;

LitJson::Lexer.State8Offset = getRealOffset(0x6DBF1C);
LitJson::Lexer.State8 = (bool(*)(void *))LitJson::Lexer.State8Offset;

LitJson::Lexer.State9Offset = getRealOffset(0x6DC094);
LitJson::Lexer.State9 = (bool(*)(void *))LitJson::Lexer.State9Offset;

LitJson::Lexer.State10Offset = getRealOffset(0x6DC100);
LitJson::Lexer.State10 = (bool(*)(void *))LitJson::Lexer.State10Offset;

LitJson::Lexer.State11Offset = getRealOffset(0x6DC16C);
LitJson::Lexer.State11 = (bool(*)(void *))LitJson::Lexer.State11Offset;

LitJson::Lexer.State12Offset = getRealOffset(0x6DC1D8);
LitJson::Lexer.State12 = (bool(*)(void *))LitJson::Lexer.State12Offset;

LitJson::Lexer.State13Offset = getRealOffset(0x6DC244);
LitJson::Lexer.State13 = (bool(*)(void *))LitJson::Lexer.State13Offset;

LitJson::Lexer.State14Offset = getRealOffset(0x6DC2B0);
LitJson::Lexer.State14 = (bool(*)(void *))LitJson::Lexer.State14Offset;

LitJson::Lexer.State15Offset = getRealOffset(0x6DC31C);
LitJson::Lexer.State15 = (bool(*)(void *))LitJson::Lexer.State15Offset;

LitJson::Lexer.State16Offset = getRealOffset(0x6DC388);
LitJson::Lexer.State16 = (bool(*)(void *))LitJson::Lexer.State16Offset;

LitJson::Lexer.State17Offset = getRealOffset(0x6DC3F4);
LitJson::Lexer.State17 = (bool(*)(void *))LitJson::Lexer.State17Offset;

LitJson::Lexer.State18Offset = getRealOffset(0x6DC460);
LitJson::Lexer.State18 = (bool(*)(void *))LitJson::Lexer.State18Offset;

LitJson::Lexer.State19Offset = getRealOffset(0x6DC4CC);
LitJson::Lexer.State19 = (bool(*)(void *))LitJson::Lexer.State19Offset;

LitJson::Lexer.State20Offset = getRealOffset(0x6DC5C8);
LitJson::Lexer.State20 = (bool(*)(void *))LitJson::Lexer.State20Offset;

LitJson::Lexer.State21Offset = getRealOffset(0x6DC634);
LitJson::Lexer.State21 = (bool(*)(void *))LitJson::Lexer.State21Offset;

LitJson::Lexer.State22Offset = getRealOffset(0x6DC7E4);
LitJson::Lexer.State22 = (bool(*)(void *))LitJson::Lexer.State22Offset;

LitJson::Lexer.State23Offset = getRealOffset(0x6DCA44);
LitJson::Lexer.State23 = (bool(*)(void *))LitJson::Lexer.State23Offset;

LitJson::Lexer.State24Offset = getRealOffset(0x6DCB40);
LitJson::Lexer.State24 = (bool(*)(void *))LitJson::Lexer.State24Offset;

LitJson::Lexer.State25Offset = getRealOffset(0x6DCBC8);
LitJson::Lexer.State25 = (bool(*)(void *))LitJson::Lexer.State25Offset;

LitJson::Lexer.State26Offset = getRealOffset(0x6DCC48);
LitJson::Lexer.State26 = (bool(*)(void *))LitJson::Lexer.State26Offset;

LitJson::Lexer.State27Offset = getRealOffset(0x6DCCBC);
LitJson::Lexer.State27 = (bool(*)(void *))LitJson::Lexer.State27Offset;

LitJson::Lexer.State28Offset = getRealOffset(0x6DCD30);
LitJson::Lexer.State28 = (bool(*)(void *))LitJson::Lexer.State28Offset;

LitJson::Lexer.GetCharOffset = getRealOffset(0x6DB5F0);
LitJson::Lexer.GetChar = (bool(*)(void*))LitJson::Lexer.GetCharOffset;

LitJson::Lexer.NextCharOffset = getRealOffset(0x6DCDC0);
LitJson::Lexer.NextChar = (int(*)(void*))LitJson::Lexer.NextCharOffset;

LitJson::Lexer.NextTokenOffset = getRealOffset(0x6DCE08);
LitJson::Lexer.NextToken = (bool(*)(void*))LitJson::Lexer.NextTokenOffset;

LitJson::Lexer.UngetCharOffset = getRealOffset(0x6DB99C);
LitJson::Lexer.UngetChar = (void(*)(void*))LitJson::Lexer.UngetCharOffset;

LostPolygonSwiftShadows::ColliderToRendererBoundsCache.ClearOffset = getRealOffset(0x6F8814);
LostPolygonSwiftShadows::ColliderToRendererBoundsCache.Clear = (void(*)(void*))LostPolygonSwiftShadows::ColliderToRendererBoundsCache.ClearOffset;

LostPolygonSwiftShadows::ShadowManager.get_IsDestroyedOffset = getRealOffset(0x9DB2C8);
LostPolygonSwiftShadows::ShadowManager.get_IsDestroyed = (bool(*)())LostPolygonSwiftShadows::ShadowManager.get_IsDestroyedOffset;

LostPolygonSwiftShadows::ShadowManager.get_InstanceOffset = getRealOffset(0x9DB340);
LostPolygonSwiftShadows::ShadowManager.get_Instance = (void *(*)())LostPolygonSwiftShadows::ShadowManager.get_InstanceOffset;

LostPolygonSwiftShadows::ShadowManager.get_ShadowManagersOffset = getRealOffset(0x9DB564);
LostPolygonSwiftShadows::ShadowManager.get_ColliderToRendererBoundsCacheOffset = getRealOffset(0x9DB5D0);
LostPolygonSwiftShadows::ShadowManager.get_ColliderToRendererBoundsCache = (void *(*)(void*))LostPolygonSwiftShadows::ShadowManager.get_ColliderToRendererBoundsCacheOffset;

LostPolygonSwiftShadows::ShadowManager.UpdateCameraEventsOffset = getRealOffset(0x9DB5D8);
LostPolygonSwiftShadows::ShadowManager.UpdateCameraEvents = (void(*)(void*))LostPolygonSwiftShadows::ShadowManager.UpdateCameraEventsOffset;

LostPolygonSwiftShadows::ShadowManager.UpdateCameraEvents1Offset = getRealOffset(0x9DB63C);
LostPolygonSwiftShadows::ShadowManager.UpdateCameraEvents1 = (void(*)(void*, void *))LostPolygonSwiftShadows::ShadowManager.UpdateCameraEvents1Offset;

LostPolygonSwiftShadows::ShadowManager.UpdateCameraEvents2Offset = getRealOffset(0x9DB67C);
LostPolygonSwiftShadows::ShadowManager.UpdateCameraEvents2 = (void(*)(void*, void *, int))LostPolygonSwiftShadows::ShadowManager.UpdateCameraEvents2Offset;

LostPolygonSwiftShadows::ShadowManager.OnCameraPreCullOffset = getRealOffset(0x9DB9AC);
LostPolygonSwiftShadows::ShadowManager.OnCameraPreCull = (void(*)(void*, void *))LostPolygonSwiftShadows::ShadowManager.OnCameraPreCullOffset;

LostPolygonSwiftShadows::ShadowManager.UpdateStaticShadowsOffset = getRealOffset(0x9DBC14);
LostPolygonSwiftShadows::ShadowManager.UpdateStaticShadows = (void(*)(void*))LostPolygonSwiftShadows::ShadowManager.UpdateStaticShadowsOffset;

LostPolygonSwiftShadows::ShadowManager.RegisterShadowOffset = getRealOffset(0x9DBD10);
LostPolygonSwiftShadows::ShadowManager.RegisterShadow = (void(*)(void*, void *))LostPolygonSwiftShadows::ShadowManager.RegisterShadowOffset;

LostPolygonSwiftShadows::ShadowManager.UnregisterShadowOffset = getRealOffset(0x9DC038);
LostPolygonSwiftShadows::ShadowManager.UnregisterShadow = (void(*)(void*, void *))LostPolygonSwiftShadows::ShadowManager.UnregisterShadowOffset;

LostPolygonSwiftShadows::ShadowManager.ClearOffset = getRealOffset(0x9DC268);
LostPolygonSwiftShadows::ShadowManager.Clear = (void(*)(void*))LostPolygonSwiftShadows::ShadowManager.ClearOffset;

LostPolygonSwiftShadows::ShadowManager.Clear1Offset = getRealOffset(0x9DC568);
LostPolygonSwiftShadows::ShadowManager.Clear1 = (void(*)(void*, bool))LostPolygonSwiftShadows::ShadowManager.Clear1Offset;

LostPolygonSwiftShadows::ShadowManager.Clear2Offset = getRealOffset(0x9DC274);
LostPolygonSwiftShadows::ShadowManager.Clear2 = (void(*)(void*, bool, bool))LostPolygonSwiftShadows::ShadowManager.Clear2Offset;

LostPolygonSwiftShadows::ShadowManager.InitializeOffset = getRealOffset(0x9DC638);
LostPolygonSwiftShadows::ShadowManager.Initialize = (void(*)(void*))LostPolygonSwiftShadows::ShadowManager.InitializeOffset;

LostPolygonSwiftShadows::ShadowManager.RenderOffset = getRealOffset(0x9DB9B0);
LostPolygonSwiftShadows::ShadowManager.Render = (void(*)(void*, void *))LostPolygonSwiftShadows::ShadowManager.RenderOffset;

LostPolygonSwiftShadows::ShadowManager.UpdateAndDrawMeshManagerOffset = getRealOffset(0x9DC6C4);
LostPolygonSwiftShadows::ShadowManager.UpdateAndDrawMeshManager = (void(*)(void*, void *, void *, int))LostPolygonSwiftShadows::ShadowManager.UpdateAndDrawMeshManagerOffset;

LostPolygonSwiftShadows::ShadowManager.GetMeshManagerOffset = getRealOffset(0x9DBD68);
LostPolygonSwiftShadows::ShadowManager.GetMeshManager = (void *(*)(void*, void *))LostPolygonSwiftShadows::ShadowManager.GetMeshManagerOffset;

LostPolygonSwiftShadows::ShadowManager.LateUpdateOffset = getRealOffset(0x9DCB50);
LostPolygonSwiftShadows::ShadowManager.LateUpdate = (void(*)(void*))LostPolygonSwiftShadows::ShadowManager.LateUpdateOffset;

LostPolygonSwiftShadows::ShadowManager.OnEnableOffset = getRealOffset(0x9DCC50);
LostPolygonSwiftShadows::ShadowManager.OnEnable = (void(*)(void*))LostPolygonSwiftShadows::ShadowManager.OnEnableOffset;

LostPolygonSwiftShadows::ShadowManager.OnDisableOffset = getRealOffset(0x9DCF40);
LostPolygonSwiftShadows::ShadowManager.OnDisable = (void(*)(void*))LostPolygonSwiftShadows::ShadowManager.OnDisableOffset;

LostPolygonSwiftShadows::ShadowManager.OnDestroyOffset = getRealOffset(0x9DD000);
LostPolygonSwiftShadows::ShadowManager.OnDestroy = (void(*)(void*))LostPolygonSwiftShadows::ShadowManager.OnDestroyOffset;

LostPolygonSwiftShadows::ShadowManager.SceneManagerOnSceneLoadedOffset = getRealOffset(0x9DD114);
LostPolygonSwiftShadows::ShadowManager.SceneManagerOnSceneLoaded = (void(*)(void*, int, int))LostPolygonSwiftShadows::ShadowManager.SceneManagerOnSceneLoadedOffset;

LostPolygonSwiftShadows::ShadowManager.SceneLoadedHandlerOffset = getRealOffset(0x9DD154);
LostPolygonSwiftShadows::ShadowManager.SceneLoadedHandler = (void(*)(void*, int))LostPolygonSwiftShadows::ShadowManager.SceneLoadedHandlerOffset;

LostPolygonSwiftShadows::ShadowMeshManager.get_ShadowsCountOffset = getRealOffset(0x9DD35C);
LostPolygonSwiftShadows::ShadowMeshManager.get_ShadowsCount = (int(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.get_ShadowsCountOffset;

LostPolygonSwiftShadows::ShadowMeshManager.get_VisibleShadowsCountOffset = getRealOffset(0x9DD544);
LostPolygonSwiftShadows::ShadowMeshManager.get_VisibleShadowsCount = (int(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.get_VisibleShadowsCountOffset;

LostPolygonSwiftShadows::ShadowMeshManager.get_ShadowsListOffset = getRealOffset(0x9DD54C);
LostPolygonSwiftShadows::ShadowMeshManager.get_IsStaticOffset = getRealOffset(0x9DD554);
LostPolygonSwiftShadows::ShadowMeshManager.get_IsStatic = (bool(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.get_IsStaticOffset;

LostPolygonSwiftShadows::ShadowMeshManager.get_MaterialOffset = getRealOffset(0x9DD55C);
LostPolygonSwiftShadows::ShadowMeshManager.get_Material = (void *(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.get_MaterialOffset;

LostPolygonSwiftShadows::ShadowMeshManager.get_LayerOffset = getRealOffset(0x9DD564);
LostPolygonSwiftShadows::ShadowMeshManager.get_Layer = (int(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.get_LayerOffset;

LostPolygonSwiftShadows::ShadowMeshManager.get_LayerMaskOffset = getRealOffset(0x9DD56C);
LostPolygonSwiftShadows::ShadowMeshManager.get_LayerMask = (int(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.get_LayerMaskOffset;

LostPolygonSwiftShadows::ShadowMeshManager.get_MeshOffset = getRealOffset(0x9DD574);
LostPolygonSwiftShadows::ShadowMeshManager.get_Mesh = (void *(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.get_MeshOffset;

LostPolygonSwiftShadows::ShadowMeshManager.FreeMeshOffset = getRealOffset(0x9DC570);
LostPolygonSwiftShadows::ShadowMeshManager.FreeMesh = (void(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.FreeMeshOffset;

LostPolygonSwiftShadows::ShadowMeshManager.GetInstanceHashCodeOffset = getRealOffset(0x9DC7AC);
LostPolygonSwiftShadows::ShadowMeshManager.GetInstanceHashCode = (int(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.GetInstanceHashCodeOffset;

LostPolygonSwiftShadows::ShadowMeshManager.RegisterShadowOffset = getRealOffset(0x9DBF88);
LostPolygonSwiftShadows::ShadowMeshManager.RegisterShadow = (void(*)(void*, void *))LostPolygonSwiftShadows::ShadowMeshManager.RegisterShadowOffset;

LostPolygonSwiftShadows::ShadowMeshManager.UnregisterShadowOffset = getRealOffset(0x9DC1EC);
LostPolygonSwiftShadows::ShadowMeshManager.UnregisterShadow = (bool(*)(void*, void *))LostPolygonSwiftShadows::ShadowMeshManager.UnregisterShadowOffset;

LostPolygonSwiftShadows::ShadowMeshManager.ForceStaticRecalculateOffset = getRealOffset(0x9DBD04);
LostPolygonSwiftShadows::ShadowMeshManager.ForceStaticRecalculate = (void(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.ForceStaticRecalculateOffset;

LostPolygonSwiftShadows::ShadowMeshManager.DrawMeshOffset = getRealOffset(0x9DC85C);
LostPolygonSwiftShadows::ShadowMeshManager.DrawMesh = (void(*)(void*, void *))LostPolygonSwiftShadows::ShadowMeshManager.DrawMeshOffset;

LostPolygonSwiftShadows::ShadowMeshManager.CreateMeshOffset = getRealOffset(0x9DD3E0);
LostPolygonSwiftShadows::ShadowMeshManager.CreateMesh = (void(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.CreateMeshOffset;

LostPolygonSwiftShadows::ShadowMeshManager.RebuildMeshOffset = getRealOffset(0x9DF19C);
LostPolygonSwiftShadows::ShadowMeshManager.RebuildMesh = (void(*)(void*, bool))LostPolygonSwiftShadows::ShadowMeshManager.RebuildMeshOffset;

LostPolygonSwiftShadows::ShadowMeshManager.CalculateMeshManagerHashCodeOffset = getRealOffset(0x9DD57C);
LostPolygonSwiftShadows::ShadowMeshManager.CalculateMeshManagerHashCode = (int(*)(bool, void *, int))LostPolygonSwiftShadows::ShadowMeshManager.CalculateMeshManagerHashCodeOffset;

LostPolygonSwiftShadows::ShadowMeshManager.DisposeOffset = getRealOffset(0x9E00C4);
LostPolygonSwiftShadows::ShadowMeshManager.Dispose = (void(*)(void*))LostPolygonSwiftShadows::ShadowMeshManager.DisposeOffset;

LostPolygonSwiftShadows::NoShadowsCamera.OnEnableOffset = getRealOffset(0x9DB118);
LostPolygonSwiftShadows::NoShadowsCamera.OnEnable = (void(*)(void*))LostPolygonSwiftShadows::NoShadowsCamera.OnEnableOffset;

LostPolygonSwiftShadows::ShadowsCameraEvents.get_IsUserCreatedOffset = getRealOffset(0x9E0198);
LostPolygonSwiftShadows::ShadowsCameraEvents.get_IsUserCreated = (bool(*)(void*))LostPolygonSwiftShadows::ShadowsCameraEvents.get_IsUserCreatedOffset;

LostPolygonSwiftShadows::ShadowsCameraEvents.set_IsUserCreatedOffset = getRealOffset(0x9E01A0);
LostPolygonSwiftShadows::ShadowsCameraEvents.set_IsUserCreated = (void(*)(void*, bool))LostPolygonSwiftShadows::ShadowsCameraEvents.set_IsUserCreatedOffset;

LostPolygonSwiftShadows::ShadowsCameraEvents.OnEnableOffset = getRealOffset(0x9E01A8);
LostPolygonSwiftShadows::ShadowsCameraEvents.OnEnable = (void(*)(void*))LostPolygonSwiftShadows::ShadowsCameraEvents.OnEnableOffset;

LostPolygonSwiftShadows::ShadowsCameraEvents.OnPreCullOffset = getRealOffset(0x9E0358);
LostPolygonSwiftShadows::ShadowsCameraEvents.OnPreCull = (void(*)(void*))LostPolygonSwiftShadows::ShadowsCameraEvents.OnPreCullOffset;

LostPolygonSwiftShadows::ShadowsCameraEvents.ResetOffset = getRealOffset(0x9E0470);
LostPolygonSwiftShadows::ShadowsCameraEvents.Reset = (void(*)(void*))LostPolygonSwiftShadows::ShadowsCameraEvents.ResetOffset;

LostPolygonSwiftShadows::ShadowsCameraEvents.RemoveOtherInstancesOffset = getRealOffset(0x9E022C);
LostPolygonSwiftShadows::ShadowsCameraEvents.RemoveOtherInstances = (void(*)(void*))LostPolygonSwiftShadows::ShadowsCameraEvents.RemoveOtherInstancesOffset;

LostPolygonSwiftShadows::SwiftShadow.get_IsVisibleOffset = getRealOffset(0x9E0484);
LostPolygonSwiftShadows::SwiftShadow.get_IsVisible = (bool(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_IsVisibleOffset;

LostPolygonSwiftShadows::SwiftShadow.get_NormalOffset = getRealOffset(0x9E048C);
LostPolygonSwiftShadows::SwiftShadow.get_Normal = (Vector3 (*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_NormalOffset;

LostPolygonSwiftShadows::SwiftShadow.get_CurrentColorOffset = getRealOffset(0x9E04A0);
LostPolygonSwiftShadows::SwiftShadow.get_CurrentColor = (int (*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_CurrentColorOffset;

LostPolygonSwiftShadows::SwiftShadow.get_InitialColorOffset = getRealOffset(0x9E04A8);
LostPolygonSwiftShadows::SwiftShadow.get_InitialColor = (int (*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_InitialColorOffset;

LostPolygonSwiftShadows::SwiftShadow.set_InitialColorOffset = getRealOffset(0x9E04D8);
LostPolygonSwiftShadows::SwiftShadow.set_InitialColor = (void(*)(void*, int))LostPolygonSwiftShadows::SwiftShadow.set_InitialColorOffset;

LostPolygonSwiftShadows::SwiftShadow.get_TextureUVOffset = getRealOffset(0x9E05DC);
LostPolygonSwiftShadows::SwiftShadow.get_TextureUVRectOffset = getRealOffset(0x9E05E4);
LostPolygonSwiftShadows::SwiftShadow.get_TextureUVRect = (int (*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_TextureUVRectOffset;

LostPolygonSwiftShadows::SwiftShadow.set_TextureUVRectOffset = getRealOffset(0x9E05F4);
LostPolygonSwiftShadows::SwiftShadow.set_TextureUVRect = (void(*)(void*, int))LostPolygonSwiftShadows::SwiftShadow.set_TextureUVRectOffset;

LostPolygonSwiftShadows::SwiftShadow.get_SpriteOffset = getRealOffset(0x9E0A40);
LostPolygonSwiftShadows::SwiftShadow.get_Sprite = (void *(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_SpriteOffset;

LostPolygonSwiftShadows::SwiftShadow.set_SpriteOffset = getRealOffset(0x9E0A48);
LostPolygonSwiftShadows::SwiftShadow.set_Sprite = (void(*)(void*, void *))LostPolygonSwiftShadows::SwiftShadow.set_SpriteOffset;

LostPolygonSwiftShadows::SwiftShadow.get_MaterialOffset = getRealOffset(0x9E0B70);
LostPolygonSwiftShadows::SwiftShadow.get_Material = (void *(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_MaterialOffset;

LostPolygonSwiftShadows::SwiftShadow.set_MaterialOffset = getRealOffset(0x9E0B78);
LostPolygonSwiftShadows::SwiftShadow.set_Material = (void(*)(void*, void *))LostPolygonSwiftShadows::SwiftShadow.set_MaterialOffset;

LostPolygonSwiftShadows::SwiftShadow.get_LayerMaskOffset = getRealOffset(0x9E0DC4);
LostPolygonSwiftShadows::SwiftShadow.get_LayerMask = (int (*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_LayerMaskOffset;

LostPolygonSwiftShadows::SwiftShadow.set_LayerMaskOffset = getRealOffset(0x9E0DCC);
LostPolygonSwiftShadows::SwiftShadow.set_LayerMask = (void(*)(void*, int))LostPolygonSwiftShadows::SwiftShadow.set_LayerMaskOffset;

LostPolygonSwiftShadows::SwiftShadow.get_IsStaticOffset = getRealOffset(0x9E0E2C);
LostPolygonSwiftShadows::SwiftShadow.get_IsStatic = (bool(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_IsStaticOffset;

LostPolygonSwiftShadows::SwiftShadow.set_IsStaticOffset = getRealOffset(0x9E0E34);
LostPolygonSwiftShadows::SwiftShadow.set_IsStatic = (void(*)(void*, bool))LostPolygonSwiftShadows::SwiftShadow.set_IsStaticOffset;

LostPolygonSwiftShadows::SwiftShadow.get_LightVectorSourceOffset = getRealOffset(0x9E0E74);
LostPolygonSwiftShadows::SwiftShadow.get_LightVectorSource = (int (*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_LightVectorSourceOffset;

LostPolygonSwiftShadows::SwiftShadow.set_LightVectorSourceOffset = getRealOffset(0x9E0E7C);
LostPolygonSwiftShadows::SwiftShadow.set_LightVectorSource = (void(*)(void*, int))LostPolygonSwiftShadows::SwiftShadow.set_LightVectorSourceOffset;

LostPolygonSwiftShadows::SwiftShadow.get_LightVectorOffset = getRealOffset(0x9E0E84);
LostPolygonSwiftShadows::SwiftShadow.get_LightVector = (Vector3 (*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_LightVectorOffset;

LostPolygonSwiftShadows::SwiftShadow.set_LightVectorOffset = getRealOffset(0x9E0E98);
LostPolygonSwiftShadows::SwiftShadow.set_LightVector = (void(*)(void*, Vector3))LostPolygonSwiftShadows::SwiftShadow.set_LightVectorOffset;

LostPolygonSwiftShadows::SwiftShadow.get_LightSourceObjectOffset = getRealOffset(0x9E0EF8);
LostPolygonSwiftShadows::SwiftShadow.get_LightSourceObject = (void *(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_LightSourceObjectOffset;

LostPolygonSwiftShadows::SwiftShadow.set_LightSourceObjectOffset = getRealOffset(0x9E0F00);
LostPolygonSwiftShadows::SwiftShadow.set_LightSourceObject = (void(*)(void*, void *))LostPolygonSwiftShadows::SwiftShadow.set_LightSourceObjectOffset;

LostPolygonSwiftShadows::SwiftShadow.get_ShadowSizeOffset = getRealOffset(0x9E10D8);
LostPolygonSwiftShadows::SwiftShadow.get_ShadowSize = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_ShadowSizeOffset;

LostPolygonSwiftShadows::SwiftShadow.set_ShadowSizeOffset = getRealOffset(0x9E10E0);
LostPolygonSwiftShadows::SwiftShadow.set_ShadowSize = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_ShadowSizeOffset;

LostPolygonSwiftShadows::SwiftShadow.get_SizeScaleStartDistanceOffset = getRealOffset(0x9E1168);
LostPolygonSwiftShadows::SwiftShadow.get_SizeScaleStartDistance = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_SizeScaleStartDistanceOffset;

LostPolygonSwiftShadows::SwiftShadow.set_SizeScaleStartDistanceOffset = getRealOffset(0x9E1170);
LostPolygonSwiftShadows::SwiftShadow.set_SizeScaleStartDistance = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_SizeScaleStartDistanceOffset;

LostPolygonSwiftShadows::SwiftShadow.get_SizeScaleEndDistanceOffset = getRealOffset(0x9E1214);
LostPolygonSwiftShadows::SwiftShadow.get_SizeScaleEndDistance = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_SizeScaleEndDistanceOffset;

LostPolygonSwiftShadows::SwiftShadow.set_SizeScaleEndDistanceOffset = getRealOffset(0x9E121C);
LostPolygonSwiftShadows::SwiftShadow.set_SizeScaleEndDistance = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_SizeScaleEndDistanceOffset;

LostPolygonSwiftShadows::SwiftShadow.get_SizeEndScaleOffset = getRealOffset(0x9E12B0);
LostPolygonSwiftShadows::SwiftShadow.get_SizeEndScale = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_SizeEndScaleOffset;

LostPolygonSwiftShadows::SwiftShadow.set_SizeEndScaleOffset = getRealOffset(0x9E12B8);
LostPolygonSwiftShadows::SwiftShadow.set_SizeEndScale = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_SizeEndScaleOffset;

LostPolygonSwiftShadows::SwiftShadow.get_ShadowOffsetOffset = getRealOffset(0x9E1340);
LostPolygonSwiftShadows::SwiftShadow.get_ShadowOffset = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_ShadowOffsetOffset;

LostPolygonSwiftShadows::SwiftShadow.set_ShadowOffsetOffset = getRealOffset(0x9E1348);
LostPolygonSwiftShadows::SwiftShadow.set_ShadowOffset = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_ShadowOffsetOffset;

LostPolygonSwiftShadows::SwiftShadow.get_ProjectionDistanceOffset = getRealOffset(0x9E13D0);
LostPolygonSwiftShadows::SwiftShadow.get_ProjectionDistance = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_ProjectionDistanceOffset;

LostPolygonSwiftShadows::SwiftShadow.set_ProjectionDistanceOffset = getRealOffset(0x9E13D8);
LostPolygonSwiftShadows::SwiftShadow.set_ProjectionDistance = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_ProjectionDistanceOffset;

LostPolygonSwiftShadows::SwiftShadow.get_FadeDistanceOffset = getRealOffset(0x9E1478);
LostPolygonSwiftShadows::SwiftShadow.get_FadeDistance = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_FadeDistanceOffset;

LostPolygonSwiftShadows::SwiftShadow.set_FadeDistanceOffset = getRealOffset(0x9E1480);
LostPolygonSwiftShadows::SwiftShadow.set_FadeDistance = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_FadeDistanceOffset;

LostPolygonSwiftShadows::SwiftShadow.get_IsPerspectiveProjectionOffset = getRealOffset(0x9E1518);
LostPolygonSwiftShadows::SwiftShadow.get_IsPerspectiveProjection = (bool(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_IsPerspectiveProjectionOffset;

LostPolygonSwiftShadows::SwiftShadow.set_IsPerspectiveProjectionOffset = getRealOffset(0x9E1520);
LostPolygonSwiftShadows::SwiftShadow.set_IsPerspectiveProjection = (void(*)(void*, bool))LostPolygonSwiftShadows::SwiftShadow.set_IsPerspectiveProjectionOffset;

LostPolygonSwiftShadows::SwiftShadow.get_AutoStaticTimeOffset = getRealOffset(0x9E1528);
LostPolygonSwiftShadows::SwiftShadow.get_AutoStaticTime = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_AutoStaticTimeOffset;

LostPolygonSwiftShadows::SwiftShadow.set_AutoStaticTimeOffset = getRealOffset(0x9E1530);
LostPolygonSwiftShadows::SwiftShadow.set_AutoStaticTime = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_AutoStaticTimeOffset;

LostPolygonSwiftShadows::SwiftShadow.get_AngleFadeMinOffset = getRealOffset(0x9E15DC);
LostPolygonSwiftShadows::SwiftShadow.get_AngleFadeMin = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_AngleFadeMinOffset;

LostPolygonSwiftShadows::SwiftShadow.set_AngleFadeMinOffset = getRealOffset(0x9E15E4);
LostPolygonSwiftShadows::SwiftShadow.set_AngleFadeMin = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_AngleFadeMinOffset;

LostPolygonSwiftShadows::SwiftShadow.get_AngleFadeMaxOffset = getRealOffset(0x9E1674);
LostPolygonSwiftShadows::SwiftShadow.get_AngleFadeMax = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_AngleFadeMaxOffset;

LostPolygonSwiftShadows::SwiftShadow.set_AngleFadeMaxOffset = getRealOffset(0x9E167C);
LostPolygonSwiftShadows::SwiftShadow.set_AngleFadeMax = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_AngleFadeMaxOffset;

LostPolygonSwiftShadows::SwiftShadow.get_AspectRatioOffset = getRealOffset(0x9E170C);
LostPolygonSwiftShadows::SwiftShadow.get_AspectRatio = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_AspectRatioOffset;

LostPolygonSwiftShadows::SwiftShadow.set_AspectRatioOffset = getRealOffset(0x9E1714);
LostPolygonSwiftShadows::SwiftShadow.set_AspectRatio = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_AspectRatioOffset;

LostPolygonSwiftShadows::SwiftShadow.get_ShadowVerticesOffset = getRealOffset(0x9E179C);
LostPolygonSwiftShadows::SwiftShadow.get_CullInvisibleOffset = getRealOffset(0x9E17A4);
LostPolygonSwiftShadows::SwiftShadow.get_CullInvisible = (bool(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_CullInvisibleOffset;

LostPolygonSwiftShadows::SwiftShadow.set_CullInvisibleOffset = getRealOffset(0x9E17AC);
LostPolygonSwiftShadows::SwiftShadow.set_CullInvisible = (void(*)(void*, bool))LostPolygonSwiftShadows::SwiftShadow.set_CullInvisibleOffset;

LostPolygonSwiftShadows::SwiftShadow.get_LayerOffset = getRealOffset(0x9DCA34);
LostPolygonSwiftShadows::SwiftShadow.get_Layer = (int(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_LayerOffset;

LostPolygonSwiftShadows::SwiftShadow.get_UseForceLayerOffset = getRealOffset(0x9E17B4);
LostPolygonSwiftShadows::SwiftShadow.get_UseForceLayer = (bool(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_UseForceLayerOffset;

LostPolygonSwiftShadows::SwiftShadow.set_UseForceLayerOffset = getRealOffset(0x9E17BC);
LostPolygonSwiftShadows::SwiftShadow.set_UseForceLayer = (void(*)(void*, bool))LostPolygonSwiftShadows::SwiftShadow.set_UseForceLayerOffset;

LostPolygonSwiftShadows::SwiftShadow.get_ForceLayerOffset = getRealOffset(0x9E17FC);
LostPolygonSwiftShadows::SwiftShadow.get_ForceLayer = (int(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_ForceLayerOffset;

LostPolygonSwiftShadows::SwiftShadow.set_ForceLayerOffset = getRealOffset(0x9E1804);
LostPolygonSwiftShadows::SwiftShadow.set_ForceLayer = (void(*)(void*, int))LostPolygonSwiftShadows::SwiftShadow.set_ForceLayerOffset;

LostPolygonSwiftShadows::SwiftShadow.get_IsSmoothRotationOffset = getRealOffset(0x9E1838);
LostPolygonSwiftShadows::SwiftShadow.get_IsSmoothRotation = (bool(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_IsSmoothRotationOffset;

LostPolygonSwiftShadows::SwiftShadow.set_IsSmoothRotationOffset = getRealOffset(0x9E1840);
LostPolygonSwiftShadows::SwiftShadow.set_IsSmoothRotation = (void(*)(void*, bool))LostPolygonSwiftShadows::SwiftShadow.set_IsSmoothRotationOffset;

LostPolygonSwiftShadows::SwiftShadow.get_SmoothRotationSpeedOffset = getRealOffset(0x9E1848);
LostPolygonSwiftShadows::SwiftShadow.get_SmoothRotationSpeed = (float(*)(void*))LostPolygonSwiftShadows::SwiftShadow.get_SmoothRotationSpeedOffset;

LostPolygonSwiftShadows::SwiftShadow.set_SmoothRotationSpeedOffset = getRealOffset(0x9E1850);
LostPolygonSwiftShadows::SwiftShadow.set_SmoothRotationSpeed = (void(*)(void*, float))LostPolygonSwiftShadows::SwiftShadow.set_SmoothRotationSpeedOffset;

LostPolygonSwiftShadows::SwiftShadow.RegisterShadowOffset = getRealOffset(0x9E0D34);
LostPolygonSwiftShadows::SwiftShadow.RegisterShadow = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.RegisterShadowOffset;

LostPolygonSwiftShadows::SwiftShadow.UnregisterShadowOffset = getRealOffset(0x9E0C20);
LostPolygonSwiftShadows::SwiftShadow.UnregisterShadow = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.UnregisterShadowOffset;

LostPolygonSwiftShadows::SwiftShadow.GetMeshManagerHashCodeOffset = getRealOffset(0x9DC11C);
LostPolygonSwiftShadows::SwiftShadow.GetMeshManagerHashCode = (int(*)(void*))LostPolygonSwiftShadows::SwiftShadow.GetMeshManagerHashCodeOffset;

LostPolygonSwiftShadows::SwiftShadow.UpdateDirectionalLightOffset = getRealOffset(0x9E0FA0);
LostPolygonSwiftShadows::SwiftShadow.UpdateDirectionalLight = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.UpdateDirectionalLightOffset;

LostPolygonSwiftShadows::SwiftShadow.UpdatePropertiesOffset = getRealOffset(0x9E18D8);
LostPolygonSwiftShadows::SwiftShadow.UpdateProperties = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.UpdatePropertiesOffset;

LostPolygonSwiftShadows::SwiftShadow.UpdateTextureUVOffset = getRealOffset(0x9E0750);
LostPolygonSwiftShadows::SwiftShadow.UpdateTextureUV = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.UpdateTextureUVOffset;

LostPolygonSwiftShadows::SwiftShadow.InitializeOffset = getRealOffset(0x9E1BA0);
LostPolygonSwiftShadows::SwiftShadow.Initialize = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.InitializeOffset;

LostPolygonSwiftShadows::SwiftShadow.UpdateComponentsOffset = getRealOffset(0x9E1DD0);
LostPolygonSwiftShadows::SwiftShadow.UpdateComponents = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.UpdateComponentsOffset;

LostPolygonSwiftShadows::SwiftShadow.SetTextureUVOffset = getRealOffset(0x9E1938);
LostPolygonSwiftShadows::SwiftShadow.SetTextureUV = (void(*)(void*, int))LostPolygonSwiftShadows::SwiftShadow.SetTextureUVOffset;

LostPolygonSwiftShadows::SwiftShadow.OnEnableOffset = getRealOffset(0x9E1DEC);
LostPolygonSwiftShadows::SwiftShadow.OnEnable = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.OnEnableOffset;

LostPolygonSwiftShadows::SwiftShadow.OnDestroyOffset = getRealOffset(0x9E1E20);
LostPolygonSwiftShadows::SwiftShadow.OnDestroy = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.OnDestroyOffset;

LostPolygonSwiftShadows::SwiftShadow.OnDisableOffset = getRealOffset(0x9E1E3C);
LostPolygonSwiftShadows::SwiftShadow.OnDisable = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.OnDisableOffset;

LostPolygonSwiftShadows::SwiftShadow.ResetOffset = getRealOffset(0x9E1E5C);
LostPolygonSwiftShadows::SwiftShadow.Reset = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.ResetOffset;

LostPolygonSwiftShadows::SwiftShadow.OnDrawGizmosSelectedOffset = getRealOffset(0x9E1EB0);
LostPolygonSwiftShadows::SwiftShadow.OnDrawGizmosSelected = (void(*)(void*))LostPolygonSwiftShadows::SwiftShadow.OnDrawGizmosSelectedOffset;

LostPolygonSwiftShadowsInternal::FastMath.FastSqrtOffset = getRealOffset(0x9DAEDC);
LostPolygonSwiftShadowsInternal::FastMath.FastSqrt = (float(*)(float))LostPolygonSwiftShadowsInternal::FastMath.FastSqrtOffset;

LostPolygonSwiftShadowsInternal::FastMath.FastInvMagnitudeOffset = getRealOffset(0x9DAF14);
LostPolygonSwiftShadowsInternal::FastMath.FastInvMagnitude = (float(*)(Vector3))LostPolygonSwiftShadowsInternal::FastMath.FastInvMagnitudeOffset;

LostPolygonSwiftShadowsInternal::FastMath.FastMagnitudeOffset = getRealOffset(0x9DAF60);
LostPolygonSwiftShadowsInternal::FastMath.FastMagnitude = (float(*)(Vector3))LostPolygonSwiftShadowsInternal::FastMath.FastMagnitudeOffset;

LostPolygonSwiftShadowsInternal::FastMath.FastNormalizedOffset = getRealOffset(0x9DAFB0);
LostPolygonSwiftShadowsInternal::FastMath.FastNormalized = (Vector3 (*)(Vector3))LostPolygonSwiftShadowsInternal::FastMath.FastNormalizedOffset;

LostPolygonSwiftShadowsInternal::FastMath.FastPseudoAcosOffset = getRealOffset(0x9DB010);
LostPolygonSwiftShadowsInternal::FastMath.FastPseudoAcos = (float(*)(float))LostPolygonSwiftShadowsInternal::FastMath.FastPseudoAcosOffset;

OldMoatGames::GifDecoder.get_NumberOfFramesOffset = getRealOffset(0x54F5F4);
OldMoatGames::GifDecoder.get_NumberOfFrames = (int(*)(void*))OldMoatGames::GifDecoder.get_NumberOfFramesOffset;

OldMoatGames::GifDecoder.set_NumberOfFramesOffset = getRealOffset(0x54F5FC);
OldMoatGames::GifDecoder.set_NumberOfFrames = (void(*)(void*, int))OldMoatGames::GifDecoder.set_NumberOfFramesOffset;

OldMoatGames::GifDecoder.get_AllFramesReadOffset = getRealOffset(0x54F604);
OldMoatGames::GifDecoder.get_AllFramesRead = (bool(*)(void*))OldMoatGames::GifDecoder.get_AllFramesReadOffset;

OldMoatGames::GifDecoder.set_AllFramesReadOffset = getRealOffset(0x54F60C);
OldMoatGames::GifDecoder.set_AllFramesRead = (void(*)(void*, bool))OldMoatGames::GifDecoder.set_AllFramesReadOffset;

OldMoatGames::GifDecoder.GetDelayCurrentFrameOffset = getRealOffset(0x54F614);
OldMoatGames::GifDecoder.GetDelayCurrentFrame = (float(*)(void*))OldMoatGames::GifDecoder.GetDelayCurrentFrameOffset;

OldMoatGames::GifDecoder.GetFrameCountOffset = getRealOffset(0x54F634);
OldMoatGames::GifDecoder.GetFrameCount = (int(*)(void*))OldMoatGames::GifDecoder.GetFrameCountOffset;

OldMoatGames::GifDecoder.GetLoopCountOffset = getRealOffset(0x54F63C);
OldMoatGames::GifDecoder.GetLoopCount = (int(*)(void*))OldMoatGames::GifDecoder.GetLoopCountOffset;

OldMoatGames::GifDecoder.GetCurrentFrameOffset = getRealOffset(0x54F644);
OldMoatGames::GifDecoder.GetCurrentFrame = (void *(*)(void*))OldMoatGames::GifDecoder.GetCurrentFrameOffset;

OldMoatGames::GifDecoder.GetFrameWidthOffset = getRealOffset(0x54F64C);
OldMoatGames::GifDecoder.GetFrameWidth = (int(*)(void*))OldMoatGames::GifDecoder.GetFrameWidthOffset;

OldMoatGames::GifDecoder.GetFrameHeightOffset = getRealOffset(0x54F654);
OldMoatGames::GifDecoder.GetFrameHeight = (int(*)(void*))OldMoatGames::GifDecoder.GetFrameHeightOffset;

OldMoatGames::GifDecoder.ReadOffset = getRealOffset(0x54F238);
OldMoatGames::GifDecoder.Read = (int (*)(void*, void *))OldMoatGames::GifDecoder.ReadOffset;

OldMoatGames::GifDecoder.ResetOffset = getRealOffset(0x54F7F8);
OldMoatGames::GifDecoder.Reset = (void(*)(void*))OldMoatGames::GifDecoder.ResetOffset;

OldMoatGames::GifDecoder.CloseOffset = getRealOffset(0x54F84C);
OldMoatGames::GifDecoder.Close = (void(*)(void*))OldMoatGames::GifDecoder.CloseOffset;

OldMoatGames::GifDecoder.ErrorOffset = getRealOffset(0x54F7E8);
OldMoatGames::GifDecoder.Error = (bool(*)(void*))OldMoatGames::GifDecoder.ErrorOffset;

OldMoatGames::GifDecoder.ReadNextFrameOffset = getRealOffset(0x54DD68);
OldMoatGames::GifDecoder.ReadNextFrame = (void(*)(void*, bool))OldMoatGames::GifDecoder.ReadNextFrameOffset;

OldMoatGames::GifDecoder.RewindReaderOffset = getRealOffset(0x55008C);
OldMoatGames::GifDecoder.RewindReader = (void(*)(void*))OldMoatGames::GifDecoder.RewindReaderOffset;

OldMoatGames::GifDecoder.SetPixelsOffset = getRealOffset(0x5500E4);
OldMoatGames::GifDecoder.SetPixels = (void(*)(void*))OldMoatGames::GifDecoder.SetPixelsOffset;

OldMoatGames::GifDecoder.DecodeImageDataOffset = getRealOffset(0x55038C);
OldMoatGames::GifDecoder.DecodeImageData = (void(*)(void*))OldMoatGames::GifDecoder.DecodeImageDataOffset;

OldMoatGames::GifDecoder.InitOffset = getRealOffset(0x54F65C);
OldMoatGames::GifDecoder.Init = (void(*)(void*))OldMoatGames::GifDecoder.InitOffset;

OldMoatGames::GifDecoder.Read1Offset = getRealOffset(0x54F874);
OldMoatGames::GifDecoder.Read1 = (int(*)(void*))OldMoatGames::GifDecoder.Read1Offset;

OldMoatGames::GifDecoder.ReadBlockOffset = getRealOffset(0x54FDEC);
OldMoatGames::GifDecoder.ReadBlock = (int(*)(void*))OldMoatGames::GifDecoder.ReadBlockOffset;

OldMoatGames::GifDecoder.ReadColorTableOffset = getRealOffset(0x550B18);
OldMoatGames::GifDecoder.ReadGraphicControlExtOffset = getRealOffset(0x54FD74);
OldMoatGames::GifDecoder.ReadGraphicControlExt = (void(*)(void*))OldMoatGames::GifDecoder.ReadGraphicControlExtOffset;

OldMoatGames::GifDecoder.ReadHeaderOffset = getRealOffset(0x54F67C);
OldMoatGames::GifDecoder.ReadHeader = (void(*)(void*))OldMoatGames::GifDecoder.ReadHeaderOffset;

OldMoatGames::GifDecoder.ReadImageOffset = getRealOffset(0x54F968);
OldMoatGames::GifDecoder.ReadImage = (void(*)(void*))OldMoatGames::GifDecoder.ReadImageOffset;

OldMoatGames::GifDecoder.ReadLsdOffset = getRealOffset(0x550DA4);
OldMoatGames::GifDecoder.ReadLsd = (void(*)(void*))OldMoatGames::GifDecoder.ReadLsdOffset;

OldMoatGames::GifDecoder.ReadNetscapeExtOffset = getRealOffset(0x54FF98);
OldMoatGames::GifDecoder.ReadNetscapeExt = (void(*)(void*))OldMoatGames::GifDecoder.ReadNetscapeExtOffset;

OldMoatGames::GifDecoder.ReadShortOffset = getRealOffset(0x550D80);
OldMoatGames::GifDecoder.ReadShort = (int(*)(void*))OldMoatGames::GifDecoder.ReadShortOffset;

OldMoatGames::GifDecoder.ResetFrameOffset = getRealOffset(0x550E44);
OldMoatGames::GifDecoder.ResetFrame = (void(*)(void*))OldMoatGames::GifDecoder.ResetFrameOffset;

OldMoatGames::GifDecoder.SkipOffset = getRealOffset(0x55005C);
OldMoatGames::GifDecoder.Skip = (void(*)(void*))OldMoatGames::GifDecoder.SkipOffset;

OldMoatGames::AnimatedGifPlayer.get_WidthOffset = getRealOffset(0x54C3FC);
OldMoatGames::AnimatedGifPlayer.get_Width = (int(*)(void*))OldMoatGames::AnimatedGifPlayer.get_WidthOffset;

OldMoatGames::AnimatedGifPlayer.get_HeightOffset = getRealOffset(0x54C410);
OldMoatGames::AnimatedGifPlayer.get_Height = (int(*)(void*))OldMoatGames::AnimatedGifPlayer.get_HeightOffset;

OldMoatGames::AnimatedGifPlayer.get_TargetComponentOffset = getRealOffset(0x54C424);
OldMoatGames::AnimatedGifPlayer.get_TargetComponent = (void *(*)(void*))OldMoatGames::AnimatedGifPlayer.get_TargetComponentOffset;

OldMoatGames::AnimatedGifPlayer.set_TargetComponentOffset = getRealOffset(0x54C42C);
OldMoatGames::AnimatedGifPlayer.set_TargetComponent = (void(*)(void*, void *))OldMoatGames::AnimatedGifPlayer.set_TargetComponentOffset;

OldMoatGames::AnimatedGifPlayer.get_TargetMaterialNumberOffset = getRealOffset(0x54C434);
OldMoatGames::AnimatedGifPlayer.get_TargetMaterialNumber = (int(*)(void*))OldMoatGames::AnimatedGifPlayer.get_TargetMaterialNumberOffset;

OldMoatGames::AnimatedGifPlayer.set_TargetMaterialNumberOffset = getRealOffset(0x54C43C);
OldMoatGames::AnimatedGifPlayer.set_TargetMaterialNumber = (void(*)(void*, int))OldMoatGames::AnimatedGifPlayer.set_TargetMaterialNumberOffset;

OldMoatGames::AnimatedGifPlayer.get_StateOffset = getRealOffset(0x54C444);
OldMoatGames::AnimatedGifPlayer.get_State = (int (*)(void*))OldMoatGames::AnimatedGifPlayer.get_StateOffset;

OldMoatGames::AnimatedGifPlayer.set_StateOffset = getRealOffset(0x54C44C);
OldMoatGames::AnimatedGifPlayer.set_State = (void(*)(void*, int))OldMoatGames::AnimatedGifPlayer.set_StateOffset;

OldMoatGames::AnimatedGifPlayer.add_OnReadyOffset = getRealOffset(0x54C454);
OldMoatGames::AnimatedGifPlayer.add_OnReady = (void(*)(void*, void *))OldMoatGames::AnimatedGifPlayer.add_OnReadyOffset;

OldMoatGames::AnimatedGifPlayer.remove_OnReadyOffset = getRealOffset(0x54C504);
OldMoatGames::AnimatedGifPlayer.remove_OnReady = (void(*)(void*, void *))OldMoatGames::AnimatedGifPlayer.remove_OnReadyOffset;

OldMoatGames::AnimatedGifPlayer.add_OnLoadErrorOffset = getRealOffset(0x54C5B4);
OldMoatGames::AnimatedGifPlayer.add_OnLoadError = (void(*)(void*, void *))OldMoatGames::AnimatedGifPlayer.add_OnLoadErrorOffset;

OldMoatGames::AnimatedGifPlayer.remove_OnLoadErrorOffset = getRealOffset(0x54C664);
OldMoatGames::AnimatedGifPlayer.remove_OnLoadError = (void(*)(void*, void *))OldMoatGames::AnimatedGifPlayer.remove_OnLoadErrorOffset;

OldMoatGames::AnimatedGifPlayer.get_CurrentFrameOffset = getRealOffset(0x54C714);
OldMoatGames::AnimatedGifPlayer.get_CurrentFrame = (void *(*)(void*))OldMoatGames::AnimatedGifPlayer.get_CurrentFrameOffset;

OldMoatGames::AnimatedGifPlayer.set_CurrentFrameOffset = getRealOffset(0x54C71C);
OldMoatGames::AnimatedGifPlayer.set_CurrentFrame = (void(*)(void*, void *))OldMoatGames::AnimatedGifPlayer.set_CurrentFrameOffset;

OldMoatGames::AnimatedGifPlayer.get_CurrentFrameNumberOffset = getRealOffset(0x54C724);
OldMoatGames::AnimatedGifPlayer.get_CurrentFrameNumber = (int(*)(void*))OldMoatGames::AnimatedGifPlayer.get_CurrentFrameNumberOffset;

OldMoatGames::AnimatedGifPlayer.set_CurrentFrameNumberOffset = getRealOffset(0x54C72C);
OldMoatGames::AnimatedGifPlayer.set_CurrentFrameNumber = (void(*)(void*, int))OldMoatGames::AnimatedGifPlayer.set_CurrentFrameNumberOffset;

OldMoatGames::AnimatedGifPlayer.AwakeOffset = getRealOffset(0x54C734);
OldMoatGames::AnimatedGifPlayer.Awake = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.AwakeOffset;

OldMoatGames::AnimatedGifPlayer.UpdateOffset = getRealOffset(0x54C87C);
OldMoatGames::AnimatedGifPlayer.Update = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.UpdateOffset;

OldMoatGames::AnimatedGifPlayer.OnApplicationQuitOffset = getRealOffset(0x54C9D4);
OldMoatGames::AnimatedGifPlayer.OnApplicationQuit = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.OnApplicationQuitOffset;

OldMoatGames::AnimatedGifPlayer.InitOffset = getRealOffset(0x54C744);
OldMoatGames::AnimatedGifPlayer.Init = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.InitOffset;

OldMoatGames::AnimatedGifPlayer.PlayOffset = getRealOffset(0x54CE44);
OldMoatGames::AnimatedGifPlayer.Play = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.PlayOffset;

OldMoatGames::AnimatedGifPlayer.PauseOffset = getRealOffset(0x54CF1C);
OldMoatGames::AnimatedGifPlayer.Pause = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.PauseOffset;

OldMoatGames::AnimatedGifPlayer.GetNumberOfFramesOffset = getRealOffset(0x54CFF4);
OldMoatGames::AnimatedGifPlayer.GetNumberOfFrames = (int(*)(void*))OldMoatGames::AnimatedGifPlayer.GetNumberOfFramesOffset;

OldMoatGames::AnimatedGifPlayer.LoadOffset = getRealOffset(0x54CDC4);
OldMoatGames::AnimatedGifPlayer.Load = (void *(*)(void*))OldMoatGames::AnimatedGifPlayer.LoadOffset;

OldMoatGames::AnimatedGifPlayer.CreateTargetTextureOffset = getRealOffset(0x54D028);
OldMoatGames::AnimatedGifPlayer.CreateTargetTexture = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.CreateTargetTextureOffset;

OldMoatGames::AnimatedGifPlayer.SetTextureOffset = getRealOffset(0x54D2DC);
OldMoatGames::AnimatedGifPlayer.SetTexture = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.SetTextureOffset;

OldMoatGames::AnimatedGifPlayer.GetTargetComponentOffset = getRealOffset(0x54CA18);
OldMoatGames::AnimatedGifPlayer.GetTargetComponent = (void *(*)(void*))OldMoatGames::AnimatedGifPlayer.GetTargetComponentOffset;

OldMoatGames::AnimatedGifPlayer.SetTargetTextureOffset = getRealOffset(0x54D6B8);
OldMoatGames::AnimatedGifPlayer.SetTargetTexture = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.SetTargetTextureOffset;

OldMoatGames::AnimatedGifPlayer.CreateTextureOffset = getRealOffset(0x54D250);
OldMoatGames::AnimatedGifPlayer.CreateTexture = (void *(*)(int, int))OldMoatGames::AnimatedGifPlayer.CreateTextureOffset;

OldMoatGames::AnimatedGifPlayer.BufferFramesOffset = getRealOffset(0x54DC48);
OldMoatGames::AnimatedGifPlayer.BufferFrames = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.BufferFramesOffset;

OldMoatGames::AnimatedGifPlayer.AddFrameToCacheOffset = getRealOffset(0x54DF7C);
OldMoatGames::AnimatedGifPlayer.AddFrameToCache = (void(*)(void*, void *))OldMoatGames::AnimatedGifPlayer.AddFrameToCacheOffset;

OldMoatGames::AnimatedGifPlayer.StartDecoderOffset = getRealOffset(0x54E0D4);
OldMoatGames::AnimatedGifPlayer.StartDecoder = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.StartDecoderOffset;

OldMoatGames::AnimatedGifPlayer.SetNextFrameTimeOffset = getRealOffset(0x54E450);
OldMoatGames::AnimatedGifPlayer.SetNextFrameTime = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.SetNextFrameTimeOffset;

OldMoatGames::AnimatedGifPlayer.UpdateFrameTimeOffset = getRealOffset(0x54E478);
OldMoatGames::AnimatedGifPlayer.UpdateFrameTime = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.UpdateFrameTimeOffset;

OldMoatGames::AnimatedGifPlayer.UpdateFrameOffset = getRealOffset(0x54E510);
OldMoatGames::AnimatedGifPlayer.UpdateFrame = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.UpdateFrameOffset;

OldMoatGames::AnimatedGifPlayer.CheckFrameChangeOffset = getRealOffset(0x54C880);
OldMoatGames::AnimatedGifPlayer.CheckFrameChange = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.CheckFrameChangeOffset;

OldMoatGames::AnimatedGifPlayer.UpdateTextureOffset = getRealOffset(0x54E730);
OldMoatGames::AnimatedGifPlayer.UpdateTexture = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.UpdateTextureOffset;

OldMoatGames::AnimatedGifPlayer.StartReadFrameOffset = getRealOffset(0x54E130);
OldMoatGames::AnimatedGifPlayer.StartReadFrame = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.StartReadFrameOffset;

OldMoatGames::AnimatedGifPlayer.StartDecodeThreadOffset = getRealOffset(0x54CBC8);
OldMoatGames::AnimatedGifPlayer.StartDecodeThread = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.StartDecodeThreadOffset;

OldMoatGames::AnimatedGifPlayer.EndDecodeThreadOffset = getRealOffset(0x54C9D8);
OldMoatGames::AnimatedGifPlayer.EndDecodeThread = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.EndDecodeThreadOffset;

OldMoatGames::AnimatedGifPlayer.FrameDataThreadOffset = getRealOffset(0x54E790);
OldMoatGames::AnimatedGifPlayer.FrameDataThread = (void(*)(void*))OldMoatGames::AnimatedGifPlayer.FrameDataThreadOffset;

Photon::MonoBehaviour.get_photonViewOffset = getRealOffset(0x7C90C4);
Photon::MonoBehaviour.get_photonView = (void *(*)(void*))Photon::MonoBehaviour.get_photonViewOffset;

Photon::PunBehaviour.OnConnectedToPhotonOffset = getRealOffset(0x7C91D4);
Photon::PunBehaviour.OnConnectedToPhoton = (void(*)(void*))Photon::PunBehaviour.OnConnectedToPhotonOffset;

Photon::PunBehaviour.OnLeftRoomOffset = getRealOffset(0x7C91D8);
Photon::PunBehaviour.OnLeftRoom = (void(*)(void*))Photon::PunBehaviour.OnLeftRoomOffset;

Photon::PunBehaviour.OnMasterClientSwitchedOffset = getRealOffset(0x7C91DC);
Photon::PunBehaviour.OnMasterClientSwitched = (void(*)(void*, void *))Photon::PunBehaviour.OnMasterClientSwitchedOffset;

Photon::PunBehaviour.OnCreatedRoomOffset = getRealOffset(0x7C91E8);
Photon::PunBehaviour.OnCreatedRoom = (void(*)(void*))Photon::PunBehaviour.OnCreatedRoomOffset;

Photon::PunBehaviour.OnJoinedLobbyOffset = getRealOffset(0x7C91EC);
Photon::PunBehaviour.OnJoinedLobby = (void(*)(void*))Photon::PunBehaviour.OnJoinedLobbyOffset;

Photon::PunBehaviour.OnLeftLobbyOffset = getRealOffset(0x7C91F0);
Photon::PunBehaviour.OnLeftLobby = (void(*)(void*))Photon::PunBehaviour.OnLeftLobbyOffset;

Photon::PunBehaviour.OnFailedToConnectToPhotonOffset = getRealOffset(0x7C91F4);
Photon::PunBehaviour.OnFailedToConnectToPhoton = (void(*)(void*, int))Photon::PunBehaviour.OnFailedToConnectToPhotonOffset;

Photon::PunBehaviour.OnDisconnectedFromPhotonOffset = getRealOffset(0x7C91F8);
Photon::PunBehaviour.OnDisconnectedFromPhoton = (void(*)(void*))Photon::PunBehaviour.OnDisconnectedFromPhotonOffset;

Photon::PunBehaviour.OnConnectionFailOffset = getRealOffset(0x7C91FC);
Photon::PunBehaviour.OnConnectionFail = (void(*)(void*, int))Photon::PunBehaviour.OnConnectionFailOffset;

Photon::PunBehaviour.OnPhotonInstantiateOffset = getRealOffset(0x7C9200);
Photon::PunBehaviour.OnPhotonInstantiate = (void(*)(void*, int))Photon::PunBehaviour.OnPhotonInstantiateOffset;

Photon::PunBehaviour.OnReceivedRoomListUpdateOffset = getRealOffset(0x7C9204);
Photon::PunBehaviour.OnReceivedRoomListUpdate = (void(*)(void*))Photon::PunBehaviour.OnReceivedRoomListUpdateOffset;

Photon::PunBehaviour.OnJoinedRoomOffset = getRealOffset(0x7C9208);
Photon::PunBehaviour.OnJoinedRoom = (void(*)(void*))Photon::PunBehaviour.OnJoinedRoomOffset;

Photon::PunBehaviour.OnPhotonPlayerConnectedOffset = getRealOffset(0x7C920C);
Photon::PunBehaviour.OnPhotonPlayerConnected = (void(*)(void*, void *))Photon::PunBehaviour.OnPhotonPlayerConnectedOffset;

Photon::PunBehaviour.OnPhotonPlayerDisconnectedOffset = getRealOffset(0x7C9210);
Photon::PunBehaviour.OnPhotonPlayerDisconnected = (void(*)(void*, void *))Photon::PunBehaviour.OnPhotonPlayerDisconnectedOffset;

Photon::PunBehaviour.OnConnectedToMasterOffset = getRealOffset(0x7C9218);
Photon::PunBehaviour.OnConnectedToMaster = (void(*)(void*))Photon::PunBehaviour.OnConnectedToMasterOffset;

Photon::PunBehaviour.OnPhotonMaxCccuReachedOffset = getRealOffset(0x7C921C);
Photon::PunBehaviour.OnPhotonMaxCccuReached = (void(*)(void*))Photon::PunBehaviour.OnPhotonMaxCccuReachedOffset;

Photon::PunBehaviour.OnPhotonCustomRoomPropertiesChangedOffset = getRealOffset(0x7C9220);
Photon::PunBehaviour.OnPhotonCustomRoomPropertiesChanged = (void(*)(void*, void *))Photon::PunBehaviour.OnPhotonCustomRoomPropertiesChangedOffset;

Photon::PunBehaviour.OnUpdatedFriendListOffset = getRealOffset(0x7C9228);
Photon::PunBehaviour.OnUpdatedFriendList = (void(*)(void*))Photon::PunBehaviour.OnUpdatedFriendListOffset;

Photon::PunBehaviour.OnCustomAuthenticationFailedOffset = getRealOffset(0x7C922C);
Photon::PunBehaviour.OnCustomAuthenticationFailed = (void(*)(void*, monoString*))Photon::PunBehaviour.OnCustomAuthenticationFailedOffset;

Photon::PunBehaviour.OnWebRpcResponseOffset = getRealOffset(0x7C9234);
Photon::PunBehaviour.OnWebRpcResponse = (void(*)(void*, void *))Photon::PunBehaviour.OnWebRpcResponseOffset;

Photon::PunBehaviour.OnLobbyStatisticsUpdateOffset = getRealOffset(0x7C923C);
Photon::PunBehaviour.OnLobbyStatisticsUpdate = (void(*)(void*))Photon::PunBehaviour.OnLobbyStatisticsUpdateOffset;

Photon::PunBehaviour.OnPhotonPlayerActivityChangedOffset = getRealOffset(0x7C9240);
Photon::PunBehaviour.OnPhotonPlayerActivityChanged = (void(*)(void*, void *))Photon::PunBehaviour.OnPhotonPlayerActivityChangedOffset;

PhotonChat::ChannelCreationOptions.get_PublishSubscribersOffset = getRealOffset(0x566A74);
PhotonChat::ChannelCreationOptions.get_PublishSubscribers = (bool(*)(void*))PhotonChat::ChannelCreationOptions.get_PublishSubscribersOffset;

PhotonChat::ChannelCreationOptions.set_PublishSubscribersOffset = getRealOffset(0x566A7C);
PhotonChat::ChannelCreationOptions.set_PublishSubscribers = (void(*)(void*, bool))PhotonChat::ChannelCreationOptions.set_PublishSubscribersOffset;

PhotonChat::ChannelCreationOptions.get_MaxSubscribersOffset = getRealOffset(0x566A84);
PhotonChat::ChannelCreationOptions.get_MaxSubscribers = (int(*)(void*))PhotonChat::ChannelCreationOptions.get_MaxSubscribersOffset;

PhotonChat::ChannelCreationOptions.set_MaxSubscribersOffset = getRealOffset(0x566A8C);
PhotonChat::ChannelCreationOptions.set_MaxSubscribers = (void(*)(void*, int))PhotonChat::ChannelCreationOptions.set_MaxSubscribersOffset;

PhotonChat::ChatChannel.get_IsPrivateOffset = getRealOffset(0x566B10);
PhotonChat::ChatChannel.get_IsPrivate = (bool(*)(void*))PhotonChat::ChatChannel.get_IsPrivateOffset;

PhotonChat::ChatChannel.set_IsPrivateOffset = getRealOffset(0x566B18);
PhotonChat::ChatChannel.set_IsPrivate = (void(*)(void*, bool))PhotonChat::ChatChannel.set_IsPrivateOffset;

PhotonChat::ChatChannel.get_MessageCountOffset = getRealOffset(0x566B20);
PhotonChat::ChatChannel.get_MessageCount = (int(*)(void*))PhotonChat::ChatChannel.get_MessageCountOffset;

PhotonChat::ChatChannel.get_LastMsgIdOffset = getRealOffset(0x566B78);
PhotonChat::ChatChannel.get_LastMsgId = (int(*)(void*))PhotonChat::ChatChannel.get_LastMsgIdOffset;

PhotonChat::ChatChannel.set_LastMsgIdOffset = getRealOffset(0x566B80);
PhotonChat::ChatChannel.set_LastMsgId = (void(*)(void*, int))PhotonChat::ChatChannel.set_LastMsgIdOffset;

PhotonChat::ChatChannel.get_PublishSubscribersOffset = getRealOffset(0x566B88);
PhotonChat::ChatChannel.get_PublishSubscribers = (bool(*)(void*))PhotonChat::ChatChannel.get_PublishSubscribersOffset;

PhotonChat::ChatChannel.set_PublishSubscribersOffset = getRealOffset(0x566B90);
PhotonChat::ChatChannel.set_PublishSubscribers = (void(*)(void*, bool))PhotonChat::ChatChannel.set_PublishSubscribersOffset;

PhotonChat::ChatChannel.get_MaxSubscribersOffset = getRealOffset(0x566B98);
PhotonChat::ChatChannel.get_MaxSubscribers = (int(*)(void*))PhotonChat::ChatChannel.get_MaxSubscribersOffset;

PhotonChat::ChatChannel.set_MaxSubscribersOffset = getRealOffset(0x566BA0);
PhotonChat::ChatChannel.set_MaxSubscribers = (void(*)(void*, int))PhotonChat::ChatChannel.set_MaxSubscribersOffset;

PhotonChat::ChatChannel.TruncateMessagesOffset = getRealOffset(0x566D50);
PhotonChat::ChatChannel.TruncateMessages = (void(*)(void*))PhotonChat::ChatChannel.TruncateMessagesOffset;

PhotonChat::ChatChannel.ClearMessagesOffset = getRealOffset(0x566EF4);
PhotonChat::ChatChannel.ClearMessages = (void(*)(void*))PhotonChat::ChatChannel.ClearMessagesOffset;

PhotonChat::ChatChannel.ToStringMessagesOffset = getRealOffset(0x566F88);
PhotonChat::ChatChannel.ToStringMessages = (monoString *(*)(void*))PhotonChat::ChatChannel.ToStringMessagesOffset;

PhotonChat::ChatChannel.ClearPropertiesOffset = getRealOffset(0x567560);
PhotonChat::ChatChannel.ClearProperties = (void(*)(void*))PhotonChat::ChatChannel.ClearPropertiesOffset;

PhotonChat::ChatClient.get_NameServerAddressOffset = getRealOffset(0x5675F8);
PhotonChat::ChatClient.get_NameServerAddress = (monoString *(*)(void*))PhotonChat::ChatClient.get_NameServerAddressOffset;

PhotonChat::ChatClient.set_NameServerAddressOffset = getRealOffset(0x567600);
PhotonChat::ChatClient.set_NameServerAddress = (void(*)(void*, monoString*))PhotonChat::ChatClient.set_NameServerAddressOffset;

PhotonChat::ChatClient.get_FrontendAddressOffset = getRealOffset(0x567608);
PhotonChat::ChatClient.get_FrontendAddress = (monoString *(*)(void*))PhotonChat::ChatClient.get_FrontendAddressOffset;

PhotonChat::ChatClient.set_FrontendAddressOffset = getRealOffset(0x567610);
PhotonChat::ChatClient.set_FrontendAddress = (void(*)(void*, monoString*))PhotonChat::ChatClient.set_FrontendAddressOffset;

PhotonChat::ChatClient.get_ChatRegionOffset = getRealOffset(0x567618);
PhotonChat::ChatClient.get_ChatRegion = (monoString *(*)(void*))PhotonChat::ChatClient.get_ChatRegionOffset;

PhotonChat::ChatClient.set_ChatRegionOffset = getRealOffset(0x567620);
PhotonChat::ChatClient.set_ChatRegion = (void(*)(void*, monoString*))PhotonChat::ChatClient.set_ChatRegionOffset;

PhotonChat::ChatClient.get_StateOffset = getRealOffset(0x567628);
PhotonChat::ChatClient.get_State = (int (*)(void*))PhotonChat::ChatClient.get_StateOffset;

PhotonChat::ChatClient.set_StateOffset = getRealOffset(0x567630);
PhotonChat::ChatClient.set_State = (void(*)(void*, int))PhotonChat::ChatClient.set_StateOffset;

PhotonChat::ChatClient.get_DisconnectedCauseOffset = getRealOffset(0x567638);
PhotonChat::ChatClient.get_DisconnectedCause = (int (*)(void*))PhotonChat::ChatClient.get_DisconnectedCauseOffset;

PhotonChat::ChatClient.set_DisconnectedCauseOffset = getRealOffset(0x567640);
PhotonChat::ChatClient.set_DisconnectedCause = (void(*)(void*, int))PhotonChat::ChatClient.set_DisconnectedCauseOffset;

PhotonChat::ChatClient.get_CanChatOffset = getRealOffset(0x567648);
PhotonChat::ChatClient.get_CanChat = (bool(*)(void*))PhotonChat::ChatClient.get_CanChatOffset;

PhotonChat::ChatClient.CanChatInChannelOffset = getRealOffset(0x56767C);
PhotonChat::ChatClient.CanChatInChannel = (bool(*)(void*, monoString*))PhotonChat::ChatClient.CanChatInChannelOffset;

PhotonChat::ChatClient.get_HasPeerOffset = getRealOffset(0x56766C);
PhotonChat::ChatClient.get_HasPeer = (bool(*)(void*))PhotonChat::ChatClient.get_HasPeerOffset;

PhotonChat::ChatClient.get_AppVersionOffset = getRealOffset(0x567748);
PhotonChat::ChatClient.get_AppVersion = (monoString *(*)(void*))PhotonChat::ChatClient.get_AppVersionOffset;

PhotonChat::ChatClient.set_AppVersionOffset = getRealOffset(0x567750);
PhotonChat::ChatClient.set_AppVersion = (void(*)(void*, monoString*))PhotonChat::ChatClient.set_AppVersionOffset;

PhotonChat::ChatClient.get_AppIdOffset = getRealOffset(0x567758);
PhotonChat::ChatClient.get_AppId = (monoString *(*)(void*))PhotonChat::ChatClient.get_AppIdOffset;

PhotonChat::ChatClient.set_AppIdOffset = getRealOffset(0x567760);
PhotonChat::ChatClient.set_AppId = (void(*)(void*, monoString*))PhotonChat::ChatClient.set_AppIdOffset;

PhotonChat::ChatClient.get_AuthValuesOffset = getRealOffset(0x567768);
PhotonChat::ChatClient.get_AuthValues = (void *(*)(void*))PhotonChat::ChatClient.get_AuthValuesOffset;

PhotonChat::ChatClient.set_AuthValuesOffset = getRealOffset(0x567770);
PhotonChat::ChatClient.set_AuthValues = (void(*)(void*, void *))PhotonChat::ChatClient.set_AuthValuesOffset;

PhotonChat::ChatClient.get_UserIdOffset = getRealOffset(0x567778);
PhotonChat::ChatClient.get_UserId = (monoString *(*)(void*))PhotonChat::ChatClient.get_UserIdOffset;

PhotonChat::ChatClient.set_UserIdOffset = getRealOffset(0x56778C);
PhotonChat::ChatClient.set_UserId = (void(*)(void*, monoString*))PhotonChat::ChatClient.set_UserIdOffset;

PhotonChat::ChatClient.get_UseBackgroundWorkerForSendingOffset = getRealOffset(0x567820);
PhotonChat::ChatClient.get_UseBackgroundWorkerForSending = (bool(*)(void*))PhotonChat::ChatClient.get_UseBackgroundWorkerForSendingOffset;

PhotonChat::ChatClient.set_UseBackgroundWorkerForSendingOffset = getRealOffset(0x567828);
PhotonChat::ChatClient.set_UseBackgroundWorkerForSending = (void(*)(void*, bool))PhotonChat::ChatClient.set_UseBackgroundWorkerForSendingOffset;

PhotonChat::ChatClient.get_TransportProtocolOffset = getRealOffset(0x567830);
PhotonChat::ChatClient.get_TransportProtocol = (int (*)(void*))PhotonChat::ChatClient.get_TransportProtocolOffset;

PhotonChat::ChatClient.set_TransportProtocolOffset = getRealOffset(0x567850);
PhotonChat::ChatClient.set_TransportProtocol = (void(*)(void*, int))PhotonChat::ChatClient.set_TransportProtocolOffset;

PhotonChat::ChatClient.get_SocketImplementationConfigOffset = getRealOffset(0x567A00);
PhotonChat::ChatClient.ConnectOffset = getRealOffset(0x567B5C);
PhotonChat::ChatClient.Connect = (bool(*)(void*, monoString*, monoString*, void *))PhotonChat::ChatClient.ConnectOffset;

PhotonChat::ChatClient.ServiceOffset = getRealOffset(0x567E1C);
PhotonChat::ChatClient.Service = (void(*)(void*))PhotonChat::ChatClient.ServiceOffset;

PhotonChat::ChatClient.SendOutgoingInBackgroundOffset = getRealOffset(0x567EB0);
PhotonChat::ChatClient.SendOutgoingInBackground = (bool(*)(void*))PhotonChat::ChatClient.SendOutgoingInBackgroundOffset;

PhotonChat::ChatClient.SendAcksOnlyOffset = getRealOffset(0x567EF0);
PhotonChat::ChatClient.SendAcksOnly = (void(*)(void*))PhotonChat::ChatClient.SendAcksOnlyOffset;

PhotonChat::ChatClient.DisconnectOffset = getRealOffset(0x567F1C);
PhotonChat::ChatClient.Disconnect = (void(*)(void*))PhotonChat::ChatClient.DisconnectOffset;

PhotonChat::ChatClient.StopThreadOffset = getRealOffset(0x567F70);
PhotonChat::ChatClient.StopThread = (void(*)(void*))PhotonChat::ChatClient.StopThreadOffset;

PhotonChat::ChatClient.SetOnlineStatus1Offset = getRealOffset(0x5694B0);
PhotonChat::ChatClient.SetOnlineStatus1 = (bool(*)(void*, int))PhotonChat::ChatClient.SetOnlineStatus1Offset;

PhotonChat::ChatClient.GetPrivateChannelNameByUserOffset = getRealOffset(0x569EF4);
PhotonChat::ChatClient.GetPrivateChannelNameByUser = (monoString *(*)(void*, monoString*))PhotonChat::ChatClient.GetPrivateChannelNameByUserOffset;

PhotonChat::ChatClient.set_DebugOutOffset = getRealOffset(0x56A108);
PhotonChat::ChatClient.set_DebugOut = (void(*)(void*, int))PhotonChat::ChatClient.set_DebugOutOffset;

PhotonChat::ChatClient.get_DebugOutOffset = getRealOffset(0x5686A4);
PhotonChat::ChatClient.get_DebugOut = (int (*)(void*))PhotonChat::ChatClient.get_DebugOutOffset;

PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerDebugReturnOffset = getRealOffset(0x56A12C);
PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerDebugReturn = (void(*)(void*, int, monoString*))PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerDebugReturnOffset;

PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerOnEventOffset = getRealOffset(0x56A208);
PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerOnEvent = (void(*)(void*, void *))PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerOnEventOffset;

PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerOnOperationResponseOffset = getRealOffset(0x56C038);
PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerOnOperationResponse = (void(*)(void*, void *))PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerOnOperationResponseOffset;

PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerOnStatusChangedOffset = getRealOffset(0x56CB14);
PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerOnStatusChanged = (void(*)(void*, int))PhotonChat::ChatClient.ExitGamesClientPhotonIPhotonPeerListenerOnStatusChangedOffset;

PhotonChat::ChatClient.HandlePrivateMessageEventOffset = getRealOffset(0x56A6B0);
PhotonChat::ChatClient.HandlePrivateMessageEvent = (void(*)(void*, void *))PhotonChat::ChatClient.HandlePrivateMessageEventOffset;

PhotonChat::ChatClient.HandleChatMessagesEventOffset = getRealOffset(0x56A2D8);
PhotonChat::ChatClient.HandleChatMessagesEvent = (void(*)(void*, void *))PhotonChat::ChatClient.HandleChatMessagesEventOffset;

PhotonChat::ChatClient.HandleSubscribeEventOffset = getRealOffset(0x56AC7C);
PhotonChat::ChatClient.HandleSubscribeEvent = (void(*)(void*, void *))PhotonChat::ChatClient.HandleSubscribeEventOffset;

PhotonChat::ChatClient.HandleUnsubscribeEventOffset = getRealOffset(0x56B3BC);
PhotonChat::ChatClient.HandleUnsubscribeEvent = (void(*)(void*, void *))PhotonChat::ChatClient.HandleUnsubscribeEventOffset;

PhotonChat::ChatClient.HandleAuthResponseOffset = getRealOffset(0x56C288);
PhotonChat::ChatClient.HandleAuthResponse = (void(*)(void*, void *))PhotonChat::ChatClient.HandleAuthResponseOffset;

PhotonChat::ChatClient.HandleStatusUpdateOffset = getRealOffset(0x56AA44);
PhotonChat::ChatClient.HandleStatusUpdate = (void(*)(void*, void *))PhotonChat::ChatClient.HandleStatusUpdateOffset;

PhotonChat::ChatClient.ConnectToFrontEndOffset = getRealOffset(0x56D308);
PhotonChat::ChatClient.ConnectToFrontEnd = (void(*)(void*))PhotonChat::ChatClient.ConnectToFrontEndOffset;

PhotonChat::ChatClient.AuthenticateOnFrontEndOffset = getRealOffset(0x56D068);
PhotonChat::ChatClient.AuthenticateOnFrontEnd = (bool(*)(void*))PhotonChat::ChatClient.AuthenticateOnFrontEndOffset;

PhotonChat::ChatClient.HandleUserUnsubscribedEventOffset = getRealOffset(0x56BBA8);
PhotonChat::ChatClient.HandleUserUnsubscribedEvent = (void(*)(void*, void *))PhotonChat::ChatClient.HandleUserUnsubscribedEventOffset;

PhotonChat::ChatClient.HandleUserSubscribedEventOffset = getRealOffset(0x56B594);
PhotonChat::ChatClient.HandleUserSubscribedEvent = (void(*)(void*, void *))PhotonChat::ChatClient.HandleUserSubscribedEventOffset;

PhotonChat::ChatClient.Subscribe11Offset = getRealOffset(0x56D45C);
PhotonChat::ChatClient.Subscribe11 = (bool(*)(void*, monoString*, int, int, void *))PhotonChat::ChatClient.Subscribe11Offset;

PhotonChat::ChatPeer.get_NameServerAddressOffset = getRealOffset(0x7C85B8);
PhotonChat::ChatPeer.get_NameServerAddress = (monoString *(*)(void*))PhotonChat::ChatPeer.get_NameServerAddressOffset;

PhotonChat::ChatPeer.get_IsProtocolSecureOffset = getRealOffset(0x7C8784);
PhotonChat::ChatPeer.get_IsProtocolSecure = (bool(*)(void*))PhotonChat::ChatPeer.get_IsProtocolSecureOffset;

PhotonChat::ChatPeer.ConfigUnitySocketsOffset = getRealOffset(0x7C8838);
PhotonChat::ChatPeer.ConfigUnitySockets = (void(*)(void*))PhotonChat::ChatPeer.ConfigUnitySocketsOffset;

PhotonChat::ChatPeer.GetNameServerAddressOffset = getRealOffset(0x7C85BC);
PhotonChat::ChatPeer.GetNameServerAddress = (monoString *(*)(void*))PhotonChat::ChatPeer.GetNameServerAddressOffset;

PhotonChat::ChatPeer.ConnectOffset = getRealOffset(0x7C8AB8);
PhotonChat::ChatPeer.Connect = (bool(*)(void*))PhotonChat::ChatPeer.ConnectOffset;

PhotonChat::ChatPeer.AuthenticateOnNameServerOffset = getRealOffset(0x7C8BF0);
PhotonChat::ChatPeer.AuthenticateOnNameServer = (bool(*)(void*, monoString*, monoString*, monoString*, void *))PhotonChat::ChatPeer.AuthenticateOnNameServerOffset;

PhotonChat::AuthenticationValues.get_AuthTypeOffset = getRealOffset(0x5666C4);
PhotonChat::AuthenticationValues.get_AuthType = (int (*)(void*))PhotonChat::AuthenticationValues.get_AuthTypeOffset;

PhotonChat::AuthenticationValues.set_AuthTypeOffset = getRealOffset(0x5666CC);
PhotonChat::AuthenticationValues.set_AuthType = (void(*)(void*, int))PhotonChat::AuthenticationValues.set_AuthTypeOffset;

PhotonChat::AuthenticationValues.get_AuthGetParametersOffset = getRealOffset(0x5666D4);
PhotonChat::AuthenticationValues.get_AuthGetParameters = (monoString *(*)(void*))PhotonChat::AuthenticationValues.get_AuthGetParametersOffset;

PhotonChat::AuthenticationValues.set_AuthGetParametersOffset = getRealOffset(0x5666DC);
PhotonChat::AuthenticationValues.set_AuthGetParameters = (void(*)(void*, monoString*))PhotonChat::AuthenticationValues.set_AuthGetParametersOffset;

PhotonChat::AuthenticationValues.get_AuthPostDataOffset = getRealOffset(0x5666E4);
PhotonChat::AuthenticationValues.get_TokenOffset = getRealOffset(0x5666F4);
PhotonChat::AuthenticationValues.get_Token = (monoString *(*)(void*))PhotonChat::AuthenticationValues.get_TokenOffset;

PhotonChat::AuthenticationValues.set_TokenOffset = getRealOffset(0x5666FC);
PhotonChat::AuthenticationValues.set_Token = (void(*)(void*, monoString*))PhotonChat::AuthenticationValues.set_TokenOffset;

PhotonChat::AuthenticationValues.get_UserIdOffset = getRealOffset(0x566704);
PhotonChat::AuthenticationValues.get_UserId = (monoString *(*)(void*))PhotonChat::AuthenticationValues.get_UserIdOffset;

PhotonChat::AuthenticationValues.set_UserIdOffset = getRealOffset(0x56670C);
PhotonChat::AuthenticationValues.set_UserId = (void(*)(void*, monoString*))PhotonChat::AuthenticationValues.set_UserIdOffset;

PhotonChat::AuthenticationValues.ctor1Offset = getRealOffset(0x566724);
PhotonChat::AuthenticationValues.ctor1 = (void(*)(void*, monoString*))PhotonChat::AuthenticationValues.ctor1Offset;

PhotonChat::AuthenticationValues.SetAuthPostDataOffset = getRealOffset(0x566750);
PhotonChat::AuthenticationValues.SetAuthPostData = (void(*)(void*, monoString*))PhotonChat::AuthenticationValues.SetAuthPostDataOffset;

PhotonChat::AuthenticationValues.AddAuthParameterOffset = getRealOffset(0x566790);
PhotonChat::AuthenticationValues.AddAuthParameter = (void(*)(void*, monoString*, monoString*))PhotonChat::AuthenticationValues.AddAuthParameterOffset;

PhotonChat::AuthenticationValues.ToStringOffset = getRealOffset(0x5669D0);
PhotonChat::AuthenticationValues.ToString = (monoString *(*)(void*))PhotonChat::AuthenticationValues.ToStringOffset;

PhotonRealtime::PhotonPing.StartPingOffset = getRealOffset(0x7C9250);
PhotonRealtime::PhotonPing.StartPing = (bool(*)(void*, monoString*))PhotonRealtime::PhotonPing.StartPingOffset;

PhotonRealtime::PhotonPing.DoneOffset = getRealOffset(0x7C92C8);
PhotonRealtime::PhotonPing.Done = (bool(*)(void*))PhotonRealtime::PhotonPing.DoneOffset;

PhotonRealtime::PhotonPing.DisposeOffset = getRealOffset(0x7C9340);
PhotonRealtime::PhotonPing.Dispose = (void(*)(void*))PhotonRealtime::PhotonPing.DisposeOffset;

PhotonRealtime::PhotonPing.InitOffset = getRealOffset(0x7C93B8);
PhotonRealtime::PhotonPing.Init = (void(*)(void*))PhotonRealtime::PhotonPing.InitOffset;

PhotonRealtime::PingMono.StartPingOffset = getRealOffset(0x7C949C);
PhotonRealtime::PingMono.StartPing = (bool(*)(void*, monoString*))PhotonRealtime::PingMono.StartPingOffset;

PhotonRealtime::PingMono.DoneOffset = getRealOffset(0x7C9784);
PhotonRealtime::PingMono.Done = (bool(*)(void*))PhotonRealtime::PingMono.DoneOffset;

PhotonRealtime::PingMono.DisposeOffset = getRealOffset(0x7C990C);
PhotonRealtime::PingMono.Dispose = (void(*)(void*))PhotonRealtime::PingMono.DisposeOffset;

RWDTools::ExtensionMethods.ToAngleDegOffset = getRealOffset(0x633368);
RWDTools::ExtensionMethods.ToAngleDeg = (float(*)(Vector2))RWDTools::ExtensionMethods.ToAngleDegOffset;

RWDTools::ExtensionMethods.DegToVectorOffset = getRealOffset(0x6333FC);
RWDTools::ExtensionMethods.DegToVector = (Vector2 (*)(float))RWDTools::ExtensionMethods.DegToVectorOffset;

RWDTools::ExtensionMethods.isPowerOfTwoOffset = getRealOffset(0x6334C0);
RWDTools::ExtensionMethods.isPowerOfTwo = (bool(*)(int))RWDTools::ExtensionMethods.isPowerOfTwoOffset;

RoboRyanTronUnite2017Events::GameEvent.RaiseOffset = getRealOffset(0x6092F0);
RoboRyanTronUnite2017Events::GameEvent.Raise = (void(*)(void*))RoboRyanTronUnite2017Events::GameEvent.RaiseOffset;

RoboRyanTronUnite2017Events::GameEvent.RegisterListenerOffset = getRealOffset(0x6093EC);
RoboRyanTronUnite2017Events::GameEvent.RegisterListener = (void(*)(void*, void *))RoboRyanTronUnite2017Events::GameEvent.RegisterListenerOffset;

RoboRyanTronUnite2017Events::GameEvent.UnregisterListenerOffset = getRealOffset(0x609498);
RoboRyanTronUnite2017Events::GameEvent.UnregisterListener = (void(*)(void*, void *))RoboRyanTronUnite2017Events::GameEvent.UnregisterListenerOffset;

RoboRyanTronUnite2017Events::GameEventListener.OnEnableOffset = getRealOffset(0x6095C4);
RoboRyanTronUnite2017Events::GameEventListener.OnEnable = (void(*)(void*))RoboRyanTronUnite2017Events::GameEventListener.OnEnableOffset;

RoboRyanTronUnite2017Events::GameEventListener.OnDisableOffset = getRealOffset(0x6095F0);
RoboRyanTronUnite2017Events::GameEventListener.OnDisable = (void(*)(void*))RoboRyanTronUnite2017Events::GameEventListener.OnDisableOffset;

RoboRyanTronUnite2017Events::GameEventListener.OnEventRaisedOffset = getRealOffset(0x6093C4);
RoboRyanTronUnite2017Events::GameEventListener.OnEventRaised = (void(*)(void*))RoboRyanTronUnite2017Events::GameEventListener.OnEventRaisedOffset;

SimpleJSON::JSONNode.AddOffset = getRealOffset(0x62972C);
SimpleJSON::JSONNode.Add = (void(*)(void*, monoString*, void *))SimpleJSON::JSONNode.AddOffset;

SimpleJSON::JSONNode.get_ItemOffset = getRealOffset(0x629730);
SimpleJSON::JSONNode.get_Item = (void *(*)(void*, int))SimpleJSON::JSONNode.get_ItemOffset;

SimpleJSON::JSONNode.set_ItemOffset = getRealOffset(0x629738);
SimpleJSON::JSONNode.set_Item = (void(*)(void*, int, void *))SimpleJSON::JSONNode.set_ItemOffset;

SimpleJSON::JSONNode.get_Item1Offset = getRealOffset(0x62973C);
SimpleJSON::JSONNode.get_Item1 = (void *(*)(void*, monoString*))SimpleJSON::JSONNode.get_Item1Offset;

SimpleJSON::JSONNode.set_Item1Offset = getRealOffset(0x629744);
SimpleJSON::JSONNode.set_Item1 = (void(*)(void*, monoString*, void *))SimpleJSON::JSONNode.set_Item1Offset;

SimpleJSON::JSONNode.get_ValueOffset = getRealOffset(0x629748);
SimpleJSON::JSONNode.get_Value = (monoString *(*)(void*))SimpleJSON::JSONNode.get_ValueOffset;

SimpleJSON::JSONNode.set_ValueOffset = getRealOffset(0x629798);
SimpleJSON::JSONNode.set_Value = (void(*)(void*, monoString*))SimpleJSON::JSONNode.set_ValueOffset;

SimpleJSON::JSONNode.get_CountOffset = getRealOffset(0x62979C);
SimpleJSON::JSONNode.get_Count = (int(*)(void*))SimpleJSON::JSONNode.get_CountOffset;

SimpleJSON::JSONNode.Add1Offset = getRealOffset(0x6297A4);
SimpleJSON::JSONNode.Add1 = (void(*)(void*, void *))SimpleJSON::JSONNode.Add1Offset;

SimpleJSON::JSONNode.RemoveOffset = getRealOffset(0x629814);
SimpleJSON::JSONNode.Remove = (void *(*)(void*, monoString*))SimpleJSON::JSONNode.RemoveOffset;

SimpleJSON::JSONNode.Remove1Offset = getRealOffset(0x62981C);
SimpleJSON::JSONNode.Remove1 = (void *(*)(void*, int))SimpleJSON::JSONNode.Remove1Offset;

SimpleJSON::JSONNode.Remove2Offset = getRealOffset(0x629824);
SimpleJSON::JSONNode.Remove2 = (void *(*)(void*, void *))SimpleJSON::JSONNode.Remove2Offset;

SimpleJSON::JSONNode.get_ChildsOffset = getRealOffset(0x62982C);
SimpleJSON::JSONNode.get_DeepChildsOffset = getRealOffset(0x629894);
SimpleJSON::JSONNode.ToStringOffset = getRealOffset(0x629910);
SimpleJSON::JSONNode.ToString = (monoString *(*)(void*))SimpleJSON::JSONNode.ToStringOffset;

SimpleJSON::JSONNode.ToString1Offset = getRealOffset(0x629960);
SimpleJSON::JSONNode.ToString1 = (monoString *(*)(void*, monoString*))SimpleJSON::JSONNode.ToString1Offset;

SimpleJSON::JSONNode.get_AsIntOffset = getRealOffset(0x6299B0);
SimpleJSON::JSONNode.get_AsInt = (int(*)(void*))SimpleJSON::JSONNode.get_AsIntOffset;

SimpleJSON::JSONNode.set_AsIntOffset = getRealOffset(0x6299F4);
SimpleJSON::JSONNode.set_AsInt = (void(*)(void*, int))SimpleJSON::JSONNode.set_AsIntOffset;

SimpleJSON::JSONNode.get_AsFloatOffset = getRealOffset(0x629A34);
SimpleJSON::JSONNode.get_AsFloat = (float(*)(void*))SimpleJSON::JSONNode.get_AsFloatOffset;

SimpleJSON::JSONNode.set_AsFloatOffset = getRealOffset(0x629A84);
SimpleJSON::JSONNode.set_AsFloat = (void(*)(void*, float))SimpleJSON::JSONNode.set_AsFloatOffset;

SimpleJSON::JSONNode.get_AsDoubleOffset = getRealOffset(0x629AC4);
SimpleJSON::JSONNode.get_AsBoolOffset = getRealOffset(0x629BC4);
SimpleJSON::JSONNode.get_AsBool = (bool(*)(void*))SimpleJSON::JSONNode.get_AsBoolOffset;

SimpleJSON::JSONNode.set_AsBoolOffset = getRealOffset(0x629CA4);
SimpleJSON::JSONNode.set_AsBool = (void(*)(void*, bool))SimpleJSON::JSONNode.set_AsBoolOffset;

SimpleJSON::JSONNode.get_AsArrayOffset = getRealOffset(0x629D34);
SimpleJSON::JSONNode.get_AsArray = (void *(*)(void*))SimpleJSON::JSONNode.get_AsArrayOffset;

SimpleJSON::JSONNode.get_AsObjectOffset = getRealOffset(0x629DC0);
SimpleJSON::JSONNode.get_AsObject = (void *(*)(void*))SimpleJSON::JSONNode.get_AsObjectOffset;

SimpleJSON::JSONNode.op_ImplicitOffset = getRealOffset(0x629E4C);
SimpleJSON::JSONNode.op_Implicit = (void *(*)(monoString*))SimpleJSON::JSONNode.op_ImplicitOffset;

SimpleJSON::JSONNode.op_Implicit1Offset = getRealOffset(0x629EB8);
SimpleJSON::JSONNode.op_Implicit1 = (monoString *(*)(void *))SimpleJSON::JSONNode.op_Implicit1Offset;

SimpleJSON::JSONNode.GetHashCodeOffset = getRealOffset(0x629114);
SimpleJSON::JSONNode.GetHashCode = (int(*)(void*))SimpleJSON::JSONNode.GetHashCodeOffset;

SimpleJSON::JSONNode.EscapeOffset = getRealOffset(0x62783C);
SimpleJSON::JSONNode.Escape = (monoString *(*)(monoString*))SimpleJSON::JSONNode.EscapeOffset;

SimpleJSON::JSONNode.ParseOffset = getRealOffset(0x625098);
SimpleJSON::JSONNode.Parse = (void *(*)(monoString*))SimpleJSON::JSONNode.ParseOffset;

SimpleJSON::JSONNode.SerializeOffset = getRealOffset(0x629F24);
SimpleJSON::JSONNode.Serialize = (void(*)(void*, void *))SimpleJSON::JSONNode.SerializeOffset;

SimpleJSON::JSONNode.SaveToStreamOffset = getRealOffset(0x629F28);
SimpleJSON::JSONNode.SaveToStream = (void(*)(void*, void *))SimpleJSON::JSONNode.SaveToStreamOffset;

SimpleJSON::JSONNode.SaveToCompressedStreamOffset = getRealOffset(0x629FAC);
SimpleJSON::JSONNode.SaveToCompressedStream = (void(*)(void*, void *))SimpleJSON::JSONNode.SaveToCompressedStreamOffset;

SimpleJSON::JSONNode.SaveToCompressedFileOffset = getRealOffset(0x62A038);
SimpleJSON::JSONNode.SaveToCompressedFile = (void(*)(void*, monoString*))SimpleJSON::JSONNode.SaveToCompressedFileOffset;

SimpleJSON::JSONNode.SaveToCompressedBase64Offset = getRealOffset(0x62A0C4);
SimpleJSON::JSONNode.SaveToCompressedBase64 = (monoString *(*)(void*))SimpleJSON::JSONNode.SaveToCompressedBase64Offset;

SimpleJSON::JSONNode.SaveToFileOffset = getRealOffset(0x62A150);
SimpleJSON::JSONNode.SaveToFile = (void(*)(void*, monoString*))SimpleJSON::JSONNode.SaveToFileOffset;

SimpleJSON::JSONNode.SaveToBase64Offset = getRealOffset(0x62A2D4);
SimpleJSON::JSONNode.SaveToBase64 = (monoString *(*)(void*))SimpleJSON::JSONNode.SaveToBase64Offset;

SimpleJSON::JSONNode.DeserializeOffset = getRealOffset(0x62A494);
SimpleJSON::JSONNode.Deserialize = (void *(*)(void *))SimpleJSON::JSONNode.DeserializeOffset;

SimpleJSON::JSONNode.LoadFromCompressedFileOffset = getRealOffset(0x62A844);
SimpleJSON::JSONNode.LoadFromCompressedFile = (void *(*)(monoString*))SimpleJSON::JSONNode.LoadFromCompressedFileOffset;

SimpleJSON::JSONNode.LoadFromCompressedStreamOffset = getRealOffset(0x62A8D0);
SimpleJSON::JSONNode.LoadFromCompressedStream = (void *(*)(void *))SimpleJSON::JSONNode.LoadFromCompressedStreamOffset;

SimpleJSON::JSONNode.LoadFromCompressedBase64Offset = getRealOffset(0x62A95C);
SimpleJSON::JSONNode.LoadFromCompressedBase64 = (void *(*)(monoString*))SimpleJSON::JSONNode.LoadFromCompressedBase64Offset;

SimpleJSON::JSONNode.LoadFromStreamOffset = getRealOffset(0x62A9E8);
SimpleJSON::JSONNode.LoadFromStream = (void *(*)(void *))SimpleJSON::JSONNode.LoadFromStreamOffset;

SimpleJSON::JSONNode.LoadFromFileOffset = getRealOffset(0x62AB18);
SimpleJSON::JSONNode.LoadFromFile = (void *(*)(monoString*))SimpleJSON::JSONNode.LoadFromFileOffset;

SimpleJSON::JSONNode.LoadFromBase64Offset = getRealOffset(0x62AC30);
SimpleJSON::JSONNode.LoadFromBase64 = (void *(*)(monoString*))SimpleJSON::JSONNode.LoadFromBase64Offset;

SimpleJSON::JSONArray.get_ItemOffset = getRealOffset(0x6258A4);
SimpleJSON::JSONArray.get_Item = (void *(*)(void*, int))SimpleJSON::JSONArray.get_ItemOffset;

SimpleJSON::JSONArray.set_ItemOffset = getRealOffset(0x62599C);
SimpleJSON::JSONArray.set_Item = (void(*)(void*, int, void *))SimpleJSON::JSONArray.set_ItemOffset;

SimpleJSON::JSONArray.get_Item1Offset = getRealOffset(0x625A6C);
SimpleJSON::JSONArray.get_Item1 = (void *(*)(void*, monoString*))SimpleJSON::JSONArray.get_Item1Offset;

SimpleJSON::JSONArray.set_Item1Offset = getRealOffset(0x625AE0);
SimpleJSON::JSONArray.set_Item1 = (void(*)(void*, monoString*, void *))SimpleJSON::JSONArray.set_Item1Offset;

SimpleJSON::JSONArray.get_CountOffset = getRealOffset(0x625B54);
SimpleJSON::JSONArray.get_Count = (int(*)(void*))SimpleJSON::JSONArray.get_CountOffset;

SimpleJSON::JSONArray.AddOffset = getRealOffset(0x625BAC);
SimpleJSON::JSONArray.Add = (void(*)(void*, monoString*, void *))SimpleJSON::JSONArray.AddOffset;

SimpleJSON::JSONArray.RemoveOffset = getRealOffset(0x625C20);
SimpleJSON::JSONArray.Remove = (void *(*)(void*, int))SimpleJSON::JSONArray.RemoveOffset;

SimpleJSON::JSONArray.Remove1Offset = getRealOffset(0x625CF0);
SimpleJSON::JSONArray.Remove1 = (void *(*)(void*, void *))SimpleJSON::JSONArray.Remove1Offset;

SimpleJSON::JSONArray.get_ChildsOffset = getRealOffset(0x625D68);
SimpleJSON::JSONArray.GetEnumeratorOffset = getRealOffset(0x625E20);
SimpleJSON::JSONArray.GetEnumerator = (void *(*)(void*))SimpleJSON::JSONArray.GetEnumeratorOffset;

SimpleJSON::JSONArray.ToStringOffset = getRealOffset(0x625EC0);
SimpleJSON::JSONArray.ToString = (monoString *(*)(void*))SimpleJSON::JSONArray.ToStringOffset;

SimpleJSON::JSONArray.ToString1Offset = getRealOffset(0x62608C);
SimpleJSON::JSONArray.ToString1 = (monoString *(*)(void*, monoString*))SimpleJSON::JSONArray.ToString1Offset;

SimpleJSON::JSONArray.SerializeOffset = getRealOffset(0x6262D0);
SimpleJSON::JSONArray.Serialize = (void(*)(void*, void *))SimpleJSON::JSONArray.SerializeOffset;

SimpleJSON::JSONClass.get_ItemOffset = getRealOffset(0x626A28);
SimpleJSON::JSONClass.get_Item = (void *(*)(void*, monoString*))SimpleJSON::JSONClass.get_ItemOffset;

SimpleJSON::JSONClass.set_ItemOffset = getRealOffset(0x626B28);
SimpleJSON::JSONClass.set_Item = (void(*)(void*, monoString*, void *))SimpleJSON::JSONClass.set_ItemOffset;

SimpleJSON::JSONClass.get_Item1Offset = getRealOffset(0x626C00);
SimpleJSON::JSONClass.get_Item1 = (void *(*)(void*, int))SimpleJSON::JSONClass.get_Item1Offset;

SimpleJSON::JSONClass.set_Item1Offset = getRealOffset(0x626CB4);
SimpleJSON::JSONClass.set_Item1 = (void(*)(void*, int, void *))SimpleJSON::JSONClass.set_Item1Offset;

SimpleJSON::JSONClass.get_CountOffset = getRealOffset(0x626D94);
SimpleJSON::JSONClass.get_Count = (int(*)(void*))SimpleJSON::JSONClass.get_CountOffset;

SimpleJSON::JSONClass.AddOffset = getRealOffset(0x626E00);
SimpleJSON::JSONClass.Add = (void(*)(void*, monoString*, void *))SimpleJSON::JSONClass.AddOffset;

SimpleJSON::JSONClass.RemoveOffset = getRealOffset(0x626F7C);
SimpleJSON::JSONClass.Remove = (void *(*)(void*, monoString*))SimpleJSON::JSONClass.RemoveOffset;

SimpleJSON::JSONClass.Remove1Offset = getRealOffset(0x62705C);
SimpleJSON::JSONClass.Remove1 = (void *(*)(void*, int))SimpleJSON::JSONClass.Remove1Offset;

SimpleJSON::JSONClass.Remove2Offset = getRealOffset(0x62713C);
SimpleJSON::JSONClass.Remove2 = (void *(*)(void*, void *))SimpleJSON::JSONClass.Remove2Offset;

SimpleJSON::JSONClass.get_ChildsOffset = getRealOffset(0x627304);
SimpleJSON::JSONClass.GetEnumeratorOffset = getRealOffset(0x6273BC);
SimpleJSON::JSONClass.GetEnumerator = (void *(*)(void*))SimpleJSON::JSONClass.GetEnumeratorOffset;

SimpleJSON::JSONClass.ToStringOffset = getRealOffset(0x62745C);
SimpleJSON::JSONClass.ToString = (monoString *(*)(void*))SimpleJSON::JSONClass.ToStringOffset;

SimpleJSON::JSONClass.ToString1Offset = getRealOffset(0x6279BC);
SimpleJSON::JSONClass.ToString1 = (monoString *(*)(void*, monoString*))SimpleJSON::JSONClass.ToString1Offset;

SimpleJSON::JSONClass.SerializeOffset = getRealOffset(0x627E14);
SimpleJSON::JSONClass.Serialize = (void(*)(void*, void *))SimpleJSON::JSONClass.SerializeOffset;

SimpleJSON::JSONData.get_ValueOffset = getRealOffset(0x6287B4);
SimpleJSON::JSONData.get_Value = (monoString *(*)(void*))SimpleJSON::JSONData.get_ValueOffset;

SimpleJSON::JSONData.set_ValueOffset = getRealOffset(0x6287BC);
SimpleJSON::JSONData.set_Value = (void(*)(void*, monoString*))SimpleJSON::JSONData.set_ValueOffset;

SimpleJSON::JSONData.ctor1Offset = getRealOffset(0x6287E4);
SimpleJSON::JSONData.ctor1 = (void(*)(void*, float))SimpleJSON::JSONData.ctor1Offset;

SimpleJSON::JSONData.ctor3Offset = getRealOffset(0x628860);
SimpleJSON::JSONData.ctor3 = (void(*)(void*, bool))SimpleJSON::JSONData.ctor3Offset;

SimpleJSON::JSONData.ctor4Offset = getRealOffset(0x628894);
SimpleJSON::JSONData.ctor4 = (void(*)(void*, int))SimpleJSON::JSONData.ctor4Offset;

SimpleJSON::JSONData.ToStringOffset = getRealOffset(0x6288C8);
SimpleJSON::JSONData.ToString = (monoString *(*)(void*))SimpleJSON::JSONData.ToStringOffset;

SimpleJSON::JSONData.ToString1Offset = getRealOffset(0x628934);
SimpleJSON::JSONData.ToString1 = (monoString *(*)(void*, monoString*))SimpleJSON::JSONData.ToString1Offset;

SimpleJSON::JSONData.SerializeOffset = getRealOffset(0x6289A0);
SimpleJSON::JSONData.Serialize = (void(*)(void*, void *))SimpleJSON::JSONData.SerializeOffset;

SimpleJSON::JSONLazyCreator.ctor1Offset = getRealOffset(0x626B00);
SimpleJSON::JSONLazyCreator.ctor1 = (void(*)(void*, void *, monoString*))SimpleJSON::JSONLazyCreator.ctor1Offset;

SimpleJSON::JSONLazyCreator.SetOffset = getRealOffset(0x628CF8);
SimpleJSON::JSONLazyCreator.Set = (void(*)(void*, void *))SimpleJSON::JSONLazyCreator.SetOffset;

SimpleJSON::JSONLazyCreator.get_ItemOffset = getRealOffset(0x628D74);
SimpleJSON::JSONLazyCreator.get_Item = (void *(*)(void*, int))SimpleJSON::JSONLazyCreator.get_ItemOffset;

SimpleJSON::JSONLazyCreator.set_ItemOffset = getRealOffset(0x628DE8);
SimpleJSON::JSONLazyCreator.set_Item = (void(*)(void*, int, void *))SimpleJSON::JSONLazyCreator.set_ItemOffset;

SimpleJSON::JSONLazyCreator.get_Item1Offset = getRealOffset(0x628E7C);
SimpleJSON::JSONLazyCreator.get_Item1 = (void *(*)(void*, monoString*))SimpleJSON::JSONLazyCreator.get_Item1Offset;

SimpleJSON::JSONLazyCreator.set_Item1Offset = getRealOffset(0x628EF0);
SimpleJSON::JSONLazyCreator.set_Item1 = (void(*)(void*, monoString*, void *))SimpleJSON::JSONLazyCreator.set_Item1Offset;

SimpleJSON::JSONLazyCreator.AddOffset = getRealOffset(0x628F8C);
SimpleJSON::JSONLazyCreator.Add = (void(*)(void*, void *))SimpleJSON::JSONLazyCreator.AddOffset;

SimpleJSON::JSONLazyCreator.Add1Offset = getRealOffset(0x629020);
SimpleJSON::JSONLazyCreator.Add1 = (void(*)(void*, monoString*, void *))SimpleJSON::JSONLazyCreator.Add1Offset;

SimpleJSON::JSONLazyCreator.GetHashCodeOffset = getRealOffset(0x62910C);
SimpleJSON::JSONLazyCreator.GetHashCode = (int(*)(void*))SimpleJSON::JSONLazyCreator.GetHashCodeOffset;

SimpleJSON::JSONLazyCreator.ToStringOffset = getRealOffset(0x62911C);
SimpleJSON::JSONLazyCreator.ToString = (monoString *(*)(void*))SimpleJSON::JSONLazyCreator.ToStringOffset;

SimpleJSON::JSONLazyCreator.ToString1Offset = getRealOffset(0x62916C);
SimpleJSON::JSONLazyCreator.ToString1 = (monoString *(*)(void*, monoString*))SimpleJSON::JSONLazyCreator.ToString1Offset;

SimpleJSON::JSONLazyCreator.get_AsIntOffset = getRealOffset(0x6291BC);
SimpleJSON::JSONLazyCreator.get_AsInt = (int(*)(void*))SimpleJSON::JSONLazyCreator.get_AsIntOffset;

SimpleJSON::JSONLazyCreator.set_AsIntOffset = getRealOffset(0x629248);
SimpleJSON::JSONLazyCreator.set_AsInt = (void(*)(void*, int))SimpleJSON::JSONLazyCreator.set_AsIntOffset;

SimpleJSON::JSONLazyCreator.get_AsFloatOffset = getRealOffset(0x6292D4);
SimpleJSON::JSONLazyCreator.get_AsFloat = (float(*)(void*))SimpleJSON::JSONLazyCreator.get_AsFloatOffset;

SimpleJSON::JSONLazyCreator.set_AsFloatOffset = getRealOffset(0x629360);
SimpleJSON::JSONLazyCreator.set_AsFloat = (void(*)(void*, float))SimpleJSON::JSONLazyCreator.set_AsFloatOffset;

SimpleJSON::JSONLazyCreator.get_AsDoubleOffset = getRealOffset(0x6293EC);
SimpleJSON::JSONLazyCreator.get_AsBoolOffset = getRealOffset(0x629534);
SimpleJSON::JSONLazyCreator.get_AsBool = (bool(*)(void*))SimpleJSON::JSONLazyCreator.get_AsBoolOffset;

SimpleJSON::JSONLazyCreator.set_AsBoolOffset = getRealOffset(0x6295C0);
SimpleJSON::JSONLazyCreator.set_AsBool = (void(*)(void*, bool))SimpleJSON::JSONLazyCreator.set_AsBoolOffset;

SimpleJSON::JSONLazyCreator.get_AsArrayOffset = getRealOffset(0x62964C);
SimpleJSON::JSONLazyCreator.get_AsArray = (void *(*)(void*))SimpleJSON::JSONLazyCreator.get_AsArrayOffset;

SimpleJSON::JSONLazyCreator.get_AsObjectOffset = getRealOffset(0x6296BC);
SimpleJSON::JSONLazyCreator.get_AsObject = (void *(*)(void*))SimpleJSON::JSONLazyCreator.get_AsObjectOffset;

SimpleJSON::JSON.ParseOffset = getRealOffset(0x625094);
SimpleJSON::JSON.Parse = (void *(*)(monoString*))SimpleJSON::JSON.ParseOffset;

SimpleLightProbePlacer::LightProbeGroupControl.get_MergeDistanceOffset = getRealOffset(0x56E6F8);
SimpleLightProbePlacer::LightProbeGroupControl.get_MergeDistance = (float(*)(void*))SimpleLightProbePlacer::LightProbeGroupControl.get_MergeDistanceOffset;

SimpleLightProbePlacer::LightProbeGroupControl.set_MergeDistanceOffset = getRealOffset(0x56E700);
SimpleLightProbePlacer::LightProbeGroupControl.set_MergeDistance = (void(*)(void*, float))SimpleLightProbePlacer::LightProbeGroupControl.set_MergeDistanceOffset;

SimpleLightProbePlacer::LightProbeGroupControl.get_MergedProbesOffset = getRealOffset(0x56E708);
SimpleLightProbePlacer::LightProbeGroupControl.get_MergedProbes = (int(*)(void*))SimpleLightProbePlacer::LightProbeGroupControl.get_MergedProbesOffset;

SimpleLightProbePlacer::LightProbeGroupControl.get_UsePointLightsOffset = getRealOffset(0x56E710);
SimpleLightProbePlacer::LightProbeGroupControl.get_UsePointLights = (bool(*)(void*))SimpleLightProbePlacer::LightProbeGroupControl.get_UsePointLightsOffset;

SimpleLightProbePlacer::LightProbeGroupControl.set_UsePointLightsOffset = getRealOffset(0x56E718);
SimpleLightProbePlacer::LightProbeGroupControl.set_UsePointLights = (void(*)(void*, bool))SimpleLightProbePlacer::LightProbeGroupControl.set_UsePointLightsOffset;

SimpleLightProbePlacer::LightProbeGroupControl.get_PointLightRangeOffset = getRealOffset(0x56E720);
SimpleLightProbePlacer::LightProbeGroupControl.get_PointLightRange = (float(*)(void*))SimpleLightProbePlacer::LightProbeGroupControl.get_PointLightRangeOffset;

SimpleLightProbePlacer::LightProbeGroupControl.set_PointLightRangeOffset = getRealOffset(0x56E728);
SimpleLightProbePlacer::LightProbeGroupControl.set_PointLightRange = (void(*)(void*, float))SimpleLightProbePlacer::LightProbeGroupControl.set_PointLightRangeOffset;

SimpleLightProbePlacer::LightProbeGroupControl.get_LightProbeGroupOffset = getRealOffset(0x56E730);
SimpleLightProbePlacer::LightProbeGroupControl.get_LightProbeGroup = (void *(*)(void*))SimpleLightProbePlacer::LightProbeGroupControl.get_LightProbeGroupOffset;

SimpleLightProbePlacer::LightProbeGroupControl.DeleteAllOffset = getRealOffset(0x56E7E0);
SimpleLightProbePlacer::LightProbeGroupControl.DeleteAll = (void(*)(void*))SimpleLightProbePlacer::LightProbeGroupControl.DeleteAllOffset;

SimpleLightProbePlacer::LightProbeGroupControl.CreateOffset = getRealOffset(0x56E7EC);
SimpleLightProbePlacer::LightProbeGroupControl.Create = (void(*)(void*))SimpleLightProbePlacer::LightProbeGroupControl.CreateOffset;

SimpleLightProbePlacer::LightProbeGroupControl.MergeOffset = getRealOffset(0x56F548);
SimpleLightProbePlacer::LightProbeGroupControl.Merge = (void(*)(void*))SimpleLightProbePlacer::LightProbeGroupControl.MergeOffset;

SimpleLightProbePlacer::LightProbeGroupControl.CreatePositionsOffset = getRealOffset(0x56E888);
SimpleLightProbePlacer::LightProbeGroupControl.CreateAroundPointLightsOffset = getRealOffset(0x56E9D8);
SimpleLightProbePlacer::LightProbeGroupControl.CreatePositionsAroundOffset = getRealOffset(0x56F674);
SimpleLightProbePlacer::LightProbeGroupControl.Mergeb__20_0Offset = getRealOffset(0x56FA6C);
SimpleLightProbePlacer::LightProbeGroupControl.Mergeb__20_0 = (Vector3 (*)(void*, Vector3))SimpleLightProbePlacer::LightProbeGroupControl.Mergeb__20_0Offset;

SimpleLightProbePlacer::LightProbeVolume.get_TypeOffset = getRealOffset(0x5701FC);
SimpleLightProbePlacer::LightProbeVolume.get_Type = (int (*)(void*))SimpleLightProbePlacer::LightProbeVolume.get_TypeOffset;

SimpleLightProbePlacer::LightProbeVolume.set_TypeOffset = getRealOffset(0x570204);
SimpleLightProbePlacer::LightProbeVolume.set_Type = (void(*)(void*, int))SimpleLightProbePlacer::LightProbeVolume.set_TypeOffset;

SimpleLightProbePlacer::LightProbeVolume.get_DensityOffset = getRealOffset(0x57020C);
SimpleLightProbePlacer::LightProbeVolume.get_Density = (Vector3 (*)(void*))SimpleLightProbePlacer::LightProbeVolume.get_DensityOffset;

SimpleLightProbePlacer::LightProbeVolume.set_DensityOffset = getRealOffset(0x570238);
SimpleLightProbePlacer::LightProbeVolume.set_Density = (void(*)(void*, Vector3))SimpleLightProbePlacer::LightProbeVolume.set_DensityOffset;

SimpleLightProbePlacer::LightProbeVolume.get_EditorColorOffset = getRealOffset(0x570268);
SimpleLightProbePlacer::LightProbeVolume.get_EditorColor = (Color (*)())SimpleLightProbePlacer::LightProbeVolume.get_EditorColorOffset;

SimpleLightProbePlacer::LightProbeVolume.CreatePositionsOffset = getRealOffset(0x56F66C);
SimpleLightProbePlacer::LightProbeVolume.CreatePositions1Offset = getRealOffset(0x5702A0);
SimpleLightProbePlacer::LightProbeVolume.CreatePositionsFixedOffset = getRealOffset(0x57073C);
SimpleLightProbePlacer::LightProbeVolume.CreatePositionsFloatOffset = getRealOffset(0x5703A8);
SimpleLightProbePlacer::TransformVolume.get_VolumeOffset = getRealOffset(0x570C0C);
SimpleLightProbePlacer::TransformVolume.get_Volume = (int (*)(void*))SimpleLightProbePlacer::TransformVolume.get_VolumeOffset;

SimpleLightProbePlacer::TransformVolume.set_VolumeOffset = getRealOffset(0x570C24);
SimpleLightProbePlacer::TransformVolume.set_Volume = (void(*)(void*, int))SimpleLightProbePlacer::TransformVolume.set_VolumeOffset;

SimpleLightProbePlacer::TransformVolume.get_OriginOffset = getRealOffset(0x570380);
SimpleLightProbePlacer::TransformVolume.get_Origin = (Vector3 (*)(void*))SimpleLightProbePlacer::TransformVolume.get_OriginOffset;

SimpleLightProbePlacer::TransformVolume.get_SizeOffset = getRealOffset(0x570394);
SimpleLightProbePlacer::TransformVolume.get_Size = (Vector3 (*)(void*))SimpleLightProbePlacer::TransformVolume.get_SizeOffset;

SimpleLightProbePlacer::TransformVolume.IsInVolume1Offset = getRealOffset(0x571114);
SimpleLightProbePlacer::TransformVolume.IsInVolume1 = (bool(*)(void*, Vector3))SimpleLightProbePlacer::TransformVolume.IsInVolume1Offset;

SimpleLightProbePlacer::TransformVolume.GetCornersOffset = getRealOffset(0x57176C);
SimpleLightProbePlacer::TransformVolume.GetBoundsOffset = getRealOffset(0x570CBC);
SimpleLightProbePlacer::TransformVolume.GetBounds = (int (*)(void*))SimpleLightProbePlacer::TransformVolume.GetBoundsOffset;

SimpleLightProbePlacer::TransformVolume.GetGameObjectsInBoundsOffset = getRealOffset(0x571C20);
SimpleLightProbePlacer::TransformVolume.GetSideDirectionOffset = getRealOffset(0x5711C8);
SimpleLightProbePlacer::TransformVolume.GetSideDirection = (Vector3 (*)(void*, int))SimpleLightProbePlacer::TransformVolume.GetSideDirectionOffset;

SimpleLightProbePlacer::TransformVolume.GetSidePositionOffset = getRealOffset(0x571458);
SimpleLightProbePlacer::TransformVolume.GetSidePosition = (Vector3 (*)(void*, int))SimpleLightProbePlacer::TransformVolume.GetSidePositionOffset;

SimpleLightProbePlacer::TransformVolume.GetSizeAxisOffset = getRealOffset(0x571FE4);
SimpleLightProbePlacer::TransformVolume.GetSizeAxis = (float(*)(void*, int))SimpleLightProbePlacer::TransformVolume.GetSizeAxisOffset;

SimpleLightProbePlacer::TransformVolume.IsOnBorderb__9_0Offset = getRealOffset(0x572030);
SimpleLightProbePlacer::TransformVolume.IsOnBorderb__9_0 = (bool(*)(void*, Vector3))SimpleLightProbePlacer::TransformVolume.IsOnBorderb__9_0Offset;

SimpleLightProbePlacer::Volume.get_OriginOffset = getRealOffset(0x3D4714);
SimpleLightProbePlacer::Volume.get_Origin = (Vector3 (*)(void*))SimpleLightProbePlacer::Volume.get_OriginOffset;

SimpleLightProbePlacer::Volume.get_SizeOffset = getRealOffset(0x3D4728);
SimpleLightProbePlacer::Volume.get_Size = (Vector3 (*)(void*))SimpleLightProbePlacer::Volume.get_SizeOffset;

SimpleLightProbePlacer::Volume.op_EqualityOffset = getRealOffset(0x57219C);
SimpleLightProbePlacer::Volume.op_Equality = (bool(*)(int, int))SimpleLightProbePlacer::Volume.op_EqualityOffset;

SimpleLightProbePlacer::Volume.op_InequalityOffset = getRealOffset(0x572318);
SimpleLightProbePlacer::Volume.op_Inequality = (bool(*)(int, int))SimpleLightProbePlacer::Volume.op_InequalityOffset;

SimpleLightProbePlacer::Volume.EqualsOffset = getRealOffset(0x3D4758);
SimpleLightProbePlacer::Volume.Equals = (bool(*)(void*, int))SimpleLightProbePlacer::Volume.EqualsOffset;

SimpleLightProbePlacer::Volume.GetHashCodeOffset = getRealOffset(0x3D4790);
SimpleLightProbePlacer::Volume.GetHashCode = (int(*)(void*))SimpleLightProbePlacer::Volume.GetHashCodeOffset;

SimpleLightProbePlacer::Volume.ToStringOffset = getRealOffset(0x3D47F4);
SimpleLightProbePlacer::Volume.ToString = (monoString *(*)(void*))SimpleLightProbePlacer::Volume.ToStringOffset;

SystemCollections::Fa.faConvertOffset = getRealOffset(0x58C9B8);
SystemCollections::Fa.faConvert = (monoString *(*)(monoString*))SystemCollections::Fa.faConvertOffset;

SystemCollections::Fa.faConvertLineOffset = getRealOffset(0x58CBB8);
SystemCollections::Fa.faConvertLine = (monoString *(*)(monoString*))SystemCollections::Fa.faConvertLineOffset;

SystemCollections::Fa.convertCharOffset = getRealOffset(0x58D0B0);
UnityEngineAnalyticsExperimental::AnalyticsEvent.get_sdkVersionOffset = getRealOffset(0xB38150);
UnityEngineAnalyticsExperimental::AnalyticsEvent.get_sdkVersion = (monoString *(*)())UnityEngineAnalyticsExperimental::AnalyticsEvent.get_sdkVersionOffset;

UnityEngineAnalyticsExperimental::AnalyticsEvent.get_debugModeOffset = getRealOffset(0xB381C8);
UnityEngineAnalyticsExperimental::AnalyticsEvent.get_debugMode = (bool(*)())UnityEngineAnalyticsExperimental::AnalyticsEvent.get_debugModeOffset;

UnityEngineAnalyticsExperimental::AnalyticsEvent.set_debugModeOffset = getRealOffset(0xB38240);
UnityEngineAnalyticsExperimental::AnalyticsEvent.set_debugMode = (void(*)(bool))UnityEngineAnalyticsExperimental::AnalyticsEvent.set_debugModeOffset;

UnityEngineAnalyticsExperimental::AnalyticsEvent.OnValidationFailedOffset = getRealOffset(0xB382BC);
UnityEngineAnalyticsExperimental::AnalyticsEvent.OnValidationFailed = (void(*)(monoString*))UnityEngineAnalyticsExperimental::AnalyticsEvent.OnValidationFailedOffset;

UnityEngineAnalyticsExperimental::AnalyticsEvent.SplitCamelCaseOffset = getRealOffset(0xB38500);
UnityEngineAnalyticsExperimental::AnalyticsEvent.SplitCamelCase = (monoString *(*)(monoString*))UnityEngineAnalyticsExperimental::AnalyticsEvent.SplitCamelCaseOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.get_payloadOffset = getRealOffset(0xB40348);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.get_payload = (void *(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.get_payloadOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.TriggerEventOffset = getRealOffset(0xB40350);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.TriggerEvent = (void(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.TriggerEventOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.SendEventOffset = getRealOffset(0xB40354);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.SendEvent = (int (*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.SendEventOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.AwakeOffset = getRealOffset(0xB4088C);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.Awake = (void(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.AwakeOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.StartOffset = getRealOffset(0xB408E0);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.Start = (void(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.StartOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnEnableOffset = getRealOffset(0xB409E8);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnEnable = (void(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnEnableOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnDisableOffset = getRealOffset(0xB40A3C);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnDisable = (void(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnDisableOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnApplicationPauseOffset = getRealOffset(0xB40A90);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnApplicationPause = (void(*)(void*, bool))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnApplicationPauseOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnDestroyOffset = getRealOffset(0xB40B08);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnDestroy = (void(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.OnDestroyOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.TimedTriggerOffset = getRealOffset(0xB40968);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.TimedTrigger = (void *(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventTracker.TimedTriggerOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_requirementTypeOffset = getRealOffset(0xB401A8);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_requirementType = (int (*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_requirementTypeOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_groupIDOffset = getRealOffset(0xB401B0);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_groupID = (monoString *(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_groupIDOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_valuePropertyOffset = getRealOffset(0xB401B8);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_valueProperty = (void *(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_valuePropertyOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_nameOffset = getRealOffset(0xB401F0);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_name = (monoString *(*)(void*))UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_nameOffset;

UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParam.get_valueOffset = getRealOffset(0xB40218);
UnityEngineAnalyticsExperimentalTracker::AnalyticsEventParamListContainer.get_parametersOffset = getRealOffset(0xB402B4);
UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.get_parametersOffset = getRealOffset(0xB41D24);
UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.get_parameters = (void *(*)(void*))UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.get_parametersOffset;

UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.get_nameOffset = getRealOffset(0xB41D2C);
UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.get_name = (monoString *(*)(void*))UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.get_nameOffset;

UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.set_nameOffset = getRealOffset(0xB41D34);
UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.set_name = (void(*)(void*, monoString*))UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.set_nameOffset;

UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.SendOffset = getRealOffset(0xB41D3C);
UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.Send = (int (*)(void*))UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.SendOffset;

UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.GetParametersOffset = getRealOffset(0xB4258C);
UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.IsCustomDataValidOffset = getRealOffset(0xB41EB8);
UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.IsCustomDataValid = (bool(*)(void*))UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.IsCustomDataValidOffset;

UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.IsRequiredDataValidOffset = getRealOffset(0xB42000);
UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.IsRequiredDataValid = (bool(*)(void*))UnityEngineAnalyticsExperimentalTracker::StandardEventPayload.IsRequiredDataValidOffset;

UnityEngineAnalyticsExperimentalTracker::TrackableField.GetValueOffset = getRealOffset(0xB42AE4);
UnityEngineAnalyticsExperimentalTracker::ValueProperty.get_valueTypeOffset = getRealOffset(0xB43484);
UnityEngineAnalyticsExperimentalTracker::ValueProperty.get_valueType = (monoString *(*)(void*))UnityEngineAnalyticsExperimentalTracker::ValueProperty.get_valueTypeOffset;

UnityEngineAnalyticsExperimentalTracker::ValueProperty.set_valueTypeOffset = getRealOffset(0xB4348C);
UnityEngineAnalyticsExperimentalTracker::ValueProperty.set_valueType = (void(*)(void*, monoString*))UnityEngineAnalyticsExperimentalTracker::ValueProperty.set_valueTypeOffset;

UnityEngineAnalyticsExperimentalTracker::ValueProperty.get_propertyValueOffset = getRealOffset(0xB4023C);
UnityEngineAnalyticsExperimentalTracker::ValueProperty.get_propertyValue = (monoString *(*)(void*))UnityEngineAnalyticsExperimentalTracker::ValueProperty.get_propertyValueOffset;

UnityEngineAnalyticsExperimentalTracker::ValueProperty.get_targetOffset = getRealOffset(0xB43494);
UnityEngineAnalyticsExperimentalTracker::ValueProperty.get_target = (void *(*)(void*))UnityEngineAnalyticsExperimentalTracker::ValueProperty.get_targetOffset;

UnityEngineAnalyticsExperimentalTracker::ValueProperty.IsValidOffset = getRealOffset(0xB427E8);
UnityEngineAnalyticsExperimentalTracker::ValueProperty.IsValid = (bool(*)(void*))UnityEngineAnalyticsExperimentalTracker::ValueProperty.IsValidOffset;

UnityEngineAnalyticsExperimentalTracker::TriggerListContainer.get_rulesOffset = getRealOffset(0xB42DAC);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_triggerTypeOffset = getRealOffset(0xB41064);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_triggerType = (int (*)(void*))UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_triggerTypeOffset;

UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_lifecycleEventOffset = getRealOffset(0xB4106C);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_lifecycleEvent = (int (*)(void*))UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_lifecycleEventOffset;

UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_initTimeOffset = getRealOffset(0xB41074);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_initTime = (float(*)(void*))UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_initTimeOffset;

UnityEngineAnalyticsExperimentalTracker::EventTrigger.set_initTimeOffset = getRealOffset(0xB4107C);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.set_initTime = (void(*)(void*, float))UnityEngineAnalyticsExperimentalTracker::EventTrigger.set_initTimeOffset;

UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_repeatTimeOffset = getRealOffset(0xB41084);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_repeatTime = (float(*)(void*))UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_repeatTimeOffset;

UnityEngineAnalyticsExperimentalTracker::EventTrigger.set_repeatTimeOffset = getRealOffset(0xB4108C);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.set_repeatTime = (void(*)(void*, float))UnityEngineAnalyticsExperimentalTracker::EventTrigger.set_repeatTimeOffset;

UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_repetitionsOffset = getRealOffset(0xB41094);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_repetitions = (int(*)(void*))UnityEngineAnalyticsExperimentalTracker::EventTrigger.get_repetitionsOffset;

UnityEngineAnalyticsExperimentalTracker::EventTrigger.set_repetitionsOffset = getRealOffset(0xB4109C);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.set_repetitions = (void(*)(void*, int))UnityEngineAnalyticsExperimentalTracker::EventTrigger.set_repetitionsOffset;

UnityEngineAnalyticsExperimentalTracker::EventTrigger.AddRuleOffset = getRealOffset(0xB41128);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.AddRule = (void(*)(void*))UnityEngineAnalyticsExperimentalTracker::EventTrigger.AddRuleOffset;

UnityEngineAnalyticsExperimentalTracker::EventTrigger.RemoveRuleOffset = getRealOffset(0xB411D0);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.RemoveRule = (void(*)(void*, int))UnityEngineAnalyticsExperimentalTracker::EventTrigger.RemoveRuleOffset;

UnityEngineAnalyticsExperimentalTracker::EventTrigger.TestOffset = getRealOffset(0xB403C0);
UnityEngineAnalyticsExperimentalTracker::EventTrigger.Test = (bool(*)(void*, void *))UnityEngineAnalyticsExperimentalTracker::EventTrigger.TestOffset;

UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestOffset = getRealOffset(0xB42DC4);
UnityEngineAnalyticsExperimentalTracker::TriggerRule.Test = (bool(*)(void*))UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestOffset;

UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestByEnumOffset = getRealOffset(0xB4315C);
UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestByEnum = (bool(*)(void*, monoString*))UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestByEnumOffset;

UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestByStringOffset = getRealOffset(0xB42DF0);
UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestByString = (bool(*)(void*, monoString*))UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestByStringOffset;

UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestByBoolOffset = getRealOffset(0xB42E94);
UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestByBool = (bool(*)(void*, bool))UnityEngineAnalyticsExperimentalTracker::TriggerRule.TestByBoolOffset;

UnityEngineUI::LetterSpacing.get_spacingOffset = getRealOffset(0xB4678C);
UnityEngineUI::LetterSpacing.get_spacing = (float(*)(void*))UnityEngineUI::LetterSpacing.get_spacingOffset;

UnityEngineUI::LetterSpacing.set_spacingOffset = getRealOffset(0xB46794);
UnityEngineUI::LetterSpacing.set_spacing = (void(*)(void*, float))UnityEngineUI::LetterSpacing.set_spacingOffset;

UnityEngineUI::LetterSpacing.ModifyMeshOffset = getRealOffset(0xB46884);
UnityEngineUI::LetterSpacing.ModifyMesh = (void(*)(void*, void *))UnityEngineUI::LetterSpacing.ModifyMeshOffset;

UnityEngineUIExtensions::ScrollSnap.add_onPageChangeOffset = getRealOffset(0xB43508);
UnityEngineUIExtensions::ScrollSnap.add_onPageChange = (void(*)(void*, void *))UnityEngineUIExtensions::ScrollSnap.add_onPageChangeOffset;

UnityEngineUIExtensions::ScrollSnap.remove_onPageChangeOffset = getRealOffset(0xB435B8);
UnityEngineUIExtensions::ScrollSnap.remove_onPageChange = (void(*)(void*, void *))UnityEngineUIExtensions::ScrollSnap.remove_onPageChangeOffset;

UnityEngineUIExtensions::ScrollSnap.set_AutoScrollTimeOffset = getRealOffset(0xB43668);
UnityEngineUIExtensions::ScrollSnap.set_AutoScrollTime = (void(*)(void*, float))UnityEngineUIExtensions::ScrollSnap.set_AutoScrollTimeOffset;

UnityEngineUIExtensions::ScrollSnap.get_AutoScrollTimeOffset = getRealOffset(0xB436F8);
UnityEngineUIExtensions::ScrollSnap.get_AutoScrollTime = (float(*)(void*))UnityEngineUIExtensions::ScrollSnap.get_AutoScrollTimeOffset;

UnityEngineUIExtensions::ScrollSnap.StartOffset = getRealOffset(0xB43700);
UnityEngineUIExtensions::ScrollSnap.Start = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.StartOffset;

UnityEngineUIExtensions::ScrollSnap.CancelAndInvokeAutoScrollOffset = getRealOffset(0xB43670);
UnityEngineUIExtensions::ScrollSnap.CancelAndInvokeAutoScroll = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.CancelAndInvokeAutoScrollOffset;

UnityEngineUIExtensions::ScrollSnap.DoAutoScrollOffset = getRealOffset(0xB450E4);
UnityEngineUIExtensions::ScrollSnap.DoAutoScroll = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.DoAutoScrollOffset;

UnityEngineUIExtensions::ScrollSnap.OnPageButtonChangedOffset = getRealOffset(0xB45298);
UnityEngineUIExtensions::ScrollSnap.OnPageButtonChanged = (void(*)(void*, bool))UnityEngineUIExtensions::ScrollSnap.OnPageButtonChangedOffset;

UnityEngineUIExtensions::ScrollSnap.UpdateListItemsSizeOffset = getRealOffset(0xB43C40);
UnityEngineUIExtensions::ScrollSnap.UpdateListItemsSize = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.UpdateListItemsSizeOffset;

UnityEngineUIExtensions::ScrollSnap.UpdateListItemPositionsOffset = getRealOffset(0xB445B0);
UnityEngineUIExtensions::ScrollSnap.UpdateListItemPositions = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.UpdateListItemPositionsOffset;

UnityEngineUIExtensions::ScrollSnap.ResetPageOffset = getRealOffset(0xB455C0);
UnityEngineUIExtensions::ScrollSnap.ResetPage = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.ResetPageOffset;

UnityEngineUIExtensions::ScrollSnap.UpdateScrollbarOffset = getRealOffset(0xB453B8);
UnityEngineUIExtensions::ScrollSnap.UpdateScrollbar = (void(*)(void*, bool))UnityEngineUIExtensions::ScrollSnap.UpdateScrollbarOffset;

UnityEngineUIExtensions::ScrollSnap.LateUpdateOffset = getRealOffset(0xB45688);
UnityEngineUIExtensions::ScrollSnap.LateUpdate = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.LateUpdateOffset;

UnityEngineUIExtensions::ScrollSnap.SetScreenOffset = getRealOffset(0xB451CC);
UnityEngineUIExtensions::ScrollSnap.SetScreen = (void(*)(void*, int))UnityEngineUIExtensions::ScrollSnap.SetScreenOffset;

UnityEngineUIExtensions::ScrollSnap.NextScreenOffset = getRealOffset(0xB45128);
UnityEngineUIExtensions::ScrollSnap.NextScreen = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.NextScreenOffset;

UnityEngineUIExtensions::ScrollSnap.PreviousScreenOffset = getRealOffset(0xB45904);
UnityEngineUIExtensions::ScrollSnap.PreviousScreen = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.PreviousScreenOffset;

UnityEngineUIExtensions::ScrollSnap.NextScreenCommandOffset = getRealOffset(0xB459A0);
UnityEngineUIExtensions::ScrollSnap.NextScreenCommand = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.NextScreenCommandOffset;

UnityEngineUIExtensions::ScrollSnap.PrevScreenCommandOffset = getRealOffset(0xB45A98);
UnityEngineUIExtensions::ScrollSnap.PrevScreenCommand = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.PrevScreenCommandOffset;

UnityEngineUIExtensions::ScrollSnap.CurrentPageOffset = getRealOffset(0xB44E14);
UnityEngineUIExtensions::ScrollSnap.CurrentPage = (int(*)(void*))UnityEngineUIExtensions::ScrollSnap.CurrentPageOffset;

UnityEngineUIExtensions::ScrollSnap.SetLerpOffset = getRealOffset(0xB45B8C);
UnityEngineUIExtensions::ScrollSnap.SetLerp = (void(*)(void*, bool))UnityEngineUIExtensions::ScrollSnap.SetLerpOffset;

UnityEngineUIExtensions::ScrollSnap.ChangePageOffset = getRealOffset(0xB45B94);
UnityEngineUIExtensions::ScrollSnap.ChangePage = (void(*)(void*, int))UnityEngineUIExtensions::ScrollSnap.ChangePageOffset;

UnityEngineUIExtensions::ScrollSnap.SetPageButtonActiveOffset = getRealOffset(0xB45C1C);
UnityEngineUIExtensions::ScrollSnap.SetPageButtonActive = (void(*)(void*, int))UnityEngineUIExtensions::ScrollSnap.SetPageButtonActiveOffset;

UnityEngineUIExtensions::ScrollSnap.PageChangedOffset = getRealOffset(0xB44FA0);
UnityEngineUIExtensions::ScrollSnap.PageChanged = (void(*)(void*, int))UnityEngineUIExtensions::ScrollSnap.PageChangedOffset;

UnityEngineUIExtensions::ScrollSnap.OnBeginDragOffset = getRealOffset(0xB45FAC);
UnityEngineUIExtensions::ScrollSnap.OnBeginDrag = (void(*)(void*, void *))UnityEngineUIExtensions::ScrollSnap.OnBeginDragOffset;

UnityEngineUIExtensions::ScrollSnap.OnEndDragOffset = getRealOffset(0xB460C0);
UnityEngineUIExtensions::ScrollSnap.OnEndDrag = (void(*)(void*, void *))UnityEngineUIExtensions::ScrollSnap.OnEndDragOffset;

UnityEngineUIExtensions::ScrollSnap.OnDragOffset = getRealOffset(0xB46264);
UnityEngineUIExtensions::ScrollSnap.OnDrag = (void(*)(void*, void *))UnityEngineUIExtensions::ScrollSnap.OnDragOffset;

UnityEngineUIExtensions::ScrollSnap.StartScreenChangeOffset = getRealOffset(0xB46294);
UnityEngineUIExtensions::ScrollSnap.StartScreenChange = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.StartScreenChangeOffset;

UnityEngineUIExtensions::ScrollSnap.Startb__42_0Offset = getRealOffset(0xB462C8);
UnityEngineUIExtensions::ScrollSnap.Startb__42_0 = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.Startb__42_0Offset;

UnityEngineUIExtensions::ScrollSnap.Startb__42_1Offset = getRealOffset(0xB462CC);
UnityEngineUIExtensions::ScrollSnap.Startb__42_1 = (void(*)(void*))UnityEngineUIExtensions::ScrollSnap.Startb__42_1Offset;

UnityEngineUIExtensions::ScrollSnap.Startb__42_2Offset = getRealOffset(0xB462D0);
UnityEngineUIExtensions::ScrollSnap.Startb__42_2 = (void(*)(void*, bool))UnityEngineUIExtensions::ScrollSnap.Startb__42_2Offset;

UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnBeginDragOffset = getRealOffset(0xB46388);
UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnBeginDrag = (void(*)(void*, void *))UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnBeginDragOffset;

UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnDragOffset = getRealOffset(0xB464D8);
UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnDrag = (void(*)(void*, void *))UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnDragOffset;

UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnEndDragOffset = getRealOffset(0xB465A4);
UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnEndDrag = (void(*)(void*, void *))UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnEndDragOffset;

UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnPointerDownOffset = getRealOffset(0xB46774);
UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnPointerDown = (void(*)(void*, void *))UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnPointerDownOffset;

UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnPointerUpOffset = getRealOffset(0xB46778);
UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnPointerUp = (void(*)(void*, void *))UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnPointerUpOffset;

UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnScrollBarDownOffset = getRealOffset(0xB4638C);
UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnScrollBarDown = (void(*)(void*))UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnScrollBarDownOffset;

UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnScrollBarUpOffset = getRealOffset(0xB465A8);
UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnScrollBarUp = (void(*)(void*))UnityEngineUIExtensions::ScrollSnapScrollbarHelper.OnScrollBarUpOffset;

UnityFBXExporter::FBXExporter.ExportGameObjToFBXOffset = getRealOffset(0xB47E2C);
UnityFBXExporter::FBXExporter.ExportGameObjToFBX = (bool(*)(void *, monoString*, bool, bool))UnityFBXExporter::FBXExporter.ExportGameObjToFBXOffset;

UnityFBXExporter::FBXExporter.get_VersionInformationOffset = getRealOffset(0xB4B7EC);
UnityFBXExporter::FBXExporter.get_VersionInformation = (monoString *(*)())UnityFBXExporter::FBXExporter.get_VersionInformationOffset;

UnityFBXExporter::FBXExporter.GetRandomFBXIdOffset = getRealOffset(0xB4B83C);
UnityFBXExporter::FBXExporter.MeshToStringOffset = getRealOffset(0xB47F94);
UnityFBXExporter::FBXExporter.MeshToString = (monoString *(*)(void *, monoString*, bool, bool))UnityFBXExporter::FBXExporter.MeshToStringOffset;

UnityFBXExporter::FBXExporter.CopyComplexMaterialsToPathOffset = getRealOffset(0xB47F90);
UnityFBXExporter::FBXExporter.CopyComplexMaterialsToPath = (void(*)(void *, monoString*, bool, monoString*, monoString*))UnityFBXExporter::FBXExporter.CopyComplexMaterialsToPathOffset;

UnityFBXExporter::FBXExporter.CopyAndRenameAssetOffset = getRealOffset(0xB50838);
UnityFBXExporter::FBXExporter.CopyAndRenameAsset = (bool(*)(void *, monoString*, monoString*))UnityFBXExporter::FBXExporter.CopyAndRenameAssetOffset;

UnityFBXExporter::FBXExporter.GetFileNameOffset = getRealOffset(0xB50840);
UnityFBXExporter::FBXExporter.GetFileName = (monoString *(*)(monoString*))UnityFBXExporter::FBXExporter.GetFileNameOffset;

UnityFBXExporter::FBXExporter.CopyTexturesAndAssignCopiesToMaterialOffset = getRealOffset(0xB508C4);
UnityFBXExporter::FBXExporter.CopyTexturesAndAssignCopiesToMaterial = (void *(*)(void *, monoString*))UnityFBXExporter::FBXExporter.CopyTexturesAndAssignCopiesToMaterialOffset;

UnityFBXExporter::FBXExporter.GetTextureUpdateMaterialWithPathOffset = getRealOffset(0xB50C20);
UnityFBXExporter::FBXExporter.GetTextureUpdateMaterialWithPath = (void(*)(void *, monoString*, monoString*))UnityFBXExporter::FBXExporter.GetTextureUpdateMaterialWithPathOffset;

UnityFBXExporter::FBXExporter.CopyAndRenameAssetReturnObjectOffset = getRealOffset(0xB50D4C);
UnityFBXExporter::FBXExporter.CopyAndRenameAssetReturnObject = (void *(*)(void *, monoString*, monoString*))UnityFBXExporter::FBXExporter.CopyAndRenameAssetReturnObjectOffset;

UnityStandardAssetsCrossPlatformInput::ActualJoystick.AwakeOffset = getRealOffset(0xB510F4);
UnityStandardAssetsCrossPlatformInput::ActualJoystick.Awake = (void(*)(void*))UnityStandardAssetsCrossPlatformInput::ActualJoystick.AwakeOffset;

UnityStandardAssetsCrossPlatformInput::ActualJoystick.RefreshAimingJoystickEnabledOffset = getRealOffset(0xB5124C);
UnityStandardAssetsCrossPlatformInput::ActualJoystick.RefreshAimingJoystickEnabled = (void(*)(void*))UnityStandardAssetsCrossPlatformInput::ActualJoystick.RefreshAimingJoystickEnabledOffset;

UnityStandardAssetsCrossPlatformInput::ActualJoystick.StartOffset = getRealOffset(0xB512EC);
UnityStandardAssetsCrossPlatformInput::ActualJoystick.Start = (void(*)(void*))UnityStandardAssetsCrossPlatformInput::ActualJoystick.StartOffset;

UnityStandardAssetsCrossPlatformInput::ActualJoystick.SwitchJoystickTypeOffset = getRealOffset(0xB51628);
UnityStandardAssetsCrossPlatformInput::ActualJoystick.SwitchJoystickType = (void(*)(void*, bool, int))UnityStandardAssetsCrossPlatformInput::ActualJoystick.SwitchJoystickTypeOffset;

UnityStandardAssetsCrossPlatformInput::ActualJoystick.UpdateVirtualAxesOffset = getRealOffset(0xB517EC);
UnityStandardAssetsCrossPlatformInput::ActualJoystick.UpdateVirtualAxes = (void(*)(void*, Vector3))UnityStandardAssetsCrossPlatformInput::ActualJoystick.UpdateVirtualAxesOffset;

UnityStandardAssetsCrossPlatformInput::ActualJoystick.CreateVirtualAxesOffset = getRealOffset(0xB514AC);
UnityStandardAssetsCrossPlatformInput::ActualJoystick.CreateVirtualAxes = (void(*)(void*))UnityStandardAssetsCrossPlatformInput::ActualJoystick.CreateVirtualAxesOffset;

UnityStandardAssetsCrossPlatformInput::ActualJoystick.IsPointInRangeOffset = getRealOffset(0xB5195C);
UnityStandardAssetsCrossPlatformInput::ActualJoystick.IsPointInRange = (bool(*)(void*, Vector2))UnityStandardAssetsCrossPlatformInput::ActualJoystick.IsPointInRangeOffset;

UnityStandardAssetsCrossPlatformInput::ActualJoystick.UpdateFastOffset = getRealOffset(0xB51B04);
UnityStandardAssetsCrossPlatformInput::ActualJoystick.UpdateFast = (void(*)(void*))UnityStandardAssetsCrossPlatformInput::ActualJoystick.UpdateFastOffset;

UnityStandardAssetsCrossPlatformInput::ActualJoystick.moveJoystickOffset = getRealOffset(0xB52258);
UnityStandardAssetsCrossPlatformInput::ActualJoystick.moveJoystick = (void(*)(void*, int))UnityStandardAssetsCrossPlatformInput::ActualJoystick.moveJoystickOffset;

UnityStandardAssetsCrossPlatformInput::ActualJoystick.OnDestroyOffset = getRealOffset(0xB52548);
UnityStandardAssetsCrossPlatformInput::ActualJoystick.OnDestroy = (void(*)(void*))UnityStandardAssetsCrossPlatformInput::ActualJoystick.OnDestroyOffset;

UnityStandardAssetsImageEffects::Antialiasing.CurrentAAMaterialOffset = getRealOffset(0xB52844);
UnityStandardAssetsImageEffects::Antialiasing.CurrentAAMaterial = (void *(*)(void*))UnityStandardAssetsImageEffects::Antialiasing.CurrentAAMaterialOffset;

UnityStandardAssetsImageEffects::Antialiasing.CheckResourcesOffset = getRealOffset(0xB528B8);
UnityStandardAssetsImageEffects::Antialiasing.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::Antialiasing.CheckResourcesOffset;

UnityStandardAssetsImageEffects::Antialiasing.OnRenderImageOffset = getRealOffset(0xB529BC);
UnityStandardAssetsImageEffects::Antialiasing.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::Antialiasing.OnRenderImageOffset;

UnityStandardAssetsImageEffects::Bloom.CheckResourcesOffset = getRealOffset(0xB530E0);
UnityStandardAssetsImageEffects::Bloom.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::Bloom.CheckResourcesOffset;

UnityStandardAssetsImageEffects::Bloom.OnRenderImageOffset = getRealOffset(0xB53184);
UnityStandardAssetsImageEffects::Bloom.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::Bloom.OnRenderImageOffset;

UnityStandardAssetsImageEffects::Bloom.AddToOffset = getRealOffset(0xB54B8C);
UnityStandardAssetsImageEffects::Bloom.AddTo = (void(*)(void*, float, void *, void *))UnityStandardAssetsImageEffects::Bloom.AddToOffset;

UnityStandardAssetsImageEffects::Bloom.BlendFlaresOffset = getRealOffset(0xB54874);
UnityStandardAssetsImageEffects::Bloom.BlendFlares = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::Bloom.BlendFlaresOffset;

UnityStandardAssetsImageEffects::Bloom.BrightFilterOffset = getRealOffset(0xB544FC);
UnityStandardAssetsImageEffects::Bloom.BrightFilter = (void(*)(void*, float, void *, void *))UnityStandardAssetsImageEffects::Bloom.BrightFilterOffset;

UnityStandardAssetsImageEffects::Bloom.BrightFilter1Offset = getRealOffset(0xB543F0);
UnityStandardAssetsImageEffects::Bloom.BrightFilter1 = (void(*)(void*, Color, void *, void *))UnityStandardAssetsImageEffects::Bloom.BrightFilter1Offset;

UnityStandardAssetsImageEffects::Bloom.VignetteOffset = getRealOffset(0xB54610);
UnityStandardAssetsImageEffects::Bloom.Vignette = (void(*)(void*, float, void *, void *))UnityStandardAssetsImageEffects::Bloom.VignetteOffset;

UnityStandardAssetsImageEffects::BloomAndFlares.CheckResourcesOffset = getRealOffset(0x875860);
UnityStandardAssetsImageEffects::BloomAndFlares.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::BloomAndFlares.CheckResourcesOffset;

UnityStandardAssetsImageEffects::BloomAndFlares.OnRenderImageOffset = getRealOffset(0x875FE8);
UnityStandardAssetsImageEffects::BloomAndFlares.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::BloomAndFlares.OnRenderImageOffset;

UnityStandardAssetsImageEffects::BloomAndFlares.AddToOffset = getRealOffset(0x87748C);
UnityStandardAssetsImageEffects::BloomAndFlares.AddTo = (void(*)(void*, float, void *, void *))UnityStandardAssetsImageEffects::BloomAndFlares.AddToOffset;

UnityStandardAssetsImageEffects::BloomAndFlares.BlendFlaresOffset = getRealOffset(0x877184);
UnityStandardAssetsImageEffects::BloomAndFlares.BlendFlares = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::BloomAndFlares.BlendFlaresOffset;

UnityStandardAssetsImageEffects::BloomAndFlares.BrightFilterOffset = getRealOffset(0x876E78);
UnityStandardAssetsImageEffects::BloomAndFlares.BrightFilter = (void(*)(void*, float, float, void *, void *))UnityStandardAssetsImageEffects::BloomAndFlares.BrightFilterOffset;

UnityStandardAssetsImageEffects::BloomAndFlares.VignetteOffset = getRealOffset(0x876FEC);
UnityStandardAssetsImageEffects::BloomAndFlares.Vignette = (void(*)(void*, float, void *, void *))UnityStandardAssetsImageEffects::BloomAndFlares.VignetteOffset;

UnityStandardAssetsImageEffects::BloomOptimized.CheckResourcesOffset = getRealOffset(0x8776E4);
UnityStandardAssetsImageEffects::BloomOptimized.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::BloomOptimized.CheckResourcesOffset;

UnityStandardAssetsImageEffects::BloomOptimized.OnDisableOffset = getRealOffset(0x877734);
UnityStandardAssetsImageEffects::BloomOptimized.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::BloomOptimized.OnDisableOffset;

UnityStandardAssetsImageEffects::BloomOptimized.OnRenderImageOffset = getRealOffset(0x8777F0);
UnityStandardAssetsImageEffects::BloomOptimized.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::BloomOptimized.OnRenderImageOffset;

UnityStandardAssetsImageEffects::Blur.get_materialOffset = getRealOffset(0x877D4C);
UnityStandardAssetsImageEffects::Blur.get_material = (void *(*)(void*))UnityStandardAssetsImageEffects::Blur.get_materialOffset;

UnityStandardAssetsImageEffects::Blur.OnDisableOffset = getRealOffset(0x877EB8);
UnityStandardAssetsImageEffects::Blur.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::Blur.OnDisableOffset;

UnityStandardAssetsImageEffects::Blur.StartOffset = getRealOffset(0x877FD4);
UnityStandardAssetsImageEffects::Blur.Start = (void(*)(void*))UnityStandardAssetsImageEffects::Blur.StartOffset;

UnityStandardAssetsImageEffects::Blur.FourTapConeOffset = getRealOffset(0x8780C4);
UnityStandardAssetsImageEffects::Blur.FourTapCone = (void(*)(void*, void *, void *, int))UnityStandardAssetsImageEffects::Blur.FourTapConeOffset;

UnityStandardAssetsImageEffects::Blur.DownSample4xOffset = getRealOffset(0x8782E0);
UnityStandardAssetsImageEffects::Blur.DownSample4x = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::Blur.DownSample4xOffset;

UnityStandardAssetsImageEffects::Blur.OnRenderImageOffset = getRealOffset(0x8784C8);
UnityStandardAssetsImageEffects::Blur.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::Blur.OnRenderImageOffset;

UnityStandardAssetsImageEffects::BlurOptimized.CheckResourcesOffset = getRealOffset(0x878668);
UnityStandardAssetsImageEffects::BlurOptimized.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::BlurOptimized.CheckResourcesOffset;

UnityStandardAssetsImageEffects::BlurOptimized.OnDisableOffset = getRealOffset(0x8786B8);
UnityStandardAssetsImageEffects::BlurOptimized.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::BlurOptimized.OnDisableOffset;

UnityStandardAssetsImageEffects::BlurOptimized.OnRenderImageOffset = getRealOffset(0x878774);
UnityStandardAssetsImageEffects::BlurOptimized.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::BlurOptimized.OnRenderImageOffset;

UnityStandardAssetsImageEffects::CameraMotionBlur.CalculateViewProjectionOffset = getRealOffset(0x878C5C);
UnityStandardAssetsImageEffects::CameraMotionBlur.CalculateViewProjection = (void(*)(void*))UnityStandardAssetsImageEffects::CameraMotionBlur.CalculateViewProjectionOffset;

UnityStandardAssetsImageEffects::CameraMotionBlur.StartOffset = getRealOffset(0x878FC4);
UnityStandardAssetsImageEffects::CameraMotionBlur.Start = (void(*)(void*))UnityStandardAssetsImageEffects::CameraMotionBlur.StartOffset;

UnityStandardAssetsImageEffects::CameraMotionBlur.OnEnableOffset = getRealOffset(0x8791CC);
UnityStandardAssetsImageEffects::CameraMotionBlur.OnEnable = (void(*)(void*))UnityStandardAssetsImageEffects::CameraMotionBlur.OnEnableOffset;

UnityStandardAssetsImageEffects::CameraMotionBlur.OnDisableOffset = getRealOffset(0x8792C4);
UnityStandardAssetsImageEffects::CameraMotionBlur.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::CameraMotionBlur.OnDisableOffset;

UnityStandardAssetsImageEffects::CameraMotionBlur.CheckResourcesOffset = getRealOffset(0x879470);
UnityStandardAssetsImageEffects::CameraMotionBlur.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::CameraMotionBlur.CheckResourcesOffset;

UnityStandardAssetsImageEffects::CameraMotionBlur.OnRenderImageOffset = getRealOffset(0x87954C);
UnityStandardAssetsImageEffects::CameraMotionBlur.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::CameraMotionBlur.OnRenderImageOffset;

UnityStandardAssetsImageEffects::CameraMotionBlur.RememberOffset = getRealOffset(0x8790C4);
UnityStandardAssetsImageEffects::CameraMotionBlur.Remember = (void(*)(void*))UnityStandardAssetsImageEffects::CameraMotionBlur.RememberOffset;

UnityStandardAssetsImageEffects::CameraMotionBlur.GetTmpCamOffset = getRealOffset(0x87BAA8);
UnityStandardAssetsImageEffects::CameraMotionBlur.GetTmpCam = (void *(*)(void*))UnityStandardAssetsImageEffects::CameraMotionBlur.GetTmpCamOffset;

UnityStandardAssetsImageEffects::CameraMotionBlur.StartFrameOffset = getRealOffset(0x87B9B4);
UnityStandardAssetsImageEffects::CameraMotionBlur.StartFrame = (void(*)(void*))UnityStandardAssetsImageEffects::CameraMotionBlur.StartFrameOffset;

UnityStandardAssetsImageEffects::CameraMotionBlur.divRoundUpOffset = getRealOffset(0x87BA9C);
UnityStandardAssetsImageEffects::CameraMotionBlur.divRoundUp = (int(*)(int, int))UnityStandardAssetsImageEffects::CameraMotionBlur.divRoundUpOffset;

UnityStandardAssetsImageEffects::ColorCorrectionCurves.StartOffset = getRealOffset(0x87C134);
UnityStandardAssetsImageEffects::ColorCorrectionCurves.Start = (void(*)(void*))UnityStandardAssetsImageEffects::ColorCorrectionCurves.StartOffset;

UnityStandardAssetsImageEffects::ColorCorrectionCurves.AwakeOffset = getRealOffset(0x87C170);
UnityStandardAssetsImageEffects::ColorCorrectionCurves.Awake = (void(*)(void*))UnityStandardAssetsImageEffects::ColorCorrectionCurves.AwakeOffset;

UnityStandardAssetsImageEffects::ColorCorrectionCurves.CheckResourcesOffset = getRealOffset(0x87C174);
UnityStandardAssetsImageEffects::ColorCorrectionCurves.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::ColorCorrectionCurves.CheckResourcesOffset;

UnityStandardAssetsImageEffects::ColorCorrectionCurves.UpdateParametersOffset = getRealOffset(0x87C470);
UnityStandardAssetsImageEffects::ColorCorrectionCurves.UpdateParameters = (void(*)(void*))UnityStandardAssetsImageEffects::ColorCorrectionCurves.UpdateParametersOffset;

UnityStandardAssetsImageEffects::ColorCorrectionCurves.UpdateTexturesOffset = getRealOffset(0x87C964);
UnityStandardAssetsImageEffects::ColorCorrectionCurves.UpdateTextures = (void(*)(void*))UnityStandardAssetsImageEffects::ColorCorrectionCurves.UpdateTexturesOffset;

UnityStandardAssetsImageEffects::ColorCorrectionCurves.OnRenderImageOffset = getRealOffset(0x87C968);
UnityStandardAssetsImageEffects::ColorCorrectionCurves.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::ColorCorrectionCurves.OnRenderImageOffset;

UnityStandardAssetsImageEffects::ColorCorrectionLookup.CheckResourcesOffset = getRealOffset(0x87D644);
UnityStandardAssetsImageEffects::ColorCorrectionLookup.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::ColorCorrectionLookup.CheckResourcesOffset;

UnityStandardAssetsImageEffects::ColorCorrectionLookup.OnDisableOffset = getRealOffset(0x87D698);
UnityStandardAssetsImageEffects::ColorCorrectionLookup.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::ColorCorrectionLookup.OnDisableOffset;

UnityStandardAssetsImageEffects::ColorCorrectionLookup.OnDestroyOffset = getRealOffset(0x87D758);
UnityStandardAssetsImageEffects::ColorCorrectionLookup.OnDestroy = (void(*)(void*))UnityStandardAssetsImageEffects::ColorCorrectionLookup.OnDestroyOffset;

UnityStandardAssetsImageEffects::ColorCorrectionLookup.SetIdentityLutOffset = getRealOffset(0x87D818);
UnityStandardAssetsImageEffects::ColorCorrectionLookup.SetIdentityLut = (void(*)(void*))UnityStandardAssetsImageEffects::ColorCorrectionLookup.SetIdentityLutOffset;

UnityStandardAssetsImageEffects::ColorCorrectionLookup.ValidDimensionsOffset = getRealOffset(0x87DA98);
UnityStandardAssetsImageEffects::ColorCorrectionLookup.ValidDimensions = (bool(*)(void*, void *))UnityStandardAssetsImageEffects::ColorCorrectionLookup.ValidDimensionsOffset;

UnityStandardAssetsImageEffects::ColorCorrectionLookup.ConvertOffset = getRealOffset(0x87DBD4);
UnityStandardAssetsImageEffects::ColorCorrectionLookup.Convert = (void(*)(void*, void *, monoString*))UnityStandardAssetsImageEffects::ColorCorrectionLookup.ConvertOffset;

UnityStandardAssetsImageEffects::ColorCorrectionLookup.OnRenderImageOffset = getRealOffset(0x87E074);
UnityStandardAssetsImageEffects::ColorCorrectionLookup.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::ColorCorrectionLookup.OnRenderImageOffset;

UnityStandardAssetsImageEffects::ColorCorrectionRamp.OnRenderImageOffset = getRealOffset(0x87E364);
UnityStandardAssetsImageEffects::ColorCorrectionRamp.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::ColorCorrectionRamp.OnRenderImageOffset;

UnityStandardAssetsImageEffects::ContrastEnhance.CheckResourcesOffset = getRealOffset(0x87E520);
UnityStandardAssetsImageEffects::ContrastEnhance.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::ContrastEnhance.CheckResourcesOffset;

UnityStandardAssetsImageEffects::ContrastEnhance.OnRenderImageOffset = getRealOffset(0x87E584);
UnityStandardAssetsImageEffects::ContrastEnhance.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::ContrastEnhance.OnRenderImageOffset;

UnityStandardAssetsImageEffects::ContrastStretch.get_materialLumOffset = getRealOffset(0x87E9B8);
UnityStandardAssetsImageEffects::ContrastStretch.get_materialLum = (void *(*)(void*))UnityStandardAssetsImageEffects::ContrastStretch.get_materialLumOffset;

UnityStandardAssetsImageEffects::ContrastStretch.get_materialReduceOffset = getRealOffset(0x87EA90);
UnityStandardAssetsImageEffects::ContrastStretch.get_materialReduce = (void *(*)(void*))UnityStandardAssetsImageEffects::ContrastStretch.get_materialReduceOffset;

UnityStandardAssetsImageEffects::ContrastStretch.get_materialAdaptOffset = getRealOffset(0x87EB68);
UnityStandardAssetsImageEffects::ContrastStretch.get_materialAdapt = (void *(*)(void*))UnityStandardAssetsImageEffects::ContrastStretch.get_materialAdaptOffset;

UnityStandardAssetsImageEffects::ContrastStretch.get_materialApplyOffset = getRealOffset(0x87EC40);
UnityStandardAssetsImageEffects::ContrastStretch.get_materialApply = (void *(*)(void*))UnityStandardAssetsImageEffects::ContrastStretch.get_materialApplyOffset;

UnityStandardAssetsImageEffects::ContrastStretch.StartOffset = getRealOffset(0x87ED18);
UnityStandardAssetsImageEffects::ContrastStretch.Start = (void(*)(void*))UnityStandardAssetsImageEffects::ContrastStretch.StartOffset;

UnityStandardAssetsImageEffects::ContrastStretch.OnEnableOffset = getRealOffset(0x87EDD8);
UnityStandardAssetsImageEffects::ContrastStretch.OnEnable = (void(*)(void*))UnityStandardAssetsImageEffects::ContrastStretch.OnEnableOffset;

UnityStandardAssetsImageEffects::ContrastStretch.OnDisableOffset = getRealOffset(0x87EF78);
UnityStandardAssetsImageEffects::ContrastStretch.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::ContrastStretch.OnDisableOffset;

UnityStandardAssetsImageEffects::ContrastStretch.OnRenderImageOffset = getRealOffset(0x87F208);
UnityStandardAssetsImageEffects::ContrastStretch.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::ContrastStretch.OnRenderImageOffset;

UnityStandardAssetsImageEffects::ContrastStretch.CalculateAdaptationOffset = getRealOffset(0x87F4B0);
UnityStandardAssetsImageEffects::ContrastStretch.CalculateAdaptation = (void(*)(void*, void *))UnityStandardAssetsImageEffects::ContrastStretch.CalculateAdaptationOffset;

UnityStandardAssetsImageEffects::CreaseShading.CheckResourcesOffset = getRealOffset(0x87F7F8);
UnityStandardAssetsImageEffects::CreaseShading.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::CreaseShading.CheckResourcesOffset;

UnityStandardAssetsImageEffects::CreaseShading.OnRenderImageOffset = getRealOffset(0x87F874);
UnityStandardAssetsImageEffects::CreaseShading.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::CreaseShading.OnRenderImageOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.CreateMaterialsOffset = getRealOffset(0x87FD00);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.CreateMaterials = (void(*)(void*))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.CreateMaterialsOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.CheckResourcesOffset = getRealOffset(0x87FDF8);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.CheckResourcesOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.OnDisableOffset = getRealOffset(0x87FF20);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.OnDisableOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.OnEnableOffset = getRealOffset(0x8801E0);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.OnEnable = (void(*)(void*))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.OnEnableOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.FocalDistance01Offset = getRealOffset(0x880288);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.FocalDistance01 = (float(*)(void*, float))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.FocalDistance01Offset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.GetDividerBasedOnQualityOffset = getRealOffset(0x88046C);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.GetDividerBasedOnQuality = (int(*)(void*))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.GetDividerBasedOnQualityOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.GetLowResolutionDividerBasedOnQualityOffset = getRealOffset(0x88048C);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.GetLowResolutionDividerBasedOnQuality = (int(*)(void*, int))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.GetLowResolutionDividerBasedOnQualityOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.OnRenderImageOffset = getRealOffset(0x8804B0);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.OnRenderImageOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.BlurOffset = getRealOffset(0x8817F8);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.Blur = (void(*)(void*, void *, void *, int, int, float))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.BlurOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.BlurFgOffset = getRealOffset(0x882158);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.BlurFg = (void(*)(void*, void *, void *, int, int, float))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.BlurFgOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.BlurHexOffset = getRealOffset(0x882714);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.BlurHex = (void(*)(void*, void *, void *, int, float, void *))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.BlurHexOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.DownsampleOffset = getRealOffset(0x881654);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.Downsample = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.DownsampleOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.AddBokehOffset = getRealOffset(0x881B84);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.AddBokeh = (void(*)(void*, void *, void *, void *))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.AddBokehOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.ReleaseTexturesOffset = getRealOffset(0x882528);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.ReleaseTextures = (void(*)(void*))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.ReleaseTexturesOffset;

UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.AllocateTexturesOffset = getRealOffset(0x8811A0);
UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.AllocateTextures = (void(*)(void*, bool, void *, int, int))UnityStandardAssetsImageEffects::DepthOfFieldDeprecated.AllocateTexturesOffset;

UnityStandardAssetsImageEffects::EdgeDetection.CheckResourcesOffset = getRealOffset(0x882E34);
UnityStandardAssetsImageEffects::EdgeDetection.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::EdgeDetection.CheckResourcesOffset;

UnityStandardAssetsImageEffects::EdgeDetection.StartOffset = getRealOffset(0x882FC0);
UnityStandardAssetsImageEffects::EdgeDetection.Start = (void(*)(void*))UnityStandardAssetsImageEffects::EdgeDetection.StartOffset;

UnityStandardAssetsImageEffects::EdgeDetection.SetCameraFlagOffset = getRealOffset(0x882EA8);
UnityStandardAssetsImageEffects::EdgeDetection.SetCameraFlag = (void(*)(void*))UnityStandardAssetsImageEffects::EdgeDetection.SetCameraFlagOffset;

UnityStandardAssetsImageEffects::EdgeDetection.OnEnableOffset = getRealOffset(0x882FCC);
UnityStandardAssetsImageEffects::EdgeDetection.OnEnable = (void(*)(void*))UnityStandardAssetsImageEffects::EdgeDetection.OnEnableOffset;

UnityStandardAssetsImageEffects::EdgeDetection.OnRenderImageOffset = getRealOffset(0x882FD0);
UnityStandardAssetsImageEffects::EdgeDetection.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::EdgeDetection.OnRenderImageOffset;

UnityStandardAssetsImageEffects::Fisheye.CheckResourcesOffset = getRealOffset(0x883318);
UnityStandardAssetsImageEffects::Fisheye.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::Fisheye.CheckResourcesOffset;

UnityStandardAssetsImageEffects::Fisheye.OnRenderImageOffset = getRealOffset(0x883368);
UnityStandardAssetsImageEffects::Fisheye.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::Fisheye.OnRenderImageOffset;

UnityStandardAssetsImageEffects::GlobalFog.CheckResourcesOffset = getRealOffset(0x883558);
UnityStandardAssetsImageEffects::GlobalFog.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::GlobalFog.CheckResourcesOffset;

UnityStandardAssetsImageEffects::GlobalFog.OnRenderImageOffset = getRealOffset(0x8835AC);
UnityStandardAssetsImageEffects::GlobalFog.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::GlobalFog.OnRenderImageOffset;

UnityStandardAssetsImageEffects::GlobalFog.CustomGraphicsBlitOffset = getRealOffset(0x88422C);
UnityStandardAssetsImageEffects::GlobalFog.CustomGraphicsBlit = (void(*)(void *, void *, void *, int))UnityStandardAssetsImageEffects::GlobalFog.CustomGraphicsBlitOffset;

UnityStandardAssetsImageEffects::Grayscale.OnRenderImageOffset = getRealOffset(0x8843F8);
UnityStandardAssetsImageEffects::Grayscale.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::Grayscale.OnRenderImageOffset;

UnityStandardAssetsImageEffects::ImageEffectBase.StartOffset = getRealOffset(0x884518);
UnityStandardAssetsImageEffects::ImageEffectBase.Start = (void(*)(void*))UnityStandardAssetsImageEffects::ImageEffectBase.StartOffset;

UnityStandardAssetsImageEffects::ImageEffectBase.get_materialOffset = getRealOffset(0x87E438);
UnityStandardAssetsImageEffects::ImageEffectBase.get_material = (void *(*)(void*))UnityStandardAssetsImageEffects::ImageEffectBase.get_materialOffset;

UnityStandardAssetsImageEffects::ImageEffectBase.OnDisableOffset = getRealOffset(0x8845E4);
UnityStandardAssetsImageEffects::ImageEffectBase.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::ImageEffectBase.OnDisableOffset;

UnityStandardAssetsImageEffects::ImageEffects.RenderDistortionOffset = getRealOffset(0x8846A0);
UnityStandardAssetsImageEffects::ImageEffects.RenderDistortion = (void(*)(void *, void *, void *, float, Vector2, Vector2))UnityStandardAssetsImageEffects::ImageEffects.RenderDistortionOffset;

UnityStandardAssetsImageEffects::ImageEffects.BlitOffset = getRealOffset(0x884A24);
UnityStandardAssetsImageEffects::ImageEffects.Blit = (void(*)(void *, void *))UnityStandardAssetsImageEffects::ImageEffects.BlitOffset;

UnityStandardAssetsImageEffects::ImageEffects.BlitWithMaterialOffset = getRealOffset(0x884AA8);
UnityStandardAssetsImageEffects::ImageEffects.BlitWithMaterial = (void(*)(void *, void *, void *))UnityStandardAssetsImageEffects::ImageEffects.BlitWithMaterialOffset;

UnityStandardAssetsImageEffects::MotionBlur.StartOffset = getRealOffset(0x884B3C);
UnityStandardAssetsImageEffects::MotionBlur.Start = (void(*)(void*))UnityStandardAssetsImageEffects::MotionBlur.StartOffset;

UnityStandardAssetsImageEffects::MotionBlur.OnDisableOffset = getRealOffset(0x884B78);
UnityStandardAssetsImageEffects::MotionBlur.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::MotionBlur.OnDisableOffset;

UnityStandardAssetsImageEffects::MotionBlur.OnRenderImageOffset = getRealOffset(0x884C00);
UnityStandardAssetsImageEffects::MotionBlur.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::MotionBlur.OnRenderImageOffset;

UnityStandardAssetsImageEffects::NoiseAndGrain.CheckResourcesOffset = getRealOffset(0x885078);
UnityStandardAssetsImageEffects::NoiseAndGrain.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::NoiseAndGrain.CheckResourcesOffset;

UnityStandardAssetsImageEffects::NoiseAndGrain.OnRenderImageOffset = getRealOffset(0x8850F0);
UnityStandardAssetsImageEffects::NoiseAndGrain.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::NoiseAndGrain.OnRenderImageOffset;

UnityStandardAssetsImageEffects::NoiseAndGrain.DrawNoiseQuadGridOffset = getRealOffset(0x885DAC);
UnityStandardAssetsImageEffects::NoiseAndGrain.DrawNoiseQuadGrid = (void(*)(void *, void *, void *, void *, int))UnityStandardAssetsImageEffects::NoiseAndGrain.DrawNoiseQuadGridOffset;

UnityStandardAssetsImageEffects::NoiseAndScratches.StartOffset = getRealOffset(0x8862A8);
UnityStandardAssetsImageEffects::NoiseAndScratches.Start = (void(*)(void*))UnityStandardAssetsImageEffects::NoiseAndScratches.StartOffset;

UnityStandardAssetsImageEffects::NoiseAndScratches.get_materialOffset = getRealOffset(0x886424);
UnityStandardAssetsImageEffects::NoiseAndScratches.get_material = (void *(*)(void*))UnityStandardAssetsImageEffects::NoiseAndScratches.get_materialOffset;

UnityStandardAssetsImageEffects::NoiseAndScratches.OnDisableOffset = getRealOffset(0x8865AC);
UnityStandardAssetsImageEffects::NoiseAndScratches.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::NoiseAndScratches.OnDisableOffset;

UnityStandardAssetsImageEffects::NoiseAndScratches.SanitizeParametersOffset = getRealOffset(0x8866D0);
UnityStandardAssetsImageEffects::NoiseAndScratches.SanitizeParameters = (void(*)(void*))UnityStandardAssetsImageEffects::NoiseAndScratches.SanitizeParametersOffset;

UnityStandardAssetsImageEffects::NoiseAndScratches.OnRenderImageOffset = getRealOffset(0x886820);
UnityStandardAssetsImageEffects::NoiseAndScratches.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::NoiseAndScratches.OnRenderImageOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.CheckShaderAndCreateMaterialOffset = getRealOffset(0x875A74);
UnityStandardAssetsImageEffects::PostEffectsBase.CheckShaderAndCreateMaterial = (void *(*)(void*, void *, void *))UnityStandardAssetsImageEffects::PostEffectsBase.CheckShaderAndCreateMaterialOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.CreateMaterialOffset = getRealOffset(0x886CD4);
UnityStandardAssetsImageEffects::PostEffectsBase.CreateMaterial = (void *(*)(void*, void *, void *))UnityStandardAssetsImageEffects::PostEffectsBase.CreateMaterialOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.OnEnableOffset = getRealOffset(0x886F18);
UnityStandardAssetsImageEffects::PostEffectsBase.OnEnable = (void(*)(void*))UnityStandardAssetsImageEffects::PostEffectsBase.OnEnableOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.CheckSupportOffset = getRealOffset(0x886F24);
UnityStandardAssetsImageEffects::PostEffectsBase.CheckSupport = (bool(*)(void*))UnityStandardAssetsImageEffects::PostEffectsBase.CheckSupportOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.CheckResourcesOffset = getRealOffset(0x886F2C);
UnityStandardAssetsImageEffects::PostEffectsBase.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::PostEffectsBase.CheckResourcesOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.StartOffset = getRealOffset(0x87C160);
UnityStandardAssetsImageEffects::PostEffectsBase.Start = (void(*)(void*))UnityStandardAssetsImageEffects::PostEffectsBase.StartOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.CheckSupport1Offset = getRealOffset(0x875928);
UnityStandardAssetsImageEffects::PostEffectsBase.CheckSupport1 = (bool(*)(void*, bool))UnityStandardAssetsImageEffects::PostEffectsBase.CheckSupport1Offset;

UnityStandardAssetsImageEffects::PostEffectsBase.CheckSupport2Offset = getRealOffset(0x8794F4);
UnityStandardAssetsImageEffects::PostEffectsBase.CheckSupport2 = (bool(*)(void*, bool, bool))UnityStandardAssetsImageEffects::PostEffectsBase.CheckSupport2Offset;

UnityStandardAssetsImageEffects::PostEffectsBase.Dx11SupportOffset = getRealOffset(0x886FF0);
UnityStandardAssetsImageEffects::PostEffectsBase.Dx11Support = (bool(*)(void*))UnityStandardAssetsImageEffects::PostEffectsBase.Dx11SupportOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.ReportAutoDisableOffset = getRealOffset(0x875F28);
UnityStandardAssetsImageEffects::PostEffectsBase.ReportAutoDisable = (void(*)(void*))UnityStandardAssetsImageEffects::PostEffectsBase.ReportAutoDisableOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.CheckShaderOffset = getRealOffset(0x886FF8);
UnityStandardAssetsImageEffects::PostEffectsBase.CheckShader = (bool(*)(void*, void *))UnityStandardAssetsImageEffects::PostEffectsBase.CheckShaderOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.NotSupportedOffset = getRealOffset(0x886CB0);
UnityStandardAssetsImageEffects::PostEffectsBase.NotSupported = (void(*)(void*))UnityStandardAssetsImageEffects::PostEffectsBase.NotSupportedOffset;

UnityStandardAssetsImageEffects::PostEffectsBase.DrawBorderOffset = getRealOffset(0x8872B4);
UnityStandardAssetsImageEffects::PostEffectsBase.DrawBorder = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::PostEffectsBase.DrawBorderOffset;

UnityStandardAssetsImageEffects::PostEffectsHelper.OnRenderImageOffset = getRealOffset(0x887684);
UnityStandardAssetsImageEffects::PostEffectsHelper.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::PostEffectsHelper.OnRenderImageOffset;

UnityStandardAssetsImageEffects::PostEffectsHelper.DrawLowLevelPlaneAlignedWithCameraOffset = getRealOffset(0x887708);
UnityStandardAssetsImageEffects::PostEffectsHelper.DrawLowLevelPlaneAlignedWithCamera = (void(*)(float, void *, void *, void *, void *))UnityStandardAssetsImageEffects::PostEffectsHelper.DrawLowLevelPlaneAlignedWithCameraOffset;

UnityStandardAssetsImageEffects::PostEffectsHelper.DrawBorderOffset = getRealOffset(0x887A38);
UnityStandardAssetsImageEffects::PostEffectsHelper.DrawBorder = (void(*)(void *, void *))UnityStandardAssetsImageEffects::PostEffectsHelper.DrawBorderOffset;

UnityStandardAssetsImageEffects::PostEffectsHelper.DrawLowLevelQuadOffset = getRealOffset(0x887E04);
UnityStandardAssetsImageEffects::PostEffectsHelper.DrawLowLevelQuad = (void(*)(float, float, float, float, void *, void *, void *))UnityStandardAssetsImageEffects::PostEffectsHelper.DrawLowLevelQuadOffset;

UnityStandardAssetsImageEffects::Quads.HasMeshesOffset = getRealOffset(0x887FB8);
UnityStandardAssetsImageEffects::Quads.HasMeshes = (bool(*)())UnityStandardAssetsImageEffects::Quads.HasMeshesOffset;

UnityStandardAssetsImageEffects::Quads.CleanupOffset = getRealOffset(0x87FF90);
UnityStandardAssetsImageEffects::Quads.Cleanup = (void(*)())UnityStandardAssetsImageEffects::Quads.CleanupOffset;

UnityStandardAssetsImageEffects::Quads.GetMeshesOffset = getRealOffset(0x8829F4);
UnityStandardAssetsImageEffects::Quads.GetMeshOffset = getRealOffset(0x8880F8);
UnityStandardAssetsImageEffects::Quads.GetMesh = (void *(*)(int, int, int, int))UnityStandardAssetsImageEffects::Quads.GetMeshOffset;

UnityStandardAssetsImageEffects::ScreenOverlay.CheckResourcesOffset = getRealOffset(0x8887FC);
UnityStandardAssetsImageEffects::ScreenOverlay.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::ScreenOverlay.CheckResourcesOffset;

UnityStandardAssetsImageEffects::ScreenOverlay.OnRenderImageOffset = getRealOffset(0x88884C);
UnityStandardAssetsImageEffects::ScreenOverlay.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::ScreenOverlay.OnRenderImageOffset;

UnityStandardAssetsImageEffects::ScreenSpaceAmbientObscurance.CheckResourcesOffset = getRealOffset(0x888A5C);
UnityStandardAssetsImageEffects::ScreenSpaceAmbientObscurance.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::ScreenSpaceAmbientObscurance.CheckResourcesOffset;

UnityStandardAssetsImageEffects::ScreenSpaceAmbientObscurance.OnDisableOffset = getRealOffset(0x888AB0);
UnityStandardAssetsImageEffects::ScreenSpaceAmbientObscurance.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::ScreenSpaceAmbientObscurance.OnDisableOffset;

UnityStandardAssetsImageEffects::ScreenSpaceAmbientObscurance.OnRenderImageOffset = getRealOffset(0x888B70);
UnityStandardAssetsImageEffects::ScreenSpaceAmbientObscurance.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::ScreenSpaceAmbientObscurance.OnRenderImageOffset;

UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.CreateMaterialOffset = getRealOffset(0x889430);
UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.CreateMaterial = (void *(*)(void *))UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.CreateMaterialOffset;

UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.DestroyMaterialOffset = getRealOffset(0x8894FC);
UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.DestroyMaterial = (void(*)(void *))UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.DestroyMaterialOffset;

UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.OnDisableOffset = getRealOffset(0x8895AC);
UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.OnDisableOffset;

UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.StartOffset = getRealOffset(0x8895B4);
UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.Start = (void(*)(void*))UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.StartOffset;

UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.OnEnableOffset = getRealOffset(0x8897AC);
UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.OnEnable = (void(*)(void*))UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.OnEnableOffset;

UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.CreateMaterialsOffset = getRealOffset(0x8896BC);
UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.CreateMaterials = (void(*)(void*))UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.CreateMaterialsOffset;

UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.OnRenderImageOffset = getRealOffset(0x889850);
UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::ScreenSpaceAmbientOcclusion.OnRenderImageOffset;

UnityStandardAssetsImageEffects::SepiaTone.OnRenderImageOffset = getRealOffset(0x88A1D8);
UnityStandardAssetsImageEffects::SepiaTone.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::SepiaTone.OnRenderImageOffset;

UnityStandardAssetsImageEffects::SunShafts.CheckResourcesOffset = getRealOffset(0x88A278);
UnityStandardAssetsImageEffects::SunShafts.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::SunShafts.CheckResourcesOffset;

UnityStandardAssetsImageEffects::SunShafts.OnRenderImageOffset = getRealOffset(0x88A2DC);
UnityStandardAssetsImageEffects::SunShafts.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::SunShafts.OnRenderImageOffset;

UnityStandardAssetsImageEffects::TiltShift.CheckResourcesOffset = getRealOffset(0x88AE98);
UnityStandardAssetsImageEffects::TiltShift.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::TiltShift.CheckResourcesOffset;

UnityStandardAssetsImageEffects::TiltShift.OnRenderImageOffset = getRealOffset(0x88AEEC);
UnityStandardAssetsImageEffects::TiltShift.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::TiltShift.OnRenderImageOffset;

UnityStandardAssetsImageEffects::Tonemapping.CheckResourcesOffset = getRealOffset(0x88B27C);
UnityStandardAssetsImageEffects::Tonemapping.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::Tonemapping.CheckResourcesOffset;

UnityStandardAssetsImageEffects::Tonemapping.UpdateCurveOffset = getRealOffset(0x88B3FC);
UnityStandardAssetsImageEffects::Tonemapping.UpdateCurve = (float(*)(void*))UnityStandardAssetsImageEffects::Tonemapping.UpdateCurveOffset;

UnityStandardAssetsImageEffects::Tonemapping.OnDisableOffset = getRealOffset(0x88B788);
UnityStandardAssetsImageEffects::Tonemapping.OnDisable = (void(*)(void*))UnityStandardAssetsImageEffects::Tonemapping.OnDisableOffset;

UnityStandardAssetsImageEffects::Tonemapping.CreateInternalRenderTextureOffset = getRealOffset(0x88B928);
UnityStandardAssetsImageEffects::Tonemapping.CreateInternalRenderTexture = (bool(*)(void*))UnityStandardAssetsImageEffects::Tonemapping.CreateInternalRenderTextureOffset;

UnityStandardAssetsImageEffects::Tonemapping.OnRenderImageOffset = getRealOffset(0x88BA34);
UnityStandardAssetsImageEffects::Tonemapping.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::Tonemapping.OnRenderImageOffset;

UnityStandardAssetsImageEffects::Triangles.HasMeshesOffset = getRealOffset(0x88C578);
UnityStandardAssetsImageEffects::Triangles.HasMeshes = (bool(*)())UnityStandardAssetsImageEffects::Triangles.HasMeshesOffset;

UnityStandardAssetsImageEffects::Triangles.CleanupOffset = getRealOffset(0x88C6F8);
UnityStandardAssetsImageEffects::Triangles.Cleanup = (void(*)())UnityStandardAssetsImageEffects::Triangles.CleanupOffset;

UnityStandardAssetsImageEffects::Triangles.GetMeshesOffset = getRealOffset(0x88C948);
UnityStandardAssetsImageEffects::Triangles.GetMeshOffset = getRealOffset(0x88CC5C);
UnityStandardAssetsImageEffects::Triangles.GetMesh = (void *(*)(int, int, int, int))UnityStandardAssetsImageEffects::Triangles.GetMeshOffset;

UnityStandardAssetsImageEffects::Twirl.OnRenderImageOffset = getRealOffset(0x88D23C);
UnityStandardAssetsImageEffects::Twirl.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::Twirl.OnRenderImageOffset;

UnityStandardAssetsImageEffects::VignetteAndChromaticAberration.CheckResourcesOffset = getRealOffset(0x88D308);
UnityStandardAssetsImageEffects::VignetteAndChromaticAberration.CheckResources = (bool(*)(void*))UnityStandardAssetsImageEffects::VignetteAndChromaticAberration.CheckResourcesOffset;

UnityStandardAssetsImageEffects::VignetteAndChromaticAberration.OnRenderImageOffset = getRealOffset(0x88D380);
UnityStandardAssetsImageEffects::VignetteAndChromaticAberration.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::VignetteAndChromaticAberration.OnRenderImageOffset;

UnityStandardAssetsImageEffects::Vortex.OnRenderImageOffset = getRealOffset(0x88DBA4);
UnityStandardAssetsImageEffects::Vortex.OnRenderImage = (void(*)(void*, void *, void *))UnityStandardAssetsImageEffects::Vortex.OnRenderImageOffset;

UnityStandardAssetsUtility::SmoothFollow.StartOffset = getRealOffset(0x88DC70);
UnityStandardAssetsUtility::SmoothFollow.Start = (void(*)(void*))UnityStandardAssetsUtility::SmoothFollow.StartOffset;

UnityStandardAssetsUtility::SmoothFollow.LateUpdateOffset = getRealOffset(0x88DC74);
UnityStandardAssetsUtility::SmoothFollow.LateUpdate = (void(*)(void*))UnityStandardAssetsUtility::SmoothFollow.LateUpdateOffset;

XsollaCore::Error.get_IsNetworkErrorOffset = getRealOffset(0x925E24);
XsollaCore::Error.get_IsNetworkError = (bool(*)(void*))XsollaCore::Error.get_IsNetworkErrorOffset;

XsollaCore::Error.set_IsNetworkErrorOffset = getRealOffset(0x925E2C);
XsollaCore::Error.set_IsNetworkError = (void(*)(void*, bool))XsollaCore::Error.set_IsNetworkErrorOffset;

XsollaCore::Error.get_NetworkErrorOffset = getRealOffset(0x925E34);
XsollaCore::Error.get_NetworkError = (void *(*)())XsollaCore::Error.get_NetworkErrorOffset;

XsollaCore::Error.get_UnknownErrorOffset = getRealOffset(0x925EE8);
XsollaCore::Error.get_UnknownError = (void *(*)())XsollaCore::Error.get_UnknownErrorOffset;

XsollaCore::Error.IsValidOffset = getRealOffset(0x925F6C);
XsollaCore::Error.IsValid = (bool(*)(void*))XsollaCore::Error.IsValidOffset;

XsollaCore::Error.ToStringOffset = getRealOffset(0x925FB4);
XsollaCore::Error.ToString = (monoString *(*)(void*))XsollaCore::Error.ToStringOffset;

XsollaCore::ImageLoader.InitOffset = getRealOffset(0x9261A0);
XsollaCore::ImageLoader.Init = (void(*)(void*))XsollaCore::ImageLoader.InitOffset;

XsollaCore::ImageLoader.OnDestroyOffset = getRealOffset(0x926264);
XsollaCore::ImageLoader.OnDestroy = (void(*)(void*))XsollaCore::ImageLoader.OnDestroyOffset;

XsollaCore::ImageLoader.LoadImageOffset = getRealOffset(0x92649C);
XsollaCore::ImageLoader.LoadImage = (void *(*)(void*, monoString*))XsollaCore::ImageLoader.LoadImageOffset;

XsollaCore::RegionalCurrency.get_CurrencyCodeOffset = getRealOffset(0x928888);
XsollaCore::RegionalCurrency.get_CurrencyCode = (monoString *(*)())XsollaCore::RegionalCurrency.get_CurrencyCodeOffset;

XsollaCore::RegionalCurrency.get_CurrencySymbolOffset = getRealOffset(0x9289F4);
XsollaCore::RegionalCurrency.get_CurrencySymbol = (monoString *(*)())XsollaCore::RegionalCurrency.get_CurrencySymbolOffset;

XsollaCore::RegionalCurrency.GetCurrencySymbolOffset = getRealOffset(0x928B60);
XsollaCore::RegionalCurrency.GetCurrencySymbol = (monoString *(*)(monoString*))XsollaCore::RegionalCurrency.GetCurrencySymbolOffset;

XsollaCore::AuthToken.get_FromSteamOffset = getRealOffset(0x925B04);
XsollaCore::AuthToken.get_FromSteam = (bool(*)(void*))XsollaCore::AuthToken.get_FromSteamOffset;

XsollaCore::AuthToken.set_FromSteamOffset = getRealOffset(0x925B0C);
XsollaCore::AuthToken.set_FromSteam = (void(*)(void*, bool))XsollaCore::AuthToken.set_FromSteamOffset;

XsollaCore::AuthToken.get_SteamUserIdOffset = getRealOffset(0x925B14);
XsollaCore::AuthToken.get_SteamUserId = (monoString *(*)(void*))XsollaCore::AuthToken.get_SteamUserIdOffset;

XsollaCore::AuthToken.set_SteamUserIdOffset = getRealOffset(0x925B1C);
XsollaCore::AuthToken.set_SteamUserId = (void(*)(void*, monoString*))XsollaCore::AuthToken.set_SteamUserIdOffset;

XsollaCore::AuthToken.op_ImplicitOffset = getRealOffset(0x925B24);
XsollaCore::AuthToken.op_Implicit = (monoString *(*)(void *))XsollaCore::AuthToken.op_ImplicitOffset;

XsollaCore::AuthToken.ToStringOffset = getRealOffset(0x925BA0);
XsollaCore::AuthToken.ToString = (monoString *(*)(void*))XsollaCore::AuthToken.ToStringOffset;

XsollaCore::Utils.ParseErrorOffset = getRealOffset(0x929360);
XsollaCore::Utils.ParseError = (void *(*)(monoString*))XsollaCore::Utils.ParseErrorOffset;

XsollaCore::Utils.GetJsonSettingsOffset = getRealOffset(0x929628);
XsollaCore::Utils.GetJsonSettings = (void *(*)())XsollaCore::Utils.GetJsonSettingsOffset;

XsollaCore::WebRequestHeader.get_NameOffset = getRealOffset(0x929858);
XsollaCore::WebRequestHeader.get_Name = (monoString *(*)(void*))XsollaCore::WebRequestHeader.get_NameOffset;

XsollaCore::WebRequestHeader.set_NameOffset = getRealOffset(0x929860);
XsollaCore::WebRequestHeader.set_Name = (void(*)(void*, monoString*))XsollaCore::WebRequestHeader.set_NameOffset;

XsollaCore::WebRequestHeader.get_ValueOffset = getRealOffset(0x929868);
XsollaCore::WebRequestHeader.get_Value = (monoString *(*)(void*))XsollaCore::WebRequestHeader.get_ValueOffset;

XsollaCore::WebRequestHeader.set_ValueOffset = getRealOffset(0x929870);
XsollaCore::WebRequestHeader.set_Value = (void(*)(void*, monoString*))XsollaCore::WebRequestHeader.set_ValueOffset;

XsollaCore::WebRequestHeader.AuthHeaderOffset = getRealOffset(0x929878);
XsollaCore::WebRequestHeader.AuthHeader = (void *(*)(monoString*))XsollaCore::WebRequestHeader.AuthHeaderOffset;

XsollaCore::WebRequestHeader.AuthBasicOffset = getRealOffset(0x929938);
XsollaCore::WebRequestHeader.AuthBasic = (void *(*)(monoString*))XsollaCore::WebRequestHeader.AuthBasicOffset;

XsollaCore::WebRequestHeader.ContentTypeHeaderOffset = getRealOffset(0x9299F0);
XsollaCore::WebRequestHeader.ContentTypeHeader = (void *(*)())XsollaCore::WebRequestHeader.ContentTypeHeaderOffset;

XsollaCore::WebRequestHeader.AcceptHeaderOffset = getRealOffset(0x929AA8);
XsollaCore::WebRequestHeader.AcceptHeader = (void *(*)())XsollaCore::WebRequestHeader.AcceptHeaderOffset;

XsollaCore::WebRequestHeader.SteamPaymentHeaderOffset = getRealOffset(0x929B60);
XsollaCore::WebRequestHeader.SteamPaymentHeader = (void *(*)(monoString*))XsollaCore::WebRequestHeader.SteamPaymentHeaderOffset;

XsollaCore::WebRequestHelper.AddOptionalHeadersToOffset = getRealOffset(0x929C0C);
XsollaCore::WebRequestHelper.AddOptionalHeadersTo = (void(*)(void*, void *))XsollaCore::WebRequestHelper.AddOptionalHeadersToOffset;

XsollaCore::WebRequestHelper.AddContentTypeHeaderToOffset = getRealOffset(0x929C10);
XsollaCore::WebRequestHelper.AddContentTypeHeaderTo = (void(*)(void*, void *))XsollaCore::WebRequestHelper.AddContentTypeHeaderToOffset;

XsollaCore::WebRequestHelper.AttachHeadersToDeleteRequestOffset = getRealOffset(0x929DA0);
XsollaCore::WebRequestHelper.AttachHeadersToDeleteRequest = (void(*)(void*, void *, void *))XsollaCore::WebRequestHelper.AttachHeadersToDeleteRequestOffset;

XsollaCore::WebRequestHelper.AttachHeadersToPutRequestOffset = getRealOffset(0x92A68C);
XsollaCore::WebRequestHelper.AttachHeadersToPutRequest = (void(*)(void*, void *, void *))XsollaCore::WebRequestHelper.AttachHeadersToPutRequestOffset;

XsollaCore::WebRequestHelper.CheckResponseForErrorsOffset = getRealOffset(0x92A720);
XsollaCore::WebRequestHelper.CheckResponseForErrors = (void *(*)(void*, void *))XsollaCore::WebRequestHelper.CheckResponseForErrorsOffset;

XsollaCore::WebRequestHelper.CheckResponsePayloadForErrorsOffset = getRealOffset(0x92AB3C);
XsollaCore::WebRequestHelper.CheckResponsePayloadForErrors = (void *(*)(void*, void *))XsollaCore::WebRequestHelper.CheckResponsePayloadForErrorsOffset;

XsollaCore::WebRequestHelper.TryParseErrorMessageOffset = getRealOffset(0x92ADF0);
XsollaCore::WebRequestHelper.TryParseErrorMessage = (void *(*)(void*, monoString*))XsollaCore::WebRequestHelper.TryParseErrorMessageOffset;

XsollaCore::WebRequestHelper.IsBusyOffset = getRealOffset(0x92AE24);
XsollaCore::WebRequestHelper.IsBusy = (bool(*)(void*))XsollaCore::WebRequestHelper.IsBusyOffset;

XsollaCore::WebRequestHelper.StopAllOffset = getRealOffset(0x92AE88);
XsollaCore::WebRequestHelper.StopAll = (void(*)(void*))XsollaCore::WebRequestHelper.StopAllOffset;

XsollaCore::WebRequestHelper.OnDestroyOffset = getRealOffset(0x92AFD8);
XsollaCore::WebRequestHelper.OnDestroy = (void(*)(void*))XsollaCore::WebRequestHelper.OnDestroyOffset;

XsollaCore::WebRequestHelper.InternalPerformWebRequestOffset = getRealOffset(0x92B048);
XsollaCore::WebRequestHelper.InternalPerformWebRequest = (void *(*)(void*, void *, void *))XsollaCore::WebRequestHelper.InternalPerformWebRequestOffset;

XsollaCore::WebRequestHelper.SendWebRequestOffset = getRealOffset(0x92B3B4);
XsollaCore::WebRequestHelper.SendWebRequest = (void *(*)(void*, void *))XsollaCore::WebRequestHelper.SendWebRequestOffset;

XsollaCore::XsollaSettings.get_PlayfabTitleIdOffset = getRealOffset(0x92CA28);
XsollaCore::XsollaSettings.get_PlayfabTitleId = (monoString *(*)())XsollaCore::XsollaSettings.get_PlayfabTitleIdOffset;

XsollaCore::XsollaSettings.set_PlayfabTitleIdOffset = getRealOffset(0x92CC10);
XsollaCore::XsollaSettings.set_PlayfabTitleId = (void(*)(monoString*))XsollaCore::XsollaSettings.set_PlayfabTitleIdOffset;

XsollaCore::XsollaSettings.get_ServerlessProjectIdOffset = getRealOffset(0x92CC3C);
XsollaCore::XsollaSettings.get_IsSandboxOffset = getRealOffset(0x92CC88);
XsollaCore::XsollaSettings.get_IsSandbox = (bool(*)())XsollaCore::XsollaSettings.get_IsSandboxOffset;

XsollaCore::XsollaSettings.set_IsSandboxOffset = getRealOffset(0x92CCAC);
XsollaCore::XsollaSettings.set_IsSandbox = (void(*)(bool))XsollaCore::XsollaSettings.set_IsSandboxOffset;

XsollaCore::XsollaSettings.get_InAppBrowserEnabledOffset = getRealOffset(0x92CCD4);
XsollaCore::XsollaSettings.get_InAppBrowserEnabled = (bool(*)())XsollaCore::XsollaSettings.get_InAppBrowserEnabledOffset;

XsollaCore::XsollaSettings.set_InAppBrowserEnabledOffset = getRealOffset(0x92CCF8);
XsollaCore::XsollaSettings.set_InAppBrowserEnabled = (void(*)(bool))XsollaCore::XsollaSettings.set_InAppBrowserEnabledOffset;

XsollaCore::XsollaSettings.get_PaystationThemeOffset = getRealOffset(0x92CD20);
XsollaCore::XsollaSettings.get_PaystationTheme = (int (*)())XsollaCore::XsollaSettings.get_PaystationThemeOffset;

XsollaCore::XsollaSettings.set_PaystationThemeOffset = getRealOffset(0x92CD44);
XsollaCore::XsollaSettings.set_PaystationTheme = (void(*)(int))XsollaCore::XsollaSettings.set_PaystationThemeOffset;

XsollaCore::XsollaSettings.get_InstanceOffset = getRealOffset(0x92CA4C);
XsollaCore::XsollaSettings.get_Instance = (void *(*)())XsollaCore::XsollaSettings.get_InstanceOffset;

XsollaCore::XsollaSettings.GetSdkPathOffset = getRealOffset(0x92CD6C);
XsollaCore::XsollaSettings.GetSdkPath = (monoString *(*)())XsollaCore::XsollaSettings.GetSdkPathOffset;

XsollaCore::XsollaSettings.GetAbsoluteSdkPathOffset = getRealOffset(0x92CE2C);
XsollaCore::XsollaSettings.GetAbsoluteSdkPath = (monoString *(*)())XsollaCore::XsollaSettings.GetAbsoluteSdkPathOffset;

XsollaCore::XsollaSettings.FindEditorOffset = getRealOffset(0x92CEBC);
XsollaCore::XsollaSettings.FindEditor = (monoString *(*)(monoString*))XsollaCore::XsollaSettings.FindEditorOffset;

XsollaCore::XsollaSettings.SaveAssetOffset = getRealOffset(0x92CE28);
XsollaCore::XsollaSettings.SaveAsset = (void(*)(monoString*, monoString*))XsollaCore::XsollaSettings.SaveAssetOffset;

XsollaCore::XsollaSettings.MarkAssetDirtyOffset = getRealOffset(0x92CC38);
XsollaCore::XsollaSettings.MarkAssetDirty = (void(*)())XsollaCore::XsollaSettings.MarkAssetDirtyOffset;

XsollaCorePopup::ConfirmationCodePopup.AwakeOffset = getRealOffset(0x926CE0);
XsollaCorePopup::ConfirmationCodePopup.Awake = (void(*)(void*))XsollaCorePopup::ConfirmationCodePopup.AwakeOffset;

XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetTitleOffset = getRealOffset(0x926E40);
XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetTitle = (void *(*)(void*, monoString*))XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetTitleOffset;

XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetConfirmButtonTextOffset = getRealOffset(0x926F64);
XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetConfirmButtonText = (void *(*)(void*, monoString*))XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetConfirmButtonTextOffset;

XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetCancelCallbackOffset = getRealOffset(0x926FA4);
XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetCancelCallback = (void *(*)(void*, void *))XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetCancelCallbackOffset;

XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetCancelButtonTextOffset = getRealOffset(0x927088);
XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetCancelButtonText = (void *(*)(void*, monoString*))XsollaCorePopup::ConfirmationCodePopup.XsollaCorePopupIConfirmationCodePopupSetCancelButtonTextOffset;

XsollaCorePopup::ConfirmationCodePopup.Awakeb__6_0Offset = getRealOffset(0x9270D0);
XsollaCorePopup::ConfirmationCodePopup.Awakeb__6_0 = (void(*)(void*))XsollaCorePopup::ConfirmationCodePopup.Awakeb__6_0Offset;

XsollaCorePopup::ConfirmationCodePopup.Awakeb__6_1Offset = getRealOffset(0x927164);
XsollaCorePopup::ConfirmationCodePopup.Awakeb__6_1 = (void(*)(void*))XsollaCorePopup::ConfirmationCodePopup.Awakeb__6_1Offset;

XsollaCorePopup::ConfirmationPopup.AwakeOffset = getRealOffset(0x9273B0);
XsollaCorePopup::ConfirmationPopup.Awake = (void(*)(void*))XsollaCorePopup::ConfirmationPopup.AwakeOffset;

XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetMessageOffset = getRealOffset(0x927510);
XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetMessage = (void *(*)(void*, monoString*))XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetMessageOffset;

XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetTitleOffset = getRealOffset(0x927550);
XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetTitle = (void *(*)(void*, monoString*))XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetTitleOffset;

XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetConfirmCallbackOffset = getRealOffset(0x927590);
XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetConfirmCallback = (void *(*)(void*, void *))XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetConfirmCallbackOffset;

XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetConfirmButtonTextOffset = getRealOffset(0x927674);
XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetConfirmButtonText = (void *(*)(void*, monoString*))XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetConfirmButtonTextOffset;

XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetCancelCallbackOffset = getRealOffset(0x9276B4);
XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetCancelCallback = (void *(*)(void*, void *))XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetCancelCallbackOffset;

XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetCancelButtonTextOffset = getRealOffset(0x927798);
XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetCancelButtonText = (void *(*)(void*, monoString*))XsollaCorePopup::ConfirmationPopup.XsollaCorePopupIConfirmationPopupSetCancelButtonTextOffset;

XsollaCorePopup::ConfirmationPopup.Awakeb__6_0Offset = getRealOffset(0x9277E0);
XsollaCorePopup::ConfirmationPopup.Awakeb__6_0 = (void(*)(void*))XsollaCorePopup::ConfirmationPopup.Awakeb__6_0Offset;

XsollaCorePopup::ConfirmationPopup.Awakeb__6_1Offset = getRealOffset(0x927874);
XsollaCorePopup::ConfirmationPopup.Awakeb__6_1 = (void(*)(void*))XsollaCorePopup::ConfirmationPopup.Awakeb__6_1Offset;

XsollaCorePopup::ErrorPopup.AwakeOffset = getRealOffset(0x927A78);
XsollaCorePopup::ErrorPopup.Awake = (void(*)(void*))XsollaCorePopup::ErrorPopup.AwakeOffset;

XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetButtonTextOffset = getRealOffset(0x927B50);
XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetButtonText = (void *(*)(void*, monoString*))XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetButtonTextOffset;

XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetCallbackOffset = getRealOffset(0x927B90);
XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetCallback = (void *(*)(void*, void *))XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetCallbackOffset;

XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetMessageOffset = getRealOffset(0x927C74);
XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetMessage = (void *(*)(void*, monoString*))XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetMessageOffset;

XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetTitleOffset = getRealOffset(0x927CB4);
XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetTitle = (void *(*)(void*, monoString*))XsollaCorePopup::ErrorPopup.XsollaCorePopupIErrorPopupSetTitleOffset;

XsollaCorePopup::ErrorPopup.Awakeb__4_0Offset = getRealOffset(0x927CFC);
XsollaCorePopup::ErrorPopup.Awakeb__4_0 = (void(*)(void*))XsollaCorePopup::ErrorPopup.Awakeb__4_0Offset;

XsollaCorePopup::GameObjectPopupExtensions.AddBackgroundOffset = getRealOffset(0x927E48);
XsollaCorePopup::GameObjectPopupExtensions.AddBackground = (void *(*)(void *, void *))XsollaCorePopup::GameObjectPopupExtensions.AddBackgroundOffset;

XsollaCorePopup::GameObjectPopupExtensions.CreateObjectForOffset = getRealOffset(0x927EAC);
XsollaCorePopup::GameObjectPopupExtensions.CreateObjectFor = (void *(*)(void *, void *))XsollaCorePopup::GameObjectPopupExtensions.CreateObjectForOffset;

XsollaCorePopup::PopupFactory.InitOffset = getRealOffset(0x92800C);
XsollaCorePopup::PopupFactory.Init = (void(*)(void*))XsollaCorePopup::PopupFactory.InitOffset;

XsollaCorePopup::PopupFactory.CreateDefaultPopupOffset = getRealOffset(0x928124);
XsollaCorePopup::PopupFactory.CreateDefaultPopup = (void *(*)(void*, void *, void *))XsollaCorePopup::PopupFactory.CreateDefaultPopupOffset;

XsollaCorePopup::PopupFactory.CreateSuccessOffset = getRealOffset(0x928240);
XsollaCorePopup::PopupFactory.CreateSuccess = (void *(*)(void*))XsollaCorePopup::PopupFactory.CreateSuccessOffset;

XsollaCorePopup::PopupFactory.CreateErrorOffset = getRealOffset(0x9282B8);
XsollaCorePopup::PopupFactory.CreateError = (void *(*)(void*))XsollaCorePopup::PopupFactory.CreateErrorOffset;

XsollaCorePopup::PopupFactory.CreateConfirmationOffset = getRealOffset(0x928330);
XsollaCorePopup::PopupFactory.CreateConfirmation = (void *(*)(void*))XsollaCorePopup::PopupFactory.CreateConfirmationOffset;

XsollaCorePopup::PopupFactory.CreateCodeConfirmationOffset = getRealOffset(0x9283A8);
XsollaCorePopup::PopupFactory.CreateCodeConfirmation = (void *(*)(void*))XsollaCorePopup::PopupFactory.CreateCodeConfirmationOffset;

XsollaCorePopup::SuccessPopup.AwakeOffset = getRealOffset(0x92847C);
XsollaCorePopup::SuccessPopup.Awake = (void(*)(void*))XsollaCorePopup::SuccessPopup.AwakeOffset;

XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetButtonTextOffset = getRealOffset(0x928554);
XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetButtonText = (void *(*)(void*, monoString*))XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetButtonTextOffset;

XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetCallbackOffset = getRealOffset(0x9285A8);
XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetCallback = (void *(*)(void*, void *))XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetCallbackOffset;

XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetMessageOffset = getRealOffset(0x92868C);
XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetMessage = (void *(*)(void*, monoString*))XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetMessageOffset;

XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetTitleOffset = getRealOffset(0x9286E0);
XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetTitle = (void *(*)(void*, monoString*))XsollaCorePopup::SuccessPopup.XsollaCorePopupISuccessPopupSetTitleOffset;

XsollaCorePopup::SuccessPopup.Awakeb__4_0Offset = getRealOffset(0x92873C);
XsollaCorePopup::SuccessPopup.Awakeb__4_0 = (void(*)(void*))XsollaCorePopup::SuccessPopup.Awakeb__4_0Offset;

XsollaDemo::StoreDemoPopup.ShowSuccessOffset = getRealOffset(0x931F24);
XsollaDemo::StoreDemoPopup.ShowSuccess = (void(*)(monoString*))XsollaDemo::StoreDemoPopup.ShowSuccessOffset;

XsollaDemo::StoreDemoPopup.ShowErrorOffset = getRealOffset(0x9317D0);
XsollaDemo::StoreDemoPopup.ShowError = (void *(*)(void *))XsollaDemo::StoreDemoPopup.ShowErrorOffset;

XsollaDemo::StoreDemoPopup.ShowConfirmOffset = getRealOffset(0x932288);
XsollaDemo::StoreDemoPopup.ShowConfirm = (void(*)(void *, void *, monoString*))XsollaDemo::StoreDemoPopup.ShowConfirmOffset;

XsollaDemoServerlessIntegration::ServerlessCatalogItem.IsCurrencyOffset = getRealOffset(0x92E5B0);
XsollaDemoServerlessIntegration::ServerlessCatalogItem.IsCurrency = (bool(*)(void*))XsollaDemoServerlessIntegration::ServerlessCatalogItem.IsCurrencyOffset;

XsollaDemoServerlessIntegration::ServerlessCatalogItem.IsVirtualItemOffset = getRealOffset(0x92E620);
XsollaDemoServerlessIntegration::ServerlessCatalogItem.IsVirtualItem = (bool(*)(void*))XsollaDemoServerlessIntegration::ServerlessCatalogItem.IsVirtualItemOffset;

XsollaDemoServerlessIntegration::ServerlessUserCatalog.GetCatalogOffset = getRealOffset(0x92F610);
XsollaDemoServerlessIntegration::ExtraPanelInfoButtons.InitOffset = getRealOffset(0x92D1E4);
XsollaDemoServerlessIntegration::ExtraPanelInfoButtons.Init = (void(*)(void*))XsollaDemoServerlessIntegration::ExtraPanelInfoButtons.InitOffset;

XsollaDemoServerlessIntegration::ExtraPanelInfoButtons.EnableInfoButtonOffset = getRealOffset(0x92D27C);
XsollaDemoServerlessIntegration::ExtraPanelInfoButtons.EnableInfoButton = (void(*)(void*, void *, monoString*))XsollaDemoServerlessIntegration::ExtraPanelInfoButtons.EnableInfoButtonOffset;

XsollaDemoServerlessIntegration::PurchaseHelper.StopProccessingOffset = getRealOffset(0x92D5BC);
XsollaDemoServerlessIntegration::PurchaseHelper.StopProccessing = (void(*)(void*, monoString*))XsollaDemoServerlessIntegration::PurchaseHelper.StopProccessingOffset;

XsollaDemoServerlessIntegration::PurchaseHelper.IsWrongProjectSettingsOffset = getRealOffset(0x92D650);
XsollaDemoServerlessIntegration::PurchaseHelper.IsWrongProjectSettings = (bool(*)(void*, void *))XsollaDemoServerlessIntegration::PurchaseHelper.IsWrongProjectSettingsOffset;

XsollaDemoServerlessIntegration::PurchaseHelper.CheckUserFlowOffset = getRealOffset(0x92D6F8);
XsollaDemoServerlessIntegration::PurchaseHelper.CheckUserFlow = (void(*)(void*, monoString*, monoString*))XsollaDemoServerlessIntegration::PurchaseHelper.CheckUserFlowOffset;

XsollaDemoServerlessIntegration::PurchaseHelper.IsUserCompletePurchaseFlowOffset = getRealOffset(0x92D79C);
XsollaDemoServerlessIntegration::PurchaseHelper.IsUserCompletePurchaseFlow = (bool(*)(void*, monoString*))XsollaDemoServerlessIntegration::PurchaseHelper.IsUserCompletePurchaseFlowOffset;

XsollaDemoServerlessIntegration::PurchaseHelper.NeedToRequestStatusAgainOffset = getRealOffset(0x92D810);
XsollaDemoServerlessIntegration::PurchaseHelper.NeedToRequestStatusAgain = (bool(*)(void*, monoString*))XsollaDemoServerlessIntegration::PurchaseHelper.NeedToRequestStatusAgainOffset;

XsollaDemoServerlessIntegration::PurchaseHelper.TransactionIsStoppedOffset = getRealOffset(0x92D824);
XsollaDemoServerlessIntegration::PurchaseHelper.TransactionIsStopped = (bool(*)(void*, monoString*))XsollaDemoServerlessIntegration::PurchaseHelper.TransactionIsStoppedOffset;

XsollaDemoServerlessIntegration::PurchaseHelper.IsTheInGameBrowserOpenOffset = getRealOffset(0x92D8D8);
XsollaDemoServerlessIntegration::PurchaseHelper.IsTheInGameBrowserOpen = (bool(*)(void*))XsollaDemoServerlessIntegration::PurchaseHelper.IsTheInGameBrowserOpenOffset;

XsollaDemoServerlessIntegration::ServerlessDemoImplementation.GetCatalogGroupsByItemOffset = getRealOffset(0x92EE78);
XsollaDemoStore::ExtraPanelAccountButtons.InitOffset = getRealOffset(0x92F914);
XsollaDemoStore::ExtraPanelAccountButtons.Init = (void(*)(void*))XsollaDemoStore::ExtraPanelAccountButtons.InitOffset;

XsollaDemoStore::ExtraPanelInfoButtons.InitOffset = getRealOffset(0x92FCD8);
XsollaDemoStore::ExtraPanelInfoButtons.Init = (void(*)(void*))XsollaDemoStore::ExtraPanelInfoButtons.InitOffset;

XsollaDemoStore::ExtraPanelInfoButtons.EnableInfoButtonOffset = getRealOffset(0x92FDA8);
XsollaDemoStore::ExtraPanelInfoButtons.EnableInfoButton = (void(*)(void*, void *, monoString*))XsollaDemoStore::ExtraPanelInfoButtons.EnableInfoButtonOffset;

XsollaDemoStore::ItemGroupsHelper.GetAllAsListOffset = getRealOffset(0x92FFD4);
XsollaDemoStore::ItemGroupsHelper.GetAllAsNamesOffset = getRealOffset(0x930184);
XsollaDemoStore::ItemGroupsHelper.GetAllAsFlagsOffset = getRealOffset(0x930198);
XsollaDemoStore::ItemGroupsHelper.GetAllAsFlags = (int (*)())XsollaDemoStore::ItemGroupsHelper.GetAllAsFlagsOffset;

XsollaDemoStore::ItemGroupsHelper.GetByOffset = getRealOffset(0x9303F4);
XsollaDemoStore::ItemGroupsHelper.GetBy = (int (*)(void *))XsollaDemoStore::ItemGroupsHelper.GetByOffset;

XsollaDemoStore::ItemGroupsHelper.GetNamesByOffset = getRealOffset(0x930284);
XsollaDemoStore::ItemGroupsHelper.GetNamesBy1Offset = getRealOffset(0x930444);
XsollaDemoStore::PlayfabDemoImplementation.WaitCatalogCoroutineOffset = getRealOffset(0x930890);
XsollaDemoStore::PlayfabDemoImplementation.WaitCatalogCoroutine = (void *(*)(void*))XsollaDemoStore::PlayfabDemoImplementation.WaitCatalogCoroutineOffset;

XsollaDemoStore::PlayfabDemoImplementation.GetCatalogGroupsByItemOffset = getRealOffset(0x930930);
XsollaDemoStore::PlayfabDemoImplementation.CatalogRequestCoroutineb__5_0Offset = getRealOffset(0x930A68);
XsollaDemoStore::PlayfabDemoImplementation.CatalogRequestCoroutineb__5_0 = (void(*)(void*, void *))XsollaDemoStore::PlayfabDemoImplementation.CatalogRequestCoroutineb__5_0Offset;

XsollaDemoStore::PlayfabDemoImplementation.WaitCatalogCoroutineb__6_0Offset = getRealOffset(0x930A90);
XsollaDemoStore::PlayfabDemoImplementation.WaitCatalogCoroutineb__6_0 = (bool(*)(void*))XsollaDemoStore::PlayfabDemoImplementation.WaitCatalogCoroutineb__6_0Offset;

XsollaPayments::PaystationThemeHelper.ConvertToSettingsOffset = getRealOffset(0x9338B8);
XsollaPayments::PaystationThemeHelper.ConvertToSettings = (monoString *(*)(int))XsollaPayments::PaystationThemeHelper.ConvertToSettingsOffset;

XsollaPaymentsApiPlayfab::PlayfabApi.get_TokenOffset = getRealOffset(0x9333FC);
XsollaPaymentsApiPlayfab::PlayfabApi.get_Token = (void *(*)(void*))XsollaPaymentsApiPlayfab::PlayfabApi.get_TokenOffset;

XsollaPaymentsApiPlayfab::PlayfabApi.set_TokenOffset = getRealOffset(0x933404);
XsollaPaymentsApiPlayfab::PlayfabApi.set_Token = (void(*)(void*, void *))XsollaPaymentsApiPlayfab::PlayfabApi.set_TokenOffset;

XsollaPaymentsApiPlayfab::PlayfabApi.InitOffset = getRealOffset(0x93340C);
XsollaPaymentsApiPlayfab::PlayfabApi.Init = (void(*)(void*))XsollaPaymentsApiPlayfab::PlayfabApi.InitOffset;

XsollaPaymentsApiPlayfab::PlayfabApi.GetAuthHeaderOffset = getRealOffset(0x932DE0);
XsollaPaymentsApiPlayfab::PlayfabApi.GetAuthHeader = (void *(*)(void*))XsollaPaymentsApiPlayfab::PlayfabApi.GetAuthHeaderOffset;

XsollaPaymentsApiPlayfab::PlayfabApi.GetFormattedUrlOffset = getRealOffset(0x93264C);
XsollaPaymentsApiPlayfab::PlayfabApi.GetFormattedUrl = (monoString *(*)(monoString*))XsollaPaymentsApiPlayfab::PlayfabApi.GetFormattedUrlOffset;

XsollaPaymentsApiPlayfabAuth::PlayfabUserAuthResponseEntity.get_SessionTicketOffset = getRealOffset(0x932AF8);
XsollaPaymentsApiPlayfabAuth::PlayfabUserAuthResponseEntity.get_SessionTicket = (monoString *(*)(void*))XsollaPaymentsApiPlayfabAuth::PlayfabUserAuthResponseEntity.get_SessionTicketOffset;

XsollaPaymentsApiPlayfabAuth::PlayfabUserAuthResponseEntity.get_TokenExpirationOffset = getRealOffset(0x932B18);
XsollaPaymentsApiPlayfabAuth::PlayfabUserAuthResponseEntity.get_TokenExpiration = (monoString *(*)(void*))XsollaPaymentsApiPlayfabAuth::PlayfabUserAuthResponseEntity.get_TokenExpirationOffset;

XsollaPaymentsApiPlayfabAuth::PlayfabUserRegistrationResponseEntity.get_SessionTicketOffset = getRealOffset(0x932BB4);
XsollaPaymentsApiPlayfabAuth::PlayfabUserRegistrationResponseEntity.get_SessionTicket = (monoString *(*)(void*))XsollaPaymentsApiPlayfabAuth::PlayfabUserRegistrationResponseEntity.get_SessionTicketOffset;

XsollaPaymentsApiPlayfabAuth::PlayfabUserRegistrationResponseEntity.get_TokenExpirationOffset = getRealOffset(0x932BD4);
XsollaPaymentsApiPlayfabAuth::PlayfabUserRegistrationResponseEntity.get_TokenExpiration = (monoString *(*)(void*))XsollaPaymentsApiPlayfabAuth::PlayfabUserRegistrationResponseEntity.get_TokenExpirationOffset;

XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.IsVirtualCurrencyOffset = getRealOffset(0x930B48);
XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.IsVirtualCurrency = (bool(*)(void*))XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.IsVirtualCurrencyOffset;

XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.IsConsumableOffset = getRealOffset(0x930CC0);
XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.IsConsumable = (bool(*)(void*))XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.IsConsumableOffset;

XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.GetVirtualPriceOffset = getRealOffset(0x930E6C);
XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.GetRealPriceOffset = getRealOffset(0x930D24);
XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.GetVirtualCurrencySkuOffset = getRealOffset(0x9311F0);
XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.GetVirtualCurrencySku = (monoString *(*)(void*))XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.GetVirtualCurrencySkuOffset;

XsollaPaymentsApiPlayfabCatalog::CatalogItemEntity.GetVirtualCurrencyAmountOffset = getRealOffset(0x931288);
XsollaPaymentsApiServerlessIntegration::TransactionStatus.IsSuccessOffset = getRealOffset(0x92E028);
XsollaPaymentsApiServerlessIntegration::TransactionStatus.IsSuccess = (bool(*)(monoString*))XsollaPaymentsApiServerlessIntegration::TransactionStatus.IsSuccessOffset;

XsollaPaymentsApiServerlessIntegration::TransactionStatus.IsFailedOffset = getRealOffset(0x92E130);
XsollaPaymentsApiServerlessIntegration::TransactionStatus.IsFailed = (bool(*)(monoString*))XsollaPaymentsApiServerlessIntegration::TransactionStatus.IsFailedOffset;

XsollaPaymentsApiServerlessIntegration::TransactionStatus.IsInProgressOffset = getRealOffset(0x92DF04);
XsollaPaymentsApiServerlessIntegration::TransactionStatus.IsInProgress = (bool(*)(monoString*))XsollaPaymentsApiServerlessIntegration::TransactionStatus.IsInProgressOffset;

mset::CubeBuffer.set_filterModeOffset = getRealOffset(0x938D38);
mset::CubeBuffer.set_filterMode = (void(*)(void*, int))mset::CubeBuffer.set_filterModeOffset;

mset::CubeBuffer.get_filterModeOffset = getRealOffset(0x938E08);
mset::CubeBuffer.get_filterMode = (int (*)(void*))mset::CubeBuffer.get_filterModeOffset;

mset::CubeBuffer.get_widthOffset = getRealOffset(0x938E10);
mset::CubeBuffer.get_width = (int(*)(void*))mset::CubeBuffer.get_widthOffset;

mset::CubeBuffer.get_heightOffset = getRealOffset(0x938E18);
mset::CubeBuffer.get_height = (int(*)(void*))mset::CubeBuffer.get_heightOffset;

mset::CubeBuffer.FinalizeOffset = getRealOffset(0x938E68);
mset::CubeBuffer.Finalize = (void(*)(void*))mset::CubeBuffer.FinalizeOffset;

mset::CubeBuffer.clearOffset = getRealOffset(0x938E58);
mset::CubeBuffer.clear = (void(*)(void*))mset::CubeBuffer.clearOffset;

mset::CubeBuffer.emptyOffset = getRealOffset(0x938E70);
mset::CubeBuffer.empty = (bool(*)(void*))mset::CubeBuffer.emptyOffset;

mset::CubeBuffer.applyExposure1Offset = getRealOffset(0x93A30C);
mset::CubeBuffer.applyExposure1 = (void(*)(void*, float))mset::CubeBuffer.applyExposure1Offset;

mset::CubeBuffer.toIndexOffset = getRealOffset(0x93A400);
mset::CubeBuffer.toIndex = (int(*)(void*, int, int, int))mset::CubeBuffer.toIndexOffset;

mset::CubeBuffer.toIndex1Offset = getRealOffset(0x93A4BC);
mset::CubeBuffer.toIndex1 = (int(*)(void*, int, int, int))mset::CubeBuffer.toIndex1Offset;

mset::CubeBuffer.linkEdgesOffset = getRealOffset(0x93A578);
mset::CubeBuffer.linkEdges = (void(*)())mset::CubeBuffer.linkEdgesOffset;

mset::CubeBuffer.toIndexLinkedOffset = getRealOffset(0x93B4B4);
mset::CubeBuffer.toIndexLinked = (int(*)(void*, int, int, int))mset::CubeBuffer.toIndexLinkedOffset;

mset::CubeBuffer.resizeOffset = getRealOffset(0x93CAE0);
mset::CubeBuffer.resize = (void(*)(void*, int))mset::CubeBuffer.resizeOffset;

mset::CubeBuffer.resize1Offset = getRealOffset(0x93CB90);
mset::CubeBuffer.resize1 = (void(*)(void*, int, Color))mset::CubeBuffer.resize1Offset;

mset::CubeBuffer.resampleOffset = getRealOffset(0x93CBD4);
mset::CubeBuffer.resample = (void(*)(void*, int))mset::CubeBuffer.resampleOffset;

mset::CubeBuffer.fromCubeOffset = getRealOffset(0x93D3CC);
mset::CubeBuffer.fromCube = (void(*)(void*, void *, int, int, bool))mset::CubeBuffer.fromCubeOffset;

mset::CubeBuffer.fromBufferOffset = getRealOffset(0x93D948);
mset::CubeBuffer.fromBuffer = (void(*)(void*, void *))mset::CubeBuffer.fromBufferOffset;

mset::CubeBuffer.fromPanoTextureOffset = getRealOffset(0x93DA58);
mset::CubeBuffer.fromPanoTexture = (void(*)(void*, void *, int, int, bool))mset::CubeBuffer.fromPanoTextureOffset;

mset::CubeBuffer.fromColTextureOffset = getRealOffset(0x93DD48);
mset::CubeBuffer.fromColTexture = (void(*)(void*, void *, int, bool))mset::CubeBuffer.fromColTextureOffset;

mset::CubeBuffer.fromColTexture1Offset = getRealOffset(0x93DD70);
mset::CubeBuffer.fromColTexture1 = (void(*)(void*, void *, int, int, bool))mset::CubeBuffer.fromColTexture1Offset;

mset::CubeBuffer.fromHorizCrossTextureOffset = getRealOffset(0x93DF68);
mset::CubeBuffer.fromHorizCrossTexture = (void(*)(void*, void *, int, bool))mset::CubeBuffer.fromHorizCrossTextureOffset;

mset::CubeBuffer.fromHorizCrossTexture1Offset = getRealOffset(0x93DF90);
mset::CubeBuffer.fromHorizCrossTexture1 = (void(*)(void*, void *, int, int, bool))mset::CubeBuffer.fromHorizCrossTexture1Offset;

mset::FreeProbe.get_targetCubeOffset = getRealOffset(0x93EBCC);
mset::FreeProbe.get_targetCube = (void *(*)(void*))mset::FreeProbe.get_targetCubeOffset;

mset::FreeProbe.set_targetCubeOffset = getRealOffset(0x93EBD4);
mset::FreeProbe.set_targetCube = (void(*)(void*, void *))mset::FreeProbe.set_targetCubeOffset;

mset::FreeProbe.UpdateFaceTextureOffset = getRealOffset(0x93EBDC);
mset::FreeProbe.UpdateFaceTexture = (void(*)(void*))mset::FreeProbe.UpdateFaceTextureOffset;

mset::FreeProbe.FreeFaceTextureOffset = getRealOffset(0x93EF70);
mset::FreeProbe.FreeFaceTexture = (void(*)(void*))mset::FreeProbe.FreeFaceTextureOffset;

mset::FreeProbe.StartOffset = getRealOffset(0x93F0D8);
mset::FreeProbe.Start = (void(*)(void*))mset::FreeProbe.StartOffset;

mset::FreeProbe.AwakeOffset = getRealOffset(0x93F190);
mset::FreeProbe.Awake = (void(*)(void*))mset::FreeProbe.AwakeOffset;

mset::FreeProbe.QueueCubemapOffset = getRealOffset(0x93F5DC);
mset::FreeProbe.QueueCubemap = (void(*)(void*, void *, bool, Vector3, int))mset::FreeProbe.QueueCubemapOffset;

mset::FreeProbe.ClearQueueOffset = getRealOffset(0x93F748);
mset::FreeProbe.ClearQueue = (void(*)(void*))mset::FreeProbe.ClearQueueOffset;

mset::FreeProbe.RunQueueOffset = getRealOffset(0x93F75C);
mset::FreeProbe.RunQueue = (void(*)(void*))mset::FreeProbe.RunQueueOffset;

mset::FreeProbe.StartStageOffset = getRealOffset(0x93FB68);
mset::FreeProbe.StartStage = (void(*)(void*, int))mset::FreeProbe.StartStageOffset;

mset::FreeProbe.OnPreCullOffset = getRealOffset(0x9402DC);
mset::FreeProbe.OnPreCull = (void(*)(void*))mset::FreeProbe.OnPreCullOffset;

mset::FreeProbe.UpdateOffset = getRealOffset(0x940A08);
mset::FreeProbe.Update = (void(*)(void*))mset::FreeProbe.UpdateOffset;

mset::FreeProbe.OnPostRenderOffset = getRealOffset(0x940C00);
mset::FreeProbe.OnPostRender = (void(*)(void*))mset::FreeProbe.OnPostRenderOffset;

mset::FreeProbe.SetFacePixelsOffset = getRealOffset(0x94180C);
mset::FreeProbe.SetFacePixels = (void(*)(void *, int, void *, int, bool, bool, bool))mset::FreeProbe.SetFacePixelsOffset;

mset::FreeProbe.toggleKeywordPairOffset = getRealOffset(0x940294);
mset::FreeProbe.toggleKeywordPair = (void(*)(monoString*, monoString*, bool))mset::FreeProbe.toggleKeywordPairOffset;

mset::FreeProbe.toggleKeywordPair1Offset = getRealOffset(0x941D08);
mset::FreeProbe.toggleKeywordPair1 = (void(*)(void *, monoString*, monoString*, bool))mset::FreeProbe.toggleKeywordPair1Offset;

mset::GLUtil.StripFirstVertexOffset = getRealOffset(0x155B63C);
mset::GLUtil.StripFirstVertex = (void(*)(Vector3))mset::GLUtil.StripFirstVertexOffset;

mset::GLUtil.StripFirstVertex3Offset = getRealOffset(0x155B6C8);
mset::GLUtil.StripFirstVertex3 = (void(*)(float, float, float))mset::GLUtil.StripFirstVertex3Offset;

mset::GLUtil.StripVertex3Offset = getRealOffset(0x155B768);
mset::GLUtil.StripVertex3 = (void(*)(float, float, float))mset::GLUtil.StripVertex3Offset;

mset::GLUtil.StripVertexOffset = getRealOffset(0x155B830);
mset::GLUtil.StripVertex = (void(*)(Vector3))mset::GLUtil.StripVertexOffset;

mset::GLUtil.DrawCubeOffset = getRealOffset(0x155B8E4);
mset::GLUtil.DrawCube = (void(*)(Vector3, Vector3))mset::GLUtil.DrawCubeOffset;

mset::GLUtil.DrawWireCubeOffset = getRealOffset(0x155BBCC);
mset::GLUtil.DrawWireCube = (void(*)(Vector3, Vector3))mset::GLUtil.DrawWireCubeOffset;

mset::Logo.ResetOffset = getRealOffset(0x155BFBC);
mset::Logo.Reset = (void(*)(void*))mset::Logo.ResetOffset;

mset::Logo.StartOffset = getRealOffset(0x155C048);
mset::Logo.Start = (void(*)(void*))mset::Logo.StartOffset;

mset::Logo.updateTexRectOffset = getRealOffset(0x155C04C);
mset::Logo.updateTexRect = (void(*)(void*))mset::Logo.updateTexRectOffset;

mset::Logo.OnGUIOffset = getRealOffset(0x155C37C);
mset::Logo.OnGUI = (void(*)(void*))mset::Logo.OnGUIOffset;

mset::QPow.Pow1Offset = getRealOffset(0x155C550);
mset::QPow.Pow1 = (float(*)(float))mset::QPow.Pow1Offset;

mset::QPow.Pow2Offset = getRealOffset(0x155C554);
mset::QPow.Pow2 = (float(*)(float))mset::QPow.Pow2Offset;

mset::QPow.Pow4Offset = getRealOffset(0x155C564);
mset::QPow.Pow4 = (float(*)(float))mset::QPow.Pow4Offset;

mset::QPow.Pow8Offset = getRealOffset(0x155C578);
mset::QPow.Pow8 = (float(*)(float))mset::QPow.Pow8Offset;

mset::QPow.Pow16Offset = getRealOffset(0x155C590);
mset::QPow.Pow16 = (float(*)(float))mset::QPow.Pow16Offset;

mset::QPow.Pow32Offset = getRealOffset(0x155C5AC);
mset::QPow.Pow32 = (float(*)(float))mset::QPow.Pow32Offset;

mset::QPow.Pow64Offset = getRealOffset(0x155C5CC);
mset::QPow.Pow64 = (float(*)(float))mset::QPow.Pow64Offset;

mset::QPow.Pow128Offset = getRealOffset(0x155C5F0);
mset::QPow.Pow128 = (float(*)(float))mset::QPow.Pow128Offset;

mset::QPow.Pow256Offset = getRealOffset(0x155C618);
mset::QPow.Pow256 = (float(*)(float))mset::QPow.Pow256Offset;

mset::QPow.Pow512Offset = getRealOffset(0x155C644);
mset::QPow.Pow512 = (float(*)(float))mset::QPow.Pow512Offset;

mset::QPow.closestPowFuncOffset = getRealOffset(0x155C674);
mset::QPow.closestPowFunc = (void *(*)(int))mset::QPow.closestPowFuncOffset;

mset::QPow.Log2iOffset = getRealOffset(0x155C898);
mset::QPow.Log2i = (int(*)(int))mset::QPow.Log2iOffset;

mset::QPow.clampedDownShiftOffset = getRealOffset(0x155C8E0);
mset::QPow.clampedDownShift = (int(*)(int, int))mset::QPow.clampedDownShiftOffset;

mset::QPow.clampedDownShift1Offset = getRealOffset(0x155C918);
mset::QPow.clampedDownShift1 = (int(*)(int, int, int))mset::QPow.clampedDownShift1Offset;

mset::SHEncoding.clearToBlackOffset = getRealOffset(0x155D8B0);
mset::SHEncoding.clearToBlack = (void(*)(void*))mset::SHEncoding.clearToBlackOffset;

mset::SHEncoding.equalsOffset = getRealOffset(0x155D9D8);
mset::SHEncoding.equals = (bool(*)(void*, void *))mset::SHEncoding.equalsOffset;

mset::SHEncoding.copyFromOffset = getRealOffset(0x155DA90);
mset::SHEncoding.copyFrom = (void(*)(void*, void *))mset::SHEncoding.copyFromOffset;

mset::SHEncoding.copyToBufferOffset = getRealOffset(0x155DB24);
mset::SHEncoding.copyToBuffer = (void(*)(void*))mset::SHEncoding.copyToBufferOffset;

mset::SHUtil.project_l0_m0Offset = getRealOffset(0x155DE08);
mset::SHUtil.project_l0_m0 = (float(*)(Vector3))mset::SHUtil.project_l0_m0Offset;

mset::SHUtil.project_l1_mneg1Offset = getRealOffset(0x155DEA8);
mset::SHUtil.project_l1_mneg1 = (float(*)(Vector3))mset::SHUtil.project_l1_mneg1Offset;

mset::SHUtil.project_l1_m0Offset = getRealOffset(0x155DF58);
mset::SHUtil.project_l1_m0 = (float(*)(Vector3))mset::SHUtil.project_l1_m0Offset;

mset::SHUtil.project_l1_m1Offset = getRealOffset(0x155E008);
mset::SHUtil.project_l1_m1 = (float(*)(Vector3))mset::SHUtil.project_l1_m1Offset;

mset::SHUtil.project_l2_mneg2Offset = getRealOffset(0x155E0B8);
mset::SHUtil.project_l2_mneg2 = (float(*)(Vector3))mset::SHUtil.project_l2_mneg2Offset;

mset::SHUtil.project_l2_mneg1Offset = getRealOffset(0x155E174);
mset::SHUtil.project_l2_mneg1 = (float(*)(Vector3))mset::SHUtil.project_l2_mneg1Offset;

mset::SHUtil.project_l2_m0Offset = getRealOffset(0x155E230);
mset::SHUtil.project_l2_m0 = (float(*)(Vector3))mset::SHUtil.project_l2_m0Offset;

mset::SHUtil.project_l2_m1Offset = getRealOffset(0x155E2F0);
mset::SHUtil.project_l2_m1 = (float(*)(Vector3))mset::SHUtil.project_l2_m1Offset;

mset::SHUtil.project_l2_m2Offset = getRealOffset(0x155E3AC);
mset::SHUtil.project_l2_m2 = (float(*)(Vector3))mset::SHUtil.project_l2_m2Offset;

mset::ShaderIDs.get_validOffset = getRealOffset(0x155F64C);
mset::ShaderIDs.get_valid = (bool(*)(void*))mset::ShaderIDs.get_validOffset;

mset::ShaderIDs.LinkOffset = getRealOffset(0x155F6E4);
mset::ShaderIDs.Link = (void(*)(void*))mset::ShaderIDs.LinkOffset;

mset::ShaderIDs.Link1Offset = getRealOffset(0x155F740);
mset::ShaderIDs.Link1 = (void(*)(void*, monoString*))mset::ShaderIDs.Link1Offset;

mset::Sky.get_SpecularCubeOffset = getRealOffset(0x155F984);
mset::Sky.get_SpecularCube = (void *(*)(void*))mset::Sky.get_SpecularCubeOffset;

mset::Sky.set_SpecularCubeOffset = getRealOffset(0x155F98C);
mset::Sky.set_SpecularCube = (void(*)(void*, void *))mset::Sky.set_SpecularCubeOffset;

mset::Sky.get_SkyboxCubeOffset = getRealOffset(0x155F994);
mset::Sky.get_SkyboxCube = (void *(*)(void*))mset::Sky.get_SkyboxCubeOffset;

mset::Sky.set_SkyboxCubeOffset = getRealOffset(0x155F99C);
mset::Sky.set_SkyboxCube = (void(*)(void*, void *))mset::Sky.set_SkyboxCubeOffset;

mset::Sky.get_DimensionsOffset = getRealOffset(0x155F9A4);
mset::Sky.get_Dimensions = (int (*)(void*))mset::Sky.get_DimensionsOffset;

mset::Sky.set_DimensionsOffset = getRealOffset(0x155F9BC);
mset::Sky.set_Dimensions = (void(*)(void*, int))mset::Sky.set_DimensionsOffset;

mset::Sky.get_DirtyOffset = getRealOffset(0x155F9E0);
mset::Sky.get_Dirty = (bool(*)(void*))mset::Sky.get_DirtyOffset;

mset::Sky.set_DirtyOffset = getRealOffset(0x155F9E8);
mset::Sky.set_Dirty = (void(*)(void*, bool))mset::Sky.set_DirtyOffset;

mset::Sky.get_MasterIntensityOffset = getRealOffset(0x155F9F0);
mset::Sky.get_MasterIntensity = (float(*)(void*))mset::Sky.get_MasterIntensityOffset;

mset::Sky.set_MasterIntensityOffset = getRealOffset(0x155F9F8);
mset::Sky.set_MasterIntensity = (void(*)(void*, float))mset::Sky.set_MasterIntensityOffset;

mset::Sky.get_SkyIntensityOffset = getRealOffset(0x155FA08);
mset::Sky.get_SkyIntensity = (float(*)(void*))mset::Sky.get_SkyIntensityOffset;

mset::Sky.set_SkyIntensityOffset = getRealOffset(0x155FA10);
mset::Sky.set_SkyIntensity = (void(*)(void*, float))mset::Sky.set_SkyIntensityOffset;

mset::Sky.get_SpecIntensityOffset = getRealOffset(0x155FA20);
mset::Sky.get_SpecIntensity = (float(*)(void*))mset::Sky.get_SpecIntensityOffset;

mset::Sky.set_SpecIntensityOffset = getRealOffset(0x155FA28);
mset::Sky.set_SpecIntensity = (void(*)(void*, float))mset::Sky.set_SpecIntensityOffset;

mset::Sky.get_DiffIntensityOffset = getRealOffset(0x155FA38);
mset::Sky.get_DiffIntensity = (float(*)(void*))mset::Sky.get_DiffIntensityOffset;

mset::Sky.set_DiffIntensityOffset = getRealOffset(0x155FA40);
mset::Sky.set_DiffIntensity = (void(*)(void*, float))mset::Sky.set_DiffIntensityOffset;

mset::Sky.get_CamExposureOffset = getRealOffset(0x155FA50);
mset::Sky.get_CamExposure = (float(*)(void*))mset::Sky.get_CamExposureOffset;

mset::Sky.set_CamExposureOffset = getRealOffset(0x155FA58);
mset::Sky.set_CamExposure = (void(*)(void*, float))mset::Sky.set_CamExposureOffset;

mset::Sky.get_SpecIntensityLMOffset = getRealOffset(0x155FA68);
mset::Sky.get_SpecIntensityLM = (float(*)(void*))mset::Sky.get_SpecIntensityLMOffset;

mset::Sky.set_SpecIntensityLMOffset = getRealOffset(0x155FA70);
mset::Sky.set_SpecIntensityLM = (void(*)(void*, float))mset::Sky.set_SpecIntensityLMOffset;

mset::Sky.get_DiffIntensityLMOffset = getRealOffset(0x155FA80);
mset::Sky.get_DiffIntensityLM = (float(*)(void*))mset::Sky.get_DiffIntensityLMOffset;

mset::Sky.set_DiffIntensityLMOffset = getRealOffset(0x155FA88);
mset::Sky.set_DiffIntensityLM = (void(*)(void*, float))mset::Sky.set_DiffIntensityLMOffset;

mset::Sky.get_HDRSkyOffset = getRealOffset(0x155FA98);
mset::Sky.get_HDRSky = (bool(*)(void*))mset::Sky.get_HDRSkyOffset;

mset::Sky.set_HDRSkyOffset = getRealOffset(0x155FAA0);
mset::Sky.set_HDRSky = (void(*)(void*, bool))mset::Sky.set_HDRSkyOffset;

mset::Sky.get_HDRSpecOffset = getRealOffset(0x155FAB0);
mset::Sky.get_HDRSpec = (bool(*)(void*))mset::Sky.get_HDRSpecOffset;

mset::Sky.set_HDRSpecOffset = getRealOffset(0x155FAB8);
mset::Sky.set_HDRSpec = (void(*)(void*, bool))mset::Sky.set_HDRSpecOffset;

mset::Sky.get_LinearSpaceOffset = getRealOffset(0x155FAC8);
mset::Sky.get_LinearSpace = (bool(*)(void*))mset::Sky.get_LinearSpaceOffset;

mset::Sky.set_LinearSpaceOffset = getRealOffset(0x155FAD0);
mset::Sky.set_LinearSpace = (void(*)(void*, bool))mset::Sky.set_LinearSpaceOffset;

mset::Sky.get_AutoDetectColorSpaceOffset = getRealOffset(0x155FAE0);
mset::Sky.get_AutoDetectColorSpace = (bool(*)(void*))mset::Sky.get_AutoDetectColorSpaceOffset;

mset::Sky.set_AutoDetectColorSpaceOffset = getRealOffset(0x155FAE8);
mset::Sky.set_AutoDetectColorSpace = (void(*)(void*, bool))mset::Sky.set_AutoDetectColorSpaceOffset;

mset::Sky.get_HasDimensionsOffset = getRealOffset(0x155FAF8);
mset::Sky.get_HasDimensions = (bool(*)(void*))mset::Sky.get_HasDimensionsOffset;

mset::Sky.set_HasDimensionsOffset = getRealOffset(0x155FB00);
mset::Sky.set_HasDimensions = (void(*)(void*, bool))mset::Sky.set_HasDimensionsOffset;

mset::Sky.get_blackCubeOffset = getRealOffset(0x155FB10);
mset::Sky.get_blackCube = (void *(*)(void*))mset::Sky.get_blackCubeOffset;

mset::Sky.get_SkyboxMaterialOffset = getRealOffset(0x155FBCC);
mset::Sky.get_SkyboxMaterial = (void *(*)(void*))mset::Sky.get_SkyboxMaterialOffset;

mset::Sky.getTargetMaterialsOffset = getRealOffset(0x155FC88);
mset::Sky.ApplyOffset = getRealOffset(0x155FD80);
mset::Sky.Apply = (void(*)(void*))mset::Sky.ApplyOffset;

mset::Sky.Apply1Offset = getRealOffset(0x155FD88);
mset::Sky.Apply1 = (void(*)(void*, int))mset::Sky.Apply1Offset;

mset::Sky.Apply2Offset = getRealOffset(0x15601EC);
mset::Sky.Apply2 = (void(*)(void*, void *))mset::Sky.Apply2Offset;

mset::Sky.Apply3Offset = getRealOffset(0x15601F4);
mset::Sky.Apply3 = (void(*)(void*, void *, int))mset::Sky.Apply3Offset;

mset::Sky.ApplyFastOffset = getRealOffset(0x15602D8);
mset::Sky.ApplyFast = (void(*)(void*, void *, int))mset::Sky.ApplyFastOffset;

mset::Sky.Apply11Offset = getRealOffset(0x1560EC8);
mset::Sky.Apply11 = (void(*)(void*, void *))mset::Sky.Apply11Offset;

mset::Sky.Apply21Offset = getRealOffset(0x1560ED0);
mset::Sky.Apply21 = (void(*)(void*, void *, int))mset::Sky.Apply21Offset;

mset::Sky.ApplyToMaterialOffset = getRealOffset(0x1560FE0);
mset::Sky.ApplyToMaterial = (void(*)(void*, void *, void *))mset::Sky.ApplyToMaterialOffset;

mset::Sky.ApplySkyTransformOffset = getRealOffset(0x15614D4);
mset::Sky.ApplySkyTransform = (void(*)(void*, void *))mset::Sky.ApplySkyTransformOffset;

mset::Sky.ApplyGloballyOffset = getRealOffset(0x155FDD4);
mset::Sky.ApplyGlobally = (void(*)(void*, void *))mset::Sky.ApplyGloballyOffset;

mset::Sky.ScrubGlobalKeywordsOffset = getRealOffset(0x1561694);
mset::Sky.ScrubGlobalKeywords = (void(*)())mset::Sky.ScrubGlobalKeywordsOffset;

mset::Sky.EnableProjectionSupportOffset = getRealOffset(0x1561980);
mset::Sky.EnableProjectionSupport = (void(*)(bool))mset::Sky.EnableProjectionSupportOffset;

mset::Sky.EnableGlobalProjectionOffset = getRealOffset(0x1561A24);
mset::Sky.EnableGlobalProjection = (void(*)(bool))mset::Sky.EnableGlobalProjectionOffset;

mset::Sky.EnableProjection1Offset = getRealOffset(0x1561D24);
mset::Sky.EnableProjection1 = (void(*)(void *, bool))mset::Sky.EnableProjection1Offset;

mset::Sky.EnableBlendingSupportOffset = getRealOffset(0x1561E38);
mset::Sky.EnableBlendingSupport = (void(*)(bool))mset::Sky.EnableBlendingSupportOffset;

mset::Sky.EnableTerrainBlendingOffset = getRealOffset(0x1561EDC);
mset::Sky.EnableTerrainBlending = (void(*)(bool))mset::Sky.EnableTerrainBlendingOffset;

mset::Sky.EnableGlobalBlendingOffset = getRealOffset(0x1561FBC);
mset::Sky.EnableGlobalBlending = (void(*)(bool))mset::Sky.EnableGlobalBlendingOffset;

mset::Sky.EnableBlending1Offset = getRealOffset(0x15622BC);
mset::Sky.EnableBlending1 = (void(*)(void *, bool))mset::Sky.EnableBlending1Offset;

mset::Sky.SetBlendWeightOffset = getRealOffset(0x15623D0);
mset::Sky.SetBlendWeight = (void(*)(float))mset::Sky.SetBlendWeightOffset;

mset::Sky.SetBlendWeight1Offset = getRealOffset(0x1562430);
mset::Sky.SetBlendWeight1 = (void(*)(void *, float))mset::Sky.SetBlendWeight1Offset;

mset::Sky.SetBlendWeight2Offset = getRealOffset(0x15625F4);
mset::Sky.SetBlendWeight2 = (void(*)(void *, float))mset::Sky.SetBlendWeight2Offset;

mset::Sky.SetUniformOcclusionOffset = getRealOffset(0x1562668);
mset::Sky.SetUniformOcclusion = (void(*)(void *, float, float))mset::Sky.SetUniformOcclusionOffset;

mset::Sky.SetCustomExposureOffset = getRealOffset(0x15627F0);
mset::Sky.SetCustomExposure = (void(*)(void*, float, float, float, float))mset::Sky.SetCustomExposureOffset;

mset::Sky.SetCustomExposure1Offset = getRealOffset(0x1562824);
mset::Sky.SetCustomExposure1 = (void(*)(void*, void *, float, float, float, float))mset::Sky.SetCustomExposure1Offset;

mset::Sky.ToggleChildLightsOffset = getRealOffset(0x1562BA4);
mset::Sky.ToggleChildLights = (void(*)(void*, bool))mset::Sky.ToggleChildLightsOffset;

mset::Sky.UpdateSkySizeOffset = getRealOffset(0x1562C64);
mset::Sky.UpdateSkySize = (void(*)(void*))mset::Sky.UpdateSkySizeOffset;

mset::Sky.UpdateSkyTransformOffset = getRealOffset(0x1562F90);
mset::Sky.UpdateSkyTransform = (void(*)(void*))mset::Sky.UpdateSkyTransformOffset;

mset::Sky.UpdateExposuresOffset = getRealOffset(0x1563100);
mset::Sky.UpdateExposures = (void(*)(void*))mset::Sky.UpdateExposuresOffset;

mset::Sky.UpdatePropertyIDsOffset = getRealOffset(0x1563148);
mset::Sky.UpdatePropertyIDs = (void(*)(void*))mset::Sky.UpdatePropertyIDsOffset;

mset::Sky.AwakeOffset = getRealOffset(0x156321C);
mset::Sky.Awake = (void(*)(void*))mset::Sky.AwakeOffset;

mset::Sky.ResetOffset = getRealOffset(0x15632C0);
mset::Sky.Reset = (void(*)(void*))mset::Sky.ResetOffset;

mset::Sky.OnEnableOffset = getRealOffset(0x15634A8);
mset::Sky.OnEnable = (void(*)(void*))mset::Sky.OnEnableOffset;

mset::Sky.OnLevelWasLoadedOffset = getRealOffset(0x15635A8);
mset::Sky.OnLevelWasLoaded = (void(*)(void*, int))mset::Sky.OnLevelWasLoadedOffset;

mset::Sky.StartOffset = getRealOffset(0x1563600);
mset::Sky.Start = (void(*)(void*))mset::Sky.StartOffset;

mset::Sky.UpdateOffset = getRealOffset(0x1563734);
mset::Sky.Update = (void(*)(void*))mset::Sky.UpdateOffset;

mset::Sky.OnDestroyOffset = getRealOffset(0x15637F0);
mset::Sky.OnDestroy = (void(*)(void*))mset::Sky.OnDestroyOffset;

mset::Sky.DrawProjectionCubeOffset = getRealOffset(0x1563808);
mset::Sky.DrawProjectionCube = (void(*)(void*, Vector3, Vector3))mset::Sky.DrawProjectionCubeOffset;

mset::Sky.OnTriggerEnterOffset = getRealOffset(0x1563F20);
mset::Sky.OnTriggerEnter = (void(*)(void*, void *))mset::Sky.OnTriggerEnterOffset;

mset::Sky.OnPostRenderOffset = getRealOffset(0x1563FFC);
mset::Sky.OnPostRender = (void(*)(void*))mset::Sky.OnPostRenderOffset;

mset::SkyAnchor.get_CurrentSkyOffset = getRealOffset(0x15643B0);
mset::SkyAnchor.get_CurrentSky = (void *(*)(void*))mset::SkyAnchor.get_CurrentSkyOffset;

mset::SkyAnchor.get_PreviousSkyOffset = getRealOffset(0x15643D0);
mset::SkyAnchor.get_PreviousSky = (void *(*)(void*))mset::SkyAnchor.get_PreviousSkyOffset;

mset::SkyAnchor.get_BlendTimeOffset = getRealOffset(0x15643F0);
mset::SkyAnchor.get_BlendTime = (float(*)(void*))mset::SkyAnchor.get_BlendTimeOffset;

mset::SkyAnchor.set_BlendTimeOffset = getRealOffset(0x1564410);
mset::SkyAnchor.set_BlendTime = (void(*)(void*, float))mset::SkyAnchor.set_BlendTimeOffset;

mset::SkyAnchor.get_IsStaticOffset = getRealOffset(0x156443C);
mset::SkyAnchor.get_IsStatic = (bool(*)(void*))mset::SkyAnchor.get_IsStaticOffset;

mset::SkyAnchor.StartOffset = getRealOffset(0x1564444);
mset::SkyAnchor.Start = (void(*)(void*))mset::SkyAnchor.StartOffset;

mset::SkyAnchor.OnEnableOffset = getRealOffset(0x1564F94);
mset::SkyAnchor.OnEnable = (void(*)(void*))mset::SkyAnchor.OnEnableOffset;

mset::SkyAnchor.LateUpdateOffset = getRealOffset(0x1565494);
mset::SkyAnchor.LateUpdate = (void(*)(void*))mset::SkyAnchor.LateUpdateOffset;

mset::SkyAnchor.UpdateMaterialsOffset = getRealOffset(0x1565A88);
mset::SkyAnchor.UpdateMaterials = (void(*)(void*))mset::SkyAnchor.UpdateMaterialsOffset;

mset::SkyAnchor.CleanUpMaterialsOffset = getRealOffset(0x1565B04);
mset::SkyAnchor.CleanUpMaterials = (void(*)(void*))mset::SkyAnchor.CleanUpMaterialsOffset;

mset::SkyAnchor.SnapToSkyOffset = getRealOffset(0x1565BE4);
mset::SkyAnchor.SnapToSky = (void(*)(void*, void *))mset::SkyAnchor.SnapToSkyOffset;

mset::SkyAnchor.BlendToSkyOffset = getRealOffset(0x1565CA0);
mset::SkyAnchor.BlendToSky = (void(*)(void*, void *))mset::SkyAnchor.BlendToSkyOffset;

mset::SkyAnchor.SnapToGlobalSkyOffset = getRealOffset(0x1565EB4);
mset::SkyAnchor.SnapToGlobalSky = (void(*)(void*, void *))mset::SkyAnchor.SnapToGlobalSkyOffset;

mset::SkyAnchor.BlendToGlobalSkyOffset = getRealOffset(0x1565ED0);
mset::SkyAnchor.BlendToGlobalSky = (void(*)(void*, void *))mset::SkyAnchor.BlendToGlobalSkyOffset;

mset::SkyAnchor.ApplyOffset = getRealOffset(0x156594C);
mset::SkyAnchor.Apply = (void(*)(void*))mset::SkyAnchor.ApplyOffset;

mset::SkyAnchor.GetCenterOffset = getRealOffset(0x15660C0);
mset::SkyAnchor.GetCenter = (void(*)(void*, Vector3 *))mset::SkyAnchor.GetCenterOffset;

mset::SkyAnchor.ComputeCenterOffset = getRealOffset(0x1564FE0);
mset::SkyAnchor.ComputeCenter = (void(*)(void*, Vector3 *))mset::SkyAnchor.ComputeCenterOffset;

mset::SkyAnchor.OnDestroyOffset = getRealOffset(0x15660DC);
mset::SkyAnchor.OnDestroy = (void(*)(void*))mset::SkyAnchor.OnDestroyOffset;

mset::SkyAnchor.OnApplicationQuitOffset = getRealOffset(0x15660E0);
mset::SkyAnchor.OnApplicationQuit = (void(*)(void*))mset::SkyAnchor.OnApplicationQuitOffset;

mset::SkyApplicator.get_TriggerDimensionsOffset = getRealOffset(0x1566208);
mset::SkyApplicator.get_TriggerDimensions = (int (*)(void*))mset::SkyApplicator.get_TriggerDimensionsOffset;

mset::SkyApplicator.set_TriggerDimensionsOffset = getRealOffset(0x1566220);
mset::SkyApplicator.set_TriggerDimensions = (void(*)(void*, int))mset::SkyApplicator.set_TriggerDimensionsOffset;

mset::SkyApplicator.AwakeOffset = getRealOffset(0x1566244);
mset::SkyApplicator.Awake = (void(*)(void*))mset::SkyApplicator.AwakeOffset;

mset::SkyApplicator.StartOffset = getRealOffset(0x15662A4);
mset::SkyApplicator.Start = (void(*)(void*))mset::SkyApplicator.StartOffset;

mset::SkyApplicator.OnEnableOffset = getRealOffset(0x15662A8);
mset::SkyApplicator.OnEnable = (void(*)(void*))mset::SkyApplicator.OnEnableOffset;

mset::SkyApplicator.OnDisableOffset = getRealOffset(0x1566858);
mset::SkyApplicator.OnDisable = (void(*)(void*))mset::SkyApplicator.OnDisableOffset;

mset::SkyApplicator.RemoveRendererOffset = getRealOffset(0x1566B88);
mset::SkyApplicator.RemoveRenderer = (void(*)(void*, void *))mset::SkyApplicator.RemoveRendererOffset;

mset::SkyApplicator.AddRendererOffset = getRealOffset(0x1566CE4);
mset::SkyApplicator.AddRenderer = (void(*)(void*, void *))mset::SkyApplicator.AddRendererOffset;

mset::SkyApplicator.ApplyInsideOffset = getRealOffset(0x1566E2C);
mset::SkyApplicator.ApplyInside = (bool(*)(void*, void *))mset::SkyApplicator.ApplyInsideOffset;

mset::SkyApplicator.RendererInsideOffset = getRealOffset(0x15672AC);
mset::SkyApplicator.RendererInside = (bool(*)(void*, void *))mset::SkyApplicator.RendererInsideOffset;

mset::SkyApplicator.LateUpdateOffset = getRealOffset(0x1567818);
mset::SkyApplicator.LateUpdate = (void(*)(void*))mset::SkyApplicator.LateUpdateOffset;

mset::SkyBlender.get_BlendTimeOffset = getRealOffset(0x1567BDC);
mset::SkyBlender.get_BlendTime = (float(*)(void*))mset::SkyBlender.get_BlendTimeOffset;

mset::SkyBlender.set_BlendTimeOffset = getRealOffset(0x1567BE4);
mset::SkyBlender.set_BlendTime = (void(*)(void*, float))mset::SkyBlender.set_BlendTimeOffset;

mset::SkyBlender.get_blendTimerOffset = getRealOffset(0x1567BEC);
mset::SkyBlender.get_blendTimer = (float(*)(void*))mset::SkyBlender.get_blendTimerOffset;

mset::SkyBlender.set_blendTimerOffset = getRealOffset(0x1567C18);
mset::SkyBlender.set_blendTimer = (void(*)(void*, float))mset::SkyBlender.set_blendTimerOffset;

mset::SkyBlender.get_BlendWeightOffset = getRealOffset(0x1567C48);
mset::SkyBlender.get_BlendWeight = (float(*)(void*))mset::SkyBlender.get_BlendWeightOffset;

mset::SkyBlender.get_IsBlendingOffset = getRealOffset(0x15658D4);
mset::SkyBlender.get_IsBlending = (bool(*)(void*))mset::SkyBlender.get_IsBlendingOffset;

mset::SkyBlender.WasBlendingOffset = getRealOffset(0x1565908);
mset::SkyBlender.WasBlending = (bool(*)(void*, float))mset::SkyBlender.WasBlendingOffset;

mset::SkyBlender.ApplyOffset = getRealOffset(0x1567CF8);
mset::SkyBlender.Apply = (void(*)(void*))mset::SkyBlender.ApplyOffset;

mset::SkyBlender.Apply1Offset = getRealOffset(0x1567E84);
mset::SkyBlender.Apply1 = (void(*)(void*, void *))mset::SkyBlender.Apply1Offset;

mset::SkyBlender.ApplyToTerrainOffset = getRealOffset(0x1568048);
mset::SkyBlender.ApplyToTerrain = (void(*)(void*))mset::SkyBlender.ApplyToTerrainOffset;

mset::SkyBlender.SnapToSkyOffset = getRealOffset(0x1564EE4);
mset::SkyBlender.SnapToSky = (void(*)(void*, void *))mset::SkyBlender.SnapToSkyOffset;

mset::SkyBlender.BlendToSkyOffset = getRealOffset(0x1565D5C);
mset::SkyBlender.BlendToSky = (void(*)(void*, void *))mset::SkyBlender.BlendToSkyOffset;

mset::SkyBlender.SkipTimeOffset = getRealOffset(0x1568108);
mset::SkyBlender.SkipTime = (void(*)(void*, float))mset::SkyBlender.SkipTimeOffset;

mset::SkyDebug.StartOffset = getRealOffset(0x1568154);
mset::SkyDebug.Start = (void(*)(void*))mset::SkyDebug.StartOffset;

mset::SkyDebug.LateUpdateOffset = getRealOffset(0x15681E4);
mset::SkyDebug.LateUpdate = (void(*)(void*))mset::SkyDebug.LateUpdateOffset;

mset::SkyDebug.GetDebugStringOffset = getRealOffset(0x1568304);
mset::SkyDebug.GetDebugString = (monoString *(*)(void*))mset::SkyDebug.GetDebugStringOffset;

mset::SkyDebug.OnDrawGizmosSelectedOffset = getRealOffset(0x1569084);
mset::SkyDebug.OnDrawGizmosSelected = (void(*)(void*))mset::SkyDebug.OnDrawGizmosSelectedOffset;

mset::SkyDebug.OnGUIOffset = getRealOffset(0x15691B0);
mset::SkyDebug.OnGUI = (void(*)(void*))mset::SkyDebug.OnGUIOffset;

mset::SkyManager.GetOffset = getRealOffset(0x15646B0);
mset::SkyManager.Get = (void *(*)())mset::SkyManager.GetOffset;

mset::SkyManager.get_BlendingSupportOffset = getRealOffset(0x1569570);
mset::SkyManager.get_BlendingSupport = (bool(*)(void*))mset::SkyManager.get_BlendingSupportOffset;

mset::SkyManager.set_BlendingSupportOffset = getRealOffset(0x1569578);
mset::SkyManager.set_BlendingSupport = (void(*)(void*, bool))mset::SkyManager.set_BlendingSupportOffset;

mset::SkyManager.get_ProjectionSupportOffset = getRealOffset(0x156962C);
mset::SkyManager.get_ProjectionSupport = (bool(*)(void*))mset::SkyManager.get_ProjectionSupportOffset;

mset::SkyManager.set_ProjectionSupportOffset = getRealOffset(0x1569634);
mset::SkyManager.set_ProjectionSupport = (void(*)(void*, bool))mset::SkyManager.set_ProjectionSupportOffset;

mset::SkyManager.get_GlobalSkyOffset = getRealOffset(0x15696B4);
mset::SkyManager.get_GlobalSky = (void *(*)(void*))mset::SkyManager.get_GlobalSkyOffset;

mset::SkyManager.set_GlobalSkyOffset = getRealOffset(0x15696BC);
mset::SkyManager.set_GlobalSky = (void(*)(void*, void *))mset::SkyManager.set_GlobalSkyOffset;

mset::SkyManager.BlendToGlobalSkyOffset = getRealOffset(0x15696F8);
mset::SkyManager.BlendToGlobalSky = (void(*)(void*, void *))mset::SkyManager.BlendToGlobalSkyOffset;

mset::SkyManager.BlendToGlobalSky1Offset = getRealOffset(0x15696DC);
mset::SkyManager.BlendToGlobalSky1 = (void(*)(void*, void *, float))mset::SkyManager.BlendToGlobalSky1Offset;

mset::SkyManager.BlendToGlobalSky2Offset = getRealOffset(0x1569718);
mset::SkyManager.BlendToGlobalSky2 = (void(*)(void*, void *, float, float))mset::SkyManager.BlendToGlobalSky2Offset;

mset::SkyManager.ResetLightBlendOffset = getRealOffset(0x15697CC);
mset::SkyManager.ResetLightBlend = (void(*)(void*))mset::SkyManager.ResetLightBlendOffset;

mset::SkyManager.StartLightBlendOffset = getRealOffset(0x15699F4);
mset::SkyManager.StartLightBlend = (void(*)(void*, void *, void *))mset::SkyManager.StartLightBlendOffset;

mset::SkyManager.UpdateLightBlendOffset = getRealOffset(0x1569DB0);
mset::SkyManager.UpdateLightBlend = (void(*)(void*))mset::SkyManager.UpdateLightBlendOffset;

mset::SkyManager.HandleGlobalSkyChangeOffset = getRealOffset(0x1569F7C);
mset::SkyManager.HandleGlobalSkyChange = (void(*)(void*))mset::SkyManager.HandleGlobalSkyChangeOffset;

mset::SkyManager.get_SkyboxMaterialOffset = getRealOffset(0x156A3F0);
mset::SkyManager.get_SkyboxMaterial = (void *(*)(void*))mset::SkyManager.get_SkyboxMaterialOffset;

mset::SkyManager.get_ShowSkyboxOffset = getRealOffset(0x156A524);
mset::SkyManager.get_ShowSkybox = (bool(*)(void*))mset::SkyManager.get_ShowSkyboxOffset;

mset::SkyManager.set_ShowSkyboxOffset = getRealOffset(0x156A52C);
mset::SkyManager.set_ShowSkybox = (void(*)(void*, bool))mset::SkyManager.set_ShowSkyboxOffset;

mset::SkyManager.StartOffset = getRealOffset(0x156A710);
mset::SkyManager.Start = (void(*)(void*))mset::SkyManager.StartOffset;

mset::SkyManager.RegisterApplicatorOffset = getRealOffset(0x156663C);
mset::SkyManager.RegisterApplicator = (void(*)(void*, void *))mset::SkyManager.RegisterApplicatorOffset;

mset::SkyManager.UnregisterRendererOffset = getRealOffset(0x156A8D8);
mset::SkyManager.UnregisterRenderer = (void(*)(void*, void *))mset::SkyManager.UnregisterRendererOffset;

mset::SkyManager.RegisterNewRendererOffset = getRealOffset(0x1564800);
mset::SkyManager.RegisterNewRenderer = (void(*)(void*, void *))mset::SkyManager.RegisterNewRendererOffset;

mset::SkyManager.SeekNewRenderersOffset = getRealOffset(0x156A974);
mset::SkyManager.SeekNewRenderers = (void(*)(void*))mset::SkyManager.SeekNewRenderersOffset;

mset::SkyManager.ApplyCorrectSkyOffset = getRealOffset(0x1564ACC);
mset::SkyManager.ApplyCorrectSky = (void(*)(void*, void *))mset::SkyManager.ApplyCorrectSkyOffset;

mset::SkyManager.EditorUpdateOffset = getRealOffset(0x156AAC4);
mset::SkyManager.EditorUpdate = (void(*)(void*, bool))mset::SkyManager.EditorUpdateOffset;

mset::SkyManager.EditorApplySkiesOffset = getRealOffset(0x156A2B0);
mset::SkyManager.EditorApplySkies = (void(*)(void*, bool))mset::SkyManager.EditorApplySkiesOffset;

mset::SkyManager.LateUpdateOffset = getRealOffset(0x156B3E8);
mset::SkyManager.LateUpdate = (void(*)(void*))mset::SkyManager.LateUpdateOffset;

mset::SkyManager.GameApplySkiesOffset = getRealOffset(0x156B5A0);
mset::SkyManager.GameApplySkies = (void(*)(void*, bool))mset::SkyManager.GameApplySkiesOffset;

mset::SkyProbe.buildRandomValueTableOffset = getRealOffset(0x156C6F4);
mset::SkyProbe.buildRandomValueTable = (void(*)())mset::SkyProbe.buildRandomValueTableOffset;

mset::SkyProbe.bindRandomValueTableOffset = getRealOffset(0x156CB54);
mset::SkyProbe.bindRandomValueTable = (void(*)(void *, monoString*, int))mset::SkyProbe.bindRandomValueTableOffset;

mset::SkyProbe.buildRandomValueCodeOffset = getRealOffset(0x156CD8C);
mset::SkyProbe.buildRandomValueCode = (void(*)())mset::SkyProbe.buildRandomValueCodeOffset;

mset::SkyProbe.blurOffset = getRealOffset(0x156CE84);
mset::SkyProbe.blur = (void(*)(void*, void *, void *, bool, bool, bool))mset::SkyProbe.blurOffset;

mset::SkyProbe.convolveOffset = getRealOffset(0x156DD18);
mset::SkyProbe.convolve = (void(*)(void*, void *, void *, bool, bool, bool))mset::SkyProbe.convolveOffset;

mset::SkyProbe.captureOffset = getRealOffset(0x156E828);
mset::SkyProbe.capture = (bool(*)(void*, void *, Vector3, int, bool, bool, bool))mset::SkyProbe.captureOffset;

mset::SkyProbe.toggleKeywordPairOffset = getRealOffset(0x156F240);
mset::SkyProbe.toggleKeywordPair = (void(*)(monoString*, monoString*, bool))mset::SkyProbe.toggleKeywordPairOffset;

mset::SkyProbe.toggleKeywordPair1Offset = getRealOffset(0x156F288);
mset::SkyProbe.toggleKeywordPair1 = (void(*)(void *, monoString*, monoString*, bool))mset::SkyProbe.toggleKeywordPair1Offset;

mset::SkyProbe.copy_internalOffset = getRealOffset(0x156E280);
mset::SkyProbe.copy_internal = (void(*)(void*, void *, void *, bool, bool, bool, void *, void *, int))mset::SkyProbe.copy_internalOffset;

mset::SkyProbe.convolve_internalOffset = getRealOffset(0x156D394);
mset::SkyProbe.convolve_internal = (void(*)(void*, void *, void *, bool, bool, bool, void *, void *, int))mset::SkyProbe.convolve_internalOffset;

}
